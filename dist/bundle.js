(function () {
	'use strict';

	var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	var react = {exports: {}};

	var react_production_min = {};

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};

	/** @license React v17.0.2
	 * react.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var l$2=objectAssign,n$1=60103,p$2=60106;react_production_min.Fragment=60107;react_production_min.StrictMode=60108;react_production_min.Profiler=60114;var q$3=60109,r$2=60110,t$2=60112;react_production_min.Suspense=60113;var u=60115,v$2=60116;
	if("function"===typeof Symbol&&Symbol.for){var w$2=Symbol.for;n$1=w$2("react.element");p$2=w$2("react.portal");react_production_min.Fragment=w$2("react.fragment");react_production_min.StrictMode=w$2("react.strict_mode");react_production_min.Profiler=w$2("react.profiler");q$3=w$2("react.provider");r$2=w$2("react.context");t$2=w$2("react.forward_ref");react_production_min.Suspense=w$2("react.suspense");u=w$2("react.memo");v$2=w$2("react.lazy");}var x$3="function"===typeof Symbol&&Symbol.iterator;
	function y$3(a){if(null===a||"object"!==typeof a)return null;a=x$3&&a[x$3]||a["@@iterator"];return "function"===typeof a?a:null}function z$3(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return "Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}
	var A$2={isMounted:function(){return !1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},B$3={};function C$2(a,b,c){this.props=a;this.context=b;this.refs=B$3;this.updater=c||A$2;}C$2.prototype.isReactComponent={};C$2.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error(z$3(85));this.updater.enqueueSetState(this,a,b,"setState");};C$2.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate");};
	function D$3(){}D$3.prototype=C$2.prototype;function E$2(a,b,c){this.props=a;this.context=b;this.refs=B$3;this.updater=c||A$2;}var F$3=E$2.prototype=new D$3;F$3.constructor=E$2;l$2(F$3,C$2.prototype);F$3.isPureReactComponent=!0;var G$2={current:null},H$3=Object.prototype.hasOwnProperty,I$2={key:!0,ref:!0,__self:!0,__source:!0};
	function J$2(a,b,c){var e,d={},k=null,h=null;if(null!=b)for(e in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=""+b.key),b)H$3.call(b,e)&&!I$2.hasOwnProperty(e)&&(d[e]=b[e]);var g=arguments.length-2;if(1===g)d.children=c;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];d.children=f;}if(a&&a.defaultProps)for(e in g=a.defaultProps,g)void 0===d[e]&&(d[e]=g[e]);return {$$typeof:n$1,type:a,key:k,ref:h,props:d,_owner:G$2.current}}
	function K$2(a,b){return {$$typeof:n$1,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function L$2(a){return "object"===typeof a&&null!==a&&a.$$typeof===n$1}function escape(a){var b={"=":"=0",":":"=2"};return "$"+a.replace(/[=:]/g,function(a){return b[a]})}var M$3=/\/+/g;function N$3(a,b){return "object"===typeof a&&null!==a&&null!=a.key?escape(""+a.key):b.toString(36)}
	function O$3(a,b,c,e,d){var k=typeof a;if("undefined"===k||"boolean"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case "string":case "number":h=!0;break;case "object":switch(a.$$typeof){case n$1:case p$2:h=!0;}}if(h)return h=a,d=d(h),a=""===e?"."+N$3(h,0):e,Array.isArray(d)?(c="",null!=a&&(c=a.replace(M$3,"$&/")+"/"),O$3(d,b,c,"",function(a){return a})):null!=d&&(L$2(d)&&(d=K$2(d,c+(!d.key||h&&h.key===d.key?"":(""+d.key).replace(M$3,"$&/")+"/")+a)),b.push(d)),1;h=0;e=""===e?".":e+":";if(Array.isArray(a))for(var g=
	0;g<a.length;g++){k=a[g];var f=e+N$3(k,g);h+=O$3(k,b,c,f,d);}else if(f=y$3(a),"function"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=e+N$3(k,g++),h+=O$3(k,b,c,f,d);else if("object"===k)throw b=""+a,Error(z$3(31,"[object Object]"===b?"object with keys {"+Object.keys(a).join(", ")+"}":b));return h}function P$2(a,b,c){if(null==a)return a;var e=[],d=0;O$3(a,e,"","",function(a){return b.call(c,a,d++)});return e}
	function Q$2(a){if(-1===a._status){var b=a._result;b=b();a._status=0;a._result=b;b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b);},function(b){0===a._status&&(a._status=2,a._result=b);});}if(1===a._status)return a._result;throw a._result;}var R$2={current:null};function S$3(){var a=R$2.current;if(null===a)throw Error(z$3(321));return a}var T$2={ReactCurrentDispatcher:R$2,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:G$2,IsSomeRendererActing:{current:!1},assign:l$2};
	react_production_min.Children={map:P$2,forEach:function(a,b,c){P$2(a,function(){b.apply(this,arguments);},c);},count:function(a){var b=0;P$2(a,function(){b++;});return b},toArray:function(a){return P$2(a,function(a){return a})||[]},only:function(a){if(!L$2(a))throw Error(z$3(143));return a}};react_production_min.Component=C$2;react_production_min.PureComponent=E$2;react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T$2;
	react_production_min.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(z$3(267,a));var e=l$2({},a.props),d=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=G$2.current);void 0!==b.key&&(d=""+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)H$3.call(b,f)&&!I$2.hasOwnProperty(f)&&(e[f]=void 0===b[f]&&void 0!==g?g[f]:b[f]);}var f=arguments.length-2;if(1===f)e.children=c;else if(1<f){g=Array(f);for(var m=0;m<f;m++)g[m]=arguments[m+2];e.children=g;}return {$$typeof:n$1,type:a.type,
	key:d,ref:k,props:e,_owner:h}};react_production_min.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:r$2,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:q$3,_context:a};return a.Consumer=a};react_production_min.createElement=J$2;react_production_min.createFactory=function(a){var b=J$2.bind(null,a);b.type=a;return b};react_production_min.createRef=function(){return {current:null}};react_production_min.forwardRef=function(a){return {$$typeof:t$2,render:a}};react_production_min.isValidElement=L$2;
	react_production_min.lazy=function(a){return {$$typeof:v$2,_payload:{_status:-1,_result:a},_init:Q$2}};react_production_min.memo=function(a,b){return {$$typeof:u,type:a,compare:void 0===b?null:b}};react_production_min.useCallback=function(a,b){return S$3().useCallback(a,b)};react_production_min.useContext=function(a,b){return S$3().useContext(a,b)};react_production_min.useDebugValue=function(){};react_production_min.useEffect=function(a,b){return S$3().useEffect(a,b)};react_production_min.useImperativeHandle=function(a,b,c){return S$3().useImperativeHandle(a,b,c)};
	react_production_min.useLayoutEffect=function(a,b){return S$3().useLayoutEffect(a,b)};react_production_min.useMemo=function(a,b){return S$3().useMemo(a,b)};react_production_min.useReducer=function(a,b,c){return S$3().useReducer(a,b,c)};react_production_min.useRef=function(a){return S$3().useRef(a)};react_production_min.useState=function(a){return S$3().useState(a)};react_production_min.version="17.0.2";

	var react_development = {};

	/** @license React v17.0.2
	 * react.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	(function (exports) {

	if ("development" !== "production") {
	  (function() {

	var _assign = objectAssign;

	// TODO: this is special because it gets imported during build.
	var ReactVersion = '17.0.2';

	// ATTENTION
	// When adding new symbols to this file,
	// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = 0xeac7;
	var REACT_PORTAL_TYPE = 0xeaca;
	exports.Fragment = 0xeacb;
	exports.StrictMode = 0xeacc;
	exports.Profiler = 0xead2;
	var REACT_PROVIDER_TYPE = 0xeacd;
	var REACT_CONTEXT_TYPE = 0xeace;
	var REACT_FORWARD_REF_TYPE = 0xead0;
	exports.Suspense = 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = 0xead8;
	var REACT_MEMO_TYPE = 0xead3;
	var REACT_LAZY_TYPE = 0xead4;
	var REACT_BLOCK_TYPE = 0xead9;
	var REACT_SERVER_BLOCK_TYPE = 0xeada;
	var REACT_FUNDAMENTAL_TYPE = 0xead5;
	var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
	var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

	if (typeof Symbol === 'function' && Symbol.for) {
	  var symbolFor = Symbol.for;
	  REACT_ELEMENT_TYPE = symbolFor('react.element');
	  REACT_PORTAL_TYPE = symbolFor('react.portal');
	  exports.Fragment = symbolFor('react.fragment');
	  exports.StrictMode = symbolFor('react.strict_mode');
	  exports.Profiler = symbolFor('react.profiler');
	  REACT_PROVIDER_TYPE = symbolFor('react.provider');
	  REACT_CONTEXT_TYPE = symbolFor('react.context');
	  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
	  exports.Suspense = symbolFor('react.suspense');
	  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
	  REACT_MEMO_TYPE = symbolFor('react.memo');
	  REACT_LAZY_TYPE = symbolFor('react.lazy');
	  REACT_BLOCK_TYPE = symbolFor('react.block');
	  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
	  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
	  symbolFor('react.scope');
	  symbolFor('react.opaque.id');
	  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
	  symbolFor('react.offscreen');
	  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
	}

	var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';
	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }

	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }

	  return null;
	}

	/**
	 * Keeps track of the current dispatcher.
	 */
	var ReactCurrentDispatcher = {
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	};

	/**
	 * Keeps track of the current batch's configuration such as how long an update
	 * should suspend for if it needs to.
	 */
	var ReactCurrentBatchConfig = {
	  transition: 0
	};

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	};

	var ReactDebugCurrentFrame = {};
	var currentExtraStackFrame = null;
	function setExtraStackFrame(stack) {
	  {
	    currentExtraStackFrame = stack;
	  }
	}

	{
	  ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
	    {
	      currentExtraStackFrame = stack;
	    }
	  }; // Stack implementation injected by the current renderer.


	  ReactDebugCurrentFrame.getCurrentStack = null;

	  ReactDebugCurrentFrame.getStackAddendum = function () {
	    var stack = ''; // Add an extra top frame while an element is being validated

	    if (currentExtraStackFrame) {
	      stack += currentExtraStackFrame;
	    } // Delegate to the injected renderer-specific implementation


	    var impl = ReactDebugCurrentFrame.getCurrentStack;

	    if (impl) {
	      stack += impl() || '';
	    }

	    return stack;
	  };
	}

	/**
	 * Used by act() to track whether you're inside an act() scope.
	 */
	var IsSomeRendererActing = {
	  current: false
	};

	var ReactSharedInternals = {
	  ReactCurrentDispatcher: ReactCurrentDispatcher,
	  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
	  ReactCurrentOwner: ReactCurrentOwner,
	  IsSomeRendererActing: IsSomeRendererActing,
	  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
	  assign: _assign
	};

	{
	  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
	}

	// by calls to these methods by a Babel plugin.
	//
	// In PROD (or in packages without access to React internals),
	// they are left as they are instead.

	function warn(format) {
	  {
	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    printWarning('warn', format, args);
	  }
	}
	function error(format) {
	  {
	    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	      args[_key2 - 1] = arguments[_key2];
	    }

	    printWarning('error', format, args);
	  }
	}

	function printWarning(level, format, args) {
	  // When changing this logic, you might want to also
	  // update consoleWithStackDev.www.js as well.
	  {
	    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	    var stack = ReactDebugCurrentFrame.getStackAddendum();

	    if (stack !== '') {
	      format += '%s';
	      args = args.concat([stack]);
	    }

	    var argsWithFormat = args.map(function (item) {
	      return '' + item;
	    }); // Careful: RN currently depends on this prefix

	    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
	    // breaks IE9: https://github.com/facebook/react/issues/13610
	    // eslint-disable-next-line react-internal/no-production-logging

	    Function.prototype.apply.call(console[level], console, argsWithFormat);
	  }
	}

	var didWarnStateUpdateForUnmountedComponent = {};

	function warnNoop(publicInstance, callerName) {
	  {
	    var _constructor = publicInstance.constructor;
	    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
	    var warningKey = componentName + "." + callerName;

	    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
	      return;
	    }

	    error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

	    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
	  }
	}
	/**
	 * This is the abstract API for an update queue.
	 */


	var ReactNoopUpdateQueue = {
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} callerName name of the calling function in the public API.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance, callback, callerName) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} callerName name of the calling function in the public API.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	var emptyObject = {};

	{
	  Object.freeze(emptyObject);
	}
	/**
	 * Base class helpers for the updating state of a component.
	 */


	function Component(props, context, updater) {
	  this.props = props;
	  this.context = context; // If a component has string refs, we will assign a different object later.

	  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
	  // renderer.

	  this.updater = updater || ReactNoopUpdateQueue;
	}

	Component.prototype.isReactComponent = {};
	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */

	Component.prototype.setState = function (partialState, callback) {
	  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
	    {
	      throw Error( "setState(...): takes an object of state variables to update or a function which returns an object of state variables." );
	    }
	  }

	  this.updater.enqueueSetState(this, partialState, callback, 'setState');
	};
	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */


	Component.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
	};
	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */


	{
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };

	  var defineDeprecationWarning = function (methodName, info) {
	    Object.defineProperty(Component.prototype, methodName, {
	      get: function () {
	        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

	        return undefined;
	      }
	    });
	  };

	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	function ComponentDummy() {}

	ComponentDummy.prototype = Component.prototype;
	/**
	 * Convenience component with default shallow equality check for sCU.
	 */

	function PureComponent(props, context, updater) {
	  this.props = props;
	  this.context = context; // If a component has string refs, we will assign a different object later.

	  this.refs = emptyObject;
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
	pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

	_assign(pureComponentPrototype, Component.prototype);

	pureComponentPrototype.isPureReactComponent = true;

	// an immutable object with a single mutable value
	function createRef() {
	  var refObject = {
	    current: null
	  };

	  {
	    Object.seal(refObject);
	  }

	  return refObject;
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var functionName = innerType.displayName || innerType.name || '';
	  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
	}

	function getContextName(type) {
	  return type.displayName || 'Context';
	}

	function getComponentName(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }

	  {
	    if (typeof type.tag === 'number') {
	      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }

	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }

	  if (typeof type === 'string') {
	    return type;
	  }

	  switch (type) {
	    case exports.Fragment:
	      return 'Fragment';

	    case REACT_PORTAL_TYPE:
	      return 'Portal';

	    case exports.Profiler:
	      return 'Profiler';

	    case exports.StrictMode:
	      return 'StrictMode';

	    case exports.Suspense:
	      return 'Suspense';

	    case REACT_SUSPENSE_LIST_TYPE:
	      return 'SuspenseList';
	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        var context = type;
	        return getContextName(context) + '.Consumer';

	      case REACT_PROVIDER_TYPE:
	        var provider = type;
	        return getContextName(provider._context) + '.Provider';

	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');

	      case REACT_MEMO_TYPE:
	        return getComponentName(type.type);

	      case REACT_BLOCK_TYPE:
	        return getComponentName(type._render);

	      case REACT_LAZY_TYPE:
	        {
	          var lazyComponent = type;
	          var payload = lazyComponent._payload;
	          var init = lazyComponent._init;

	          try {
	            return getComponentName(init(payload));
	          } catch (x) {
	            return null;
	          }
	        }
	    }
	  }

	  return null;
	}

	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

	{
	  didWarnAboutStringRefs = {};
	}

	function hasValidRef(config) {
	  {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }

	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }

	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    {
	      if (!specialPropKeyWarningShown) {
	        specialPropKeyWarningShown = true;

	        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
	      }
	    }
	  };

	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    {
	      if (!specialPropRefWarningShown) {
	        specialPropRefWarningShown = true;

	        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
	      }
	    }
	  };

	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}

	function warnIfStringRefCannotBeAutoConverted(config) {
	  {
	    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
	      var componentName = getComponentName(ReactCurrentOwner.current.type);

	      if (!didWarnAboutStringRefs[componentName]) {
	        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);

	        didWarnAboutStringRefs[componentName] = true;
	      }
	    }
	  }
	}
	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, instanceof check
	 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} props
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} owner
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @internal
	 */


	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allows us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.

	    Object.defineProperty(element._store, 'validated', {
	      configurable: false,
	      enumerable: false,
	      writable: true,
	      value: false
	    }); // self and source are DEV only properties.

	    Object.defineProperty(element, '_self', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: self
	    }); // Two elements created in two different places should be considered
	    // equal for testing purposes and therefore we hide it from enumeration.

	    Object.defineProperty(element, '_source', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: source
	    });

	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};
	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://reactjs.org/docs/react-api.html#createelement
	 */

	function createElement(type, config, children) {
	  var propName; // Reserved names are extracted

	  var props = {};
	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;

	      {
	        warnIfStringRefCannotBeAutoConverted(config);
	      }
	    }

	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  } // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.


	  var childrenLength = arguments.length - 2;

	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);

	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }

	    {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }

	    props.children = childArray;
	  } // Resolve default props


	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;

	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  {
	    if (key || ref) {
	      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

	      if (key) {
	        defineKeyPropWarningGetter(props, displayName);
	      }

	      if (ref) {
	        defineRefPropWarningGetter(props, displayName);
	      }
	    }
	  }

	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	}
	function cloneAndReplaceKey(oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
	  return newElement;
	}
	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://reactjs.org/docs/react-api.html#cloneelement
	 */

	function cloneElement(element, config, children) {
	  if (!!(element === null || element === undefined)) {
	    {
	      throw Error( "React.cloneElement(...): The argument must be a React element, but you passed " + element + "." );
	    }
	  }

	  var propName; // Original props are copied

	  var props = _assign({}, element.props); // Reserved names are extracted


	  var key = element.key;
	  var ref = element.ref; // Self is preserved since the owner is preserved.

	  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.

	  var source = element._source; // Owner will be preserved, unless ref is overridden

	  var owner = element._owner;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }

	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    } // Remaining properties override existing props


	    var defaultProps;

	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }

	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  } // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.


	  var childrenLength = arguments.length - 2;

	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);

	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }

	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	}
	/**
	 * Verifies the object is a ReactElement.
	 * See https://reactjs.org/docs/react-api.html#isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a ReactElement.
	 * @final
	 */

	function isValidElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';
	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = key.replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });
	  return '$' + escapedString;
	}
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */


	var didWarnAboutMaps = false;
	var userProvidedKeyEscapeRegex = /\/+/g;

	function escapeUserProvidedKey(text) {
	  return text.replace(userProvidedKeyEscapeRegex, '$&/');
	}
	/**
	 * Generate a key string that identifies a element within a set.
	 *
	 * @param {*} element A element that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */


	function getElementKey(element, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (typeof element === 'object' && element !== null && element.key != null) {
	    // Explicit key
	    return escape('' + element.key);
	  } // Implicit key determined by the index in the set


	  return index.toString(36);
	}

	function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  var invokeCallback = false;

	  if (children === null) {
	    invokeCallback = true;
	  } else {
	    switch (type) {
	      case 'string':
	      case 'number':
	        invokeCallback = true;
	        break;

	      case 'object':
	        switch (children.$$typeof) {
	          case REACT_ELEMENT_TYPE:
	          case REACT_PORTAL_TYPE:
	            invokeCallback = true;
	        }

	    }
	  }

	  if (invokeCallback) {
	    var _child = children;
	    var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows:

	    var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;

	    if (Array.isArray(mappedChild)) {
	      var escapedChildKey = '';

	      if (childKey != null) {
	        escapedChildKey = escapeUserProvidedKey(childKey) + '/';
	      }

	      mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
	        return c;
	      });
	    } else if (mappedChild != null) {
	      if (isValidElement(mappedChild)) {
	        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
	        // traverseAllChildren used to do for objects as children
	        escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
	        mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
	        escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
	      }

	      array.push(mappedChild);
	    }

	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.

	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getElementKey(child, i);
	      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);

	    if (typeof iteratorFn === 'function') {
	      var iterableChildren = children;

	      {
	        // Warn about using Maps as children
	        if (iteratorFn === iterableChildren.entries) {
	          if (!didWarnAboutMaps) {
	            warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
	          }

	          didWarnAboutMaps = true;
	        }
	      }

	      var iterator = iteratorFn.call(iterableChildren);
	      var step;
	      var ii = 0;

	      while (!(step = iterator.next()).done) {
	        child = step.value;
	        nextName = nextNamePrefix + getElementKey(child, ii++);
	        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
	      }
	    } else if (type === 'object') {
	      var childrenString = '' + children;

	      {
	        {
	          throw Error( "Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). If you meant to render a collection of children, use an array instead." );
	        }
	      }
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
	 *
	 * The provided mapFunction(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }

	  var result = [];
	  var count = 0;
	  mapIntoArray(children, result, '', '', function (child) {
	    return func.call(context, child, count++);
	  });
	  return result;
	}
	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrencount
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */


	function countChildren(children) {
	  var n = 0;
	  mapChildren(children, function () {
	    n++; // Don't return anything
	  });
	  return n;
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  mapChildren(children, function () {
	    forEachFunc.apply(this, arguments); // Don't return anything.
	  }, forEachContext);
	}
	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
	 */


	function toArray(children) {
	  return mapChildren(children, function (child) {
	    return child;
	  }) || [];
	}
	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */


	function onlyChild(children) {
	  if (!isValidElement(children)) {
	    {
	      throw Error( "React.Children.only expected to receive a single React element child." );
	    }
	  }

	  return children;
	}

	function createContext(defaultValue, calculateChangedBits) {
	  if (calculateChangedBits === undefined) {
	    calculateChangedBits = null;
	  } else {
	    {
	      if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
	        error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
	      }
	    }
	  }

	  var context = {
	    $$typeof: REACT_CONTEXT_TYPE,
	    _calculateChangedBits: calculateChangedBits,
	    // As a workaround to support multiple concurrent renderers, we categorize
	    // some renderers as primary and others as secondary. We only expect
	    // there to be two concurrent renderers at most: React Native (primary) and
	    // Fabric (secondary); React DOM (primary) and React ART (secondary).
	    // Secondary renderers store their context values on separate fields.
	    _currentValue: defaultValue,
	    _currentValue2: defaultValue,
	    // Used to track how many concurrent renderers this context currently
	    // supports within in a single renderer. Such as parallel server rendering.
	    _threadCount: 0,
	    // These are circular
	    Provider: null,
	    Consumer: null
	  };
	  context.Provider = {
	    $$typeof: REACT_PROVIDER_TYPE,
	    _context: context
	  };
	  var hasWarnedAboutUsingNestedContextConsumers = false;
	  var hasWarnedAboutUsingConsumerProvider = false;
	  var hasWarnedAboutDisplayNameOnConsumer = false;

	  {
	    // A separate object, but proxies back to the original context object for
	    // backwards compatibility. It has a different $$typeof, so we can properly
	    // warn for the incorrect usage of Context as a Consumer.
	    var Consumer = {
	      $$typeof: REACT_CONTEXT_TYPE,
	      _context: context,
	      _calculateChangedBits: context._calculateChangedBits
	    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

	    Object.defineProperties(Consumer, {
	      Provider: {
	        get: function () {
	          if (!hasWarnedAboutUsingConsumerProvider) {
	            hasWarnedAboutUsingConsumerProvider = true;

	            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
	          }

	          return context.Provider;
	        },
	        set: function (_Provider) {
	          context.Provider = _Provider;
	        }
	      },
	      _currentValue: {
	        get: function () {
	          return context._currentValue;
	        },
	        set: function (_currentValue) {
	          context._currentValue = _currentValue;
	        }
	      },
	      _currentValue2: {
	        get: function () {
	          return context._currentValue2;
	        },
	        set: function (_currentValue2) {
	          context._currentValue2 = _currentValue2;
	        }
	      },
	      _threadCount: {
	        get: function () {
	          return context._threadCount;
	        },
	        set: function (_threadCount) {
	          context._threadCount = _threadCount;
	        }
	      },
	      Consumer: {
	        get: function () {
	          if (!hasWarnedAboutUsingNestedContextConsumers) {
	            hasWarnedAboutUsingNestedContextConsumers = true;

	            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
	          }

	          return context.Consumer;
	        }
	      },
	      displayName: {
	        get: function () {
	          return context.displayName;
	        },
	        set: function (displayName) {
	          if (!hasWarnedAboutDisplayNameOnConsumer) {
	            warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);

	            hasWarnedAboutDisplayNameOnConsumer = true;
	          }
	        }
	      }
	    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

	    context.Consumer = Consumer;
	  }

	  {
	    context._currentRenderer = null;
	    context._currentRenderer2 = null;
	  }

	  return context;
	}

	var Uninitialized = -1;
	var Pending = 0;
	var Resolved = 1;
	var Rejected = 2;

	function lazyInitializer(payload) {
	  if (payload._status === Uninitialized) {
	    var ctor = payload._result;
	    var thenable = ctor(); // Transition to the next state.

	    var pending = payload;
	    pending._status = Pending;
	    pending._result = thenable;
	    thenable.then(function (moduleObject) {
	      if (payload._status === Pending) {
	        var defaultExport = moduleObject.default;

	        {
	          if (defaultExport === undefined) {
	            error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
	            'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
	          }
	        } // Transition to the next state.


	        var resolved = payload;
	        resolved._status = Resolved;
	        resolved._result = defaultExport;
	      }
	    }, function (error) {
	      if (payload._status === Pending) {
	        // Transition to the next state.
	        var rejected = payload;
	        rejected._status = Rejected;
	        rejected._result = error;
	      }
	    });
	  }

	  if (payload._status === Resolved) {
	    return payload._result;
	  } else {
	    throw payload._result;
	  }
	}

	function lazy(ctor) {
	  var payload = {
	    // We use these fields to store the result.
	    _status: -1,
	    _result: ctor
	  };
	  var lazyType = {
	    $$typeof: REACT_LAZY_TYPE,
	    _payload: payload,
	    _init: lazyInitializer
	  };

	  {
	    // In production, this would just set it on the object.
	    var defaultProps;
	    var propTypes; // $FlowFixMe

	    Object.defineProperties(lazyType, {
	      defaultProps: {
	        configurable: true,
	        get: function () {
	          return defaultProps;
	        },
	        set: function (newDefaultProps) {
	          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

	          defaultProps = newDefaultProps; // Match production behavior more closely:
	          // $FlowFixMe

	          Object.defineProperty(lazyType, 'defaultProps', {
	            enumerable: true
	          });
	        }
	      },
	      propTypes: {
	        configurable: true,
	        get: function () {
	          return propTypes;
	        },
	        set: function (newPropTypes) {
	          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

	          propTypes = newPropTypes; // Match production behavior more closely:
	          // $FlowFixMe

	          Object.defineProperty(lazyType, 'propTypes', {
	            enumerable: true
	          });
	        }
	      }
	    });
	  }

	  return lazyType;
	}

	function forwardRef(render) {
	  {
	    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
	      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
	    } else if (typeof render !== 'function') {
	      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
	    } else {
	      if (render.length !== 0 && render.length !== 2) {
	        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
	      }
	    }

	    if (render != null) {
	      if (render.defaultProps != null || render.propTypes != null) {
	        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
	      }
	    }
	  }

	  var elementType = {
	    $$typeof: REACT_FORWARD_REF_TYPE,
	    render: render
	  };

	  {
	    var ownName;
	    Object.defineProperty(elementType, 'displayName', {
	      enumerable: false,
	      configurable: true,
	      get: function () {
	        return ownName;
	      },
	      set: function (name) {
	        ownName = name;

	        if (render.displayName == null) {
	          render.displayName = name;
	        }
	      }
	    });
	  }

	  return elementType;
	}

	// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

	var enableScopeAPI = false; // Experimental Create Event Handle API.

	function isValidElementType(type) {
	  if (typeof type === 'string' || typeof type === 'function') {
	    return true;
	  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


	  if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {
	    return true;
	  }

	  if (typeof type === 'object' && type !== null) {
	    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
	      return true;
	    }
	  }

	  return false;
	}

	function memo(type, compare) {
	  {
	    if (!isValidElementType(type)) {
	      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
	    }
	  }

	  var elementType = {
	    $$typeof: REACT_MEMO_TYPE,
	    type: type,
	    compare: compare === undefined ? null : compare
	  };

	  {
	    var ownName;
	    Object.defineProperty(elementType, 'displayName', {
	      enumerable: false,
	      configurable: true,
	      get: function () {
	        return ownName;
	      },
	      set: function (name) {
	        ownName = name;

	        if (type.displayName == null) {
	          type.displayName = name;
	        }
	      }
	    });
	  }

	  return elementType;
	}

	function resolveDispatcher() {
	  var dispatcher = ReactCurrentDispatcher.current;

	  if (!(dispatcher !== null)) {
	    {
	      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem." );
	    }
	  }

	  return dispatcher;
	}

	function useContext(Context, unstable_observedBits) {
	  var dispatcher = resolveDispatcher();

	  {
	    if (unstable_observedBits !== undefined) {
	      error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://reactjs.org/link/rules-of-hooks' : '');
	    } // TODO: add a more generic warning for invalid values.


	    if (Context._context !== undefined) {
	      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
	      // and nobody should be using this in existing code.

	      if (realContext.Consumer === Context) {
	        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
	      } else if (realContext.Provider === Context) {
	        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
	      }
	    }
	  }

	  return dispatcher.useContext(Context, unstable_observedBits);
	}
	function useState(initialState) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useState(initialState);
	}
	function useReducer(reducer, initialArg, init) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useReducer(reducer, initialArg, init);
	}
	function useRef(initialValue) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useRef(initialValue);
	}
	function useEffect(create, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useEffect(create, deps);
	}
	function useLayoutEffect(create, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useLayoutEffect(create, deps);
	}
	function useCallback(callback, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useCallback(callback, deps);
	}
	function useMemo(create, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useMemo(create, deps);
	}
	function useImperativeHandle(ref, create, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useImperativeHandle(ref, create, deps);
	}
	function useDebugValue(value, formatterFn) {
	  {
	    var dispatcher = resolveDispatcher();
	    return dispatcher.useDebugValue(value, formatterFn);
	  }
	}

	// Helpers to patch console.logs to avoid logging during side-effect free
	// replaying on render function. This currently only patches the object
	// lazily which won't cover if the log function was extracted eagerly.
	// We could also eagerly patch the method.
	var disabledDepth = 0;
	var prevLog;
	var prevInfo;
	var prevWarn;
	var prevError;
	var prevGroup;
	var prevGroupCollapsed;
	var prevGroupEnd;

	function disabledLog() {}

	disabledLog.__reactDisabledLog = true;
	function disableLogs() {
	  {
	    if (disabledDepth === 0) {
	      /* eslint-disable react-internal/no-production-logging */
	      prevLog = console.log;
	      prevInfo = console.info;
	      prevWarn = console.warn;
	      prevError = console.error;
	      prevGroup = console.group;
	      prevGroupCollapsed = console.groupCollapsed;
	      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

	      var props = {
	        configurable: true,
	        enumerable: true,
	        value: disabledLog,
	        writable: true
	      }; // $FlowFixMe Flow thinks console is immutable.

	      Object.defineProperties(console, {
	        info: props,
	        log: props,
	        warn: props,
	        error: props,
	        group: props,
	        groupCollapsed: props,
	        groupEnd: props
	      });
	      /* eslint-enable react-internal/no-production-logging */
	    }

	    disabledDepth++;
	  }
	}
	function reenableLogs() {
	  {
	    disabledDepth--;

	    if (disabledDepth === 0) {
	      /* eslint-disable react-internal/no-production-logging */
	      var props = {
	        configurable: true,
	        enumerable: true,
	        writable: true
	      }; // $FlowFixMe Flow thinks console is immutable.

	      Object.defineProperties(console, {
	        log: _assign({}, props, {
	          value: prevLog
	        }),
	        info: _assign({}, props, {
	          value: prevInfo
	        }),
	        warn: _assign({}, props, {
	          value: prevWarn
	        }),
	        error: _assign({}, props, {
	          value: prevError
	        }),
	        group: _assign({}, props, {
	          value: prevGroup
	        }),
	        groupCollapsed: _assign({}, props, {
	          value: prevGroupCollapsed
	        }),
	        groupEnd: _assign({}, props, {
	          value: prevGroupEnd
	        })
	      });
	      /* eslint-enable react-internal/no-production-logging */
	    }

	    if (disabledDepth < 0) {
	      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
	    }
	  }
	}

	var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
	var prefix;
	function describeBuiltInComponentFrame(name, source, ownerFn) {
	  {
	    if (prefix === undefined) {
	      // Extract the VM specific prefix used by each line.
	      try {
	        throw Error();
	      } catch (x) {
	        var match = x.stack.trim().match(/\n( *(at )?)/);
	        prefix = match && match[1] || '';
	      }
	    } // We use the prefix to ensure our stacks line up with native stack frames.


	    return '\n' + prefix + name;
	  }
	}
	var reentry = false;
	var componentFrameCache;

	{
	  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
	  componentFrameCache = new PossiblyWeakMap();
	}

	function describeNativeComponentFrame(fn, construct) {
	  // If something asked for a stack inside a fake render, it should get ignored.
	  if (!fn || reentry) {
	    return '';
	  }

	  {
	    var frame = componentFrameCache.get(fn);

	    if (frame !== undefined) {
	      return frame;
	    }
	  }

	  var control;
	  reentry = true;
	  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

	  Error.prepareStackTrace = undefined;
	  var previousDispatcher;

	  {
	    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
	    // for warnings.

	    ReactCurrentDispatcher$1.current = null;
	    disableLogs();
	  }

	  try {
	    // This should throw.
	    if (construct) {
	      // Something should be setting the props in the constructor.
	      var Fake = function () {
	        throw Error();
	      }; // $FlowFixMe


	      Object.defineProperty(Fake.prototype, 'props', {
	        set: function () {
	          // We use a throwing setter instead of frozen or non-writable props
	          // because that won't throw in a non-strict mode function.
	          throw Error();
	        }
	      });

	      if (typeof Reflect === 'object' && Reflect.construct) {
	        // We construct a different control for this case to include any extra
	        // frames added by the construct call.
	        try {
	          Reflect.construct(Fake, []);
	        } catch (x) {
	          control = x;
	        }

	        Reflect.construct(fn, [], Fake);
	      } else {
	        try {
	          Fake.call();
	        } catch (x) {
	          control = x;
	        }

	        fn.call(Fake.prototype);
	      }
	    } else {
	      try {
	        throw Error();
	      } catch (x) {
	        control = x;
	      }

	      fn();
	    }
	  } catch (sample) {
	    // This is inlined manually because closure doesn't do it for us.
	    if (sample && control && typeof sample.stack === 'string') {
	      // This extracts the first frame from the sample that isn't also in the control.
	      // Skipping one frame that we assume is the frame that calls the two.
	      var sampleLines = sample.stack.split('\n');
	      var controlLines = control.stack.split('\n');
	      var s = sampleLines.length - 1;
	      var c = controlLines.length - 1;

	      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
	        // We expect at least one stack frame to be shared.
	        // Typically this will be the root most one. However, stack frames may be
	        // cut off due to maximum stack limits. In this case, one maybe cut off
	        // earlier than the other. We assume that the sample is longer or the same
	        // and there for cut off earlier. So we should find the root most frame in
	        // the sample somewhere in the control.
	        c--;
	      }

	      for (; s >= 1 && c >= 0; s--, c--) {
	        // Next we find the first one that isn't the same which should be the
	        // frame that called our sample function and the control.
	        if (sampleLines[s] !== controlLines[c]) {
	          // In V8, the first line is describing the message but other VMs don't.
	          // If we're about to return the first line, and the control is also on the same
	          // line, that's a pretty good indicator that our sample threw at same line as
	          // the control. I.e. before we entered the sample frame. So we ignore this result.
	          // This can happen if you passed a class to function component, or non-function.
	          if (s !== 1 || c !== 1) {
	            do {
	              s--;
	              c--; // We may still have similar intermediate frames from the construct call.
	              // The next one that isn't the same should be our match though.

	              if (c < 0 || sampleLines[s] !== controlLines[c]) {
	                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
	                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

	                {
	                  if (typeof fn === 'function') {
	                    componentFrameCache.set(fn, _frame);
	                  }
	                } // Return the line we found.


	                return _frame;
	              }
	            } while (s >= 1 && c >= 0);
	          }

	          break;
	        }
	      }
	    }
	  } finally {
	    reentry = false;

	    {
	      ReactCurrentDispatcher$1.current = previousDispatcher;
	      reenableLogs();
	    }

	    Error.prepareStackTrace = previousPrepareStackTrace;
	  } // Fallback to just using the name if we couldn't make it throw.


	  var name = fn ? fn.displayName || fn.name : '';
	  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

	  {
	    if (typeof fn === 'function') {
	      componentFrameCache.set(fn, syntheticFrame);
	    }
	  }

	  return syntheticFrame;
	}
	function describeFunctionComponentFrame(fn, source, ownerFn) {
	  {
	    return describeNativeComponentFrame(fn, false);
	  }
	}

	function shouldConstruct(Component) {
	  var prototype = Component.prototype;
	  return !!(prototype && prototype.isReactComponent);
	}

	function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

	  if (type == null) {
	    return '';
	  }

	  if (typeof type === 'function') {
	    {
	      return describeNativeComponentFrame(type, shouldConstruct(type));
	    }
	  }

	  if (typeof type === 'string') {
	    return describeBuiltInComponentFrame(type);
	  }

	  switch (type) {
	    case exports.Suspense:
	      return describeBuiltInComponentFrame('Suspense');

	    case REACT_SUSPENSE_LIST_TYPE:
	      return describeBuiltInComponentFrame('SuspenseList');
	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_FORWARD_REF_TYPE:
	        return describeFunctionComponentFrame(type.render);

	      case REACT_MEMO_TYPE:
	        // Memo may contain any component type so we recursively resolve it.
	        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

	      case REACT_BLOCK_TYPE:
	        return describeFunctionComponentFrame(type._render);

	      case REACT_LAZY_TYPE:
	        {
	          var lazyComponent = type;
	          var payload = lazyComponent._payload;
	          var init = lazyComponent._init;

	          try {
	            // Lazy may contain any component type so we recursively resolve it.
	            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
	          } catch (x) {}
	        }
	    }
	  }

	  return '';
	}

	var loggedTypeFailures = {};
	var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

	function setCurrentlyValidatingElement(element) {
	  {
	    if (element) {
	      var owner = element._owner;
	      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
	    } else {
	      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
	    }
	  }
	}

	function checkPropTypes(typeSpecs, values, location, componentName, element) {
	  {
	    // $FlowFixMe This is okay but Flow doesn't know it.
	    var has = Function.call.bind(Object.prototype.hasOwnProperty);

	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.

	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
	            err.name = 'Invariant Violation';
	            throw err;
	          }

	          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	        } catch (ex) {
	          error$1 = ex;
	        }

	        if (error$1 && !(error$1 instanceof Error)) {
	          setCurrentlyValidatingElement(element);

	          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

	          setCurrentlyValidatingElement(null);
	        }

	        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error$1.message] = true;
	          setCurrentlyValidatingElement(element);

	          error('Failed %s type: %s', location, error$1.message);

	          setCurrentlyValidatingElement(null);
	        }
	      }
	    }
	  }
	}

	function setCurrentlyValidatingElement$1(element) {
	  {
	    if (element) {
	      var owner = element._owner;
	      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	      setExtraStackFrame(stack);
	    } else {
	      setExtraStackFrame(null);
	    }
	  }
	}

	var propTypesMisspellWarningShown;

	{
	  propTypesMisspellWarningShown = false;
	}

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = getComponentName(ReactCurrentOwner.current.type);

	    if (name) {
	      return '\n\nCheck the render method of `' + name + '`.';
	    }
	  }

	  return '';
	}

	function getSourceInfoErrorAddendum(source) {
	  if (source !== undefined) {
	    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
	    var lineNumber = source.lineNumber;
	    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
	  }

	  return '';
	}

	function getSourceInfoErrorAddendumForProps(elementProps) {
	  if (elementProps !== null && elementProps !== undefined) {
	    return getSourceInfoErrorAddendum(elementProps.__source);
	  }

	  return '';
	}
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */


	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();

	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

	    if (parentName) {
	      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
	    }
	  }

	  return info;
	}
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */


	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }

	  element._store.validated = true;
	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

	  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	    return;
	  }

	  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.

	  var childOwner = '';

	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
	  }

	  {
	    setCurrentlyValidatingElement$1(element);

	    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

	    setCurrentlyValidatingElement$1(null);
	  }
	}
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */


	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }

	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];

	      if (isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);

	    if (typeof iteratorFn === 'function') {
	      // Entry iterators used to provide implicit keys,
	      // but now we print a separate warning for them later.
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;

	        while (!(step = iterator.next()).done) {
	          if (isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */


	function validatePropTypes(element) {
	  {
	    var type = element.type;

	    if (type === null || type === undefined || typeof type === 'string') {
	      return;
	    }

	    var propTypes;

	    if (typeof type === 'function') {
	      propTypes = type.propTypes;
	    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
	    // Inner props are checked in the reconciler.
	    type.$$typeof === REACT_MEMO_TYPE)) {
	      propTypes = type.propTypes;
	    } else {
	      return;
	    }

	    if (propTypes) {
	      // Intentionally inside to avoid triggering lazy initializers:
	      var name = getComponentName(type);
	      checkPropTypes(propTypes, element.props, 'prop', name, element);
	    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
	      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

	      var _name = getComponentName(type);

	      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
	    }

	    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
	      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
	    }
	  }
	}
	/**
	 * Given a fragment, validate that it can only be provided with fragment props
	 * @param {ReactElement} fragment
	 */


	function validateFragmentProps(fragment) {
	  {
	    var keys = Object.keys(fragment.props);

	    for (var i = 0; i < keys.length; i++) {
	      var key = keys[i];

	      if (key !== 'children' && key !== 'key') {
	        setCurrentlyValidatingElement$1(fragment);

	        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

	        setCurrentlyValidatingElement$1(null);
	        break;
	      }
	    }

	    if (fragment.ref !== null) {
	      setCurrentlyValidatingElement$1(fragment);

	      error('Invalid attribute `ref` supplied to `React.Fragment`.');

	      setCurrentlyValidatingElement$1(null);
	    }
	  }
	}
	function createElementWithValidation(type, props, children) {
	  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
	  // succeed and there will likely be errors in render.

	  if (!validType) {
	    var info = '';

	    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
	    }

	    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

	    if (sourceInfo) {
	      info += sourceInfo;
	    } else {
	      info += getDeclarationErrorAddendum();
	    }

	    var typeString;

	    if (type === null) {
	      typeString = 'null';
	    } else if (Array.isArray(type)) {
	      typeString = 'array';
	    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
	      typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
	      info = ' Did you accidentally export a JSX literal instead of a component?';
	    } else {
	      typeString = typeof type;
	    }

	    {
	      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
	    }
	  }

	  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
	  // TODO: Drop this when these are no longer allowed as the type argument.

	  if (element == null) {
	    return element;
	  } // Skip key warning if the type isn't valid since our key validation logic
	  // doesn't expect a non-string/function type and can throw confusing errors.
	  // We don't want exception behavior to differ between dev and prod.
	  // (Rendering will throw with a helpful message and as soon as the type is
	  // fixed, the key warnings will appear.)


	  if (validType) {
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], type);
	    }
	  }

	  if (type === exports.Fragment) {
	    validateFragmentProps(element);
	  } else {
	    validatePropTypes(element);
	  }

	  return element;
	}
	var didWarnAboutDeprecatedCreateFactory = false;
	function createFactoryWithValidation(type) {
	  var validatedFactory = createElementWithValidation.bind(null, type);
	  validatedFactory.type = type;

	  {
	    if (!didWarnAboutDeprecatedCreateFactory) {
	      didWarnAboutDeprecatedCreateFactory = true;

	      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
	    } // Legacy hook: remove it


	    Object.defineProperty(validatedFactory, 'type', {
	      enumerable: false,
	      get: function () {
	        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

	        Object.defineProperty(this, 'type', {
	          value: type
	        });
	        return type;
	      }
	    });
	  }

	  return validatedFactory;
	}
	function cloneElementWithValidation(element, props, children) {
	  var newElement = cloneElement.apply(this, arguments);

	  for (var i = 2; i < arguments.length; i++) {
	    validateChildKeys(arguments[i], newElement.type);
	  }

	  validatePropTypes(newElement);
	  return newElement;
	}

	{

	  try {
	    var frozenObject = Object.freeze({});
	    /* eslint-disable no-new */

	    new Map([[frozenObject, null]]);
	    new Set([frozenObject]);
	    /* eslint-enable no-new */
	  } catch (e) {
	  }
	}

	var createElement$1 =  createElementWithValidation ;
	var cloneElement$1 =  cloneElementWithValidation ;
	var createFactory =  createFactoryWithValidation ;
	var Children = {
	  map: mapChildren,
	  forEach: forEachChildren,
	  count: countChildren,
	  toArray: toArray,
	  only: onlyChild
	};

	exports.Children = Children;
	exports.Component = Component;
	exports.PureComponent = PureComponent;
	exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
	exports.cloneElement = cloneElement$1;
	exports.createContext = createContext;
	exports.createElement = createElement$1;
	exports.createFactory = createFactory;
	exports.createRef = createRef;
	exports.forwardRef = forwardRef;
	exports.isValidElement = isValidElement;
	exports.lazy = lazy;
	exports.memo = memo;
	exports.useCallback = useCallback;
	exports.useContext = useContext;
	exports.useDebugValue = useDebugValue;
	exports.useEffect = useEffect;
	exports.useImperativeHandle = useImperativeHandle;
	exports.useLayoutEffect = useLayoutEffect;
	exports.useMemo = useMemo;
	exports.useReducer = useReducer;
	exports.useRef = useRef;
	exports.useState = useState;
	exports.version = ReactVersion;
	  })();
	}
	}(react_development));

	if ("development" === 'production') {
	  react.exports = react_production_min;
	} else {
	  react.exports = react_development;
	}

	var React = react.exports;

	var reactDom = {exports: {}};

	var reactDom_production_min = {};

	var scheduler = {exports: {}};

	var scheduler_production_min = {};

	/** @license React v0.20.2
	 * scheduler.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	(function (exports) {
	var f,g,h,k;if("object"===typeof performance&&"function"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()};}else {var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q};}
	if("undefined"===typeof window||"function"!==typeof MessageChannel){var t=null,u=null,w=function(){if(null!==t)try{var a=exports.unstable_now();t(!0,a);t=null;}catch(b){throw setTimeout(w,0),b;}};f=function(a){null!==t?setTimeout(f,0,a):(t=a,setTimeout(w,0));};g=function(a,b){u=setTimeout(a,b);};h=function(){clearTimeout(u);};exports.unstable_shouldYield=function(){return !1};k=exports.unstable_forceFrameRate=function(){};}else {var x=window.setTimeout,y=window.clearTimeout;if("undefined"!==typeof console){var z=
	window.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");"function"!==typeof z&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");}var A=!1,B=null,C=-1,D=5,E=0;exports.unstable_shouldYield=function(){return exports.unstable_now()>=
	E};k=function(){};exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):D=0<a?Math.floor(1E3/a):5;};var F=new MessageChannel,G=F.port2;F.port1.onmessage=function(){if(null!==B){var a=exports.unstable_now();E=a+D;try{B(!0,a)?G.postMessage(null):(A=!1,B=null);}catch(b){throw G.postMessage(null),b;}}else A=!1;};f=function(a){B=a;A||(A=!0,G.postMessage(null));};g=function(a,b){C=
	x(function(){a(exports.unstable_now());},b);};h=function(){y(C);C=-1;};}function H(a,b){var c=a.length;a.push(b);a:for(;;){var d=c-1>>>1,e=a[d];if(void 0!==e&&0<I(e,b))a[d]=b,a[c]=e,c=d;else break a}}function J(a){a=a[0];return void 0===a?null:a}
	function K(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length;d<e;){var m=2*(d+1)-1,n=a[m],v=m+1,r=a[v];if(void 0!==n&&0>I(n,c))void 0!==r&&0>I(r,n)?(a[d]=r,a[v]=c,d=v):(a[d]=n,a[m]=c,d=m);else if(void 0!==r&&0>I(r,c))a[d]=r,a[v]=c,d=v;else break a}}return b}return null}function I(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}var L=[],M=[],N=1,O=null,P=3,Q=!1,R=!1,S=!1;
	function T(a){for(var b=J(M);null!==b;){if(null===b.callback)K(M);else if(b.startTime<=a)K(M),b.sortIndex=b.expirationTime,H(L,b);else break;b=J(M);}}function U(a){S=!1;T(a);if(!R)if(null!==J(L))R=!0,f(V);else {var b=J(M);null!==b&&g(U,b.startTime-a);}}
	function V(a,b){R=!1;S&&(S=!1,h());Q=!0;var c=P;try{T(b);for(O=J(L);null!==O&&(!(O.expirationTime>b)||a&&!exports.unstable_shouldYield());){var d=O.callback;if("function"===typeof d){O.callback=null;P=O.priorityLevel;var e=d(O.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?O.callback=e:O===J(L)&&K(L);T(b);}else K(L);O=J(L);}if(null!==O)var m=!0;else {var n=J(M);null!==n&&g(U,n.startTime-b);m=!1;}return m}finally{O=null,P=c,Q=!1;}}var W=k;exports.unstable_IdlePriority=5;
	exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null;};exports.unstable_continueExecution=function(){R||Q||(R=!0,f(V));};exports.unstable_getCurrentPriorityLevel=function(){return P};exports.unstable_getFirstCallbackNode=function(){return J(L)};
	exports.unstable_next=function(a){switch(P){case 1:case 2:case 3:var b=3;break;default:b=P;}var c=P;P=b;try{return a()}finally{P=c;}};exports.unstable_pauseExecution=function(){};exports.unstable_requestPaint=W;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3;}var c=P;P=a;try{return b()}finally{P=c;}};
	exports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();"object"===typeof c&&null!==c?(c=c.delay,c="number"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3;}e=c+e;a={id:N++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,H(M,a),null===J(L)&&a===J(M)&&(S?h():S=!0,g(U,c-d))):(a.sortIndex=e,H(L,a),R||Q||(R=!0,f(V)));return a};
	exports.unstable_wrapCallback=function(a){var b=P;return function(){var c=P;P=b;try{return a.apply(this,arguments)}finally{P=c;}}};
	}(scheduler_production_min));

	var scheduler_development = {};

	/** @license React v0.20.2
	 * scheduler.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	(function (exports) {

	if ("development" !== "production") {
	  (function() {

	var enableSchedulerDebugging = false;
	var enableProfiling = false;

	var requestHostCallback;
	var requestHostTimeout;
	var cancelHostTimeout;
	var requestPaint;
	var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

	if (hasPerformanceNow) {
	  var localPerformance = performance;

	  exports.unstable_now = function () {
	    return localPerformance.now();
	  };
	} else {
	  var localDate = Date;
	  var initialTime = localDate.now();

	  exports.unstable_now = function () {
	    return localDate.now() - initialTime;
	  };
	}

	if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
	// implementation using setTimeout.
	typeof window === 'undefined' || // Check if MessageChannel is supported, too.
	typeof MessageChannel !== 'function') {
	  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
	  // fallback to a naive implementation.
	  var _callback = null;
	  var _timeoutID = null;

	  var _flushCallback = function () {
	    if (_callback !== null) {
	      try {
	        var currentTime = exports.unstable_now();
	        var hasRemainingTime = true;

	        _callback(hasRemainingTime, currentTime);

	        _callback = null;
	      } catch (e) {
	        setTimeout(_flushCallback, 0);
	        throw e;
	      }
	    }
	  };

	  requestHostCallback = function (cb) {
	    if (_callback !== null) {
	      // Protect against re-entrancy.
	      setTimeout(requestHostCallback, 0, cb);
	    } else {
	      _callback = cb;
	      setTimeout(_flushCallback, 0);
	    }
	  };

	  requestHostTimeout = function (cb, ms) {
	    _timeoutID = setTimeout(cb, ms);
	  };

	  cancelHostTimeout = function () {
	    clearTimeout(_timeoutID);
	  };

	  exports.unstable_shouldYield = function () {
	    return false;
	  };

	  requestPaint = exports.unstable_forceFrameRate = function () {};
	} else {
	  // Capture local references to native APIs, in case a polyfill overrides them.
	  var _setTimeout = window.setTimeout;
	  var _clearTimeout = window.clearTimeout;

	  if (typeof console !== 'undefined') {
	    // TODO: Scheduler no longer requires these methods to be polyfilled. But
	    // maybe we want to continue warning if they don't exist, to preserve the
	    // option to rely on it in the future?
	    var requestAnimationFrame = window.requestAnimationFrame;
	    var cancelAnimationFrame = window.cancelAnimationFrame;

	    if (typeof requestAnimationFrame !== 'function') {
	      // Using console['error'] to evade Babel and ESLint
	      console['error']("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
	    }

	    if (typeof cancelAnimationFrame !== 'function') {
	      // Using console['error'] to evade Babel and ESLint
	      console['error']("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
	    }
	  }

	  var isMessageLoopRunning = false;
	  var scheduledHostCallback = null;
	  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
	  // thread, like user events. By default, it yields multiple times per frame.
	  // It does not attempt to align with frame boundaries, since most tasks don't
	  // need to be frame aligned; for those that do, use requestAnimationFrame.

	  var yieldInterval = 5;
	  var deadline = 0; // TODO: Make this configurable

	  {
	    // `isInputPending` is not available. Since we have no way of knowing if
	    // there's pending input, always yield at the end of the frame.
	    exports.unstable_shouldYield = function () {
	      return exports.unstable_now() >= deadline;
	    }; // Since we yield every frame regardless, `requestPaint` has no effect.


	    requestPaint = function () {};
	  }

	  exports.unstable_forceFrameRate = function (fps) {
	    if (fps < 0 || fps > 125) {
	      // Using console['error'] to evade Babel and ESLint
	      console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');
	      return;
	    }

	    if (fps > 0) {
	      yieldInterval = Math.floor(1000 / fps);
	    } else {
	      // reset the framerate
	      yieldInterval = 5;
	    }
	  };

	  var performWorkUntilDeadline = function () {
	    if (scheduledHostCallback !== null) {
	      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
	      // cycle. This means there's always time remaining at the beginning of
	      // the message event.

	      deadline = currentTime + yieldInterval;
	      var hasTimeRemaining = true;

	      try {
	        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);

	        if (!hasMoreWork) {
	          isMessageLoopRunning = false;
	          scheduledHostCallback = null;
	        } else {
	          // If there's more work, schedule the next message event at the end
	          // of the preceding one.
	          port.postMessage(null);
	        }
	      } catch (error) {
	        // If a scheduler task throws, exit the current browser task so the
	        // error can be observed.
	        port.postMessage(null);
	        throw error;
	      }
	    } else {
	      isMessageLoopRunning = false;
	    } // Yielding to the browser will give it a chance to paint, so we can
	  };

	  var channel = new MessageChannel();
	  var port = channel.port2;
	  channel.port1.onmessage = performWorkUntilDeadline;

	  requestHostCallback = function (callback) {
	    scheduledHostCallback = callback;

	    if (!isMessageLoopRunning) {
	      isMessageLoopRunning = true;
	      port.postMessage(null);
	    }
	  };

	  requestHostTimeout = function (callback, ms) {
	    taskTimeoutID = _setTimeout(function () {
	      callback(exports.unstable_now());
	    }, ms);
	  };

	  cancelHostTimeout = function () {
	    _clearTimeout(taskTimeoutID);

	    taskTimeoutID = -1;
	  };
	}

	function push(heap, node) {
	  var index = heap.length;
	  heap.push(node);
	  siftUp(heap, node, index);
	}
	function peek(heap) {
	  var first = heap[0];
	  return first === undefined ? null : first;
	}
	function pop(heap) {
	  var first = heap[0];

	  if (first !== undefined) {
	    var last = heap.pop();

	    if (last !== first) {
	      heap[0] = last;
	      siftDown(heap, last, 0);
	    }

	    return first;
	  } else {
	    return null;
	  }
	}

	function siftUp(heap, node, i) {
	  var index = i;

	  while (true) {
	    var parentIndex = index - 1 >>> 1;
	    var parent = heap[parentIndex];

	    if (parent !== undefined && compare(parent, node) > 0) {
	      // The parent is larger. Swap positions.
	      heap[parentIndex] = node;
	      heap[index] = parent;
	      index = parentIndex;
	    } else {
	      // The parent is smaller. Exit.
	      return;
	    }
	  }
	}

	function siftDown(heap, node, i) {
	  var index = i;
	  var length = heap.length;

	  while (index < length) {
	    var leftIndex = (index + 1) * 2 - 1;
	    var left = heap[leftIndex];
	    var rightIndex = leftIndex + 1;
	    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

	    if (left !== undefined && compare(left, node) < 0) {
	      if (right !== undefined && compare(right, left) < 0) {
	        heap[index] = right;
	        heap[rightIndex] = node;
	        index = rightIndex;
	      } else {
	        heap[index] = left;
	        heap[leftIndex] = node;
	        index = leftIndex;
	      }
	    } else if (right !== undefined && compare(right, node) < 0) {
	      heap[index] = right;
	      heap[rightIndex] = node;
	      index = rightIndex;
	    } else {
	      // Neither child is smaller. Exit.
	      return;
	    }
	  }
	}

	function compare(a, b) {
	  // Compare sort index first, then task id.
	  var diff = a.sortIndex - b.sortIndex;
	  return diff !== 0 ? diff : a.id - b.id;
	}

	// TODO: Use symbols?
	var ImmediatePriority = 1;
	var UserBlockingPriority = 2;
	var NormalPriority = 3;
	var LowPriority = 4;
	var IdlePriority = 5;

	function markTaskErrored(task, ms) {
	}

	/* eslint-disable no-var */
	// Math.pow(2, 30) - 1
	// 0b111111111111111111111111111111

	var maxSigned31BitInt = 1073741823; // Times out immediately

	var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

	var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
	var NORMAL_PRIORITY_TIMEOUT = 5000;
	var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

	var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap

	var taskQueue = [];
	var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

	var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
	var currentTask = null;
	var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.

	var isPerformingWork = false;
	var isHostCallbackScheduled = false;
	var isHostTimeoutScheduled = false;

	function advanceTimers(currentTime) {
	  // Check for tasks that are no longer delayed and add them to the queue.
	  var timer = peek(timerQueue);

	  while (timer !== null) {
	    if (timer.callback === null) {
	      // Timer was cancelled.
	      pop(timerQueue);
	    } else if (timer.startTime <= currentTime) {
	      // Timer fired. Transfer to the task queue.
	      pop(timerQueue);
	      timer.sortIndex = timer.expirationTime;
	      push(taskQueue, timer);
	    } else {
	      // Remaining timers are pending.
	      return;
	    }

	    timer = peek(timerQueue);
	  }
	}

	function handleTimeout(currentTime) {
	  isHostTimeoutScheduled = false;
	  advanceTimers(currentTime);

	  if (!isHostCallbackScheduled) {
	    if (peek(taskQueue) !== null) {
	      isHostCallbackScheduled = true;
	      requestHostCallback(flushWork);
	    } else {
	      var firstTimer = peek(timerQueue);

	      if (firstTimer !== null) {
	        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
	      }
	    }
	  }
	}

	function flushWork(hasTimeRemaining, initialTime) {


	  isHostCallbackScheduled = false;

	  if (isHostTimeoutScheduled) {
	    // We scheduled a timeout but it's no longer needed. Cancel it.
	    isHostTimeoutScheduled = false;
	    cancelHostTimeout();
	  }

	  isPerformingWork = true;
	  var previousPriorityLevel = currentPriorityLevel;

	  try {
	    var currentTime; if (enableProfiling) ; else {
	      // No catch in prod code path.
	      return workLoop(hasTimeRemaining, initialTime);
	    }
	  } finally {
	    currentTask = null;
	    currentPriorityLevel = previousPriorityLevel;
	    isPerformingWork = false;
	  }
	}

	function workLoop(hasTimeRemaining, initialTime) {
	  var currentTime = initialTime;
	  advanceTimers(currentTime);
	  currentTask = peek(taskQueue);

	  while (currentTask !== null && !(enableSchedulerDebugging )) {
	    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
	      // This currentTask hasn't expired, and we've reached the deadline.
	      break;
	    }

	    var callback = currentTask.callback;

	    if (typeof callback === 'function') {
	      currentTask.callback = null;
	      currentPriorityLevel = currentTask.priorityLevel;
	      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;

	      var continuationCallback = callback(didUserCallbackTimeout);
	      currentTime = exports.unstable_now();

	      if (typeof continuationCallback === 'function') {
	        currentTask.callback = continuationCallback;
	      } else {

	        if (currentTask === peek(taskQueue)) {
	          pop(taskQueue);
	        }
	      }

	      advanceTimers(currentTime);
	    } else {
	      pop(taskQueue);
	    }

	    currentTask = peek(taskQueue);
	  } // Return whether there's additional work


	  if (currentTask !== null) {
	    return true;
	  } else {
	    var firstTimer = peek(timerQueue);

	    if (firstTimer !== null) {
	      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
	    }

	    return false;
	  }
	}

	function unstable_runWithPriority(priorityLevel, eventHandler) {
	  switch (priorityLevel) {
	    case ImmediatePriority:
	    case UserBlockingPriority:
	    case NormalPriority:
	    case LowPriority:
	    case IdlePriority:
	      break;

	    default:
	      priorityLevel = NormalPriority;
	  }

	  var previousPriorityLevel = currentPriorityLevel;
	  currentPriorityLevel = priorityLevel;

	  try {
	    return eventHandler();
	  } finally {
	    currentPriorityLevel = previousPriorityLevel;
	  }
	}

	function unstable_next(eventHandler) {
	  var priorityLevel;

	  switch (currentPriorityLevel) {
	    case ImmediatePriority:
	    case UserBlockingPriority:
	    case NormalPriority:
	      // Shift down to normal priority
	      priorityLevel = NormalPriority;
	      break;

	    default:
	      // Anything lower than normal priority should remain at the current level.
	      priorityLevel = currentPriorityLevel;
	      break;
	  }

	  var previousPriorityLevel = currentPriorityLevel;
	  currentPriorityLevel = priorityLevel;

	  try {
	    return eventHandler();
	  } finally {
	    currentPriorityLevel = previousPriorityLevel;
	  }
	}

	function unstable_wrapCallback(callback) {
	  var parentPriorityLevel = currentPriorityLevel;
	  return function () {
	    // This is a fork of runWithPriority, inlined for performance.
	    var previousPriorityLevel = currentPriorityLevel;
	    currentPriorityLevel = parentPriorityLevel;

	    try {
	      return callback.apply(this, arguments);
	    } finally {
	      currentPriorityLevel = previousPriorityLevel;
	    }
	  };
	}

	function unstable_scheduleCallback(priorityLevel, callback, options) {
	  var currentTime = exports.unstable_now();
	  var startTime;

	  if (typeof options === 'object' && options !== null) {
	    var delay = options.delay;

	    if (typeof delay === 'number' && delay > 0) {
	      startTime = currentTime + delay;
	    } else {
	      startTime = currentTime;
	    }
	  } else {
	    startTime = currentTime;
	  }

	  var timeout;

	  switch (priorityLevel) {
	    case ImmediatePriority:
	      timeout = IMMEDIATE_PRIORITY_TIMEOUT;
	      break;

	    case UserBlockingPriority:
	      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
	      break;

	    case IdlePriority:
	      timeout = IDLE_PRIORITY_TIMEOUT;
	      break;

	    case LowPriority:
	      timeout = LOW_PRIORITY_TIMEOUT;
	      break;

	    case NormalPriority:
	    default:
	      timeout = NORMAL_PRIORITY_TIMEOUT;
	      break;
	  }

	  var expirationTime = startTime + timeout;
	  var newTask = {
	    id: taskIdCounter++,
	    callback: callback,
	    priorityLevel: priorityLevel,
	    startTime: startTime,
	    expirationTime: expirationTime,
	    sortIndex: -1
	  };

	  if (startTime > currentTime) {
	    // This is a delayed task.
	    newTask.sortIndex = startTime;
	    push(timerQueue, newTask);

	    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
	      // All tasks are delayed, and this is the task with the earliest delay.
	      if (isHostTimeoutScheduled) {
	        // Cancel an existing timeout.
	        cancelHostTimeout();
	      } else {
	        isHostTimeoutScheduled = true;
	      } // Schedule a timeout.


	      requestHostTimeout(handleTimeout, startTime - currentTime);
	    }
	  } else {
	    newTask.sortIndex = expirationTime;
	    push(taskQueue, newTask);
	    // wait until the next time we yield.


	    if (!isHostCallbackScheduled && !isPerformingWork) {
	      isHostCallbackScheduled = true;
	      requestHostCallback(flushWork);
	    }
	  }

	  return newTask;
	}

	function unstable_pauseExecution() {
	}

	function unstable_continueExecution() {

	  if (!isHostCallbackScheduled && !isPerformingWork) {
	    isHostCallbackScheduled = true;
	    requestHostCallback(flushWork);
	  }
	}

	function unstable_getFirstCallbackNode() {
	  return peek(taskQueue);
	}

	function unstable_cancelCallback(task) {
	  // remove from the queue because you can't remove arbitrary nodes from an
	  // array based heap, only the first one.)


	  task.callback = null;
	}

	function unstable_getCurrentPriorityLevel() {
	  return currentPriorityLevel;
	}

	var unstable_requestPaint = requestPaint;
	var unstable_Profiling =  null;

	exports.unstable_IdlePriority = IdlePriority;
	exports.unstable_ImmediatePriority = ImmediatePriority;
	exports.unstable_LowPriority = LowPriority;
	exports.unstable_NormalPriority = NormalPriority;
	exports.unstable_Profiling = unstable_Profiling;
	exports.unstable_UserBlockingPriority = UserBlockingPriority;
	exports.unstable_cancelCallback = unstable_cancelCallback;
	exports.unstable_continueExecution = unstable_continueExecution;
	exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
	exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
	exports.unstable_next = unstable_next;
	exports.unstable_pauseExecution = unstable_pauseExecution;
	exports.unstable_requestPaint = unstable_requestPaint;
	exports.unstable_runWithPriority = unstable_runWithPriority;
	exports.unstable_scheduleCallback = unstable_scheduleCallback;
	exports.unstable_wrapCallback = unstable_wrapCallback;
	  })();
	}
	}(scheduler_development));

	if ("development" === 'production') {
	  scheduler.exports = scheduler_production_min;
	} else {
	  scheduler.exports = scheduler_development;
	}

	/** @license React v17.0.2
	 * react-dom.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var aa$1=react.exports,m$1=objectAssign,r$1=scheduler.exports;function y$2(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return "Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!aa$1)throw Error(y$2(227));var ba$2=new Set,ca={};function da$2(a,b){ea$2(a,b);ea$2(a+"Capture",b);}
	function ea$2(a,b){ca[a]=b;for(a=0;a<b.length;a++)ba$2.add(b[a]);}
	var fa$1=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),ha$2=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ia$2=Object.prototype.hasOwnProperty,
	ja$1={},ka$1={};function la$2(a){if(ia$2.call(ka$1,a))return !0;if(ia$2.call(ja$1,a))return !1;if(ha$2.test(a))return ka$1[a]=!0;ja$1[a]=!0;return !1}function ma$2(a,b,c,d){if(null!==c&&0===c.type)return !1;switch(typeof b){case "function":case "symbol":return !0;case "boolean":if(d)return !1;if(null!==c)return !c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return "data-"!==a&&"aria-"!==a;default:return !1}}
	function na$2(a,b,c,d){if(null===b||"undefined"===typeof b||ma$2(a,b,c,d))return !0;if(d)return !1;if(null!==c)switch(c.type){case 3:return !b;case 4:return !1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return !1}function B$2(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g;}var D$2={};
	"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){D$2[a]=new B$2(a,0,!1,a,null,!1,!1);});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];D$2[b]=new B$2(b,1,!1,a[1],null,!1,!1);});["contentEditable","draggable","spellCheck","value"].forEach(function(a){D$2[a]=new B$2(a,2,!1,a.toLowerCase(),null,!1,!1);});
	["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){D$2[a]=new B$2(a,2,!1,a,null,!1,!1);});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){D$2[a]=new B$2(a,3,!1,a.toLowerCase(),null,!1,!1);});
	["checked","multiple","muted","selected"].forEach(function(a){D$2[a]=new B$2(a,3,!0,a,null,!1,!1);});["capture","download"].forEach(function(a){D$2[a]=new B$2(a,4,!1,a,null,!1,!1);});["cols","rows","size","span"].forEach(function(a){D$2[a]=new B$2(a,6,!1,a,null,!1,!1);});["rowSpan","start"].forEach(function(a){D$2[a]=new B$2(a,5,!1,a.toLowerCase(),null,!1,!1);});var oa$1=/[\-:]([a-z])/g;function pa$2(a){return a[1].toUpperCase()}
	"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(oa$1,
	pa$2);D$2[b]=new B$2(b,1,!1,a,null,!1,!1);});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(oa$1,pa$2);D$2[b]=new B$2(b,1,!1,a,"http://www.w3.org/1999/xlink",!1,!1);});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(oa$1,pa$2);D$2[b]=new B$2(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1,!1);});["tabIndex","crossOrigin"].forEach(function(a){D$2[a]=new B$2(a,1,!1,a.toLowerCase(),null,!1,!1);});
	D$2.xlinkHref=new B$2("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(a){D$2[a]=new B$2(a,1,!1,a.toLowerCase(),null,!0,!0);});
	function qa$1(a,b,c,d){var e=D$2.hasOwnProperty(b)?D$2[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(na$2(b,c,e,d)&&(c=null),d||null===e?la$2(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))));}
	var ra$1=aa$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,sa$2=60103,ta$2=60106,ua$1=60107,wa$2=60108,xa$1=60114,ya$2=60109,za$1=60110,Aa$2=60112,Ba=60113,Ca$2=60120,Da=60115,Ea$1=60116,Fa$1=60121,Ga$1=60128,Ha$1=60129,Ia$2=60130,Ja$1=60131;
	if("function"===typeof Symbol&&Symbol.for){var E$1=Symbol.for;sa$2=E$1("react.element");ta$2=E$1("react.portal");ua$1=E$1("react.fragment");wa$2=E$1("react.strict_mode");xa$1=E$1("react.profiler");ya$2=E$1("react.provider");za$1=E$1("react.context");Aa$2=E$1("react.forward_ref");Ba=E$1("react.suspense");Ca$2=E$1("react.suspense_list");Da=E$1("react.memo");Ea$1=E$1("react.lazy");Fa$1=E$1("react.block");E$1("react.scope");Ga$1=E$1("react.opaque.id");Ha$1=E$1("react.debug_trace_mode");Ia$2=E$1("react.offscreen");Ja$1=E$1("react.legacy_hidden");}
	var Ka$1="function"===typeof Symbol&&Symbol.iterator;function La$1(a){if(null===a||"object"!==typeof a)return null;a=Ka$1&&a[Ka$1]||a["@@iterator"];return "function"===typeof a?a:null}var Ma$1;function Na$1(a){if(void 0===Ma$1)try{throw Error();}catch(c){var b=c.stack.trim().match(/\n( *(at )?)/);Ma$1=b&&b[1]||"";}return "\n"+Ma$1+a}var Oa$1=!1;
	function Pa$2(a,b){if(!a||Oa$1)return "";Oa$1=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,"props",{set:function(){throw Error();}}),"object"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[]);}catch(k){var d=k;}Reflect.construct(a,[],b);}else {try{b.call();}catch(k){d=k;}a.call(b.prototype);}else {try{throw Error();}catch(k){d=k;}a();}}catch(k){if(k&&d&&"string"===typeof k.stack){for(var e=k.stack.split("\n"),
	f=d.stack.split("\n"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h])return "\n"+e[g].replace(" at new "," at ");while(1<=g&&0<=h)}break}}}finally{Oa$1=!1,Error.prepareStackTrace=c;}return (a=a?a.displayName||a.name:"")?Na$1(a):""}
	function Qa$1(a){switch(a.tag){case 5:return Na$1(a.type);case 16:return Na$1("Lazy");case 13:return Na$1("Suspense");case 19:return Na$1("SuspenseList");case 0:case 2:case 15:return a=Pa$2(a.type,!1),a;case 11:return a=Pa$2(a.type.render,!1),a;case 22:return a=Pa$2(a.type._render,!1),a;case 1:return a=Pa$2(a.type,!0),a;default:return ""}}
	function Ra$2(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case ua$1:return "Fragment";case ta$2:return "Portal";case xa$1:return "Profiler";case wa$2:return "StrictMode";case Ba:return "Suspense";case Ca$2:return "SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case za$1:return (a.displayName||"Context")+".Consumer";case ya$2:return (a._context.displayName||"Context")+".Provider";case Aa$2:var b=a.render;b=b.displayName||b.name||"";
	return a.displayName||(""!==b?"ForwardRef("+b+")":"ForwardRef");case Da:return Ra$2(a.type);case Fa$1:return Ra$2(a._render);case Ea$1:b=a._payload;a=a._init;try{return Ra$2(a(b))}catch(c){}}return null}function Sa$2(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;default:return ""}}function Ta$2(a){var b=a.type;return (a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
	function Ua$1(a){var b=Ta$2(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a);}});Object.defineProperty(a,b,{enumerable:c.enumerable});return {getValue:function(){return d},setValue:function(a){d=""+a;},stopTracking:function(){a._valueTracker=
	null;delete a[b];}}}}function Va$2(a){a._valueTracker||(a._valueTracker=Ua$1(a));}function Wa$1(a){if(!a)return !1;var b=a._valueTracker;if(!b)return !0;var c=b.getValue();var d="";a&&(d=Ta$2(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa$2(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}
	function Ya$2(a,b){var c=b.checked;return m$1({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za$1(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa$2(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value};}function $a$1(a,b){b=b.checked;null!=b&&qa$1(a,"checked",b,!1);}
	function ab$1(a,b){$a$1(a,b);var c=Sa$2(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c;}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?bb$1(a,b.type,c):b.hasOwnProperty("defaultValue")&&bb$1(a,b.type,Sa$2(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked);}
	function cb$1(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b;}c=a.name;""!==c&&(a.name="");a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c);}
	function bb$1(a,b,c){if("number"!==b||Xa$2(a.ownerDocument)!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c);}function db$1(a){var b="";aa$1.Children.forEach(a,function(a){null!=a&&(b+=a);});return b}function eb(a,b){a=m$1({children:void 0},b);if(b=db$1(b.children))a.children=b;return a}
	function fb$1(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0);}else {c=""+Sa$2(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e]);}null!==b&&(b.selected=!0);}}
	function gb$1(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(y$2(91));return m$1({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function hb$1(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(y$2(92));if(Array.isArray(c)){if(!(1>=c.length))throw Error(y$2(93));c=c[0];}b=c;}null==b&&(b="");c=b;}a._wrapperState={initialValue:Sa$2(c)};}
	function ib$1(a,b){var c=Sa$2(b.value),d=Sa$2(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d);}function jb$1(a){var b=a.textContent;b===a._wrapperState.initialValue&&""!==b&&null!==b&&(a.value=b);}var kb$1={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};
	function lb$1(a){switch(a){case "svg":return "http://www.w3.org/2000/svg";case "math":return "http://www.w3.org/1998/Math/MathML";default:return "http://www.w3.org/1999/xhtml"}}function mb$1(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?lb$1(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
	var nb$1,ob$1=function(a){return "undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)});}:a}(function(a,b){if(a.namespaceURI!==kb$1.svg||"innerHTML"in a)a.innerHTML=b;else {nb$1=nb$1||document.createElement("div");nb$1.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=nb$1.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild);}});
	function pb$1(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b;}
	var qb$1={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,
	floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},rb$1=["Webkit","ms","Moz","O"];Object.keys(qb$1).forEach(function(a){rb$1.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);qb$1[b]=qb$1[a];});});function sb$1(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||qb$1.hasOwnProperty(a)&&qb$1[a]?(""+b).trim():b+"px"}
	function tb$1(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=sb$1(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e;}}var ub$1=m$1({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
	function vb$1(a,b){if(b){if(ub$1[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(y$2(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(y$2(60));if(!("object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML))throw Error(y$2(61));}if(null!=b.style&&"object"!==typeof b.style)throw Error(y$2(62));}}
	function wb$1(a,b){if(-1===a.indexOf("-"))return "string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return !1;default:return !0}}function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb$1=null,zb$1=null,Ab$1=null;
	function Bb$1(a){if(a=Cb$1(a)){if("function"!==typeof yb$1)throw Error(y$2(280));var b=a.stateNode;b&&(b=Db$1(b),yb$1(a.stateNode,a.type,b));}}function Eb$1(a){zb$1?Ab$1?Ab$1.push(a):Ab$1=[a]:zb$1=a;}function Fb$1(){if(zb$1){var a=zb$1,b=Ab$1;Ab$1=zb$1=null;Bb$1(a);if(b)for(a=0;a<b.length;a++)Bb$1(b[a]);}}function Gb$1(a,b){return a(b)}function Hb$1(a,b,c,d,e){return a(b,c,d,e)}function Ib$1(){}var Jb$1=Gb$1,Kb$1=!1,Lb$1=!1;function Mb$1(){if(null!==zb$1||null!==Ab$1)Ib$1(),Fb$1();}
	function Nb$1(a,b,c){if(Lb$1)return a(b,c);Lb$1=!0;try{return Jb$1(a,b,c)}finally{Lb$1=!1,Mb$1();}}
	function Ob$1(a,b){var c=a.stateNode;if(null===c)return null;var d=Db$1(c);if(null===d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":case "onMouseEnter":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1;}if(a)return null;if(c&&"function"!==
	typeof c)throw Error(y$2(231,b,typeof c));return c}var Pb$1=!1;if(fa$1)try{var Qb$1={};Object.defineProperty(Qb$1,"passive",{get:function(){Pb$1=!0;}});window.addEventListener("test",Qb$1,Qb$1);window.removeEventListener("test",Qb$1,Qb$1);}catch(a){Pb$1=!1;}function Rb$1(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l);}catch(n){this.onError(n);}}var Sb$1=!1,Tb$1=null,Ub$1=!1,Vb$1=null,Wb$1={onError:function(a){Sb$1=!0;Tb$1=a;}};function Xb$1(a,b,c,d,e,f,g,h,k){Sb$1=!1;Tb$1=null;Rb$1.apply(Wb$1,arguments);}
	function Yb$1(a,b,c,d,e,f,g,h,k){Xb$1.apply(this,arguments);if(Sb$1){if(Sb$1){var l=Tb$1;Sb$1=!1;Tb$1=null;}else throw Error(y$2(198));Ub$1||(Ub$1=!0,Vb$1=l);}}function Zb$1(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else {a=b;do b=a,0!==(b.flags&1026)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function $b$1(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function ac$2(a){if(Zb$1(a)!==a)throw Error(y$2(188));}
	function bc$1(a){var b=a.alternate;if(!b){b=Zb$1(a);if(null===b)throw Error(y$2(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return ac$2(e),a;if(f===d)return ac$2(e),b;f=f.sibling;}throw Error(y$2(188));}if(c.return!==d.return)c=e,d=f;else {for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling;}if(!g){for(h=f.child;h;){if(h===
	c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling;}if(!g)throw Error(y$2(189));}}if(c.alternate!==d)throw Error(y$2(190));}if(3!==c.tag)throw Error(y$2(188));return c.stateNode.current===c?a:b}function cc$2(a){a=bc$1(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else {if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return;}b.sibling.return=b.return;b=b.sibling;}}return null}
	function dc$1(a,b){for(var c=a.alternate;null!==b;){if(b===a||b===c)return !0;b=b.return;}return !1}var ec$1,fc$1,gc$1,hc$2,ic$2=!1,jc$1=[],kc$2=null,lc$2=null,mc$1=null,nc$2=new Map,oc$2=new Map,pc$1=[],qc$2="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
	function rc$2(a,b,c,d,e){return {blockedOn:a,domEventName:b,eventSystemFlags:c|16,nativeEvent:e,targetContainers:[d]}}function sc$2(a,b){switch(a){case "focusin":case "focusout":kc$2=null;break;case "dragenter":case "dragleave":lc$2=null;break;case "mouseover":case "mouseout":mc$1=null;break;case "pointerover":case "pointerout":nc$2.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":oc$2.delete(b.pointerId);}}
	function tc$2(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a=rc$2(b,c,d,e,f),null!==b&&(b=Cb$1(b),null!==b&&fc$1(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}
	function uc$2(a,b,c,d,e){switch(b){case "focusin":return kc$2=tc$2(kc$2,a,b,c,d,e),!0;case "dragenter":return lc$2=tc$2(lc$2,a,b,c,d,e),!0;case "mouseover":return mc$1=tc$2(mc$1,a,b,c,d,e),!0;case "pointerover":var f=e.pointerId;nc$2.set(f,tc$2(nc$2.get(f)||null,a,b,c,d,e));return !0;case "gotpointercapture":return f=e.pointerId,oc$2.set(f,tc$2(oc$2.get(f)||null,a,b,c,d,e)),!0}return !1}
	function vc$2(a){var b=wc$1(a.target);if(null!==b){var c=Zb$1(b);if(null!==c)if(b=c.tag,13===b){if(b=$b$1(c),null!==b){a.blockedOn=b;hc$2(a.lanePriority,function(){r$1.unstable_runWithPriority(a.priority,function(){gc$1(c);});});return}}else if(3===b&&c.stateNode.hydrate){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null;}
	function xc$2(a){if(null!==a.blockedOn)return !1;for(var b=a.targetContainers;0<b.length;){var c=yc$1(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null!==c)return b=Cb$1(c),null!==b&&fc$1(b),a.blockedOn=c,!1;b.shift();}return !0}function zc$1(a,b,c){xc$2(a)&&c.delete(b);}
	function Ac$1(){for(ic$2=!1;0<jc$1.length;){var a=jc$1[0];if(null!==a.blockedOn){a=Cb$1(a.blockedOn);null!==a&&ec$1(a);break}for(var b=a.targetContainers;0<b.length;){var c=yc$1(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null!==c){a.blockedOn=c;break}b.shift();}null===a.blockedOn&&jc$1.shift();}null!==kc$2&&xc$2(kc$2)&&(kc$2=null);null!==lc$2&&xc$2(lc$2)&&(lc$2=null);null!==mc$1&&xc$2(mc$1)&&(mc$1=null);nc$2.forEach(zc$1);oc$2.forEach(zc$1);}
	function Bc$1(a,b){a.blockedOn===b&&(a.blockedOn=null,ic$2||(ic$2=!0,r$1.unstable_scheduleCallback(r$1.unstable_NormalPriority,Ac$1)));}
	function Cc$1(a){function b(b){return Bc$1(b,a)}if(0<jc$1.length){Bc$1(jc$1[0],a);for(var c=1;c<jc$1.length;c++){var d=jc$1[c];d.blockedOn===a&&(d.blockedOn=null);}}null!==kc$2&&Bc$1(kc$2,a);null!==lc$2&&Bc$1(lc$2,a);null!==mc$1&&Bc$1(mc$1,a);nc$2.forEach(b);oc$2.forEach(b);for(c=0;c<pc$1.length;c++)d=pc$1[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<pc$1.length&&(c=pc$1[0],null===c.blockedOn);)vc$2(c),null===c.blockedOn&&pc$1.shift();}
	function Dc$1(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var Ec$1={animationend:Dc$1("Animation","AnimationEnd"),animationiteration:Dc$1("Animation","AnimationIteration"),animationstart:Dc$1("Animation","AnimationStart"),transitionend:Dc$1("Transition","TransitionEnd")},Fc$2={},Gc$1={};
	fa$1&&(Gc$1=document.createElement("div").style,"AnimationEvent"in window||(delete Ec$1.animationend.animation,delete Ec$1.animationiteration.animation,delete Ec$1.animationstart.animation),"TransitionEvent"in window||delete Ec$1.transitionend.transition);function Hc$1(a){if(Fc$2[a])return Fc$2[a];if(!Ec$1[a])return a;var b=Ec$1[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Gc$1)return Fc$2[a]=b[c];return a}
	var Ic$2=Hc$1("animationend"),Jc$1=Hc$1("animationiteration"),Kc$1=Hc$1("animationstart"),Lc$1=Hc$1("transitionend"),Mc$1=new Map,Nc$1=new Map,Oc$2=["abort","abort",Ic$2,"animationEnd",Jc$1,"animationIteration",Kc$1,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart",
	"lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Lc$1,"transitionEnd","waiting","waiting"];function Pc$2(a,b){for(var c=0;c<a.length;c+=2){var d=a[c],e=a[c+1];e="on"+(e[0].toUpperCase()+e.slice(1));Nc$1.set(d,b);Mc$1.set(d,e);da$2(e,[d]);}}var Qc$1=r$1.unstable_now;Qc$1();var F$2=8;
	function Rc$2(a){if(0!==(1&a))return F$2=15,1;if(0!==(2&a))return F$2=14,2;if(0!==(4&a))return F$2=13,4;var b=24&a;if(0!==b)return F$2=12,b;if(0!==(a&32))return F$2=11,32;b=192&a;if(0!==b)return F$2=10,b;if(0!==(a&256))return F$2=9,256;b=3584&a;if(0!==b)return F$2=8,b;if(0!==(a&4096))return F$2=7,4096;b=4186112&a;if(0!==b)return F$2=6,b;b=62914560&a;if(0!==b)return F$2=5,b;if(a&67108864)return F$2=4,67108864;if(0!==(a&134217728))return F$2=3,134217728;b=805306368&a;if(0!==b)return F$2=2,b;if(0!==(1073741824&a))return F$2=1,1073741824;
	F$2=8;return a}function Sc$2(a){switch(a){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}function Tc$2(a){switch(a){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(y$2(358,a));}}
	function Uc$2(a,b){var c=a.pendingLanes;if(0===c)return F$2=0;var d=0,e=0,f=a.expiredLanes,g=a.suspendedLanes,h=a.pingedLanes;if(0!==f)d=f,e=F$2=15;else if(f=c&134217727,0!==f){var k=f&~g;0!==k?(d=Rc$2(k),e=F$2):(h&=f,0!==h&&(d=Rc$2(h),e=F$2));}else f=c&~g,0!==f?(d=Rc$2(f),e=F$2):0!==h&&(d=Rc$2(h),e=F$2);if(0===d)return 0;d=31-Vc$1(d);d=c&((0>d?0:1<<d)<<1)-1;if(0!==b&&b!==d&&0===(b&g)){Rc$2(b);if(e<=F$2)return b;F$2=e;}b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-Vc$1(b),e=1<<c,d|=a[c],b&=~e;return d}
	function Wc$1(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function Xc$1(a,b){switch(a){case 15:return 1;case 14:return 2;case 12:return a=Yc$1(24&~b),0===a?Xc$1(10,b):a;case 10:return a=Yc$1(192&~b),0===a?Xc$1(8,b):a;case 8:return a=Yc$1(3584&~b),0===a&&(a=Yc$1(4186112&~b),0===a&&(a=512)),a;case 2:return b=Yc$1(805306368&~b),0===b&&(b=268435456),b}throw Error(y$2(358,a));}function Yc$1(a){return a&-a}function Zc$2(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}
	function $c$2(a,b,c){a.pendingLanes|=b;var d=b-1;a.suspendedLanes&=d;a.pingedLanes&=d;a=a.eventTimes;b=31-Vc$1(b);a[b]=c;}var Vc$1=Math.clz32?Math.clz32:ad$1,bd$1=Math.log,cd$1=Math.LN2;function ad$1(a){return 0===a?32:31-(bd$1(a)/cd$1|0)|0}var dd$1=r$1.unstable_UserBlockingPriority,ed$1=r$1.unstable_runWithPriority,fd$1=!0;function gd$1(a,b,c,d){Kb$1||Ib$1();var e=hd$1,f=Kb$1;Kb$1=!0;try{Hb$1(e,a,b,c,d);}finally{(Kb$1=f)||Mb$1();}}function id$2(a,b,c,d){ed$1(dd$1,hd$1.bind(null,a,b,c,d));}
	function hd$1(a,b,c,d){if(fd$1){var e;if((e=0===(b&4))&&0<jc$1.length&&-1<qc$2.indexOf(a))a=rc$2(null,a,b,c,d),jc$1.push(a);else {var f=yc$1(a,b,c,d);if(null===f)e&&sc$2(a,d);else {if(e){if(-1<qc$2.indexOf(a)){a=rc$2(f,a,b,c,d);jc$1.push(a);return}if(uc$2(f,a,b,c,d))return;sc$2(a,d);}jd$1(a,b,d,null,c);}}}}
	function yc$1(a,b,c,d){var e=xb(d);e=wc$1(e);if(null!==e){var f=Zb$1(e);if(null===f)e=null;else {var g=f.tag;if(13===g){e=$b$1(f);if(null!==e)return e;e=null;}else if(3===g){if(f.stateNode.hydrate)return 3===f.tag?f.stateNode.containerInfo:null;e=null;}else f!==e&&(e=null);}}jd$1(a,b,d,e,c);return null}var kd$1=null,ld$1=null,md$1=null;
	function nd$1(){if(md$1)return md$1;var a,b=ld$1,c=b.length,d,e="value"in kd$1?kd$1.value:kd$1.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md$1=e.slice(a,1<d?1-d:void 0)}function od$1(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd$1(){return !0}function qd$1(){return !1}
	function rd$1(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd$1:qd$1;this.isPropagationStopped=qd$1;return this}m$1(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&
	(a.returnValue=!1),this.isDefaultPrevented=pd$1);},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd$1);},persist:function(){},isPersistent:pd$1});return b}
	var sd$1={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td$1=rd$1(sd$1),ud$1=m$1({},sd$1,{view:0,detail:0}),vd$1=rd$1(ud$1),wd$1,xd$1,yd$1,Ad$1=m$1({},ud$1,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd$1,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if("movementX"in
	a)return a.movementX;a!==yd$1&&(yd$1&&"mousemove"===a.type?(wd$1=a.screenX-yd$1.screenX,xd$1=a.screenY-yd$1.screenY):xd$1=wd$1=0,yd$1=a);return wd$1},movementY:function(a){return "movementY"in a?a.movementY:xd$1}}),Bd$1=rd$1(Ad$1),Cd$1=m$1({},Ad$1,{dataTransfer:0}),Dd$1=rd$1(Cd$1),Ed$1=m$1({},ud$1,{relatedTarget:0}),Fd$1=rd$1(Ed$1),Gd$1=m$1({},sd$1,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd$1=rd$1(Gd$1),Id$1=m$1({},sd$1,{clipboardData:function(a){return "clipboardData"in a?a.clipboardData:window.clipboardData}}),Jd$1=rd$1(Id$1),Kd$1=m$1({},sd$1,{data:0}),Ld$1=rd$1(Kd$1),Md$1={Esc:"Escape",
	Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Nd$1={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",
	119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Od$1={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pd$1(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od$1[a])?!!b[a]:!1}function zd$1(){return Pd$1}
	var Qd$1=m$1({},ud$1,{key:function(a){if(a.key){var b=Md$1[a.key]||a.key;if("Unidentified"!==b)return b}return "keypress"===a.type?(a=od$1(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?Nd$1[a.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd$1,charCode:function(a){return "keypress"===a.type?od$1(a):0},keyCode:function(a){return "keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return "keypress"===
	a.type?od$1(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),Rd$1=rd$1(Qd$1),Sd$1=m$1({},Ad$1,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td$1=rd$1(Sd$1),Ud$1=m$1({},ud$1,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd$1}),Vd$1=rd$1(Ud$1),Wd=m$1({},sd$1,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd$1(Wd),Yd=m$1({},Ad$1,{deltaX:function(a){return "deltaX"in a?a.deltaX:"wheelDeltaX"in a?-a.wheelDeltaX:0},
	deltaY:function(a){return "deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd$1(Yd),$d=[9,13,27,32],ae$1=fa$1&&"CompositionEvent"in window,be$1=null;fa$1&&"documentMode"in document&&(be$1=document.documentMode);var ce$1=fa$1&&"TextEvent"in window&&!be$1,de$1=fa$1&&(!ae$1||be$1&&8<be$1&&11>=be$1),ee$1=String.fromCharCode(32),fe$1=!1;
	function ge$1(a,b){switch(a){case "keyup":return -1!==$d.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "focusout":return !0;default:return !1}}function he$1(a){a=a.detail;return "object"===typeof a&&"data"in a?a.data:null}var ie$1=!1;function je$1(a,b){switch(a){case "compositionend":return he$1(b);case "keypress":if(32!==b.which)return null;fe$1=!0;return ee$1;case "textInput":return a=b.data,a===ee$1&&fe$1?null:a;default:return null}}
	function ke$1(a,b){if(ie$1)return "compositionend"===a||!ae$1&&ge$1(a,b)?(a=nd$1(),md$1=ld$1=kd$1=null,ie$1=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return de$1&&"ko"!==b.locale?null:b.data;default:return null}}
	var le$1={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me$1(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return "input"===b?!!le$1[a.type]:"textarea"===b?!0:!1}function ne$1(a,b,c,d){Eb$1(d);b=oe$1(b,"onChange");0<b.length&&(c=new td$1("onChange","change",null,c,d),a.push({event:c,listeners:b}));}var pe$1=null,qe$1=null;function re$1(a){se$1(a,0);}function te$1(a){var b=ue$1(a);if(Wa$1(b))return a}
	function ve$1(a,b){if("change"===a)return b}var we$1=!1;if(fa$1){var xe$1;if(fa$1){var ye$1="oninput"in document;if(!ye$1){var ze$1=document.createElement("div");ze$1.setAttribute("oninput","return;");ye$1="function"===typeof ze$1.oninput;}xe$1=ye$1;}else xe$1=!1;we$1=xe$1&&(!document.documentMode||9<document.documentMode);}function Ae$1(){pe$1&&(pe$1.detachEvent("onpropertychange",Be$1),qe$1=pe$1=null);}function Be$1(a){if("value"===a.propertyName&&te$1(qe$1)){var b=[];ne$1(b,qe$1,a,xb(a));a=re$1;if(Kb$1)a(b);else {Kb$1=!0;try{Gb$1(a,b);}finally{Kb$1=!1,Mb$1();}}}}
	function Ce$1(a,b,c){"focusin"===a?(Ae$1(),pe$1=b,qe$1=c,pe$1.attachEvent("onpropertychange",Be$1)):"focusout"===a&&Ae$1();}function De$1(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return te$1(qe$1)}function Ee$1(a,b){if("click"===a)return te$1(b)}function Fe$1(a,b){if("input"===a||"change"===a)return te$1(b)}function Ge$1(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He$1="function"===typeof Object.is?Object.is:Ge$1,Ie$1=Object.prototype.hasOwnProperty;
	function Je$1(a,b){if(He$1(a,b))return !0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return !1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return !1;for(d=0;d<c.length;d++)if(!Ie$1.call(b,c[d])||!He$1(a[c[d]],b[c[d]]))return !1;return !0}function Ke$1(a){for(;a&&a.firstChild;)a=a.firstChild;return a}
	function Le$1(a,b){var c=Ke$1(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return {node:c,offset:b-a};a=d;}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode;}c=void 0;}c=Ke$1(c);}}function Me$1(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Me$1(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}
	function Ne$1(){for(var a=window,b=Xa$2();b instanceof a.HTMLIFrameElement;){try{var c="string"===typeof b.contentWindow.location.href;}catch(d){c=!1;}if(c)a=b.contentWindow;else break;b=Xa$2(a.document);}return b}function Oe$1(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}
	var Pe$1=fa$1&&"documentMode"in document&&11>=document.documentMode,Qe$1=null,Re$1=null,Se$1=null,Te$1=!1;
	function Ue$1(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te$1||null==Qe$1||Qe$1!==Xa$2(d)||(d=Qe$1,"selectionStart"in d&&Oe$1(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se$1&&Je$1(Se$1,d)||(Se$1=d,d=oe$1(Re$1,"onSelect"),0<d.length&&(b=new td$1("onSelect","select",null,b,c),a.push({event:b,listeners:d}),b.target=Qe$1)));}
	Pc$2("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),
	0);Pc$2("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1);Pc$2(Oc$2,2);for(var Ve$1="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),We$1=0;We$1<Ve$1.length;We$1++)Nc$1.set(Ve$1[We$1],0);ea$2("onMouseEnter",["mouseout","mouseover"]);
	ea$2("onMouseLeave",["mouseout","mouseover"]);ea$2("onPointerEnter",["pointerout","pointerover"]);ea$2("onPointerLeave",["pointerout","pointerover"]);da$2("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));da$2("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));da$2("onBeforeInput",["compositionend","keypress","textInput","paste"]);da$2("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));
	da$2("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));da$2("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Xe$1="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ye$1=new Set("cancel close invalid load scroll toggle".split(" ").concat(Xe$1));
	function Ze$1(a,b,c){var d=a.type||"unknown-event";a.currentTarget=c;Yb$1(d,b,void 0,a);a.currentTarget=null;}
	function se$1(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;Ze$1(e,h,l);f=k;}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;Ze$1(e,h,l);f=k;}}}if(Ub$1)throw a=Vb$1,Ub$1=!1,Vb$1=null,a;}
	function G$1(a,b){var c=$e$1(b),d=a+"__bubble";c.has(d)||(af(b,a,2,!1),c.add(d));}var bf="_reactListening"+Math.random().toString(36).slice(2);function cf(a){a[bf]||(a[bf]=!0,ba$2.forEach(function(b){Ye$1.has(b)||df(b,!1,a,null);df(b,!0,a,null);}));}
	function df(a,b,c,d){var e=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,f=c;"selectionchange"===a&&9!==c.nodeType&&(f=c.ownerDocument);if(null!==d&&!b&&Ye$1.has(a)){if("scroll"!==a)return;e|=2;f=d;}var g=$e$1(f),h=a+"__"+(b?"capture":"bubble");g.has(h)||(b&&(e|=4),af(f,a,e,b),g.add(h));}
	function af(a,b,c,d){var e=Nc$1.get(b);switch(void 0===e?2:e){case 0:e=gd$1;break;case 1:e=id$2;break;default:e=hd$1;}c=e.bind(null,b,c,a);e=void 0;!Pb$1||"touchstart"!==b&&"touchmove"!==b&&"wheel"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1);}
	function jd$1(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return;}for(;null!==h;){g=wc$1(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode;}}d=d.return;}Nb$1(function(){var d=f,e=xb(c),g=[];
	a:{var h=Mc$1.get(a);if(void 0!==h){var k=td$1,x=a;switch(a){case "keypress":if(0===od$1(c))break a;case "keydown":case "keyup":k=Rd$1;break;case "focusin":x="focus";k=Fd$1;break;case "focusout":x="blur";k=Fd$1;break;case "beforeblur":case "afterblur":k=Fd$1;break;case "click":if(2===c.button)break a;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":k=Bd$1;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":k=
	Dd$1;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":k=Vd$1;break;case Ic$2:case Jc$1:case Kc$1:k=Hd$1;break;case Lc$1:k=Xd;break;case "scroll":k=vd$1;break;case "wheel":k=Zd;break;case "copy":case "cut":case "paste":k=Jd$1;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":k=Td$1;}var w=0!==(b&4),z=!w&&"scroll"===a,u=w?null!==h?h+"Capture":null:h;w=[];for(var t=d,q;null!==
	t;){q=t;var v=q.stateNode;5===q.tag&&null!==v&&(q=v,null!==u&&(v=Ob$1(t,u),null!=v&&w.push(ef(t,v,q))));if(z)break;t=t.return;}0<w.length&&(h=new k(h,x,null,c,e),g.push({event:h,listeners:w}));}}if(0===(b&7)){a:{h="mouseover"===a||"pointerover"===a;k="mouseout"===a||"pointerout"===a;if(h&&0===(b&16)&&(x=c.relatedTarget||c.fromElement)&&(wc$1(x)||x[ff]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(x=c.relatedTarget||c.toElement,k=d,x=x?wc$1(x):null,null!==
	x&&(z=Zb$1(x),x!==z||5!==x.tag&&6!==x.tag))x=null;}else k=null,x=d;if(k!==x){w=Bd$1;v="onMouseLeave";u="onMouseEnter";t="mouse";if("pointerout"===a||"pointerover"===a)w=Td$1,v="onPointerLeave",u="onPointerEnter",t="pointer";z=null==k?h:ue$1(k);q=null==x?h:ue$1(x);h=new w(v,t+"leave",k,c,e);h.target=z;h.relatedTarget=q;v=null;wc$1(e)===d&&(w=new w(u,t+"enter",x,c,e),w.target=q,w.relatedTarget=z,v=w);z=v;if(k&&x)b:{w=k;u=x;t=0;for(q=w;q;q=gf(q))t++;q=0;for(v=u;v;v=gf(v))q++;for(;0<t-q;)w=gf(w),t--;for(;0<q-t;)u=
	gf(u),q--;for(;t--;){if(w===u||null!==u&&w===u.alternate)break b;w=gf(w);u=gf(u);}w=null;}else w=null;null!==k&&hf(g,h,k,w,!1);null!==x&&null!==z&&hf(g,z,x,w,!0);}}}a:{h=d?ue$1(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if("select"===k||"input"===k&&"file"===h.type)var J=ve$1;else if(me$1(h))if(we$1)J=Fe$1;else {J=De$1;var K=Ce$1;}else (k=h.nodeName)&&"input"===k.toLowerCase()&&("checkbox"===h.type||"radio"===h.type)&&(J=Ee$1);if(J&&(J=J(a,d))){ne$1(g,J,c,e);break a}K&&K(a,h,d);"focusout"===a&&(K=h._wrapperState)&&
	K.controlled&&"number"===h.type&&bb$1(h,"number",h.value);}K=d?ue$1(d):window;switch(a){case "focusin":if(me$1(K)||"true"===K.contentEditable)Qe$1=K,Re$1=d,Se$1=null;break;case "focusout":Se$1=Re$1=Qe$1=null;break;case "mousedown":Te$1=!0;break;case "contextmenu":case "mouseup":case "dragend":Te$1=!1;Ue$1(g,c,e);break;case "selectionchange":if(Pe$1)break;case "keydown":case "keyup":Ue$1(g,c,e);}var Q;if(ae$1)b:{switch(a){case "compositionstart":var L="onCompositionStart";break b;case "compositionend":L="onCompositionEnd";break b;
	case "compositionupdate":L="onCompositionUpdate";break b}L=void 0;}else ie$1?ge$1(a,c)&&(L="onCompositionEnd"):"keydown"===a&&229===c.keyCode&&(L="onCompositionStart");L&&(de$1&&"ko"!==c.locale&&(ie$1||"onCompositionStart"!==L?"onCompositionEnd"===L&&ie$1&&(Q=nd$1()):(kd$1=e,ld$1="value"in kd$1?kd$1.value:kd$1.textContent,ie$1=!0)),K=oe$1(d,L),0<K.length&&(L=new Ld$1(L,a,null,c,e),g.push({event:L,listeners:K}),Q?L.data=Q:(Q=he$1(c),null!==Q&&(L.data=Q))));if(Q=ce$1?je$1(a,c):ke$1(a,c))d=oe$1(d,"onBeforeInput"),0<d.length&&(e=new Ld$1("onBeforeInput",
	"beforeinput",null,c,e),g.push({event:e,listeners:d}),e.data=Q);}se$1(g,b);});}function ef(a,b,c){return {instance:a,listener:b,currentTarget:c}}function oe$1(a,b){for(var c=b+"Capture",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Ob$1(a,c),null!=f&&d.unshift(ef(a,f,e)),f=Ob$1(a,b),null!=f&&d.push(ef(a,f,e)));a=a.return;}return d}function gf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}
	function hf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Ob$1(c,f),null!=k&&g.unshift(ef(c,k,h))):e||(k=Ob$1(c,f),null!=k&&g.push(ef(c,k,h))));c=c.return;}0!==g.length&&a.push({event:b,listeners:g});}function jf(){}var kf=null,lf=null;function mf(a,b){switch(a){case "button":case "input":case "select":case "textarea":return !!b.autoFocus}return !1}
	function nf(a,b){return "textarea"===a||"option"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}var of="function"===typeof setTimeout?setTimeout:void 0,pf="function"===typeof clearTimeout?clearTimeout:void 0;function qf(a){1===a.nodeType?a.textContent="":9===a.nodeType&&(a=a.body,null!=a&&(a.textContent=""));}
	function rf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break}return a}function sf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if("$"===c||"$!"===c||"$?"===c){if(0===b)return a;b--;}else "/$"===c&&b++;}a=a.previousSibling;}return null}var tf=0;function uf(a){return {$$typeof:Ga$1,toString:a,valueOf:a}}var vf=Math.random().toString(36).slice(2),wf="__reactFiber$"+vf,xf="__reactProps$"+vf,ff="__reactContainer$"+vf,yf="__reactEvents$"+vf;
	function wc$1(a){var b=a[wf];if(b)return b;for(var c=a.parentNode;c;){if(b=c[ff]||c[wf]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=sf(a);null!==a;){if(c=a[wf])return c;a=sf(a);}return b}a=c;c=a.parentNode;}return null}function Cb$1(a){a=a[wf]||a[ff];return !a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue$1(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(y$2(33));}function Db$1(a){return a[xf]||null}
	function $e$1(a){var b=a[yf];void 0===b&&(b=a[yf]=new Set);return b}var zf=[],Af=-1;function Bf(a){return {current:a}}function H$2(a){0>Af||(a.current=zf[Af],zf[Af]=null,Af--);}function I$1(a,b){Af++;zf[Af]=a.current;a.current=b;}var Cf={},M$2=Bf(Cf),N$2=Bf(!1),Df=Cf;
	function Ef(a,b){var c=a.type.contextTypes;if(!c)return Cf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function Ff(a){a=a.childContextTypes;return null!==a&&void 0!==a}function Gf(){H$2(N$2);H$2(M$2);}function Hf(a,b,c){if(M$2.current!==Cf)throw Error(y$2(168));I$1(M$2,b);I$1(N$2,c);}
	function If(a,b,c){var d=a.stateNode;a=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in a))throw Error(y$2(108,Ra$2(b)||"Unknown",e));return m$1({},c,d)}function Jf(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Cf;Df=M$2.current;I$1(M$2,a);I$1(N$2,N$2.current);return !0}function Kf(a,b,c){var d=a.stateNode;if(!d)throw Error(y$2(169));c?(a=If(a,b,Df),d.__reactInternalMemoizedMergedChildContext=a,H$2(N$2),H$2(M$2),I$1(M$2,a)):H$2(N$2);I$1(N$2,c);}
	var Lf=null,Mf=null,Nf=r$1.unstable_runWithPriority,Of=r$1.unstable_scheduleCallback,Pf=r$1.unstable_cancelCallback,Qf=r$1.unstable_shouldYield,Rf=r$1.unstable_requestPaint,Sf=r$1.unstable_now,Tf=r$1.unstable_getCurrentPriorityLevel,Uf=r$1.unstable_ImmediatePriority,Vf=r$1.unstable_UserBlockingPriority,Wf=r$1.unstable_NormalPriority,Xf=r$1.unstable_LowPriority,Yf=r$1.unstable_IdlePriority,Zf={},$f=void 0!==Rf?Rf:function(){},ag=null,bg=null,cg=!1,dg=Sf(),O$2=1E4>dg?Sf:function(){return Sf()-dg};
	function eg(){switch(Tf()){case Uf:return 99;case Vf:return 98;case Wf:return 97;case Xf:return 96;case Yf:return 95;default:throw Error(y$2(332));}}function fg(a){switch(a){case 99:return Uf;case 98:return Vf;case 97:return Wf;case 96:return Xf;case 95:return Yf;default:throw Error(y$2(332));}}function gg(a,b){a=fg(a);return Nf(a,b)}function hg(a,b,c){a=fg(a);return Of(a,b,c)}function ig(){if(null!==bg){var a=bg;bg=null;Pf(a);}jg();}
	function jg(){if(!cg&&null!==ag){cg=!0;var a=0;try{var b=ag;gg(99,function(){for(;a<b.length;a++){var c=b[a];do c=c(!0);while(null!==c)}});ag=null;}catch(c){throw null!==ag&&(ag=ag.slice(a+1)),Of(Uf,ig),c;}finally{cg=!1;}}}var kg=ra$1.ReactCurrentBatchConfig;function lg(a,b){if(a&&a.defaultProps){b=m$1({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}var mg=Bf(null),ng=null,og=null,pg=null;function qg(){pg=og=ng=null;}
	function rg(a){var b=mg.current;H$2(mg);a.type._context._currentValue=b;}function sg(a,b){for(;null!==a;){var c=a.alternate;if((a.childLanes&b)===b)if(null===c||(c.childLanes&b)===b)break;else c.childLanes|=b;else a.childLanes|=b,null!==c&&(c.childLanes|=b);a=a.return;}}function tg(a,b){ng=a;pg=og=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(ug=!0),a.firstContext=null);}
	function vg(a,b){if(pg!==a&&!1!==b&&0!==b){if("number"!==typeof b||1073741823===b)pg=a,b=1073741823;b={context:a,observedBits:b,next:null};if(null===og){if(null===ng)throw Error(y$2(308));og=b;ng.dependencies={lanes:0,firstContext:b,responders:null};}else og=og.next=b;}return a._currentValue}var wg=!1;function xg(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null};}
	function yg(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects});}function zg(a,b){return {eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}function Ag(a,b){a=a.updateQueue;if(null!==a){a=a.shared;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b;}}
	function Bg(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next;}while(null!==c);null===f?e=f=b:f=f.next=b;}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=
	b;c.lastBaseUpdate=b;}
	function Cg(a,b,c,d){var e=a.updateQueue;wg=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var n=a.alternate;if(null!==n){n=n.updateQueue;var A=n.lastBaseUpdate;A!==g&&(null===A?n.firstBaseUpdate=l:A.next=l,n.lastBaseUpdate=k);}}if(null!==f){A=e.baseState;g=0;n=l=k=null;do{h=f.lane;var p=f.eventTime;if((d&h)===h){null!==n&&(n=n.next={eventTime:p,lane:0,tag:f.tag,payload:f.payload,callback:f.callback,
	next:null});a:{var C=a,x=f;h=b;p=c;switch(x.tag){case 1:C=x.payload;if("function"===typeof C){A=C.call(p,A,h);break a}A=C;break a;case 3:C.flags=C.flags&-4097|64;case 0:C=x.payload;h="function"===typeof C?C.call(p,A,h):C;if(null===h||void 0===h)break a;A=m$1({},A,h);break a;case 2:wg=!0;}}null!==f.callback&&(a.flags|=32,h=e.effects,null===h?e.effects=[f]:h.push(f));}else p={eventTime:p,lane:h,tag:f.tag,payload:f.payload,callback:f.callback,next:null},null===n?(l=n=p,k=A):n=n.next=p,g|=h;f=f.next;if(null===
	f)if(h=e.shared.pending,null===h)break;else f=h.next,h.next=null,e.lastBaseUpdate=h,e.shared.pending=null;}while(1);null===n&&(k=A);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=n;Dg|=g;a.lanes=g;a.memoizedState=A;}}function Eg(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if("function"!==typeof e)throw Error(y$2(191,e));e.call(d);}}}var Fg=(new aa$1.Component).refs;
	function Gg(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:m$1({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c);}
	var Kg={isMounted:function(a){return (a=a._reactInternals)?Zb$1(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=Hg(),e=Ig(a),f=zg(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);Ag(a,f);Jg(a,e,d);},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=Hg(),e=Ig(a),f=zg(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);Ag(a,f);Jg(a,e,d);},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=Hg(),d=Ig(a),e=zg(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=
	b);Ag(a,e);Jg(a,d,c);}};function Lg(a,b,c,d,e,f,g){a=a.stateNode;return "function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Je$1(c,d)||!Je$1(e,f):!0}
	function Mg(a,b,c){var d=!1,e=Cf;var f=b.contextType;"object"===typeof f&&null!==f?f=vg(f):(e=Ff(b)?Df:M$2.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Ef(a,e):Cf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Kg;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
	function Ng(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Kg.enqueueReplaceState(b,b.state,null);}
	function Og(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=Fg;xg(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=vg(f):(f=Ff(b)?Df:M$2.current,e.context=Ef(a,f));Cg(a,c,e,d);e.state=a.memoizedState;f=b.getDerivedStateFromProps;"function"===typeof f&&(Gg(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||
	(b=e.state,"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Kg.enqueueReplaceState(e,e.state,null),Cg(a,c,e,d),e.state=a.memoizedState);"function"===typeof e.componentDidMount&&(a.flags|=4);}var Pg=Array.isArray;
	function Qg(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(y$2(309));var d=c.stateNode;}if(!d)throw Error(y$2(147,a));var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Fg&&(b=d.refs={});null===a?delete b[e]:b[e]=a;};b._stringRef=e;return b}if("string"!==typeof a)throw Error(y$2(284));if(!c._owner)throw Error(y$2(290,a));}return a}
	function Rg(a,b){if("textarea"!==a.type)throw Error(y$2(31,"[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b));}
	function Sg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.flags=8;}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Tg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags=2,
	c):d;b.flags=2;return c}function g(b){a&&null===b.alternate&&(b.flags=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Ug(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props),d.ref=Qg(a,b,c),d.return=a,d;d=Vg(c.type,c.key,c.props,null,a.mode,d);d.ref=Qg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=
	Wg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function n(a,b,c,d,f){if(null===b||7!==b.tag)return b=Xg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function A(a,b,c){if("string"===typeof b||"number"===typeof b)return b=Ug(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case sa$2:return c=Vg(b.type,b.key,b.props,null,a.mode,c),c.ref=Qg(a,null,b),c.return=a,c;case ta$2:return b=Wg(b,a.mode,c),b.return=a,b}if(Pg(b)||La$1(b))return b=Xg(b,
	a.mode,c,null),b.return=a,b;Rg(a,b);}return null}function p(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case sa$2:return c.key===e?c.type===ua$1?n(a,b,c.props.children,d,e):k(a,b,c,d):null;case ta$2:return c.key===e?l(a,b,c,d):null}if(Pg(c)||La$1(c))return null!==e?null:n(a,b,c,d,null);Rg(a,c);}return null}function C(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=a.get(c)||
	null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case sa$2:return a=a.get(null===d.key?c:d.key)||null,d.type===ua$1?n(b,a,d.props.children,e,d.key):k(b,a,d,e);case ta$2:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Pg(d)||La$1(d))return a=a.get(c)||null,n(b,a,d,e,null);Rg(b,d);}return null}function x(e,g,h,k){for(var l=null,t=null,u=g,z=g=0,q=null;null!==u&&z<h.length;z++){u.index>z?(q=u,u=null):q=u.sibling;var n=p(e,u,h[z],k);if(null===n){null===u&&(u=q);break}a&&u&&null===
	n.alternate&&b(e,u);g=f(n,g,z);null===t?l=n:t.sibling=n;t=n;u=q;}if(z===h.length)return c(e,u),l;if(null===u){for(;z<h.length;z++)u=A(e,h[z],k),null!==u&&(g=f(u,g,z),null===t?l=u:t.sibling=u,t=u);return l}for(u=d(e,u);z<h.length;z++)q=C(u,e,z,h[z],k),null!==q&&(a&&null!==q.alternate&&u.delete(null===q.key?z:q.key),g=f(q,g,z),null===t?l=q:t.sibling=q,t=q);a&&u.forEach(function(a){return b(e,a)});return l}function w(e,g,h,k){var l=La$1(h);if("function"!==typeof l)throw Error(y$2(150));h=l.call(h);if(null==
	h)throw Error(y$2(151));for(var t=l=null,u=g,z=g=0,q=null,n=h.next();null!==u&&!n.done;z++,n=h.next()){u.index>z?(q=u,u=null):q=u.sibling;var w=p(e,u,n.value,k);if(null===w){null===u&&(u=q);break}a&&u&&null===w.alternate&&b(e,u);g=f(w,g,z);null===t?l=w:t.sibling=w;t=w;u=q;}if(n.done)return c(e,u),l;if(null===u){for(;!n.done;z++,n=h.next())n=A(e,n.value,k),null!==n&&(g=f(n,g,z),null===t?l=n:t.sibling=n,t=n);return l}for(u=d(e,u);!n.done;z++,n=h.next())n=C(u,e,z,n.value,k),null!==n&&(a&&null!==n.alternate&&
	u.delete(null===n.key?z:n.key),g=f(n,g,z),null===t?l=n:t.sibling=n,t=n);a&&u.forEach(function(a){return b(e,a)});return l}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===ua$1&&null===f.key;k&&(f=f.props.children);var l="object"===typeof f&&null!==f;if(l)switch(f.$$typeof){case sa$2:a:{l=f.key;for(k=d;null!==k;){if(k.key===l){switch(k.tag){case 7:if(f.type===ua$1){c(a,k.sibling);d=e(k,f.props.children);d.return=a;a=d;break a}break;default:if(k.elementType===f.type){c(a,k.sibling);
	d=e(k,f.props);d.ref=Qg(a,k,f);d.return=a;a=d;break a}}c(a,k);break}else b(a,k);k=k.sibling;}f.type===ua$1?(d=Xg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Vg(f.type,f.key,f.props,null,a.mode,h),h.ref=Qg(a,d,f),h.return=a,a=h);}return g(a);case ta$2:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else {c(a,d);break}else b(a,d);d=d.sibling;}d=
	Wg(f,a.mode,h);d.return=a;a=d;}return g(a)}if("string"===typeof f||"number"===typeof f)return f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):(c(a,d),d=Ug(f,a.mode,h),d.return=a,a=d),g(a);if(Pg(f))return x(a,d,f,h);if(La$1(f))return w(a,d,f,h);l&&Rg(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 1:case 22:case 0:case 11:case 15:throw Error(y$2(152,Ra$2(a.type)||"Component"));}return c(a,d)}}var Yg=Sg(!0),Zg=Sg(!1),$g={},ah$1=Bf($g),bh=Bf($g),ch=Bf($g);
	function dh$1(a){if(a===$g)throw Error(y$2(174));return a}function eh(a,b){I$1(ch,b);I$1(bh,a);I$1(ah$1,$g);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:mb$1(null,"");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=mb$1(b,a);}H$2(ah$1);I$1(ah$1,b);}function fh$1(){H$2(ah$1);H$2(bh);H$2(ch);}function gh(a){dh$1(ch.current);var b=dh$1(ah$1.current);var c=mb$1(b,a.type);b!==c&&(I$1(bh,a),I$1(ah$1,c));}function hh$1(a){bh.current===a&&(H$2(ah$1),H$2(bh));}var P$1=Bf(0);
	function ih(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||"$?"===c.data||"$!"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&64))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return;}b.sibling.return=b.return;b=b.sibling;}return null}var jh=null,kh=null,lh$1=!1;
	function mh$1(a,b){var c=nh(5,null,null,0);c.elementType="DELETED";c.type="DELETED";c.stateNode=b;c.return=a;c.flags=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c;}function oh(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;case 13:return !1;default:return !1}}
	function ph(a){if(lh$1){var b=kh;if(b){var c=b;if(!oh(a,b)){b=rf(c.nextSibling);if(!b||!oh(a,b)){a.flags=a.flags&-1025|2;lh$1=!1;jh=a;return}mh$1(jh,c);}jh=a;kh=rf(b.firstChild);}else a.flags=a.flags&-1025|2,lh$1=!1,jh=a;}}function qh(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;jh=a;}
	function rh(a){if(a!==jh)return !1;if(!lh$1)return qh(a),lh$1=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==b&&!nf(b,a.memoizedProps))for(b=kh;b;)mh$1(a,b),b=rf(b.nextSibling);qh(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(y$2(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if("/$"===c){if(0===b){kh=rf(a.nextSibling);break a}b--;}else "$"!==c&&"$!"!==c&&"$?"!==c||b++;}a=a.nextSibling;}kh=null;}}else kh=jh?rf(a.stateNode.nextSibling):null;return !0}
	function sh$1(){kh=jh=null;lh$1=!1;}var th=[];function uh(){for(var a=0;a<th.length;a++)th[a]._workInProgressVersionPrimary=null;th.length=0;}var vh=ra$1.ReactCurrentDispatcher,wh=ra$1.ReactCurrentBatchConfig,xh=0,R$1=null,S$2=null,T$1=null,yh=!1,zh=!1;function Ah(){throw Error(y$2(321));}function Bh(a,b){if(null===b)return !1;for(var c=0;c<b.length&&c<a.length;c++)if(!He$1(a[c],b[c]))return !1;return !0}
	function Ch(a,b,c,d,e,f){xh=f;R$1=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;vh.current=null===a||null===a.memoizedState?Dh:Eh;a=c(d,e);if(zh){f=0;do{zh=!1;if(!(25>f))throw Error(y$2(301));f+=1;T$1=S$2=null;b.updateQueue=null;vh.current=Fh;a=c(d,e);}while(zh)}vh.current=Gh;b=null!==S$2&&null!==S$2.next;xh=0;T$1=S$2=R$1=null;yh=!1;if(b)throw Error(y$2(300));return a}function Hh(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===T$1?R$1.memoizedState=T$1=a:T$1=T$1.next=a;return T$1}
	function Ih(){if(null===S$2){var a=R$1.alternate;a=null!==a?a.memoizedState:null;}else a=S$2.next;var b=null===T$1?R$1.memoizedState:T$1.next;if(null!==b)T$1=b,S$2=a;else {if(null===a)throw Error(y$2(310));S$2=a;a={memoizedState:S$2.memoizedState,baseState:S$2.baseState,baseQueue:S$2.baseQueue,queue:S$2.queue,next:null};null===T$1?R$1.memoizedState=T$1=a:T$1=T$1.next=a;}return T$1}function Jh(a,b){return "function"===typeof b?b(a):b}
	function Kh(a){var b=Ih(),c=b.queue;if(null===c)throw Error(y$2(311));c.lastRenderedReducer=a;var d=S$2,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g;}d.baseQueue=e=f;c.pending=null;}if(null!==e){e=e.next;d=d.baseState;var h=g=f=null,k=e;do{var l=k.lane;if((xh&l)===l)null!==h&&(h=h.next={lane:0,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null}),d=k.eagerReducer===a?k.eagerState:a(d,k.action);else {var n={lane:l,action:k.action,eagerReducer:k.eagerReducer,
	eagerState:k.eagerState,next:null};null===h?(g=h=n,f=d):h=h.next=n;R$1.lanes|=l;Dg|=l;}k=k.next;}while(null!==k&&k!==e);null===h?f=d:h.next=g;He$1(d,b.memoizedState)||(ug=!0);b.memoizedState=d;b.baseState=f;b.baseQueue=h;c.lastRenderedState=d;}return [b.memoizedState,c.dispatch]}
	function Lh(a){var b=Ih(),c=b.queue;if(null===c)throw Error(y$2(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He$1(f,b.memoizedState)||(ug=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f;}return [f,d]}
	function Mh(a,b,c){var d=b._getVersion;d=d(b._source);var e=b._workInProgressVersionPrimary;if(null!==e)a=e===d;else if(a=a.mutableReadLanes,a=(xh&a)===a)b._workInProgressVersionPrimary=d,th.push(b);if(a)return c(b._source);th.push(b);throw Error(y$2(350));}
	function Nh(a,b,c,d){var e=U$2;if(null===e)throw Error(y$2(349));var f=b._getVersion,g=f(b._source),h=vh.current,k=h.useState(function(){return Mh(e,b,c)}),l=k[1],n=k[0];k=T$1;var A=a.memoizedState,p=A.refs,C=p.getSnapshot,x=A.source;A=A.subscribe;var w=R$1;a.memoizedState={refs:p,source:b,subscribe:d};h.useEffect(function(){p.getSnapshot=c;p.setSnapshot=l;var a=f(b._source);if(!He$1(g,a)){a=c(b._source);He$1(n,a)||(l(a),a=Ig(w),e.mutableReadLanes|=a&e.pendingLanes);a=e.mutableReadLanes;e.entangledLanes|=a;for(var d=
	e.entanglements,h=a;0<h;){var k=31-Vc$1(h),v=1<<k;d[k]|=a;h&=~v;}}},[c,b,d]);h.useEffect(function(){return d(b._source,function(){var a=p.getSnapshot,c=p.setSnapshot;try{c(a(b._source));var d=Ig(w);e.mutableReadLanes|=d&e.pendingLanes;}catch(q){c(function(){throw q;});}})},[b,d]);He$1(C,c)&&He$1(x,b)&&He$1(A,d)||(a={pending:null,dispatch:null,lastRenderedReducer:Jh,lastRenderedState:n},a.dispatch=l=Oh.bind(null,R$1,a),k.queue=a,k.baseQueue=null,n=Mh(e,b,c),k.memoizedState=k.baseState=n);return n}
	function Ph$1(a,b,c){var d=Ih();return Nh(d,a,b,c)}function Qh(a){var b=Hh();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a=b.queue={pending:null,dispatch:null,lastRenderedReducer:Jh,lastRenderedState:a};a=a.dispatch=Oh.bind(null,R$1,a);return [b.memoizedState,a]}
	function Rh(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=R$1.updateQueue;null===b?(b={lastEffect:null},R$1.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function Sh(a){var b=Hh();a={current:a};return b.memoizedState=a}function Th(){return Ih().memoizedState}function Uh(a,b,c,d){var e=Hh();R$1.flags|=a;e.memoizedState=Rh(1|b,c,void 0,void 0===d?null:d);}
	function Vh(a,b,c,d){var e=Ih();d=void 0===d?null:d;var f=void 0;if(null!==S$2){var g=S$2.memoizedState;f=g.destroy;if(null!==d&&Bh(d,g.deps)){Rh(b,c,f,d);return}}R$1.flags|=a;e.memoizedState=Rh(1|b,c,f,d);}function Wh(a,b){return Uh(516,4,a,b)}function Xh(a,b){return Vh(516,4,a,b)}function Yh(a,b){return Vh(4,2,a,b)}function Zh(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null);};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null;}}
	function $h(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Vh(4,2,Zh.bind(null,b,a),c)}function ai$1(){}function bi$1(a,b){var c=Ih();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Bh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}function ci$1(a,b){var c=Ih();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Bh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}
	function di$1(a,b){var c=eg();gg(98>c?98:c,function(){a(!0);});gg(97<c?97:c,function(){var c=wh.transition;wh.transition=1;try{a(!1),b();}finally{wh.transition=c;}});}
	function Oh(a,b,c){var d=Hg(),e=Ig(a),f={lane:e,action:c,eagerReducer:null,eagerState:null,next:null},g=b.pending;null===g?f.next=f:(f.next=g.next,g.next=f);b.pending=f;g=a.alternate;if(a===R$1||null!==g&&g===R$1)zh=yh=!0;else {if(0===a.lanes&&(null===g||0===g.lanes)&&(g=b.lastRenderedReducer,null!==g))try{var h=b.lastRenderedState,k=g(h,c);f.eagerReducer=g;f.eagerState=k;if(He$1(k,h))return}catch(l){}finally{}Jg(a,e,d);}}
	var Gh={readContext:vg,useCallback:Ah,useContext:Ah,useEffect:Ah,useImperativeHandle:Ah,useLayoutEffect:Ah,useMemo:Ah,useReducer:Ah,useRef:Ah,useState:Ah,useDebugValue:Ah,useDeferredValue:Ah,useTransition:Ah,useMutableSource:Ah,useOpaqueIdentifier:Ah,unstable_isNewReconciler:!1},Dh={readContext:vg,useCallback:function(a,b){Hh().memoizedState=[a,void 0===b?null:b];return a},useContext:vg,useEffect:Wh,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Uh(4,2,Zh.bind(null,
	b,a),c)},useLayoutEffect:function(a,b){return Uh(4,2,a,b)},useMemo:function(a,b){var c=Hh();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=Hh();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a=d.queue={pending:null,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};a=a.dispatch=Oh.bind(null,R$1,a);return [d.memoizedState,a]},useRef:Sh,useState:Qh,useDebugValue:ai$1,useDeferredValue:function(a){var b=Qh(a),c=b[0],d=b[1];Wh(function(){var b=wh.transition;
	wh.transition=1;try{d(a);}finally{wh.transition=b;}},[a]);return c},useTransition:function(){var a=Qh(!1),b=a[0];a=di$1.bind(null,a[1]);Sh(a);return [a,b]},useMutableSource:function(a,b,c){var d=Hh();d.memoizedState={refs:{getSnapshot:b,setSnapshot:null},source:a,subscribe:c};return Nh(d,a,b,c)},useOpaqueIdentifier:function(){if(lh$1){var a=!1,b=uf(function(){a||(a=!0,c("r:"+(tf++).toString(36)));throw Error(y$2(355));}),c=Qh(b)[1];0===(R$1.mode&2)&&(R$1.flags|=516,Rh(5,function(){c("r:"+(tf++).toString(36));},
	void 0,null));return b}b="r:"+(tf++).toString(36);Qh(b);return b},unstable_isNewReconciler:!1},Eh={readContext:vg,useCallback:bi$1,useContext:vg,useEffect:Xh,useImperativeHandle:$h,useLayoutEffect:Yh,useMemo:ci$1,useReducer:Kh,useRef:Th,useState:function(){return Kh(Jh)},useDebugValue:ai$1,useDeferredValue:function(a){var b=Kh(Jh),c=b[0],d=b[1];Xh(function(){var b=wh.transition;wh.transition=1;try{d(a);}finally{wh.transition=b;}},[a]);return c},useTransition:function(){var a=Kh(Jh)[0];return [Th().current,
	a]},useMutableSource:Ph$1,useOpaqueIdentifier:function(){return Kh(Jh)[0]},unstable_isNewReconciler:!1},Fh={readContext:vg,useCallback:bi$1,useContext:vg,useEffect:Xh,useImperativeHandle:$h,useLayoutEffect:Yh,useMemo:ci$1,useReducer:Lh,useRef:Th,useState:function(){return Lh(Jh)},useDebugValue:ai$1,useDeferredValue:function(a){var b=Lh(Jh),c=b[0],d=b[1];Xh(function(){var b=wh.transition;wh.transition=1;try{d(a);}finally{wh.transition=b;}},[a]);return c},useTransition:function(){var a=Lh(Jh)[0];return [Th().current,
	a]},useMutableSource:Ph$1,useOpaqueIdentifier:function(){return Lh(Jh)[0]},unstable_isNewReconciler:!1},ei$1=ra$1.ReactCurrentOwner,ug=!1;function fi$1(a,b,c,d){b.child=null===a?Zg(b,null,c,d):Yg(b,a.child,c,d);}function gi$1(a,b,c,d,e){c=c.render;var f=b.ref;tg(b,e);d=Ch(a,b,c,d,f,e);if(null!==a&&!ug)return b.updateQueue=a.updateQueue,b.flags&=-517,a.lanes&=~e,hi$1(a,b,e);b.flags|=1;fi$1(a,b,d,e);return b.child}
	function ii$1(a,b,c,d,e,f){if(null===a){var g=c.type;if("function"===typeof g&&!ji$1(g)&&void 0===g.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=g,ki$1(a,b,g,d,e,f);a=Vg(c.type,null,d,b,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(0===(e&f)&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:Je$1,c(e,d)&&a.ref===b.ref))return hi$1(a,b,f);b.flags|=1;a=Tg(g,d);a.ref=b.ref;a.return=b;return b.child=a}
	function ki$1(a,b,c,d,e,f){if(null!==a&&Je$1(a.memoizedProps,d)&&a.ref===b.ref)if(ug=!1,0!==(f&e))0!==(a.flags&16384)&&(ug=!0);else return b.lanes=a.lanes,hi$1(a,b,f);return li$1(a,b,c,d,f)}
	function mi$1(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if("hidden"===d.mode||"unstable-defer-without-hiding"===d.mode)if(0===(b.mode&4))b.memoizedState={baseLanes:0},ni$1(b,c);else if(0!==(c&1073741824))b.memoizedState={baseLanes:0},ni$1(b,null!==f?f.baseLanes:c);else return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a},ni$1(b,a),null;else null!==f?(d=f.baseLanes|c,b.memoizedState=null):d=c,ni$1(b,d);fi$1(a,b,e,c);return b.child}
	function oi$1(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=128;}function li$1(a,b,c,d,e){var f=Ff(c)?Df:M$2.current;f=Ef(b,f);tg(b,e);c=Ch(a,b,c,d,f,e);if(null!==a&&!ug)return b.updateQueue=a.updateQueue,b.flags&=-517,a.lanes&=~e,hi$1(a,b,e);b.flags|=1;fi$1(a,b,c,e);return b.child}
	function pi$1(a,b,c,d,e){if(Ff(c)){var f=!0;Jf(b);}else f=!1;tg(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2),Mg(b,c,d),Og(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=vg(l):(l=Ff(c)?Df:M$2.current,l=Ef(b,l));var n=c.getDerivedStateFromProps,A="function"===typeof n||"function"===typeof g.getSnapshotBeforeUpdate;A||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&
	"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Ng(b,g,d,l);wg=!1;var p=b.memoizedState;g.state=p;Cg(b,d,g,e);k=b.memoizedState;h!==d||p!==k||N$2.current||wg?("function"===typeof n&&(Gg(b,c,n,d),k=b.memoizedState),(h=wg||Lg(b,c,h,d,p,k,l))?(A||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===
	typeof g.componentDidMount&&(b.flags|=4)):("function"===typeof g.componentDidMount&&(b.flags|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.flags|=4),d=!1);}else {g=b.stateNode;yg(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:lg(b.type,h);g.props=l;A=b.pendingProps;p=g.context;k=c.contextType;"object"===typeof k&&null!==k?k=vg(k):(k=Ff(c)?Df:M$2.current,k=Ef(b,k));var C=c.getDerivedStateFromProps;(n="function"===typeof C||
	"function"===typeof g.getSnapshotBeforeUpdate)||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==A||p!==k)&&Ng(b,g,d,k);wg=!1;p=b.memoizedState;g.state=p;Cg(b,d,g,e);var x=b.memoizedState;h!==A||p!==x||N$2.current||wg?("function"===typeof C&&(Gg(b,c,C,d),x=b.memoizedState),(l=wg||Lg(b,c,l,d,p,x,k))?(n||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,
	x,k),"function"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,x,k)),"function"===typeof g.componentDidUpdate&&(b.flags|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=256)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=256),b.memoizedProps=d,b.memoizedState=x),g.props=d,g.state=x,g.context=k,d=l):("function"!==typeof g.componentDidUpdate||
	h===a.memoizedProps&&p===a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=256),d=!1);}return qi$1(a,b,c,d,f,e)}
	function qi$1(a,b,c,d,e,f){oi$1(a,b);var g=0!==(b.flags&64);if(!d&&!g)return e&&Kf(b,c,!1),hi$1(a,b,f);d=b.stateNode;ei$1.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Yg(b,a.child,null,f),b.child=Yg(b,null,h,f)):fi$1(a,b,h,f);b.memoizedState=d.state;e&&Kf(b,c,!0);return b.child}function ri$1(a){var b=a.stateNode;b.pendingContext?Hf(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Hf(a,b.context,!1);eh(a,b.containerInfo);}
	var si$1={dehydrated:null,retryLane:0};
	function ti$1(a,b,c){var d=b.pendingProps,e=P$1.current,f=!1,g;(g=0!==(b.flags&64))||(g=null!==a&&null===a.memoizedState?!1:0!==(e&2));g?(f=!0,b.flags&=-65):null!==a&&null===a.memoizedState||void 0===d.fallback||!0===d.unstable_avoidThisFallback||(e|=1);I$1(P$1,e&1);if(null===a){void 0!==d.fallback&&ph(b);a=d.children;e=d.fallback;if(f)return a=ui$1(b,a,e,c),b.child.memoizedState={baseLanes:c},b.memoizedState=si$1,a;if("number"===typeof d.unstable_expectedLoadTime)return a=ui$1(b,a,e,c),b.child.memoizedState={baseLanes:c},
	b.memoizedState=si$1,b.lanes=33554432,a;c=vi$1({mode:"visible",children:a},b.mode,c,null);c.return=b;return b.child=c}if(null!==a.memoizedState){if(f)return d=wi$1(a,b,d.children,d.fallback,c),f=b.child,e=a.child.memoizedState,f.memoizedState=null===e?{baseLanes:c}:{baseLanes:e.baseLanes|c},f.childLanes=a.childLanes&~c,b.memoizedState=si$1,d;c=xi$1(a,b,d.children,c);b.memoizedState=null;return c}if(f)return d=wi$1(a,b,d.children,d.fallback,c),f=b.child,e=a.child.memoizedState,f.memoizedState=null===e?{baseLanes:c}:
	{baseLanes:e.baseLanes|c},f.childLanes=a.childLanes&~c,b.memoizedState=si$1,d;c=xi$1(a,b,d.children,c);b.memoizedState=null;return c}function ui$1(a,b,c,d){var e=a.mode,f=a.child;b={mode:"hidden",children:b};0===(e&2)&&null!==f?(f.childLanes=0,f.pendingProps=b):f=vi$1(b,e,0,null);c=Xg(c,e,d,null);f.return=a;c.return=a;f.sibling=c;a.child=f;return c}
	function xi$1(a,b,c,d){var e=a.child;a=e.sibling;c=Tg(e,{mode:"visible",children:c});0===(b.mode&2)&&(c.lanes=d);c.return=b;c.sibling=null;null!==a&&(a.nextEffect=null,a.flags=8,b.firstEffect=b.lastEffect=a);return b.child=c}
	function wi$1(a,b,c,d,e){var f=b.mode,g=a.child;a=g.sibling;var h={mode:"hidden",children:c};0===(f&2)&&b.child!==g?(c=b.child,c.childLanes=0,c.pendingProps=h,g=c.lastEffect,null!==g?(b.firstEffect=c.firstEffect,b.lastEffect=g,g.nextEffect=null):b.firstEffect=b.lastEffect=null):c=Tg(g,h);null!==a?d=Tg(a,d):(d=Xg(d,f,e,null),d.flags|=2);d.return=b;c.return=b;c.sibling=d;b.child=c;return d}function yi$1(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);sg(a.return,b);}
	function zi$1(a,b,c,d,e,f){var g=a.memoizedState;null===g?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e,lastEffect:f}:(g.isBackwards=b,g.rendering=null,g.renderingStartTime=0,g.last=d,g.tail=c,g.tailMode=e,g.lastEffect=f);}
	function Ai$1(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;fi$1(a,b,d.children,c);d=P$1.current;if(0!==(d&2))d=d&1|2,b.flags|=64;else {if(null!==a&&0!==(a.flags&64))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&yi$1(a,c);else if(19===a.tag)yi$1(a,c);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return;}a.sibling.return=a.return;a=a.sibling;}d&=1;}I$1(P$1,d);if(0===(b.mode&2))b.memoizedState=
	null;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===ih(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);zi$1(b,!1,e,c,f,b.lastEffect);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===ih(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a;}zi$1(b,!0,c,null,f,b.lastEffect);break;case "together":zi$1(b,!1,null,null,void 0,b.lastEffect);break;default:b.memoizedState=null;}return b.child}
	function hi$1(a,b,c){null!==a&&(b.dependencies=a.dependencies);Dg|=b.lanes;if(0!==(c&b.childLanes)){if(null!==a&&b.child!==a.child)throw Error(y$2(153));if(null!==b.child){a=b.child;c=Tg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Tg(a,a.pendingProps),c.return=b;c.sibling=null;}return b.child}return null}var Bi$1,Ci$1,Di$1,Ei$1;
	Bi$1=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;}c.sibling.return=c.return;c=c.sibling;}};Ci$1=function(){};
	Di$1=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;dh$1(ah$1.current);var f=null;switch(c){case "input":e=Ya$2(a,e);d=Ya$2(a,d);f=[];break;case "option":e=eb(a,e);d=eb(a,d);f=[];break;case "select":e=m$1({},e,{value:void 0});d=m$1({},d,{value:void 0});f=[];break;case "textarea":e=gb$1(a,e);d=gb$1(a,d);f=[];break;default:"function"!==typeof e.onClick&&"function"===typeof d.onClick&&(a.onclick=jf);}vb$1(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if("style"===
	l){var h=e[l];for(g in h)h.hasOwnProperty(g)&&(c||(c={}),c[g]="");}else "dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(ca.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if("style"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]="");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||
	(c={}),c[g]=k[g]);}else c||(f||(f=[]),f.push(l,c)),c=k;else "dangerouslySetInnerHTML"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):"children"===l?"string"!==typeof k&&"number"!==typeof k||(f=f||[]).push(l,""+k):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(ca.hasOwnProperty(l)?(null!=k&&"onScroll"===l&&G$1("scroll",a),f||h===k||(f=[])):"object"===typeof k&&null!==k&&k.$$typeof===Ga$1?k.toString():(f=f||[]).push(l,k));}c&&(f=f||[]).push("style",
	c);var l=f;if(b.updateQueue=l)b.flags|=4;}};Ei$1=function(a,b,c,d){c!==d&&(b.flags|=4);};function Fi$1(a,b){if(!lh$1)switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null;}}
	function Gi(a,b,c){var d=b.pendingProps;switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return Ff(b.type)&&Gf(),null;case 3:fh$1();H$2(N$2);H$2(M$2);uh();d=b.stateNode;d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)rh(b)?b.flags|=4:d.hydrate||(b.flags|=256);Ci$1(b);return null;case 5:hh$1(b);var e=dh$1(ch.current);c=b.type;if(null!==a&&null!=b.stateNode)Di$1(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=128);else {if(!d){if(null===
	b.stateNode)throw Error(y$2(166));return null}a=dh$1(ah$1.current);if(rh(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[wf]=b;d[xf]=f;switch(c){case "dialog":G$1("cancel",d);G$1("close",d);break;case "iframe":case "object":case "embed":G$1("load",d);break;case "video":case "audio":for(a=0;a<Xe$1.length;a++)G$1(Xe$1[a],d);break;case "source":G$1("error",d);break;case "img":case "image":case "link":G$1("error",d);G$1("load",d);break;case "details":G$1("toggle",d);break;case "input":Za$1(d,f);G$1("invalid",d);break;case "select":d._wrapperState=
	{wasMultiple:!!f.multiple};G$1("invalid",d);break;case "textarea":hb$1(d,f),G$1("invalid",d);}vb$1(c,f);a=null;for(var g in f)f.hasOwnProperty(g)&&(e=f[g],"children"===g?"string"===typeof e?d.textContent!==e&&(a=["children",e]):"number"===typeof e&&d.textContent!==""+e&&(a=["children",""+e]):ca.hasOwnProperty(g)&&null!=e&&"onScroll"===g&&G$1("scroll",d));switch(c){case "input":Va$2(d);cb$1(d,f,!0);break;case "textarea":Va$2(d);jb$1(d);break;case "select":case "option":break;default:"function"===typeof f.onClick&&(d.onclick=
	jf);}d=a;b.updateQueue=d;null!==d&&(b.flags|=4);}else {g=9===e.nodeType?e:e.ownerDocument;a===kb$1.html&&(a=lb$1(c));a===kb$1.html?"script"===c?(a=g.createElement("div"),a.innerHTML="<script>\x3c/script>",a=a.removeChild(a.firstChild)):"string"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),"select"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[wf]=b;a[xf]=d;Bi$1(a,b,!1,!1);b.stateNode=a;g=wb$1(c,d);switch(c){case "dialog":G$1("cancel",a);G$1("close",a);
	e=d;break;case "iframe":case "object":case "embed":G$1("load",a);e=d;break;case "video":case "audio":for(e=0;e<Xe$1.length;e++)G$1(Xe$1[e],a);e=d;break;case "source":G$1("error",a);e=d;break;case "img":case "image":case "link":G$1("error",a);G$1("load",a);e=d;break;case "details":G$1("toggle",a);e=d;break;case "input":Za$1(a,d);e=Ya$2(a,d);G$1("invalid",a);break;case "option":e=eb(a,d);break;case "select":a._wrapperState={wasMultiple:!!d.multiple};e=m$1({},d,{value:void 0});G$1("invalid",a);break;case "textarea":hb$1(a,d);e=
	gb$1(a,d);G$1("invalid",a);break;default:e=d;}vb$1(c,e);var h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];"style"===f?tb$1(a,k):"dangerouslySetInnerHTML"===f?(k=k?k.__html:void 0,null!=k&&ob$1(a,k)):"children"===f?"string"===typeof k?("textarea"!==c||""!==k)&&pb$1(a,k):"number"===typeof k&&pb$1(a,""+k):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(ca.hasOwnProperty(f)?null!=k&&"onScroll"===f&&G$1("scroll",a):null!=k&&qa$1(a,f,k,g));}switch(c){case "input":Va$2(a);cb$1(a,d,!1);
	break;case "textarea":Va$2(a);jb$1(a);break;case "option":null!=d.value&&a.setAttribute("value",""+Sa$2(d.value));break;case "select":a.multiple=!!d.multiple;f=d.value;null!=f?fb$1(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb$1(a,!!d.multiple,d.defaultValue,!0);break;default:"function"===typeof e.onClick&&(a.onclick=jf);}mf(c,d)&&(b.flags|=4);}null!==b.ref&&(b.flags|=128);}return null;case 6:if(a&&null!=b.stateNode)Ei$1(a,b,a.memoizedProps,d);else {if("string"!==typeof d&&null===b.stateNode)throw Error(y$2(166));
	c=dh$1(ch.current);dh$1(ah$1.current);rh(b)?(d=b.stateNode,c=b.memoizedProps,d[wf]=b,d.nodeValue!==c&&(b.flags|=4)):(d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[wf]=b,b.stateNode=d);}return null;case 13:H$2(P$1);d=b.memoizedState;if(0!==(b.flags&64))return b.lanes=c,b;d=null!==d;c=!1;null===a?void 0!==b.memoizedProps.fallback&&rh(b):c=null!==a.memoizedState;if(d&&!c&&0!==(b.mode&2))if(null===a&&!0!==b.memoizedProps.unstable_avoidThisFallback||0!==(P$1.current&1))0===V$2&&(V$2=3);else {if(0===V$2||3===V$2)V$2=
	4;null===U$2||0===(Dg&134217727)&&0===(Hi$1&134217727)||Ii$1(U$2,W$2);}if(d||c)b.flags|=4;return null;case 4:return fh$1(),Ci$1(b),null===a&&cf(b.stateNode.containerInfo),null;case 10:return rg(b),null;case 17:return Ff(b.type)&&Gf(),null;case 19:H$2(P$1);d=b.memoizedState;if(null===d)return null;f=0!==(b.flags&64);g=d.rendering;if(null===g)if(f)Fi$1(d,!1);else {if(0!==V$2||null!==a&&0!==(a.flags&64))for(a=b.child;null!==a;){g=ih(a);if(null!==g){b.flags|=64;Fi$1(d,!1);f=g.updateQueue;null!==f&&(b.updateQueue=f,b.flags|=4);
	null===d.lastEffect&&(b.firstEffect=null);b.lastEffect=d.lastEffect;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=2,f.nextEffect=null,f.firstEffect=null,f.lastEffect=null,g=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,
	f.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;I$1(P$1,P$1.current&1|2);return b.child}a=a.sibling;}null!==d.tail&&O$2()>Ji$1&&(b.flags|=64,f=!0,Fi$1(d,!1),b.lanes=33554432);}else {if(!f)if(a=ih(g),null!==a){if(b.flags|=64,f=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Fi$1(d,!0),null===d.tail&&"hidden"===d.tailMode&&!g.alternate&&!lh$1)return b=b.lastEffect=d.lastEffect,null!==b&&(b.nextEffect=null),null}else 2*O$2()-d.renderingStartTime>Ji$1&&1073741824!==c&&(b.flags|=
	64,f=!0,Fi$1(d,!1),b.lanes=33554432);d.isBackwards?(g.sibling=b.child,b.child=g):(c=d.last,null!==c?c.sibling=g:b.child=g,d.last=g);}return null!==d.tail?(c=d.tail,d.rendering=c,d.tail=c.sibling,d.lastEffect=b.lastEffect,d.renderingStartTime=O$2(),c.sibling=null,b=P$1.current,I$1(P$1,f?b&1|2:b&1),c):null;case 23:case 24:return Ki$1(),null!==a&&null!==a.memoizedState!==(null!==b.memoizedState)&&"unstable-defer-without-hiding"!==d.mode&&(b.flags|=4),null}throw Error(y$2(156,b.tag));}
	function Li$1(a){switch(a.tag){case 1:Ff(a.type)&&Gf();var b=a.flags;return b&4096?(a.flags=b&-4097|64,a):null;case 3:fh$1();H$2(N$2);H$2(M$2);uh();b=a.flags;if(0!==(b&64))throw Error(y$2(285));a.flags=b&-4097|64;return a;case 5:return hh$1(a),null;case 13:return H$2(P$1),b=a.flags,b&4096?(a.flags=b&-4097|64,a):null;case 19:return H$2(P$1),null;case 4:return fh$1(),null;case 10:return rg(a),null;case 23:case 24:return Ki$1(),null;default:return null}}
	function Mi$1(a,b){try{var c="",d=b;do c+=Qa$1(d),d=d.return;while(d);var e=c;}catch(f){e="\nError generating stack: "+f.message+"\n"+f.stack;}return {value:a,source:b,stack:e}}function Ni$1(a,b){try{console.error(b.value);}catch(c){setTimeout(function(){throw c;});}}var Oi$1="function"===typeof WeakMap?WeakMap:Map;function Pi$1(a,b,c){c=zg(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Qi$1||(Qi$1=!0,Ri$1=d);Ni$1(a,b);};return c}
	function Si$1(a,b,c){c=zg(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){Ni$1(a,b);return d(e)};}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){"function"!==typeof d&&(null===Ti$1?Ti$1=new Set([this]):Ti$1.add(this),Ni$1(a,b));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""});});return c}var Ui$1="function"===typeof WeakSet?WeakSet:Set;
	function Vi$1(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null);}catch(c){Wi$1(a,c);}else b.current=null;}function Xi$1(a,b){switch(b.tag){case 0:case 11:case 15:case 22:return;case 1:if(b.flags&256&&null!==a){var c=a.memoizedProps,d=a.memoizedState;a=b.stateNode;b=a.getSnapshotBeforeUpdate(b.elementType===b.type?c:lg(b.type,c),d);a.__reactInternalSnapshotBeforeUpdate=b;}return;case 3:b.flags&256&&qf(b.stateNode.containerInfo);return;case 5:case 6:case 4:case 17:return}throw Error(y$2(163));}
	function Yi$1(a,b,c){switch(c.tag){case 0:case 11:case 15:case 22:b=c.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){a=b=b.next;do{if(3===(a.tag&3)){var d=a.create;a.destroy=d();}a=a.next;}while(a!==b)}b=c.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){a=b=b.next;do{var e=a;d=e.next;e=e.tag;0!==(e&4)&&0!==(e&1)&&(Zi$1(c,a),$i$1(c,a));a=d;}while(a!==b)}return;case 1:a=c.stateNode;c.flags&4&&(null===b?a.componentDidMount():(d=c.elementType===c.type?b.memoizedProps:lg(c.type,b.memoizedProps),a.componentDidUpdate(d,
	b.memoizedState,a.__reactInternalSnapshotBeforeUpdate)));b=c.updateQueue;null!==b&&Eg(c,b,a);return;case 3:b=c.updateQueue;if(null!==b){a=null;if(null!==c.child)switch(c.child.tag){case 5:a=c.child.stateNode;break;case 1:a=c.child.stateNode;}Eg(c,b,a);}return;case 5:a=c.stateNode;null===b&&c.flags&4&&mf(c.type,c.memoizedProps)&&a.focus();return;case 6:return;case 4:return;case 12:return;case 13:null===c.memoizedState&&(c=c.alternate,null!==c&&(c=c.memoizedState,null!==c&&(c=c.dehydrated,null!==c&&Cc$1(c))));
	return;case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(y$2(163));}
	function aj(a,b){for(var c=a;;){if(5===c.tag){var d=c.stateNode;if(b)d=d.style,"function"===typeof d.setProperty?d.setProperty("display","none","important"):d.display="none";else {d=c.stateNode;var e=c.memoizedProps.style;e=void 0!==e&&null!==e&&e.hasOwnProperty("display")?e.display:null;d.style.display=sb$1("display",e);}}else if(6===c.tag)c.stateNode.nodeValue=b?"":c.memoizedProps;else if((23!==c.tag&&24!==c.tag||null===c.memoizedState||c===a)&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===
	a)break;for(;null===c.sibling;){if(null===c.return||c.return===a)return;c=c.return;}c.sibling.return=c.return;c=c.sibling;}}
	function bj(a,b){if(Mf&&"function"===typeof Mf.onCommitFiberUnmount)try{Mf.onCommitFiberUnmount(Lf,b);}catch(f){}switch(b.tag){case 0:case 11:case 14:case 15:case 22:a=b.updateQueue;if(null!==a&&(a=a.lastEffect,null!==a)){var c=a=a.next;do{var d=c,e=d.destroy;d=d.tag;if(void 0!==e)if(0!==(d&4))Zi$1(b,c);else {d=b;try{e();}catch(f){Wi$1(d,f);}}c=c.next;}while(c!==a)}break;case 1:Vi$1(b);a=b.stateNode;if("function"===typeof a.componentWillUnmount)try{a.props=b.memoizedProps,a.state=b.memoizedState,a.componentWillUnmount();}catch(f){Wi$1(b,
	f);}break;case 5:Vi$1(b);break;case 4:cj(a,b);}}function dj(a){a.alternate=null;a.child=null;a.dependencies=null;a.firstEffect=null;a.lastEffect=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.return=null;a.updateQueue=null;}function ej(a){return 5===a.tag||3===a.tag||4===a.tag}
	function fj(a){a:{for(var b=a.return;null!==b;){if(ej(b))break a;b=b.return;}throw Error(y$2(160));}var c=b;b=c.stateNode;switch(c.tag){case 5:var d=!1;break;case 3:b=b.containerInfo;d=!0;break;case 4:b=b.containerInfo;d=!0;break;default:throw Error(y$2(161));}c.flags&16&&(pb$1(b,""),c.flags&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||ej(c.return)){c=null;break a}c=c.return;}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag&&18!==c.tag;){if(c.flags&2)continue b;if(null===
	c.child||4===c.tag)continue b;else c.child.return=c,c=c.child;}if(!(c.flags&2)){c=c.stateNode;break a}}d?gj(a,c,b):hj(a,c,b);}
	function gj(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=jf));else if(4!==d&&(a=a.child,null!==a))for(gj(a,b,c),a=a.sibling;null!==a;)gj(a,b,c),a=a.sibling;}
	function hj(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(hj(a,b,c),a=a.sibling;null!==a;)hj(a,b,c),a=a.sibling;}
	function cj(a,b){for(var c=b,d=!1,e,f;;){if(!d){d=c.return;a:for(;;){if(null===d)throw Error(y$2(160));e=d.stateNode;switch(d.tag){case 5:f=!1;break a;case 3:e=e.containerInfo;f=!0;break a;case 4:e=e.containerInfo;f=!0;break a}d=d.return;}d=!0;}if(5===c.tag||6===c.tag){a:for(var g=a,h=c,k=h;;)if(bj(g,k),null!==k.child&&4!==k.tag)k.child.return=k,k=k.child;else {if(k===h)break a;for(;null===k.sibling;){if(null===k.return||k.return===h)break a;k=k.return;}k.sibling.return=k.return;k=k.sibling;}f?(g=e,h=c.stateNode,
	8===g.nodeType?g.parentNode.removeChild(h):g.removeChild(h)):e.removeChild(c.stateNode);}else if(4===c.tag){if(null!==c.child){e=c.stateNode.containerInfo;f=!0;c.child.return=c;c=c.child;continue}}else if(bj(a,c),null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;4===c.tag&&(d=!1);}c.sibling.return=c.return;c=c.sibling;}}
	function ij(a,b){switch(b.tag){case 0:case 11:case 14:case 15:case 22:var c=b.updateQueue;c=null!==c?c.lastEffect:null;if(null!==c){var d=c=c.next;do 3===(d.tag&3)&&(a=d.destroy,d.destroy=void 0,void 0!==a&&a()),d=d.next;while(d!==c)}return;case 1:return;case 5:c=b.stateNode;if(null!=c){d=b.memoizedProps;var e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[xf]=d;"input"===a&&"radio"===d.type&&null!=d.name&&$a$1(c,d);wb$1(a,e);b=wb$1(a,d);for(e=0;e<f.length;e+=
	2){var g=f[e],h=f[e+1];"style"===g?tb$1(c,h):"dangerouslySetInnerHTML"===g?ob$1(c,h):"children"===g?pb$1(c,h):qa$1(c,g,h,b);}switch(a){case "input":ab$1(c,d);break;case "textarea":ib$1(c,d);break;case "select":a=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,f=d.value,null!=f?fb$1(c,!!d.multiple,f,!1):a!==!!d.multiple&&(null!=d.defaultValue?fb$1(c,!!d.multiple,d.defaultValue,!0):fb$1(c,!!d.multiple,d.multiple?[]:"",!1));}}}return;case 6:if(null===b.stateNode)throw Error(y$2(162));b.stateNode.nodeValue=
	b.memoizedProps;return;case 3:c=b.stateNode;c.hydrate&&(c.hydrate=!1,Cc$1(c.containerInfo));return;case 12:return;case 13:null!==b.memoizedState&&(jj=O$2(),aj(b.child,!0));kj(b);return;case 19:kj(b);return;case 17:return;case 23:case 24:aj(b,null!==b.memoizedState);return}throw Error(y$2(163));}function kj(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Ui$1);b.forEach(function(b){var d=lj.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d));});}}
	function mj(a,b){return null!==a&&(a=a.memoizedState,null===a||null!==a.dehydrated)?(b=b.memoizedState,null!==b&&null===b.dehydrated):!1}var nj=Math.ceil,oj=ra$1.ReactCurrentDispatcher,pj=ra$1.ReactCurrentOwner,X$2=0,U$2=null,Y$2=null,W$2=0,qj=0,rj=Bf(0),V$2=0,sj=null,tj=0,Dg=0,Hi$1=0,uj=0,vj=null,jj=0,Ji$1=Infinity;function wj(){Ji$1=O$2()+500;}var Z$2=null,Qi$1=!1,Ri$1=null,Ti$1=null,xj=!1,yj=null,zj=90,Aj=[],Bj=[],Cj=null,Dj=0,Ej=null,Fj=-1,Gj=0,Hj=0,Ij=null,Jj=!1;function Hg(){return 0!==(X$2&48)?O$2():-1!==Fj?Fj:Fj=O$2()}
	function Ig(a){a=a.mode;if(0===(a&2))return 1;if(0===(a&4))return 99===eg()?1:2;0===Gj&&(Gj=tj);if(0!==kg.transition){0!==Hj&&(Hj=null!==vj?vj.pendingLanes:0);a=Gj;var b=4186112&~Hj;b&=-b;0===b&&(a=4186112&~a,b=a&-a,0===b&&(b=8192));return b}a=eg();0!==(X$2&4)&&98===a?a=Xc$1(12,Gj):(a=Sc$2(a),a=Xc$1(a,Gj));return a}
	function Jg(a,b,c){if(50<Dj)throw Dj=0,Ej=null,Error(y$2(185));a=Kj(a,b);if(null===a)return null;$c$2(a,b,c);a===U$2&&(Hi$1|=b,4===V$2&&Ii$1(a,W$2));var d=eg();1===b?0!==(X$2&8)&&0===(X$2&48)?Lj(a):(Mj(a,c),0===X$2&&(wj(),ig())):(0===(X$2&4)||98!==d&&99!==d||(null===Cj?Cj=new Set([a]):Cj.add(a)),Mj(a,c));vj=a;}function Kj(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}
	function Mj(a,b){for(var c=a.callbackNode,d=a.suspendedLanes,e=a.pingedLanes,f=a.expirationTimes,g=a.pendingLanes;0<g;){var h=31-Vc$1(g),k=1<<h,l=f[h];if(-1===l){if(0===(k&d)||0!==(k&e)){l=b;Rc$2(k);var n=F$2;f[h]=10<=n?l+250:6<=n?l+5E3:-1;}}else l<=b&&(a.expiredLanes|=k);g&=~k;}d=Uc$2(a,a===U$2?W$2:0);b=F$2;if(0===d)null!==c&&(c!==Zf&&Pf(c),a.callbackNode=null,a.callbackPriority=0);else {if(null!==c){if(a.callbackPriority===b)return;c!==Zf&&Pf(c);}15===b?(c=Lj.bind(null,a),null===ag?(ag=[c],bg=Of(Uf,jg)):ag.push(c),
	c=Zf):14===b?c=hg(99,Lj.bind(null,a)):(c=Tc$2(b),c=hg(c,Nj.bind(null,a)));a.callbackPriority=b;a.callbackNode=c;}}
	function Nj(a){Fj=-1;Hj=Gj=0;if(0!==(X$2&48))throw Error(y$2(327));var b=a.callbackNode;if(Oj()&&a.callbackNode!==b)return null;var c=Uc$2(a,a===U$2?W$2:0);if(0===c)return null;var d=c;var e=X$2;X$2|=16;var f=Pj();if(U$2!==a||W$2!==d)wj(),Qj(a,d);do try{Rj();break}catch(h){Sj(a,h);}while(1);qg();oj.current=f;X$2=e;null!==Y$2?d=0:(U$2=null,W$2=0,d=V$2);if(0!==(tj&Hi$1))Qj(a,0);else if(0!==d){2===d&&(X$2|=64,a.hydrate&&(a.hydrate=!1,qf(a.containerInfo)),c=Wc$1(a),0!==c&&(d=Tj(a,c)));if(1===d)throw b=sj,Qj(a,0),Ii$1(a,c),Mj(a,O$2()),b;a.finishedWork=
	a.current.alternate;a.finishedLanes=c;switch(d){case 0:case 1:throw Error(y$2(345));case 2:Uj(a);break;case 3:Ii$1(a,c);if((c&62914560)===c&&(d=jj+500-O$2(),10<d)){if(0!==Uc$2(a,0))break;e=a.suspendedLanes;if((e&c)!==c){Hg();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=of(Uj.bind(null,a),d);break}Uj(a);break;case 4:Ii$1(a,c);if((c&4186112)===c)break;d=a.eventTimes;for(e=-1;0<c;){var g=31-Vc$1(c);f=1<<g;g=d[g];g>e&&(e=g);c&=~f;}c=e;c=O$2()-c;c=(120>c?120:480>c?480:1080>c?1080:1920>c?1920:3E3>c?3E3:4320>
	c?4320:1960*nj(c/1960))-c;if(10<c){a.timeoutHandle=of(Uj.bind(null,a),c);break}Uj(a);break;case 5:Uj(a);break;default:throw Error(y$2(329));}}Mj(a,O$2());return a.callbackNode===b?Nj.bind(null,a):null}function Ii$1(a,b){b&=~uj;b&=~Hi$1;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-Vc$1(b),d=1<<c;a[c]=-1;b&=~d;}}
	function Lj(a){if(0!==(X$2&48))throw Error(y$2(327));Oj();if(a===U$2&&0!==(a.expiredLanes&W$2)){var b=W$2;var c=Tj(a,b);0!==(tj&Hi$1)&&(b=Uc$2(a,b),c=Tj(a,b));}else b=Uc$2(a,0),c=Tj(a,b);0!==a.tag&&2===c&&(X$2|=64,a.hydrate&&(a.hydrate=!1,qf(a.containerInfo)),b=Wc$1(a),0!==b&&(c=Tj(a,b)));if(1===c)throw c=sj,Qj(a,0),Ii$1(a,b),Mj(a,O$2()),c;a.finishedWork=a.current.alternate;a.finishedLanes=b;Uj(a);Mj(a,O$2());return null}
	function Vj(){if(null!==Cj){var a=Cj;Cj=null;a.forEach(function(a){a.expiredLanes|=24&a.pendingLanes;Mj(a,O$2());});}ig();}function Wj(a,b){var c=X$2;X$2|=1;try{return a(b)}finally{X$2=c,0===X$2&&(wj(),ig());}}function Xj(a,b){var c=X$2;X$2&=-2;X$2|=8;try{return a(b)}finally{X$2=c,0===X$2&&(wj(),ig());}}function ni$1(a,b){I$1(rj,qj);qj|=b;tj|=b;}function Ki$1(){qj=rj.current;H$2(rj);}
	function Qj(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,pf(c));if(null!==Y$2)for(c=Y$2.return;null!==c;){var d=c;switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&Gf();break;case 3:fh$1();H$2(N$2);H$2(M$2);uh();break;case 5:hh$1(d);break;case 4:fh$1();break;case 13:H$2(P$1);break;case 19:H$2(P$1);break;case 10:rg(d);break;case 23:case 24:Ki$1();}c=c.return;}U$2=a;Y$2=Tg(a.current,null);W$2=qj=tj=b;V$2=0;sj=null;uj=Hi$1=Dg=0;}
	function Sj(a,b){do{var c=Y$2;try{qg();vh.current=Gh;if(yh){for(var d=R$1.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next;}yh=!1;}xh=0;T$1=S$2=R$1=null;zh=!1;pj.current=null;if(null===c||null===c.return){V$2=1;sj=b;Y$2=null;break}a:{var f=a,g=c.return,h=c,k=b;b=W$2;h.flags|=2048;h.firstEffect=h.lastEffect=null;if(null!==k&&"object"===typeof k&&"function"===typeof k.then){var l=k;if(0===(h.mode&2)){var n=h.alternate;n?(h.updateQueue=n.updateQueue,h.memoizedState=n.memoizedState,h.lanes=n.lanes):
	(h.updateQueue=null,h.memoizedState=null);}var A=0!==(P$1.current&1),p=g;do{var C;if(C=13===p.tag){var x=p.memoizedState;if(null!==x)C=null!==x.dehydrated?!0:!1;else {var w=p.memoizedProps;C=void 0===w.fallback?!1:!0!==w.unstable_avoidThisFallback?!0:A?!1:!0;}}if(C){var z=p.updateQueue;if(null===z){var u=new Set;u.add(l);p.updateQueue=u;}else z.add(l);if(0===(p.mode&2)){p.flags|=64;h.flags|=16384;h.flags&=-2981;if(1===h.tag)if(null===h.alternate)h.tag=17;else {var t=zg(-1,1);t.tag=2;Ag(h,t);}h.lanes|=1;break a}k=
	void 0;h=b;var q=f.pingCache;null===q?(q=f.pingCache=new Oi$1,k=new Set,q.set(l,k)):(k=q.get(l),void 0===k&&(k=new Set,q.set(l,k)));if(!k.has(h)){k.add(h);var v=Yj.bind(null,f,l,h);l.then(v,v);}p.flags|=4096;p.lanes=b;break a}p=p.return;}while(null!==p);k=Error((Ra$2(h.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");}5!==V$2&&(V$2=2);k=Mi$1(k,h);p=
	g;do{switch(p.tag){case 3:f=k;p.flags|=4096;b&=-b;p.lanes|=b;var J=Pi$1(p,f,b);Bg(p,J);break a;case 1:f=k;var K=p.type,Q=p.stateNode;if(0===(p.flags&64)&&("function"===typeof K.getDerivedStateFromError||null!==Q&&"function"===typeof Q.componentDidCatch&&(null===Ti$1||!Ti$1.has(Q)))){p.flags|=4096;b&=-b;p.lanes|=b;var L=Si$1(p,f,b);Bg(p,L);break a}}p=p.return;}while(null!==p)}Zj(c);}catch(va){b=va;Y$2===c&&null!==c&&(Y$2=c=c.return);continue}break}while(1)}
	function Pj(){var a=oj.current;oj.current=Gh;return null===a?Gh:a}function Tj(a,b){var c=X$2;X$2|=16;var d=Pj();U$2===a&&W$2===b||Qj(a,b);do try{ak();break}catch(e){Sj(a,e);}while(1);qg();X$2=c;oj.current=d;if(null!==Y$2)throw Error(y$2(261));U$2=null;W$2=0;return V$2}function ak(){for(;null!==Y$2;)bk(Y$2);}function Rj(){for(;null!==Y$2&&!Qf();)bk(Y$2);}function bk(a){var b=ck(a.alternate,a,qj);a.memoizedProps=a.pendingProps;null===b?Zj(a):Y$2=b;pj.current=null;}
	function Zj(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&2048)){c=Gi(c,b,qj);if(null!==c){Y$2=c;return}c=b;if(24!==c.tag&&23!==c.tag||null===c.memoizedState||0!==(qj&1073741824)||0===(c.mode&4)){for(var d=0,e=c.child;null!==e;)d|=e.lanes|e.childLanes,e=e.sibling;c.childLanes=d;}null!==a&&0===(a.flags&2048)&&(null===a.firstEffect&&(a.firstEffect=b.firstEffect),null!==b.lastEffect&&(null!==a.lastEffect&&(a.lastEffect.nextEffect=b.firstEffect),a.lastEffect=b.lastEffect),1<b.flags&&(null!==
	a.lastEffect?a.lastEffect.nextEffect=b:a.firstEffect=b,a.lastEffect=b));}else {c=Li$1(b);if(null!==c){c.flags&=2047;Y$2=c;return}null!==a&&(a.firstEffect=a.lastEffect=null,a.flags|=2048);}b=b.sibling;if(null!==b){Y$2=b;return}Y$2=b=a;}while(null!==b);0===V$2&&(V$2=5);}function Uj(a){var b=eg();gg(99,dk.bind(null,a,b));return null}
	function dk(a,b){do Oj();while(null!==yj);if(0!==(X$2&48))throw Error(y$2(327));var c=a.finishedWork;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(y$2(177));a.callbackNode=null;var d=c.lanes|c.childLanes,e=d,f=a.pendingLanes&~e;a.pendingLanes=e;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=e;a.mutableReadLanes&=e;a.entangledLanes&=e;e=a.entanglements;for(var g=a.eventTimes,h=a.expirationTimes;0<f;){var k=31-Vc$1(f),l=1<<k;e[k]=0;g[k]=-1;h[k]=-1;f&=~l;}null!==
	Cj&&0===(d&24)&&Cj.has(a)&&Cj.delete(a);a===U$2&&(Y$2=U$2=null,W$2=0);1<c.flags?null!==c.lastEffect?(c.lastEffect.nextEffect=c,d=c.firstEffect):d=c:d=c.firstEffect;if(null!==d){e=X$2;X$2|=32;pj.current=null;kf=fd$1;g=Ne$1();if(Oe$1(g)){if("selectionStart"in g)h={start:g.selectionStart,end:g.selectionEnd};else a:if(h=(h=g.ownerDocument)&&h.defaultView||window,(l=h.getSelection&&h.getSelection())&&0!==l.rangeCount){h=l.anchorNode;f=l.anchorOffset;k=l.focusNode;l=l.focusOffset;try{h.nodeType,k.nodeType;}catch(va){h=null;
	break a}var n=0,A=-1,p=-1,C=0,x=0,w=g,z=null;b:for(;;){for(var u;;){w!==h||0!==f&&3!==w.nodeType||(A=n+f);w!==k||0!==l&&3!==w.nodeType||(p=n+l);3===w.nodeType&&(n+=w.nodeValue.length);if(null===(u=w.firstChild))break;z=w;w=u;}for(;;){if(w===g)break b;z===h&&++C===f&&(A=n);z===k&&++x===l&&(p=n);if(null!==(u=w.nextSibling))break;w=z;z=w.parentNode;}w=u;}h=-1===A||-1===p?null:{start:A,end:p};}else h=null;h=h||{start:0,end:0};}else h=null;lf={focusedElem:g,selectionRange:h};fd$1=!1;Ij=null;Jj=!1;Z$2=d;do try{ek();}catch(va){if(null===
	Z$2)throw Error(y$2(330));Wi$1(Z$2,va);Z$2=Z$2.nextEffect;}while(null!==Z$2);Ij=null;Z$2=d;do try{for(g=a;null!==Z$2;){var t=Z$2.flags;t&16&&pb$1(Z$2.stateNode,"");if(t&128){var q=Z$2.alternate;if(null!==q){var v=q.ref;null!==v&&("function"===typeof v?v(null):v.current=null);}}switch(t&1038){case 2:fj(Z$2);Z$2.flags&=-3;break;case 6:fj(Z$2);Z$2.flags&=-3;ij(Z$2.alternate,Z$2);break;case 1024:Z$2.flags&=-1025;break;case 1028:Z$2.flags&=-1025;ij(Z$2.alternate,Z$2);break;case 4:ij(Z$2.alternate,Z$2);break;case 8:h=Z$2;cj(g,h);var J=h.alternate;dj(h);null!==
	J&&dj(J);}Z$2=Z$2.nextEffect;}}catch(va){if(null===Z$2)throw Error(y$2(330));Wi$1(Z$2,va);Z$2=Z$2.nextEffect;}while(null!==Z$2);v=lf;q=Ne$1();t=v.focusedElem;g=v.selectionRange;if(q!==t&&t&&t.ownerDocument&&Me$1(t.ownerDocument.documentElement,t)){null!==g&&Oe$1(t)&&(q=g.start,v=g.end,void 0===v&&(v=q),"selectionStart"in t?(t.selectionStart=q,t.selectionEnd=Math.min(v,t.value.length)):(v=(q=t.ownerDocument||document)&&q.defaultView||window,v.getSelection&&(v=v.getSelection(),h=t.textContent.length,J=Math.min(g.start,h),g=void 0===
	g.end?J:Math.min(g.end,h),!v.extend&&J>g&&(h=g,g=J,J=h),h=Le$1(t,J),f=Le$1(t,g),h&&f&&(1!==v.rangeCount||v.anchorNode!==h.node||v.anchorOffset!==h.offset||v.focusNode!==f.node||v.focusOffset!==f.offset)&&(q=q.createRange(),q.setStart(h.node,h.offset),v.removeAllRanges(),J>g?(v.addRange(q),v.extend(f.node,f.offset)):(q.setEnd(f.node,f.offset),v.addRange(q))))));q=[];for(v=t;v=v.parentNode;)1===v.nodeType&&q.push({element:v,left:v.scrollLeft,top:v.scrollTop});"function"===typeof t.focus&&t.focus();for(t=
	0;t<q.length;t++)v=q[t],v.element.scrollLeft=v.left,v.element.scrollTop=v.top;}fd$1=!!kf;lf=kf=null;a.current=c;Z$2=d;do try{for(t=a;null!==Z$2;){var K=Z$2.flags;K&36&&Yi$1(t,Z$2.alternate,Z$2);if(K&128){q=void 0;var Q=Z$2.ref;if(null!==Q){var L=Z$2.stateNode;switch(Z$2.tag){case 5:q=L;break;default:q=L;}"function"===typeof Q?Q(q):Q.current=q;}}Z$2=Z$2.nextEffect;}}catch(va){if(null===Z$2)throw Error(y$2(330));Wi$1(Z$2,va);Z$2=Z$2.nextEffect;}while(null!==Z$2);Z$2=null;$f();X$2=e;}else a.current=c;if(xj)xj=!1,yj=a,zj=b;else for(Z$2=d;null!==Z$2;)b=
	Z$2.nextEffect,Z$2.nextEffect=null,Z$2.flags&8&&(K=Z$2,K.sibling=null,K.stateNode=null),Z$2=b;d=a.pendingLanes;0===d&&(Ti$1=null);1===d?a===Ej?Dj++:(Dj=0,Ej=a):Dj=0;c=c.stateNode;if(Mf&&"function"===typeof Mf.onCommitFiberRoot)try{Mf.onCommitFiberRoot(Lf,c,void 0,64===(c.current.flags&64));}catch(va){}Mj(a,O$2());if(Qi$1)throw Qi$1=!1,a=Ri$1,Ri$1=null,a;if(0!==(X$2&8))return null;ig();return null}
	function ek(){for(;null!==Z$2;){var a=Z$2.alternate;Jj||null===Ij||(0!==(Z$2.flags&8)?dc$1(Z$2,Ij)&&(Jj=!0):13===Z$2.tag&&mj(a,Z$2)&&dc$1(Z$2,Ij)&&(Jj=!0));var b=Z$2.flags;0!==(b&256)&&Xi$1(a,Z$2);0===(b&512)||xj||(xj=!0,hg(97,function(){Oj();return null}));Z$2=Z$2.nextEffect;}}function Oj(){if(90!==zj){var a=97<zj?97:zj;zj=90;return gg(a,fk)}return !1}function $i$1(a,b){Aj.push(b,a);xj||(xj=!0,hg(97,function(){Oj();return null}));}function Zi$1(a,b){Bj.push(b,a);xj||(xj=!0,hg(97,function(){Oj();return null}));}
	function fk(){if(null===yj)return !1;var a=yj;yj=null;if(0!==(X$2&48))throw Error(y$2(331));var b=X$2;X$2|=32;var c=Bj;Bj=[];for(var d=0;d<c.length;d+=2){var e=c[d],f=c[d+1],g=e.destroy;e.destroy=void 0;if("function"===typeof g)try{g();}catch(k){if(null===f)throw Error(y$2(330));Wi$1(f,k);}}c=Aj;Aj=[];for(d=0;d<c.length;d+=2){e=c[d];f=c[d+1];try{var h=e.create;e.destroy=h();}catch(k){if(null===f)throw Error(y$2(330));Wi$1(f,k);}}for(h=a.current.firstEffect;null!==h;)a=h.nextEffect,h.nextEffect=null,h.flags&8&&(h.sibling=
	null,h.stateNode=null),h=a;X$2=b;ig();return !0}function gk(a,b,c){b=Mi$1(c,b);b=Pi$1(a,b,1);Ag(a,b);b=Hg();a=Kj(a,1);null!==a&&($c$2(a,1,b),Mj(a,b));}
	function Wi$1(a,b){if(3===a.tag)gk(a,a,b);else for(var c=a.return;null!==c;){if(3===c.tag){gk(c,a,b);break}else if(1===c.tag){var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===Ti$1||!Ti$1.has(d))){a=Mi$1(b,a);var e=Si$1(c,a,1);Ag(c,e);e=Hg();c=Kj(c,1);if(null!==c)$c$2(c,1,e),Mj(c,e);else if("function"===typeof d.componentDidCatch&&(null===Ti$1||!Ti$1.has(d)))try{d.componentDidCatch(b,a);}catch(f){}break}}c=c.return;}}
	function Yj(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=Hg();a.pingedLanes|=a.suspendedLanes&c;U$2===a&&(W$2&c)===c&&(4===V$2||3===V$2&&(W$2&62914560)===W$2&&500>O$2()-jj?Qj(a,0):uj|=c);Mj(a,b);}function lj(a,b){var c=a.stateNode;null!==c&&c.delete(b);b=0;0===b&&(b=a.mode,0===(b&2)?b=1:0===(b&4)?b=99===eg()?1:2:(0===Gj&&(Gj=tj),b=Yc$1(62914560&~Gj),0===b&&(b=4194304)));c=Hg();a=Kj(a,b);null!==a&&($c$2(a,b,c),Mj(a,c));}var ck;
	ck=function(a,b,c){var d=b.lanes;if(null!==a)if(a.memoizedProps!==b.pendingProps||N$2.current)ug=!0;else if(0!==(c&d))ug=0!==(a.flags&16384)?!0:!1;else {ug=!1;switch(b.tag){case 3:ri$1(b);sh$1();break;case 5:gh(b);break;case 1:Ff(b.type)&&Jf(b);break;case 4:eh(b,b.stateNode.containerInfo);break;case 10:d=b.memoizedProps.value;var e=b.type._context;I$1(mg,e._currentValue);e._currentValue=d;break;case 13:if(null!==b.memoizedState){if(0!==(c&b.child.childLanes))return ti$1(a,b,c);I$1(P$1,P$1.current&1);b=hi$1(a,b,c);return null!==
	b?b.sibling:null}I$1(P$1,P$1.current&1);break;case 19:d=0!==(c&b.childLanes);if(0!==(a.flags&64)){if(d)return Ai$1(a,b,c);b.flags|=64;}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);I$1(P$1,P$1.current);if(d)break;else return null;case 23:case 24:return b.lanes=0,mi$1(a,b,c)}return hi$1(a,b,c)}else ug=!1;b.lanes=0;switch(b.tag){case 2:d=b.type;null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);a=b.pendingProps;e=Ef(b,M$2.current);tg(b,c);e=Ch(null,b,d,a,e,c);b.flags|=1;if("object"===
	typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof){b.tag=1;b.memoizedState=null;b.updateQueue=null;if(Ff(d)){var f=!0;Jf(b);}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;xg(b);var g=d.getDerivedStateFromProps;"function"===typeof g&&Gg(b,d,g,a);e.updater=Kg;b.stateNode=e;e._reactInternals=b;Og(b,d,a,c);b=qi$1(null,b,d,!0,f,c);}else b.tag=0,fi$1(null,b,e,c),b=b.child;return b;case 16:e=b.elementType;a:{null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);
	a=b.pendingProps;f=e._init;e=f(e._payload);b.type=e;f=b.tag=hk(e);a=lg(e,a);switch(f){case 0:b=li$1(null,b,e,a,c);break a;case 1:b=pi$1(null,b,e,a,c);break a;case 11:b=gi$1(null,b,e,a,c);break a;case 14:b=ii$1(null,b,e,lg(e.type,a),d,c);break a}throw Error(y$2(306,e,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),li$1(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),pi$1(a,b,d,e,c);case 3:ri$1(b);d=b.updateQueue;if(null===a||null===d)throw Error(y$2(282));
	d=b.pendingProps;e=b.memoizedState;e=null!==e?e.element:null;yg(a,b);Cg(b,d,null,c);d=b.memoizedState.element;if(d===e)sh$1(),b=hi$1(a,b,c);else {e=b.stateNode;if(f=e.hydrate)kh=rf(b.stateNode.containerInfo.firstChild),jh=b,f=lh$1=!0;if(f){a=e.mutableSourceEagerHydrationData;if(null!=a)for(e=0;e<a.length;e+=2)f=a[e],f._workInProgressVersionPrimary=a[e+1],th.push(f);c=Zg(b,null,d,c);for(b.child=c;c;)c.flags=c.flags&-3|1024,c=c.sibling;}else fi$1(a,b,d,c),sh$1();b=b.child;}return b;case 5:return gh(b),null===a&&
	ph(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,nf(d,e)?g=null:null!==f&&nf(d,f)&&(b.flags|=16),oi$1(a,b),fi$1(a,b,g,c),b.child;case 6:return null===a&&ph(b),null;case 13:return ti$1(a,b,c);case 4:return eh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Yg(b,null,d,c):fi$1(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),gi$1(a,b,d,e,c);case 7:return fi$1(a,b,b.pendingProps,c),b.child;case 8:return fi$1(a,b,b.pendingProps.children,
	c),b.child;case 12:return fi$1(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;var h=b.type._context;I$1(mg,h._currentValue);h._currentValue=f;if(null!==g)if(h=g.value,f=He$1(h,f)?0:("function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0,0===f){if(g.children===e.children&&!N$2.current){b=hi$1(a,b,c);break a}}else for(h=b.child,null!==h&&(h.return=b);null!==h;){var k=h.dependencies;if(null!==k){g=h.child;for(var l=
	k.firstContext;null!==l;){if(l.context===d&&0!==(l.observedBits&f)){1===h.tag&&(l=zg(-1,c&-c),l.tag=2,Ag(h,l));h.lanes|=c;l=h.alternate;null!==l&&(l.lanes|=c);sg(h.return,c);k.lanes|=c;break}l=l.next;}}else g=10===h.tag?h.type===b.type?null:h.child:h.child;if(null!==g)g.return=h;else for(g=h;null!==g;){if(g===b){g=null;break}h=g.sibling;if(null!==h){h.return=g.return;g=h;break}g=g.return;}h=g;}fi$1(a,b,e.children,c);b=b.child;}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,tg(b,c),e=vg(e,
	f.unstable_observedBits),d=d(e),b.flags|=1,fi$1(a,b,d,c),b.child;case 14:return e=b.type,f=lg(e,b.pendingProps),f=lg(e.type,f),ii$1(a,b,e,f,d,c);case 15:return ki$1(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2),b.tag=1,Ff(d)?(a=!0,Jf(b)):a=!1,tg(b,c),Mg(b,d,e),Og(b,d,e,c),qi$1(null,b,d,!0,a,c);case 19:return Ai$1(a,b,c);case 23:return mi$1(a,b,c);case 24:return mi$1(a,b,c)}throw Error(y$2(156,b.tag));
	};function ik(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.flags=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childLanes=this.lanes=0;this.alternate=null;}function nh(a,b,c,d){return new ik(a,b,c,d)}function ji$1(a){a=a.prototype;return !(!a||!a.isReactComponent)}
	function hk(a){if("function"===typeof a)return ji$1(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Aa$2)return 11;if(a===Da)return 14}return 2}
	function Tg(a,b){var c=a.alternate;null===c?(c=nh(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};
	c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}
	function Vg(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)ji$1(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ua$1:return Xg(c.children,e,f,b);case Ha$1:g=8;e|=16;break;case wa$2:g=8;e|=1;break;case xa$1:return a=nh(12,c,b,e|8),a.elementType=xa$1,a.type=xa$1,a.lanes=f,a;case Ba:return a=nh(13,c,b,e),a.type=Ba,a.elementType=Ba,a.lanes=f,a;case Ca$2:return a=nh(19,c,b,e),a.elementType=Ca$2,a.lanes=f,a;case Ia$2:return vi$1(c,e,f,b);case Ja$1:return a=nh(24,c,b,e),a.elementType=Ja$1,a.lanes=f,a;default:if("object"===
	typeof a&&null!==a)switch(a.$$typeof){case ya$2:g=10;break a;case za$1:g=9;break a;case Aa$2:g=11;break a;case Da:g=14;break a;case Ea$1:g=16;d=null;break a;case Fa$1:g=22;break a}throw Error(y$2(130,null==a?a:typeof a,""));}b=nh(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Xg(a,b,c,d){a=nh(7,a,d,b);a.lanes=c;return a}function vi$1(a,b,c,d){a=nh(23,a,d,b);a.elementType=Ia$2;a.lanes=c;return a}function Ug(a,b,c){a=nh(6,a,null,b);a.lanes=c;return a}
	function Wg(a,b,c){b=nh(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}
	function jk(a,b,c){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.pendingContext=this.context=null;this.hydrate=c;this.callbackNode=null;this.callbackPriority=0;this.eventTimes=Zc$2(0);this.expirationTimes=Zc$2(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=Zc$2(0);this.mutableSourceEagerHydrationData=null;}
	function kk(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return {$$typeof:ta$2,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}
	function lk(a,b,c,d){var e=b.current,f=Hg(),g=Ig(e);a:if(c){c=c._reactInternals;b:{if(Zb$1(c)!==c||1!==c.tag)throw Error(y$2(170));var h=c;do{switch(h.tag){case 3:h=h.stateNode.context;break b;case 1:if(Ff(h.type)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}}h=h.return;}while(null!==h);throw Error(y$2(171));}if(1===c.tag){var k=c.type;if(Ff(k)){c=If(c,k,h);break a}}c=h;}else c=Cf;null===b.context?b.context=c:b.pendingContext=c;b=zg(f,g);b.payload={element:a};d=void 0===d?null:d;null!==
	d&&(b.callback=d);Ag(e,b);Jg(e,g,f);return g}function mk(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function nk(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b;}}function ok(a,b){nk(a,b);(a=a.alternate)&&nk(a,b);}function pk(){return null}
	function qk(a,b,c){var d=null!=c&&null!=c.hydrationOptions&&c.hydrationOptions.mutableSources||null;c=new jk(a,b,null!=c&&!0===c.hydrate);b=nh(3,null,null,2===b?7:1===b?3:0);c.current=b;b.stateNode=c;xg(b);a[ff]=c.current;cf(8===a.nodeType?a.parentNode:a);if(d)for(a=0;a<d.length;a++){b=d[a];var e=b._getVersion;e=e(b._source);null==c.mutableSourceEagerHydrationData?c.mutableSourceEagerHydrationData=[b,e]:c.mutableSourceEagerHydrationData.push(b,e);}this._internalRoot=c;}
	qk.prototype.render=function(a){lk(a,this._internalRoot,null,null);};qk.prototype.unmount=function(){var a=this._internalRoot,b=a.containerInfo;lk(null,a,null,function(){b[ff]=null;});};function rk(a){return !(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}
	function sk(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute("data-reactroot")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new qk(a,0,b?{hydrate:!0}:void 0)}
	function tk(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f._internalRoot;if("function"===typeof e){var h=e;e=function(){var a=mk(g);h.call(a);};}lk(b,g,a,e);}else {f=c._reactRootContainer=sk(c,d);g=f._internalRoot;if("function"===typeof e){var k=e;e=function(){var a=mk(g);k.call(a);};}Xj(function(){lk(b,g,a,e);});}return mk(g)}ec$1=function(a){if(13===a.tag){var b=Hg();Jg(a,4,b);ok(a,4);}};fc$1=function(a){if(13===a.tag){var b=Hg();Jg(a,67108864,b);ok(a,67108864);}};
	gc$1=function(a){if(13===a.tag){var b=Hg(),c=Ig(a);Jg(a,c,b);ok(a,c);}};hc$2=function(a,b){return b()};
	yb$1=function(a,b,c){switch(b){case "input":ab$1(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db$1(d);if(!e)throw Error(y$2(90));Wa$1(d);ab$1(d,e);}}}break;case "textarea":ib$1(a,c);break;case "select":b=c.value,null!=b&&fb$1(a,!!c.multiple,b,!1);}};Gb$1=Wj;
	Hb$1=function(a,b,c,d,e){var f=X$2;X$2|=4;try{return gg(98,a.bind(null,b,c,d,e))}finally{X$2=f,0===X$2&&(wj(),ig());}};Ib$1=function(){0===(X$2&49)&&(Vj(),Oj());};Jb$1=function(a,b){var c=X$2;X$2|=2;try{return a(b)}finally{X$2=c,0===X$2&&(wj(),ig());}};function uk(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!rk(b))throw Error(y$2(200));return kk(a,b,null,c)}var vk={Events:[Cb$1,ue$1,Db$1,Eb$1,Fb$1,Oj,{current:!1}]},wk={findFiberByHostInstance:wc$1,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"};
	var xk={bundleType:wk.bundleType,version:wk.version,rendererPackageName:wk.rendererPackageName,rendererConfig:wk.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ra$1.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=cc$2(a);return null===a?null:a.stateNode},findFiberByHostInstance:wk.findFiberByHostInstance||
	pk,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var yk=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!yk.isDisabled&&yk.supportsFiber)try{Lf=yk.inject(xk),Mf=yk;}catch(a){}}reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=vk;reactDom_production_min.createPortal=uk;
	reactDom_production_min.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if("function"===typeof a.render)throw Error(y$2(188));throw Error(y$2(268,Object.keys(a)));}a=cc$2(b);a=null===a?null:a.stateNode;return a};reactDom_production_min.flushSync=function(a,b){var c=X$2;if(0!==(c&48))return a(b);X$2|=1;try{if(a)return gg(99,a.bind(null,b))}finally{X$2=c,ig();}};reactDom_production_min.hydrate=function(a,b,c){if(!rk(b))throw Error(y$2(200));return tk(null,a,b,!0,c)};
	reactDom_production_min.render=function(a,b,c){if(!rk(b))throw Error(y$2(200));return tk(null,a,b,!1,c)};reactDom_production_min.unmountComponentAtNode=function(a){if(!rk(a))throw Error(y$2(40));return a._reactRootContainer?(Xj(function(){tk(null,null,a,!1,function(){a._reactRootContainer=null;a[ff]=null;});}),!0):!1};reactDom_production_min.unstable_batchedUpdates=Wj;reactDom_production_min.unstable_createPortal=function(a,b){return uk(a,b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)};
	reactDom_production_min.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!rk(c))throw Error(y$2(200));if(null==a||void 0===a._reactInternals)throw Error(y$2(38));return tk(a,b,c,!1,d)};reactDom_production_min.version="17.0.2";

	var reactDom_development = {};

	var tracing = {exports: {}};

	var schedulerTracing_production_min = {};

	/** @license React v0.20.2
	 * scheduler-tracing.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var b$1=0;schedulerTracing_production_min.__interactionsRef=null;schedulerTracing_production_min.__subscriberRef=null;schedulerTracing_production_min.unstable_clear=function(a){return a()};schedulerTracing_production_min.unstable_getCurrent=function(){return null};schedulerTracing_production_min.unstable_getThreadID=function(){return ++b$1};schedulerTracing_production_min.unstable_subscribe=function(){};schedulerTracing_production_min.unstable_trace=function(a,d,c){return c()};schedulerTracing_production_min.unstable_unsubscribe=function(){};schedulerTracing_production_min.unstable_wrap=function(a){return a};

	var schedulerTracing_development = {};

	/** @license React v0.20.2
	 * scheduler-tracing.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	(function (exports) {

	if ("development" !== "production") {
	  (function() {

	var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

	var interactionIDCounter = 0;
	var threadIDCounter = 0; // Set of currently traced interactions.
	// Interactions "stack"–
	// Meaning that newly traced interactions are appended to the previously active set.
	// When an interaction goes out of scope, the previous set (if any) is restored.

	exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

	exports.__subscriberRef = null;

	{
	  exports.__interactionsRef = {
	    current: new Set()
	  };
	  exports.__subscriberRef = {
	    current: null
	  };
	}
	function unstable_clear(callback) {

	  var prevInteractions = exports.__interactionsRef.current;
	  exports.__interactionsRef.current = new Set();

	  try {
	    return callback();
	  } finally {
	    exports.__interactionsRef.current = prevInteractions;
	  }
	}
	function unstable_getCurrent() {
	  {
	    return exports.__interactionsRef.current;
	  }
	}
	function unstable_getThreadID() {
	  return ++threadIDCounter;
	}
	function unstable_trace(name, timestamp, callback) {
	  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

	  var interaction = {
	    __count: 1,
	    id: interactionIDCounter++,
	    name: name,
	    timestamp: timestamp
	  };
	  var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
	  // To do that, clone the current interactions.
	  // The previous set will be restored upon completion.

	  var interactions = new Set(prevInteractions);
	  interactions.add(interaction);
	  exports.__interactionsRef.current = interactions;
	  var subscriber = exports.__subscriberRef.current;
	  var returnValue;

	  try {
	    if (subscriber !== null) {
	      subscriber.onInteractionTraced(interaction);
	    }
	  } finally {
	    try {
	      if (subscriber !== null) {
	        subscriber.onWorkStarted(interactions, threadID);
	      }
	    } finally {
	      try {
	        returnValue = callback();
	      } finally {
	        exports.__interactionsRef.current = prevInteractions;

	        try {
	          if (subscriber !== null) {
	            subscriber.onWorkStopped(interactions, threadID);
	          }
	        } finally {
	          interaction.__count--; // If no async work was scheduled for this interaction,
	          // Notify subscribers that it's completed.

	          if (subscriber !== null && interaction.__count === 0) {
	            subscriber.onInteractionScheduledWorkCompleted(interaction);
	          }
	        }
	      }
	    }
	  }

	  return returnValue;
	}
	function unstable_wrap(callback) {
	  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

	  var wrappedInteractions = exports.__interactionsRef.current;
	  var subscriber = exports.__subscriberRef.current;

	  if (subscriber !== null) {
	    subscriber.onWorkScheduled(wrappedInteractions, threadID);
	  } // Update the pending async work count for the current interactions.
	  // Update after calling subscribers in case of error.


	  wrappedInteractions.forEach(function (interaction) {
	    interaction.__count++;
	  });
	  var hasRun = false;

	  function wrapped() {
	    var prevInteractions = exports.__interactionsRef.current;
	    exports.__interactionsRef.current = wrappedInteractions;
	    subscriber = exports.__subscriberRef.current;

	    try {
	      var returnValue;

	      try {
	        if (subscriber !== null) {
	          subscriber.onWorkStarted(wrappedInteractions, threadID);
	        }
	      } finally {
	        try {
	          returnValue = callback.apply(undefined, arguments);
	        } finally {
	          exports.__interactionsRef.current = prevInteractions;

	          if (subscriber !== null) {
	            subscriber.onWorkStopped(wrappedInteractions, threadID);
	          }
	        }
	      }

	      return returnValue;
	    } finally {
	      if (!hasRun) {
	        // We only expect a wrapped function to be executed once,
	        // But in the event that it's executed more than once–
	        // Only decrement the outstanding interaction counts once.
	        hasRun = true; // Update pending async counts for all wrapped interactions.
	        // If this was the last scheduled async work for any of them,
	        // Mark them as completed.

	        wrappedInteractions.forEach(function (interaction) {
	          interaction.__count--;

	          if (subscriber !== null && interaction.__count === 0) {
	            subscriber.onInteractionScheduledWorkCompleted(interaction);
	          }
	        });
	      }
	    }
	  }

	  wrapped.cancel = function cancel() {
	    subscriber = exports.__subscriberRef.current;

	    try {
	      if (subscriber !== null) {
	        subscriber.onWorkCanceled(wrappedInteractions, threadID);
	      }
	    } finally {
	      // Update pending async counts for all wrapped interactions.
	      // If this was the last scheduled async work for any of them,
	      // Mark them as completed.
	      wrappedInteractions.forEach(function (interaction) {
	        interaction.__count--;

	        if (subscriber && interaction.__count === 0) {
	          subscriber.onInteractionScheduledWorkCompleted(interaction);
	        }
	      });
	    }
	  };

	  return wrapped;
	}

	var subscribers = null;

	{
	  subscribers = new Set();
	}

	function unstable_subscribe(subscriber) {
	  {
	    subscribers.add(subscriber);

	    if (subscribers.size === 1) {
	      exports.__subscriberRef.current = {
	        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
	        onInteractionTraced: onInteractionTraced,
	        onWorkCanceled: onWorkCanceled,
	        onWorkScheduled: onWorkScheduled,
	        onWorkStarted: onWorkStarted,
	        onWorkStopped: onWorkStopped
	      };
	    }
	  }
	}
	function unstable_unsubscribe(subscriber) {
	  {
	    subscribers.delete(subscriber);

	    if (subscribers.size === 0) {
	      exports.__subscriberRef.current = null;
	    }
	  }
	}

	function onInteractionTraced(interaction) {
	  var didCatchError = false;
	  var caughtError = null;
	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onInteractionTraced(interaction);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onInteractionScheduledWorkCompleted(interaction) {
	  var didCatchError = false;
	  var caughtError = null;
	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onInteractionScheduledWorkCompleted(interaction);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkScheduled(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;
	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkScheduled(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkStarted(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;
	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkStarted(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkStopped(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;
	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkStopped(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkCanceled(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;
	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkCanceled(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	exports.unstable_clear = unstable_clear;
	exports.unstable_getCurrent = unstable_getCurrent;
	exports.unstable_getThreadID = unstable_getThreadID;
	exports.unstable_subscribe = unstable_subscribe;
	exports.unstable_trace = unstable_trace;
	exports.unstable_unsubscribe = unstable_unsubscribe;
	exports.unstable_wrap = unstable_wrap;
	  })();
	}
	}(schedulerTracing_development));

	if ("development" === 'production') {
	  tracing.exports = schedulerTracing_production_min;
	} else {
	  tracing.exports = schedulerTracing_development;
	}

	/** @license React v17.0.2
	 * react-dom.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	if ("development" !== "production") {
	  (function() {

	var React = react.exports;
	var _assign = objectAssign;
	var Scheduler = scheduler.exports;
	var tracing$1 = tracing.exports;

	var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	// by calls to these methods by a Babel plugin.
	//
	// In PROD (or in packages without access to React internals),
	// they are left as they are instead.

	function warn(format) {
	  {
	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    printWarning('warn', format, args);
	  }
	}
	function error(format) {
	  {
	    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	      args[_key2 - 1] = arguments[_key2];
	    }

	    printWarning('error', format, args);
	  }
	}

	function printWarning(level, format, args) {
	  // When changing this logic, you might want to also
	  // update consoleWithStackDev.www.js as well.
	  {
	    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	    var stack = ReactDebugCurrentFrame.getStackAddendum();

	    if (stack !== '') {
	      format += '%s';
	      args = args.concat([stack]);
	    }

	    var argsWithFormat = args.map(function (item) {
	      return '' + item;
	    }); // Careful: RN currently depends on this prefix

	    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
	    // breaks IE9: https://github.com/facebook/react/issues/13610
	    // eslint-disable-next-line react-internal/no-production-logging

	    Function.prototype.apply.call(console[level], console, argsWithFormat);
	  }
	}

	if (!React) {
	  {
	    throw Error( "ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM." );
	  }
	}

	var FunctionComponent = 0;
	var ClassComponent = 1;
	var IndeterminateComponent = 2; // Before we know whether it is function or class

	var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

	var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

	var HostComponent = 5;
	var HostText = 6;
	var Fragment = 7;
	var Mode = 8;
	var ContextConsumer = 9;
	var ContextProvider = 10;
	var ForwardRef = 11;
	var Profiler = 12;
	var SuspenseComponent = 13;
	var MemoComponent = 14;
	var SimpleMemoComponent = 15;
	var LazyComponent = 16;
	var IncompleteClassComponent = 17;
	var DehydratedFragment = 18;
	var SuspenseListComponent = 19;
	var FundamentalComponent = 20;
	var ScopeComponent = 21;
	var Block = 22;
	var OffscreenComponent = 23;
	var LegacyHiddenComponent = 24;

	// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

	var enableProfilerTimer = true; // Record durations for commit and passive effects phases.

	var enableFundamentalAPI = false; // Experimental Scope support.
	var enableNewReconciler = false; // Errors that are thrown while unmounting (or after in the case of passive effects)
	var warnAboutStringRefs = false;

	var allNativeEvents = new Set();
	/**
	 * Mapping from registration name to event name
	 */


	var registrationNameDependencies = {};
	/**
	 * Mapping from lowercase registration names to the properly cased version,
	 * used to warn in the case of missing event handlers. Available
	 * only in true.
	 * @type {Object}
	 */

	var possibleRegistrationNames =  {} ; // Trust the developer to only use possibleRegistrationNames in true

	function registerTwoPhaseEvent(registrationName, dependencies) {
	  registerDirectEvent(registrationName, dependencies);
	  registerDirectEvent(registrationName + 'Capture', dependencies);
	}
	function registerDirectEvent(registrationName, dependencies) {
	  {
	    if (registrationNameDependencies[registrationName]) {
	      error('EventRegistry: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName);
	    }
	  }

	  registrationNameDependencies[registrationName] = dependencies;

	  {
	    var lowerCasedName = registrationName.toLowerCase();
	    possibleRegistrationNames[lowerCasedName] = registrationName;

	    if (registrationName === 'onDoubleClick') {
	      possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }

	  for (var i = 0; i < dependencies.length; i++) {
	    allNativeEvents.add(dependencies[i]);
	  }
	}

	var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

	// A reserved attribute.
	// It is handled by React separately and shouldn't be written to the DOM.
	var RESERVED = 0; // A simple string attribute.
	// Attributes that aren't in the filter are presumed to have this type.

	var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
	// "enumerated" attributes with "true" and "false" as possible values.
	// When true, it should be set to a "true" string.
	// When false, it should be set to a "false" string.

	var BOOLEANISH_STRING = 2; // A real boolean attribute.
	// When true, it should be present (set either to an empty string or its name).
	// When false, it should be omitted.

	var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
	// When true, it should be present (set either to an empty string or its name).
	// When false, it should be omitted.
	// For any other value, should be present with that value.

	var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
	// When falsy, it should be removed.

	var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
	// When falsy, it should be removed.

	var POSITIVE_NUMERIC = 6;

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
	/* eslint-enable max-len */

	var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
	var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};
	function isAttributeNameSafe(attributeName) {
	  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
	    return true;
	  }

	  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
	    return false;
	  }

	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }

	  illegalAttributeNameCache[attributeName] = true;

	  {
	    error('Invalid attribute name: `%s`', attributeName);
	  }

	  return false;
	}
	function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
	  if (propertyInfo !== null) {
	    return propertyInfo.type === RESERVED;
	  }

	  if (isCustomComponentTag) {
	    return false;
	  }

	  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
	    return true;
	  }

	  return false;
	}
	function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
	  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
	    return false;
	  }

	  switch (typeof value) {
	    case 'function': // $FlowIssue symbol is perfectly valid here

	    case 'symbol':
	      // eslint-disable-line
	      return true;

	    case 'boolean':
	      {
	        if (isCustomComponentTag) {
	          return false;
	        }

	        if (propertyInfo !== null) {
	          return !propertyInfo.acceptsBooleans;
	        } else {
	          var prefix = name.toLowerCase().slice(0, 5);
	          return prefix !== 'data-' && prefix !== 'aria-';
	        }
	      }

	    default:
	      return false;
	  }
	}
	function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
	  if (value === null || typeof value === 'undefined') {
	    return true;
	  }

	  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
	    return true;
	  }

	  if (isCustomComponentTag) {
	    return false;
	  }

	  if (propertyInfo !== null) {

	    switch (propertyInfo.type) {
	      case BOOLEAN:
	        return !value;

	      case OVERLOADED_BOOLEAN:
	        return value === false;

	      case NUMERIC:
	        return isNaN(value);

	      case POSITIVE_NUMERIC:
	        return isNaN(value) || value < 1;
	    }
	  }

	  return false;
	}
	function getPropertyInfo(name) {
	  return properties.hasOwnProperty(name) ? properties[name] : null;
	}

	function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
	  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
	  this.attributeName = attributeName;
	  this.attributeNamespace = attributeNamespace;
	  this.mustUseProperty = mustUseProperty;
	  this.propertyName = name;
	  this.type = type;
	  this.sanitizeURL = sanitizeURL;
	  this.removeEmptyString = removeEmptyString;
	} // When adding attributes to this list, be sure to also add them to
	// the `possibleStandardNames` module to ensure casing and incorrect
	// name warnings.


	var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

	var reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
	// elements (not just inputs). Now that ReactDOMInput assigns to the
	// defaultValue property -- do we need this?
	'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];
	reservedProps.forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // A few React string attributes have a different name.
	// This is a mapping from React prop names to the attribute names.

	[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
	  var name = _ref[0],
	      attributeName = _ref[1];
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are "enumerated" HTML attributes that accept "true" and "false".
	// In React, we let users pass `true` and `false` even though technically
	// these aren't boolean attributes (they are coerced to strings).

	['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are "enumerated" SVG attributes that accept "true" and "false".
	// In React, we let users pass `true` and `false` even though technically
	// these aren't boolean attributes (they are coerced to strings).
	// Since these are SVG attributes, their attribute names are case-sensitive.

	['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are HTML boolean attributes.

	['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
	// on the client side because the browsers are inconsistent. Instead we call focus().
	'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
	'itemScope'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are the few React props that we set as DOM properties
	// rather than attributes. These are all booleans.

	['checked', // Note: `option.selected` is not updated if `select.multiple` is
	// disabled with `removeAttribute`. We have special logic for handling this.
	'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are HTML attributes that are "overloaded booleans": they behave like
	// booleans, but can also accept a string value.

	['capture', 'download' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are HTML attributes that must be positive numbers.

	['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are HTML attributes that must be numbers.

	['rowSpan', 'start'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	});
	var CAMELIZE = /[\-\:]([a-z])/g;

	var capitalize = function (token) {
	  return token[1].toUpperCase();
	}; // This is a list of all SVG attributes that need special casing, namespacing,
	// or boolean value assignment. Regular attributes that just accept strings
	// and have the same names are omitted, just like in the HTML attribute filter.
	// Some of these attributes can be hard to find. This list was created by
	// scraping the MDN documentation.


	['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // String SVG attributes with the xlink namespace.

	['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, 'http://www.w3.org/1999/xlink', false, // sanitizeURL
	  false);
	}); // String SVG attributes with the xml namespace.

	['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, 'http://www.w3.org/XML/1998/namespace', false, // sanitizeURL
	  false);
	}); // These attribute exists both in HTML and SVG.
	// The attribute name is case-sensitive in SVG so we can't just use
	// the React name like we do for attributes that exist only in HTML.

	['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
	  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
	  attributeName.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These attributes accept URLs. These must not allow javascript: URLS.
	// These will also need to accept Trusted Types object in the future.

	var xlinkHref = 'xlinkHref';
	properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
	'xlink:href', 'http://www.w3.org/1999/xlink', true, // sanitizeURL
	false);
	['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
	  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
	  attributeName.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  true, // sanitizeURL
	  true);
	});

	// and any newline or tab are filtered out as if they're not part of the URL.
	// https://url.spec.whatwg.org/#url-parsing
	// Tab or newline are defined as \r\n\t:
	// https://infra.spec.whatwg.org/#ascii-tab-or-newline
	// A C0 control is a code point in the range \u0000 NULL to \u001F
	// INFORMATION SEPARATOR ONE, inclusive:
	// https://infra.spec.whatwg.org/#c0-control-or-space

	/* eslint-disable max-len */

	var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
	var didWarn = false;

	function sanitizeURL(url) {
	  {
	    if (!didWarn && isJavaScriptProtocol.test(url)) {
	      didWarn = true;

	      error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
	    }
	  }
	}

	/**
	 * Get the value for a property on a node. Only used in DEV for SSR validation.
	 * The "expected" argument is used as a hint of what the expected value is.
	 * Some properties have multiple equivalent values.
	 */
	function getValueForProperty(node, name, expected, propertyInfo) {
	  {
	    if (propertyInfo.mustUseProperty) {
	      var propertyName = propertyInfo.propertyName;
	      return node[propertyName];
	    } else {
	      if ( propertyInfo.sanitizeURL) {
	        // If we haven't fully disabled javascript: URLs, and if
	        // the hydration is successful of a javascript: URL, we
	        // still want to warn on the client.
	        sanitizeURL('' + expected);
	      }

	      var attributeName = propertyInfo.attributeName;
	      var stringValue = null;

	      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
	        if (node.hasAttribute(attributeName)) {
	          var value = node.getAttribute(attributeName);

	          if (value === '') {
	            return true;
	          }

	          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	            return value;
	          }

	          if (value === '' + expected) {
	            return expected;
	          }

	          return value;
	        }
	      } else if (node.hasAttribute(attributeName)) {
	        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	          // We had an attribute but shouldn't have had one, so read it
	          // for the error message.
	          return node.getAttribute(attributeName);
	        }

	        if (propertyInfo.type === BOOLEAN) {
	          // If this was a boolean, it doesn't matter what the value is
	          // the fact that we have it is the same as the expected.
	          return expected;
	        } // Even if this property uses a namespace we use getAttribute
	        // because we assume its namespaced name is the same as our config.
	        // To use getAttributeNS we need the local name which we don't have
	        // in our config atm.


	        stringValue = node.getAttribute(attributeName);
	      }

	      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	        return stringValue === null ? expected : stringValue;
	      } else if (stringValue === '' + expected) {
	        return expected;
	      } else {
	        return stringValue;
	      }
	    }
	  }
	}
	/**
	 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
	 * The third argument is used as a hint of what the expected value is. Some
	 * attributes have multiple equivalent values.
	 */

	function getValueForAttribute(node, name, expected) {
	  {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    } // If the object is an opaque reference ID, it's expected that
	    // the next prop is different than the server value, so just return
	    // expected


	    if (isOpaqueHydratingObject(expected)) {
	      return expected;
	    }

	    if (!node.hasAttribute(name)) {
	      return expected === undefined ? undefined : null;
	    }

	    var value = node.getAttribute(name);

	    if (value === '' + expected) {
	      return expected;
	    }

	    return value;
	  }
	}
	/**
	 * Sets the value for a property on a node.
	 *
	 * @param {DOMElement} node
	 * @param {string} name
	 * @param {*} value
	 */

	function setValueForProperty(node, name, value, isCustomComponentTag) {
	  var propertyInfo = getPropertyInfo(name);

	  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
	    return;
	  }

	  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
	    value = null;
	  } // If the prop isn't in the special list, treat it as a simple attribute.


	  if (isCustomComponentTag || propertyInfo === null) {
	    if (isAttributeNameSafe(name)) {
	      var _attributeName = name;

	      if (value === null) {
	        node.removeAttribute(_attributeName);
	      } else {
	        node.setAttribute(_attributeName,  '' + value);
	      }
	    }

	    return;
	  }

	  var mustUseProperty = propertyInfo.mustUseProperty;

	  if (mustUseProperty) {
	    var propertyName = propertyInfo.propertyName;

	    if (value === null) {
	      var type = propertyInfo.type;
	      node[propertyName] = type === BOOLEAN ? false : '';
	    } else {
	      // Contrary to `setAttribute`, object properties are properly
	      // `toString`ed by IE8/9.
	      node[propertyName] = value;
	    }

	    return;
	  } // The rest are treated as attributes with special cases.


	  var attributeName = propertyInfo.attributeName,
	      attributeNamespace = propertyInfo.attributeNamespace;

	  if (value === null) {
	    node.removeAttribute(attributeName);
	  } else {
	    var _type = propertyInfo.type;
	    var attributeValue;

	    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
	      // If attribute type is boolean, we know for sure it won't be an execution sink
	      // and we won't require Trusted Type here.
	      attributeValue = '';
	    } else {
	      // `setAttribute` with objects becomes only `[object]` in IE8/9,
	      // ('' + value) makes it output the correct toString()-value.
	      {
	        attributeValue = '' + value;
	      }

	      if (propertyInfo.sanitizeURL) {
	        sanitizeURL(attributeValue.toString());
	      }
	    }

	    if (attributeNamespace) {
	      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
	    } else {
	      node.setAttribute(attributeName, attributeValue);
	    }
	  }
	}

	// ATTENTION
	// When adding new symbols to this file,
	// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = 0xeac7;
	var REACT_PORTAL_TYPE = 0xeaca;
	var REACT_FRAGMENT_TYPE = 0xeacb;
	var REACT_STRICT_MODE_TYPE = 0xeacc;
	var REACT_PROFILER_TYPE = 0xead2;
	var REACT_PROVIDER_TYPE = 0xeacd;
	var REACT_CONTEXT_TYPE = 0xeace;
	var REACT_FORWARD_REF_TYPE = 0xead0;
	var REACT_SUSPENSE_TYPE = 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = 0xead8;
	var REACT_MEMO_TYPE = 0xead3;
	var REACT_LAZY_TYPE = 0xead4;
	var REACT_BLOCK_TYPE = 0xead9;
	var REACT_SCOPE_TYPE = 0xead7;
	var REACT_OPAQUE_ID_TYPE = 0xeae0;
	var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
	var REACT_OFFSCREEN_TYPE = 0xeae2;
	var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

	if (typeof Symbol === 'function' && Symbol.for) {
	  var symbolFor = Symbol.for;
	  REACT_ELEMENT_TYPE = symbolFor('react.element');
	  REACT_PORTAL_TYPE = symbolFor('react.portal');
	  REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
	  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
	  REACT_PROFILER_TYPE = symbolFor('react.profiler');
	  REACT_PROVIDER_TYPE = symbolFor('react.provider');
	  REACT_CONTEXT_TYPE = symbolFor('react.context');
	  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
	  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
	  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
	  REACT_MEMO_TYPE = symbolFor('react.memo');
	  REACT_LAZY_TYPE = symbolFor('react.lazy');
	  REACT_BLOCK_TYPE = symbolFor('react.block');
	  symbolFor('react.server.block');
	  symbolFor('react.fundamental');
	  REACT_SCOPE_TYPE = symbolFor('react.scope');
	  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
	  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
	  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
	  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
	}

	var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';
	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }

	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }

	  return null;
	}

	// Helpers to patch console.logs to avoid logging during side-effect free
	// replaying on render function. This currently only patches the object
	// lazily which won't cover if the log function was extracted eagerly.
	// We could also eagerly patch the method.
	var disabledDepth = 0;
	var prevLog;
	var prevInfo;
	var prevWarn;
	var prevError;
	var prevGroup;
	var prevGroupCollapsed;
	var prevGroupEnd;

	function disabledLog() {}

	disabledLog.__reactDisabledLog = true;
	function disableLogs() {
	  {
	    if (disabledDepth === 0) {
	      /* eslint-disable react-internal/no-production-logging */
	      prevLog = console.log;
	      prevInfo = console.info;
	      prevWarn = console.warn;
	      prevError = console.error;
	      prevGroup = console.group;
	      prevGroupCollapsed = console.groupCollapsed;
	      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

	      var props = {
	        configurable: true,
	        enumerable: true,
	        value: disabledLog,
	        writable: true
	      }; // $FlowFixMe Flow thinks console is immutable.

	      Object.defineProperties(console, {
	        info: props,
	        log: props,
	        warn: props,
	        error: props,
	        group: props,
	        groupCollapsed: props,
	        groupEnd: props
	      });
	      /* eslint-enable react-internal/no-production-logging */
	    }

	    disabledDepth++;
	  }
	}
	function reenableLogs() {
	  {
	    disabledDepth--;

	    if (disabledDepth === 0) {
	      /* eslint-disable react-internal/no-production-logging */
	      var props = {
	        configurable: true,
	        enumerable: true,
	        writable: true
	      }; // $FlowFixMe Flow thinks console is immutable.

	      Object.defineProperties(console, {
	        log: _assign({}, props, {
	          value: prevLog
	        }),
	        info: _assign({}, props, {
	          value: prevInfo
	        }),
	        warn: _assign({}, props, {
	          value: prevWarn
	        }),
	        error: _assign({}, props, {
	          value: prevError
	        }),
	        group: _assign({}, props, {
	          value: prevGroup
	        }),
	        groupCollapsed: _assign({}, props, {
	          value: prevGroupCollapsed
	        }),
	        groupEnd: _assign({}, props, {
	          value: prevGroupEnd
	        })
	      });
	      /* eslint-enable react-internal/no-production-logging */
	    }

	    if (disabledDepth < 0) {
	      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
	    }
	  }
	}

	var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
	var prefix;
	function describeBuiltInComponentFrame(name, source, ownerFn) {
	  {
	    if (prefix === undefined) {
	      // Extract the VM specific prefix used by each line.
	      try {
	        throw Error();
	      } catch (x) {
	        var match = x.stack.trim().match(/\n( *(at )?)/);
	        prefix = match && match[1] || '';
	      }
	    } // We use the prefix to ensure our stacks line up with native stack frames.


	    return '\n' + prefix + name;
	  }
	}
	var reentry = false;
	var componentFrameCache;

	{
	  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
	  componentFrameCache = new PossiblyWeakMap();
	}

	function describeNativeComponentFrame(fn, construct) {
	  // If something asked for a stack inside a fake render, it should get ignored.
	  if (!fn || reentry) {
	    return '';
	  }

	  {
	    var frame = componentFrameCache.get(fn);

	    if (frame !== undefined) {
	      return frame;
	    }
	  }

	  var control;
	  reentry = true;
	  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

	  Error.prepareStackTrace = undefined;
	  var previousDispatcher;

	  {
	    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
	    // for warnings.

	    ReactCurrentDispatcher.current = null;
	    disableLogs();
	  }

	  try {
	    // This should throw.
	    if (construct) {
	      // Something should be setting the props in the constructor.
	      var Fake = function () {
	        throw Error();
	      }; // $FlowFixMe


	      Object.defineProperty(Fake.prototype, 'props', {
	        set: function () {
	          // We use a throwing setter instead of frozen or non-writable props
	          // because that won't throw in a non-strict mode function.
	          throw Error();
	        }
	      });

	      if (typeof Reflect === 'object' && Reflect.construct) {
	        // We construct a different control for this case to include any extra
	        // frames added by the construct call.
	        try {
	          Reflect.construct(Fake, []);
	        } catch (x) {
	          control = x;
	        }

	        Reflect.construct(fn, [], Fake);
	      } else {
	        try {
	          Fake.call();
	        } catch (x) {
	          control = x;
	        }

	        fn.call(Fake.prototype);
	      }
	    } else {
	      try {
	        throw Error();
	      } catch (x) {
	        control = x;
	      }

	      fn();
	    }
	  } catch (sample) {
	    // This is inlined manually because closure doesn't do it for us.
	    if (sample && control && typeof sample.stack === 'string') {
	      // This extracts the first frame from the sample that isn't also in the control.
	      // Skipping one frame that we assume is the frame that calls the two.
	      var sampleLines = sample.stack.split('\n');
	      var controlLines = control.stack.split('\n');
	      var s = sampleLines.length - 1;
	      var c = controlLines.length - 1;

	      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
	        // We expect at least one stack frame to be shared.
	        // Typically this will be the root most one. However, stack frames may be
	        // cut off due to maximum stack limits. In this case, one maybe cut off
	        // earlier than the other. We assume that the sample is longer or the same
	        // and there for cut off earlier. So we should find the root most frame in
	        // the sample somewhere in the control.
	        c--;
	      }

	      for (; s >= 1 && c >= 0; s--, c--) {
	        // Next we find the first one that isn't the same which should be the
	        // frame that called our sample function and the control.
	        if (sampleLines[s] !== controlLines[c]) {
	          // In V8, the first line is describing the message but other VMs don't.
	          // If we're about to return the first line, and the control is also on the same
	          // line, that's a pretty good indicator that our sample threw at same line as
	          // the control. I.e. before we entered the sample frame. So we ignore this result.
	          // This can happen if you passed a class to function component, or non-function.
	          if (s !== 1 || c !== 1) {
	            do {
	              s--;
	              c--; // We may still have similar intermediate frames from the construct call.
	              // The next one that isn't the same should be our match though.

	              if (c < 0 || sampleLines[s] !== controlLines[c]) {
	                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
	                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

	                {
	                  if (typeof fn === 'function') {
	                    componentFrameCache.set(fn, _frame);
	                  }
	                } // Return the line we found.


	                return _frame;
	              }
	            } while (s >= 1 && c >= 0);
	          }

	          break;
	        }
	      }
	    }
	  } finally {
	    reentry = false;

	    {
	      ReactCurrentDispatcher.current = previousDispatcher;
	      reenableLogs();
	    }

	    Error.prepareStackTrace = previousPrepareStackTrace;
	  } // Fallback to just using the name if we couldn't make it throw.


	  var name = fn ? fn.displayName || fn.name : '';
	  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

	  {
	    if (typeof fn === 'function') {
	      componentFrameCache.set(fn, syntheticFrame);
	    }
	  }

	  return syntheticFrame;
	}

	function describeClassComponentFrame(ctor, source, ownerFn) {
	  {
	    return describeNativeComponentFrame(ctor, true);
	  }
	}
	function describeFunctionComponentFrame(fn, source, ownerFn) {
	  {
	    return describeNativeComponentFrame(fn, false);
	  }
	}

	function shouldConstruct(Component) {
	  var prototype = Component.prototype;
	  return !!(prototype && prototype.isReactComponent);
	}

	function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

	  if (type == null) {
	    return '';
	  }

	  if (typeof type === 'function') {
	    {
	      return describeNativeComponentFrame(type, shouldConstruct(type));
	    }
	  }

	  if (typeof type === 'string') {
	    return describeBuiltInComponentFrame(type);
	  }

	  switch (type) {
	    case REACT_SUSPENSE_TYPE:
	      return describeBuiltInComponentFrame('Suspense');

	    case REACT_SUSPENSE_LIST_TYPE:
	      return describeBuiltInComponentFrame('SuspenseList');
	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_FORWARD_REF_TYPE:
	        return describeFunctionComponentFrame(type.render);

	      case REACT_MEMO_TYPE:
	        // Memo may contain any component type so we recursively resolve it.
	        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

	      case REACT_BLOCK_TYPE:
	        return describeFunctionComponentFrame(type._render);

	      case REACT_LAZY_TYPE:
	        {
	          var lazyComponent = type;
	          var payload = lazyComponent._payload;
	          var init = lazyComponent._init;

	          try {
	            // Lazy may contain any component type so we recursively resolve it.
	            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
	          } catch (x) {}
	        }
	    }
	  }

	  return '';
	}

	function describeFiber(fiber) {
	  fiber._debugOwner ? fiber._debugOwner.type : null ;
	  fiber._debugSource ;

	  switch (fiber.tag) {
	    case HostComponent:
	      return describeBuiltInComponentFrame(fiber.type);

	    case LazyComponent:
	      return describeBuiltInComponentFrame('Lazy');

	    case SuspenseComponent:
	      return describeBuiltInComponentFrame('Suspense');

	    case SuspenseListComponent:
	      return describeBuiltInComponentFrame('SuspenseList');

	    case FunctionComponent:
	    case IndeterminateComponent:
	    case SimpleMemoComponent:
	      return describeFunctionComponentFrame(fiber.type);

	    case ForwardRef:
	      return describeFunctionComponentFrame(fiber.type.render);

	    case Block:
	      return describeFunctionComponentFrame(fiber.type._render);

	    case ClassComponent:
	      return describeClassComponentFrame(fiber.type);

	    default:
	      return '';
	  }
	}

	function getStackByFiberInDevAndProd(workInProgress) {
	  try {
	    var info = '';
	    var node = workInProgress;

	    do {
	      info += describeFiber(node);
	      node = node.return;
	    } while (node);

	    return info;
	  } catch (x) {
	    return '\nError generating stack: ' + x.message + '\n' + x.stack;
	  }
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var functionName = innerType.displayName || innerType.name || '';
	  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
	}

	function getContextName(type) {
	  return type.displayName || 'Context';
	}

	function getComponentName(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }

	  {
	    if (typeof type.tag === 'number') {
	      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }

	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }

	  if (typeof type === 'string') {
	    return type;
	  }

	  switch (type) {
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';

	    case REACT_PORTAL_TYPE:
	      return 'Portal';

	    case REACT_PROFILER_TYPE:
	      return 'Profiler';

	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';

	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';

	    case REACT_SUSPENSE_LIST_TYPE:
	      return 'SuspenseList';
	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        var context = type;
	        return getContextName(context) + '.Consumer';

	      case REACT_PROVIDER_TYPE:
	        var provider = type;
	        return getContextName(provider._context) + '.Provider';

	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');

	      case REACT_MEMO_TYPE:
	        return getComponentName(type.type);

	      case REACT_BLOCK_TYPE:
	        return getComponentName(type._render);

	      case REACT_LAZY_TYPE:
	        {
	          var lazyComponent = type;
	          var payload = lazyComponent._payload;
	          var init = lazyComponent._init;

	          try {
	            return getComponentName(init(payload));
	          } catch (x) {
	            return null;
	          }
	        }
	    }
	  }

	  return null;
	}

	var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	var current = null;
	var isRendering = false;
	function getCurrentFiberOwnerNameInDevOrNull() {
	  {
	    if (current === null) {
	      return null;
	    }

	    var owner = current._debugOwner;

	    if (owner !== null && typeof owner !== 'undefined') {
	      return getComponentName(owner.type);
	    }
	  }

	  return null;
	}

	function getCurrentFiberStackInDev() {
	  {
	    if (current === null) {
	      return '';
	    } // Safe because if current fiber exists, we are reconciling,
	    // and it is guaranteed to be the work-in-progress version.


	    return getStackByFiberInDevAndProd(current);
	  }
	}

	function resetCurrentFiber() {
	  {
	    ReactDebugCurrentFrame.getCurrentStack = null;
	    current = null;
	    isRendering = false;
	  }
	}
	function setCurrentFiber(fiber) {
	  {
	    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
	    current = fiber;
	    isRendering = false;
	  }
	}
	function setIsRendering(rendering) {
	  {
	    isRendering = rendering;
	  }
	}
	function getIsRendering() {
	  {
	    return isRendering;
	  }
	}

	// Flow does not allow string concatenation of most non-string types. To work
	// around this limitation, we use an opaque type that can only be obtained by
	// passing the value through getToStringValue first.
	function toString(value) {
	  return '' + value;
	}
	function getToStringValue(value) {
	  switch (typeof value) {
	    case 'boolean':
	    case 'number':
	    case 'object':
	    case 'string':
	    case 'undefined':
	      return value;

	    default:
	      // function, symbol are assigned as empty strings
	      return '';
	  }
	}

	var hasReadOnlyValue = {
	  button: true,
	  checkbox: true,
	  image: true,
	  hidden: true,
	  radio: true,
	  reset: true,
	  submit: true
	};
	function checkControlledValueProps(tagName, props) {
	  {
	    if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
	      error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	    }

	    if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
	      error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	    }
	  }
	}

	function isCheckable(elem) {
	  var type = elem.type;
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
	}

	function getTracker(node) {
	  return node._valueTracker;
	}

	function detachTracker(node) {
	  node._valueTracker = null;
	}

	function getValueFromNode(node) {
	  var value = '';

	  if (!node) {
	    return value;
	  }

	  if (isCheckable(node)) {
	    value = node.checked ? 'true' : 'false';
	  } else {
	    value = node.value;
	  }

	  return value;
	}

	function trackValueOnNode(node) {
	  var valueField = isCheckable(node) ? 'checked' : 'value';
	  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
	  var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
	  // and don't track value will cause over reporting of changes,
	  // but it's better then a hard failure
	  // (needed for certain tests that spyOn input values and Safari)

	  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
	    return;
	  }

	  var get = descriptor.get,
	      set = descriptor.set;
	  Object.defineProperty(node, valueField, {
	    configurable: true,
	    get: function () {
	      return get.call(this);
	    },
	    set: function (value) {
	      currentValue = '' + value;
	      set.call(this, value);
	    }
	  }); // We could've passed this the first time
	  // but it triggers a bug in IE11 and Edge 14/15.
	  // Calling defineProperty() again should be equivalent.
	  // https://github.com/facebook/react/issues/11768

	  Object.defineProperty(node, valueField, {
	    enumerable: descriptor.enumerable
	  });
	  var tracker = {
	    getValue: function () {
	      return currentValue;
	    },
	    setValue: function (value) {
	      currentValue = '' + value;
	    },
	    stopTracking: function () {
	      detachTracker(node);
	      delete node[valueField];
	    }
	  };
	  return tracker;
	}

	function track(node) {
	  if (getTracker(node)) {
	    return;
	  } // TODO: Once it's just Fiber we can move this to node._wrapperState


	  node._valueTracker = trackValueOnNode(node);
	}
	function updateValueIfChanged(node) {
	  if (!node) {
	    return false;
	  }

	  var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
	  // that trying again will succeed

	  if (!tracker) {
	    return true;
	  }

	  var lastValue = tracker.getValue();
	  var nextValue = getValueFromNode(node);

	  if (nextValue !== lastValue) {
	    tracker.setValue(nextValue);
	    return true;
	  }

	  return false;
	}

	function getActiveElement(doc) {
	  doc = doc || (typeof document !== 'undefined' ? document : undefined);

	  if (typeof doc === 'undefined') {
	    return null;
	  }

	  try {
	    return doc.activeElement || doc.body;
	  } catch (e) {
	    return doc.body;
	  }
	}

	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}
	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */


	function getHostProps(element, props) {
	  var node = element;
	  var checked = props.checked;

	  var hostProps = _assign({}, props, {
	    defaultChecked: undefined,
	    defaultValue: undefined,
	    value: undefined,
	    checked: checked != null ? checked : node._wrapperState.initialChecked
	  });

	  return hostProps;
	}
	function initWrapperState(element, props) {
	  {
	    checkControlledValueProps('input', props);

	    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	      error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

	      didWarnCheckedDefaultChecked = true;
	    }

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

	      didWarnValueDefaultValue = true;
	    }
	  }

	  var node = element;
	  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
	  node._wrapperState = {
	    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
	    controlled: isControlled(props)
	  };
	}
	function updateChecked(element, props) {
	  var node = element;
	  var checked = props.checked;

	  if (checked != null) {
	    setValueForProperty(node, 'checked', checked, false);
	  }
	}
	function updateWrapper(element, props) {
	  var node = element;

	  {
	    var controlled = isControlled(props);

	    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	      error('A component is changing an uncontrolled input to be controlled. ' + 'This is likely caused by the value changing from undefined to ' + 'a defined value, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

	      didWarnUncontrolledToControlled = true;
	    }

	    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	      error('A component is changing a controlled input to be uncontrolled. ' + 'This is likely caused by the value changing from a defined to ' + 'undefined, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

	      didWarnControlledToUncontrolled = true;
	    }
	  }

	  updateChecked(element, props);
	  var value = getToStringValue(props.value);
	  var type = props.type;

	  if (value != null) {
	    if (type === 'number') {
	      if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
	      // eslint-disable-next-line
	      node.value != value) {
	        node.value = toString(value);
	      }
	    } else if (node.value !== toString(value)) {
	      node.value = toString(value);
	    }
	  } else if (type === 'submit' || type === 'reset') {
	    // Submit/reset inputs need the attribute removed completely to avoid
	    // blank-text buttons.
	    node.removeAttribute('value');
	    return;
	  }

	  {
	    // When syncing the value attribute, the value comes from a cascade of
	    // properties:
	    //  1. The value React property
	    //  2. The defaultValue React property
	    //  3. Otherwise there should be no change
	    if (props.hasOwnProperty('value')) {
	      setDefaultValue(node, props.type, value);
	    } else if (props.hasOwnProperty('defaultValue')) {
	      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
	    }
	  }

	  {
	    // When syncing the checked attribute, it only changes when it needs
	    // to be removed, such as transitioning from a checkbox into a text input
	    if (props.checked == null && props.defaultChecked != null) {
	      node.defaultChecked = !!props.defaultChecked;
	    }
	  }
	}
	function postMountWrapper(element, props, isHydrating) {
	  var node = element; // Do not assign value if it is already set. This prevents user text input
	  // from being lost during SSR hydration.

	  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
	    var type = props.type;
	    var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
	    // default value provided by the browser. See: #12872

	    if (isButton && (props.value === undefined || props.value === null)) {
	      return;
	    }

	    var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
	    // from being lost during SSR hydration.

	    if (!isHydrating) {
	      {
	        // When syncing the value attribute, the value property should use
	        // the wrapperState._initialValue property. This uses:
	        //
	        //   1. The value React property when present
	        //   2. The defaultValue React property when present
	        //   3. An empty string
	        if (initialValue !== node.value) {
	          node.value = initialValue;
	        }
	      }
	    }

	    {
	      // Otherwise, the value attribute is synchronized to the property,
	      // so we assign defaultValue to the same thing as the value property
	      // assignment step above.
	      node.defaultValue = initialValue;
	    }
	  } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	  // this is needed to work around a chrome bug where setting defaultChecked
	  // will sometimes influence the value of checked (even after detachment).
	  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	  // We need to temporarily unset name to avoid disrupting radio button groups.


	  var name = node.name;

	  if (name !== '') {
	    node.name = '';
	  }

	  {
	    // When syncing the checked attribute, both the checked property and
	    // attribute are assigned at the same time using defaultChecked. This uses:
	    //
	    //   1. The checked React property when present
	    //   2. The defaultChecked React property when present
	    //   3. Otherwise, false
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !!node._wrapperState.initialChecked;
	  }

	  if (name !== '') {
	    node.name = name;
	  }
	}
	function restoreControlledState(element, props) {
	  var node = element;
	  updateWrapper(node, props);
	  updateNamedCousins(node, props);
	}

	function updateNamedCousins(rootNode, props) {
	  var name = props.name;

	  if (props.type === 'radio' && name != null) {
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    } // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form. It might not even be in the
	    // document. Let's just use the local `querySelectorAll` to ensure we don't
	    // miss anything.


	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];

	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      } // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.


	      var otherProps = getFiberCurrentPropsFromNode(otherNode);

	      if (!otherProps) {
	        {
	          throw Error( "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported." );
	        }
	      } // We need update the tracked value on the named cousin since the value
	      // was changed but the input saw no event or value set


	      updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.

	      updateWrapper(otherNode, otherProps);
	    }
	  }
	} // In Chrome, assigning defaultValue to certain input types triggers input validation.
	// For number inputs, the display value loses trailing decimal points. For email inputs,
	// Chrome raises "The specified value <x> is not a valid email address".
	//
	// Here we check to see if the defaultValue has actually changed, avoiding these problems
	// when the user is inputting text
	//
	// https://github.com/facebook/react/issues/7253


	function setDefaultValue(node, type, value) {
	  if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
	  type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
	    if (value == null) {
	      node.defaultValue = toString(node._wrapperState.initialValue);
	    } else if (node.defaultValue !== toString(value)) {
	      node.defaultValue = toString(value);
	    }
	  }
	}

	var didWarnSelectedSetOnOption = false;
	var didWarnInvalidChild = false;

	function flattenChildren(children) {
	  var content = ''; // Flatten children. We'll warn if they are invalid
	  // during validateProps() which runs for hydration too.
	  // Note that this would throw on non-element objects.
	  // Elements are stringified (which is normally irrelevant
	  // but matters for <fbt>).

	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }

	    content += child; // Note: we don't warn about invalid children here.
	    // Instead, this is done separately below so that
	    // it happens during the hydration code path too.
	  });
	  return content;
	}
	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */


	function validateProps(element, props) {
	  {
	    // This mirrors the code path above, but runs for hydration too.
	    // Warn about invalid children here so that client and hydration are consistent.
	    // TODO: this seems like it could cause a DEV-only throw for hydration
	    // if children contains a non-element object. We should try to avoid that.
	    if (typeof props.children === 'object' && props.children !== null) {
	      React.Children.forEach(props.children, function (child) {
	        if (child == null) {
	          return;
	        }

	        if (typeof child === 'string' || typeof child === 'number') {
	          return;
	        }

	        if (typeof child.type !== 'string') {
	          return;
	        }

	        if (!didWarnInvalidChild) {
	          didWarnInvalidChild = true;

	          error('Only strings and numbers are supported as <option> children.');
	        }
	      });
	    } // TODO: Remove support for `selected` in <option>.


	    if (props.selected != null && !didWarnSelectedSetOnOption) {
	      error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');

	      didWarnSelectedSetOnOption = true;
	    }
	  }
	}
	function postMountWrapper$1(element, props) {
	  // value="" should make a value attribute (#6219)
	  if (props.value != null) {
	    element.setAttribute('value', toString(getToStringValue(props.value)));
	  }
	}
	function getHostProps$1(element, props) {
	  var hostProps = _assign({
	    children: undefined
	  }, props);

	  var content = flattenChildren(props.children);

	  if (content) {
	    hostProps.children = content;
	  }

	  return hostProps;
	}

	var didWarnValueDefaultValue$1;

	{
	  didWarnValueDefaultValue$1 = false;
	}

	function getDeclarationErrorAddendum() {
	  var ownerName = getCurrentFiberOwnerNameInDevOrNull();

	  if (ownerName) {
	    return '\n\nCheck the render method of `' + ownerName + '`.';
	  }

	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];
	/**
	 * Validation function for `value` and `defaultValue`.
	 */

	function checkSelectPropTypes(props) {
	  {
	    checkControlledValueProps('select', props);

	    for (var i = 0; i < valuePropNames.length; i++) {
	      var propName = valuePropNames[i];

	      if (props[propName] == null) {
	        continue;
	      }

	      var isArray = Array.isArray(props[propName]);

	      if (props.multiple && !isArray) {
	        error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
	      } else if (!props.multiple && isArray) {
	        error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
	      }
	    }
	  }
	}

	function updateOptions(node, multiple, propValue, setDefaultSelected) {
	  var options = node.options;

	  if (multiple) {
	    var selectedValues = propValue;
	    var selectedValue = {};

	    for (var i = 0; i < selectedValues.length; i++) {
	      // Prefix to avoid chaos with special keys.
	      selectedValue['$' + selectedValues[i]] = true;
	    }

	    for (var _i = 0; _i < options.length; _i++) {
	      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

	      if (options[_i].selected !== selected) {
	        options[_i].selected = selected;
	      }

	      if (selected && setDefaultSelected) {
	        options[_i].defaultSelected = true;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    var _selectedValue = toString(getToStringValue(propValue));

	    var defaultSelected = null;

	    for (var _i2 = 0; _i2 < options.length; _i2++) {
	      if (options[_i2].value === _selectedValue) {
	        options[_i2].selected = true;

	        if (setDefaultSelected) {
	          options[_i2].defaultSelected = true;
	        }

	        return;
	      }

	      if (defaultSelected === null && !options[_i2].disabled) {
	        defaultSelected = options[_i2];
	      }
	    }

	    if (defaultSelected !== null) {
	      defaultSelected.selected = true;
	    }
	  }
	}
	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */


	function getHostProps$2(element, props) {
	  return _assign({}, props, {
	    value: undefined
	  });
	}
	function initWrapperState$1(element, props) {
	  var node = element;

	  {
	    checkSelectPropTypes(props);
	  }

	  node._wrapperState = {
	    wasMultiple: !!props.multiple
	  };

	  {
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
	      error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');

	      didWarnValueDefaultValue$1 = true;
	    }
	  }
	}
	function postMountWrapper$2(element, props) {
	  var node = element;
	  node.multiple = !!props.multiple;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  } else if (props.defaultValue != null) {
	    updateOptions(node, !!props.multiple, props.defaultValue, true);
	  }
	}
	function postUpdateWrapper(element, props) {
	  var node = element;
	  var wasMultiple = node._wrapperState.wasMultiple;
	  node._wrapperState.wasMultiple = !!props.multiple;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  } else if (wasMultiple !== !!props.multiple) {
	    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	    if (props.defaultValue != null) {
	      updateOptions(node, !!props.multiple, props.defaultValue, true);
	    } else {
	      // Revert the select back to its default unselected state.
	      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
	    }
	  }
	}
	function restoreControlledState$1(element, props) {
	  var node = element;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  }
	}

	var didWarnValDefaultVal = false;

	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	function getHostProps$3(element, props) {
	  var node = element;

	  if (!(props.dangerouslySetInnerHTML == null)) {
	    {
	      throw Error( "`dangerouslySetInnerHTML` does not make sense on <textarea>." );
	    }
	  } // Always set children to the same thing. In IE9, the selection range will
	  // get reset if `textContent` is mutated.  We could add a check in setTextContent
	  // to only set the value if/when the value differs from the node value (which would
	  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
	  // solution. The value can be a boolean or object so that's why it's forced
	  // to be a string.


	  var hostProps = _assign({}, props, {
	    value: undefined,
	    defaultValue: undefined,
	    children: toString(node._wrapperState.initialValue)
	  });

	  return hostProps;
	}
	function initWrapperState$2(element, props) {
	  var node = element;

	  {
	    checkControlledValueProps('textarea', props);

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	      error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');

	      didWarnValDefaultVal = true;
	    }
	  }

	  var initialValue = props.value; // Only bother fetching default value if we're going to use it

	  if (initialValue == null) {
	    var children = props.children,
	        defaultValue = props.defaultValue;

	    if (children != null) {
	      {
	        error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
	      }

	      {
	        if (!(defaultValue == null)) {
	          {
	            throw Error( "If you supply `defaultValue` on a <textarea>, do not pass children." );
	          }
	        }

	        if (Array.isArray(children)) {
	          if (!(children.length <= 1)) {
	            {
	              throw Error( "<textarea> can only have at most one child." );
	            }
	          }

	          children = children[0];
	        }

	        defaultValue = children;
	      }
	    }

	    if (defaultValue == null) {
	      defaultValue = '';
	    }

	    initialValue = defaultValue;
	  }

	  node._wrapperState = {
	    initialValue: getToStringValue(initialValue)
	  };
	}
	function updateWrapper$1(element, props) {
	  var node = element;
	  var value = getToStringValue(props.value);
	  var defaultValue = getToStringValue(props.defaultValue);

	  if (value != null) {
	    // Cast `value` to a string to ensure the value is set correctly. While
	    // browsers typically do this as necessary, jsdom doesn't.
	    var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

	    if (newValue !== node.value) {
	      node.value = newValue;
	    }

	    if (props.defaultValue == null && node.defaultValue !== newValue) {
	      node.defaultValue = newValue;
	    }
	  }

	  if (defaultValue != null) {
	    node.defaultValue = toString(defaultValue);
	  }
	}
	function postMountWrapper$3(element, props) {
	  var node = element; // This is in postMount because we need access to the DOM node, which is not
	  // available until after the component has mounted.

	  var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
	  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
	  // will populate textContent as well.
	  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

	  if (textContent === node._wrapperState.initialValue) {
	    if (textContent !== '' && textContent !== null) {
	      node.value = textContent;
	    }
	  }
	}
	function restoreControlledState$2(element, props) {
	  // DOM component is still mounted; update
	  updateWrapper$1(element, props);
	}

	var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
	var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
	var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
	var Namespaces = {
	  html: HTML_NAMESPACE,
	  mathml: MATH_NAMESPACE,
	  svg: SVG_NAMESPACE
	}; // Assumes there is no parent namespace.

	function getIntrinsicNamespace(type) {
	  switch (type) {
	    case 'svg':
	      return SVG_NAMESPACE;

	    case 'math':
	      return MATH_NAMESPACE;

	    default:
	      return HTML_NAMESPACE;
	  }
	}
	function getChildNamespace(parentNamespace, type) {
	  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
	    // No (or default) parent namespace: potential entry point.
	    return getIntrinsicNamespace(type);
	  }

	  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
	    // We're leaving SVG.
	    return HTML_NAMESPACE;
	  } // By default, pass namespace below.


	  return parentNamespace;
	}

	/* globals MSApp */

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */
	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	var reusableSVGContainer;
	/**
	 * Set the innerHTML property of a node
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */

	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  if (node.namespaceURI === Namespaces.svg) {

	    if (!('innerHTML' in node)) {
	      // IE does not have innerHTML for SVG nodes, so instead we inject the
	      // new markup in a temp node and then move the child nodes across into
	      // the target node
	      reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
	      var svgNode = reusableSVGContainer.firstChild;

	      while (node.firstChild) {
	        node.removeChild(node.firstChild);
	      }

	      while (svgNode.firstChild) {
	        node.appendChild(svgNode.firstChild);
	      }

	      return;
	    }
	  }

	  node.innerHTML = html;
	});

	/**
	 * HTML nodeType values that represent the type of the node
	 */
	var ELEMENT_NODE = 1;
	var TEXT_NODE = 3;
	var COMMENT_NODE = 8;
	var DOCUMENT_NODE = 9;
	var DOCUMENT_FRAGMENT_NODE = 11;

	/**
	 * Set the textContent property of a node. For text updates, it's faster
	 * to set the `nodeValue` of the Text node directly instead of using
	 * `.textContent` which will remove the existing node and create a new one.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */

	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;

	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }

	  node.textContent = text;
	};

	// List derived from Gecko source code:
	// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
	var shorthandToLonghand = {
	  animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
	  background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
	  backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
	  border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
	  borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
	  borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
	  borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
	  borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
	  borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
	  borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
	  borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
	  borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
	  borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
	  borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
	  borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
	  borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
	  borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
	  columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
	  columns: ['columnCount', 'columnWidth'],
	  flex: ['flexBasis', 'flexGrow', 'flexShrink'],
	  flexFlow: ['flexDirection', 'flexWrap'],
	  font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
	  fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
	  gap: ['columnGap', 'rowGap'],
	  grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
	  gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
	  gridColumn: ['gridColumnEnd', 'gridColumnStart'],
	  gridColumnGap: ['columnGap'],
	  gridGap: ['columnGap', 'rowGap'],
	  gridRow: ['gridRowEnd', 'gridRowStart'],
	  gridRowGap: ['rowGap'],
	  gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
	  listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
	  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
	  marker: ['markerEnd', 'markerMid', 'markerStart'],
	  mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
	  maskPosition: ['maskPositionX', 'maskPositionY'],
	  outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
	  overflow: ['overflowX', 'overflowY'],
	  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
	  placeContent: ['alignContent', 'justifyContent'],
	  placeItems: ['alignItems', 'justifyItems'],
	  placeSelf: ['alignSelf', 'justifySelf'],
	  textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
	  textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
	  transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
	  wordWrap: ['overflowWrap']
	};

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  columns: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridArea: true,
	  gridRow: true,
	  gridRowEnd: true,
	  gridRowSpan: true,
	  gridRowStart: true,
	  gridColumn: true,
	  gridColumnEnd: true,
	  gridColumnSpan: true,
	  gridColumnStart: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */

	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */


	var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.

	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */

	function dangerousStyleValue(name, value, isCustomProperty) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';

	  if (isEmpty) {
	    return '';
	  }

	  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
	    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
	  }

	  return ('' + value).trim();
	}

	var uppercasePattern = /([A-Z])/g;
	var msPattern = /^ms-/;
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 */

	function hyphenateStyleName(name) {
	  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
	}

	var warnValidStyle = function () {};

	{
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	  var msPattern$1 = /^-ms-/;
	  var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

	  var badStyleValueWithSemicolonPattern = /;\s*$/;
	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;
	  var warnedForInfinityValue = false;

	  var camelize = function (string) {
	    return string.replace(hyphenPattern, function (_, character) {
	      return character.toUpperCase();
	    });
	  };

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;

	    error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
	    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	    // is converted to lowercase `ms`.
	    camelize(name.replace(msPattern$1, 'ms-')));
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;

	    error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;

	    error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
	  };

	  var warnStyleValueIsNaN = function (name, value) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;

	    error('`NaN` is an invalid value for the `%s` css style property.', name);
	  };

	  var warnStyleValueIsInfinity = function (name, value) {
	    if (warnedForInfinityValue) {
	      return;
	    }

	    warnedForInfinityValue = true;

	    error('`Infinity` is an invalid value for the `%s` css style property.', name);
	  };

	  warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }

	    if (typeof value === 'number') {
	      if (isNaN(value)) {
	        warnStyleValueIsNaN(name, value);
	      } else if (!isFinite(value)) {
	        warnStyleValueIsInfinity(name, value);
	      }
	    }
	  };
	}

	var warnValidStyle$1 = warnValidStyle;

	/**
	 * Operations for dealing with CSS properties.
	 */

	/**
	 * This creates a string that is expected to be equivalent to the style
	 * attribute generated by server-side rendering. It by-passes warnings and
	 * security checks so it's not safe to use this value for anything other than
	 * comparison. It is only used in DEV for SSR validation.
	 */

	function createDangerousStringForStyles(styles) {
	  {
	    var serialized = '';
	    var delimiter = '';

	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }

	      var styleValue = styles[styleName];

	      if (styleValue != null) {
	        var isCustomProperty = styleName.indexOf('--') === 0;
	        serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
	        delimiter = ';';
	      }
	    }

	    return serialized || null;
	  }
	}
	/**
	 * Sets the value for multiple styles on a node.  If a value is specified as
	 * '' (empty string), the corresponding style property will be unset.
	 *
	 * @param {DOMElement} node
	 * @param {object} styles
	 */

	function setValueForStyles(node, styles) {
	  var style = node.style;

	  for (var styleName in styles) {
	    if (!styles.hasOwnProperty(styleName)) {
	      continue;
	    }

	    var isCustomProperty = styleName.indexOf('--') === 0;

	    {
	      if (!isCustomProperty) {
	        warnValidStyle$1(styleName, styles[styleName]);
	      }
	    }

	    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

	    if (styleName === 'float') {
	      styleName = 'cssFloat';
	    }

	    if (isCustomProperty) {
	      style.setProperty(styleName, styleValue);
	    } else {
	      style[styleName] = styleValue;
	    }
	  }
	}

	function isValueEmpty(value) {
	  return value == null || typeof value === 'boolean' || value === '';
	}
	/**
	 * Given {color: 'red', overflow: 'hidden'} returns {
	 *   color: 'color',
	 *   overflowX: 'overflow',
	 *   overflowY: 'overflow',
	 * }. This can be read as "the overflowY property was set by the overflow
	 * shorthand". That is, the values are the property that each was derived from.
	 */


	function expandShorthandMap(styles) {
	  var expanded = {};

	  for (var key in styles) {
	    var longhands = shorthandToLonghand[key] || [key];

	    for (var i = 0; i < longhands.length; i++) {
	      expanded[longhands[i]] = key;
	    }
	  }

	  return expanded;
	}
	/**
	 * When mixing shorthand and longhand property names, we warn during updates if
	 * we expect an incorrect result to occur. In particular, we warn for:
	 *
	 * Updating a shorthand property (longhand gets overwritten):
	 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
	 *   becomes .style.font = 'baz'
	 * Removing a shorthand property (longhand gets lost too):
	 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
	 *   becomes .style.font = ''
	 * Removing a longhand property (should revert to shorthand; doesn't):
	 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
	 *   becomes .style.fontVariant = ''
	 */


	function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
	  {
	    if (!nextStyles) {
	      return;
	    }

	    var expandedUpdates = expandShorthandMap(styleUpdates);
	    var expandedStyles = expandShorthandMap(nextStyles);
	    var warnedAbout = {};

	    for (var key in expandedUpdates) {
	      var originalKey = expandedUpdates[key];
	      var correctOriginalKey = expandedStyles[key];

	      if (correctOriginalKey && originalKey !== correctOriginalKey) {
	        var warningKey = originalKey + ',' + correctOriginalKey;

	        if (warnedAbout[warningKey]) {
	          continue;
	        }

	        warnedAbout[warningKey] = true;

	        error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
	      }
	    }
	  }
	}

	// For HTML, certain tags should omit their close tag. We keep a list for
	// those special-case tags.
	var omittedCloseTags = {
	  area: true,
	  base: true,
	  br: true,
	  col: true,
	  embed: true,
	  hr: true,
	  img: true,
	  input: true,
	  keygen: true,
	  link: true,
	  meta: true,
	  param: true,
	  source: true,
	  track: true,
	  wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

	};

	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = _assign({
	  menuitem: true
	}, omittedCloseTags);

	var HTML = '__html';

	function assertValidProps(tag, props) {
	  if (!props) {
	    return;
	  } // Note the use of `==` which checks for null or undefined.


	  if (voidElementTags[tag]) {
	    if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
	      {
	        throw Error( tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." );
	      }
	    }
	  }

	  if (props.dangerouslySetInnerHTML != null) {
	    if (!(props.children == null)) {
	      {
	        throw Error( "Can only set one of `children` or `props.dangerouslySetInnerHTML`." );
	      }
	    }

	    if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) {
	      {
	        throw Error( "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information." );
	      }
	    }
	  }

	  {
	    if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
	      error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
	    }
	  }

	  if (!(props.style == null || typeof props.style === 'object')) {
	    {
	      throw Error( "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." );
	    }
	  }
	}

	function isCustomComponent(tagName, props) {
	  if (tagName.indexOf('-') === -1) {
	    return typeof props.is === 'string';
	  }

	  switch (tagName) {
	    // These are reserved SVG and MathML elements.
	    // We don't mind this list too much because we expect it to never grow.
	    // The alternative is to track the namespace in a few places which is convoluted.
	    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
	    case 'annotation-xml':
	    case 'color-profile':
	    case 'font-face':
	    case 'font-face-src':
	    case 'font-face-uri':
	    case 'font-face-format':
	    case 'font-face-name':
	    case 'missing-glyph':
	      return false;

	    default:
	      return true;
	  }
	}

	// When adding attributes to the HTML or SVG allowed attribute list, be sure to
	// also add them to this module to ensure casing and incorrect name
	// warnings.
	var possibleStandardNames = {
	  // HTML
	  accept: 'accept',
	  acceptcharset: 'acceptCharset',
	  'accept-charset': 'acceptCharset',
	  accesskey: 'accessKey',
	  action: 'action',
	  allowfullscreen: 'allowFullScreen',
	  alt: 'alt',
	  as: 'as',
	  async: 'async',
	  autocapitalize: 'autoCapitalize',
	  autocomplete: 'autoComplete',
	  autocorrect: 'autoCorrect',
	  autofocus: 'autoFocus',
	  autoplay: 'autoPlay',
	  autosave: 'autoSave',
	  capture: 'capture',
	  cellpadding: 'cellPadding',
	  cellspacing: 'cellSpacing',
	  challenge: 'challenge',
	  charset: 'charSet',
	  checked: 'checked',
	  children: 'children',
	  cite: 'cite',
	  class: 'className',
	  classid: 'classID',
	  classname: 'className',
	  cols: 'cols',
	  colspan: 'colSpan',
	  content: 'content',
	  contenteditable: 'contentEditable',
	  contextmenu: 'contextMenu',
	  controls: 'controls',
	  controlslist: 'controlsList',
	  coords: 'coords',
	  crossorigin: 'crossOrigin',
	  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
	  data: 'data',
	  datetime: 'dateTime',
	  default: 'default',
	  defaultchecked: 'defaultChecked',
	  defaultvalue: 'defaultValue',
	  defer: 'defer',
	  dir: 'dir',
	  disabled: 'disabled',
	  disablepictureinpicture: 'disablePictureInPicture',
	  disableremoteplayback: 'disableRemotePlayback',
	  download: 'download',
	  draggable: 'draggable',
	  enctype: 'encType',
	  enterkeyhint: 'enterKeyHint',
	  for: 'htmlFor',
	  form: 'form',
	  formmethod: 'formMethod',
	  formaction: 'formAction',
	  formenctype: 'formEncType',
	  formnovalidate: 'formNoValidate',
	  formtarget: 'formTarget',
	  frameborder: 'frameBorder',
	  headers: 'headers',
	  height: 'height',
	  hidden: 'hidden',
	  high: 'high',
	  href: 'href',
	  hreflang: 'hrefLang',
	  htmlfor: 'htmlFor',
	  httpequiv: 'httpEquiv',
	  'http-equiv': 'httpEquiv',
	  icon: 'icon',
	  id: 'id',
	  innerhtml: 'innerHTML',
	  inputmode: 'inputMode',
	  integrity: 'integrity',
	  is: 'is',
	  itemid: 'itemID',
	  itemprop: 'itemProp',
	  itemref: 'itemRef',
	  itemscope: 'itemScope',
	  itemtype: 'itemType',
	  keyparams: 'keyParams',
	  keytype: 'keyType',
	  kind: 'kind',
	  label: 'label',
	  lang: 'lang',
	  list: 'list',
	  loop: 'loop',
	  low: 'low',
	  manifest: 'manifest',
	  marginwidth: 'marginWidth',
	  marginheight: 'marginHeight',
	  max: 'max',
	  maxlength: 'maxLength',
	  media: 'media',
	  mediagroup: 'mediaGroup',
	  method: 'method',
	  min: 'min',
	  minlength: 'minLength',
	  multiple: 'multiple',
	  muted: 'muted',
	  name: 'name',
	  nomodule: 'noModule',
	  nonce: 'nonce',
	  novalidate: 'noValidate',
	  open: 'open',
	  optimum: 'optimum',
	  pattern: 'pattern',
	  placeholder: 'placeholder',
	  playsinline: 'playsInline',
	  poster: 'poster',
	  preload: 'preload',
	  profile: 'profile',
	  radiogroup: 'radioGroup',
	  readonly: 'readOnly',
	  referrerpolicy: 'referrerPolicy',
	  rel: 'rel',
	  required: 'required',
	  reversed: 'reversed',
	  role: 'role',
	  rows: 'rows',
	  rowspan: 'rowSpan',
	  sandbox: 'sandbox',
	  scope: 'scope',
	  scoped: 'scoped',
	  scrolling: 'scrolling',
	  seamless: 'seamless',
	  selected: 'selected',
	  shape: 'shape',
	  size: 'size',
	  sizes: 'sizes',
	  span: 'span',
	  spellcheck: 'spellCheck',
	  src: 'src',
	  srcdoc: 'srcDoc',
	  srclang: 'srcLang',
	  srcset: 'srcSet',
	  start: 'start',
	  step: 'step',
	  style: 'style',
	  summary: 'summary',
	  tabindex: 'tabIndex',
	  target: 'target',
	  title: 'title',
	  type: 'type',
	  usemap: 'useMap',
	  value: 'value',
	  width: 'width',
	  wmode: 'wmode',
	  wrap: 'wrap',
	  // SVG
	  about: 'about',
	  accentheight: 'accentHeight',
	  'accent-height': 'accentHeight',
	  accumulate: 'accumulate',
	  additive: 'additive',
	  alignmentbaseline: 'alignmentBaseline',
	  'alignment-baseline': 'alignmentBaseline',
	  allowreorder: 'allowReorder',
	  alphabetic: 'alphabetic',
	  amplitude: 'amplitude',
	  arabicform: 'arabicForm',
	  'arabic-form': 'arabicForm',
	  ascent: 'ascent',
	  attributename: 'attributeName',
	  attributetype: 'attributeType',
	  autoreverse: 'autoReverse',
	  azimuth: 'azimuth',
	  basefrequency: 'baseFrequency',
	  baselineshift: 'baselineShift',
	  'baseline-shift': 'baselineShift',
	  baseprofile: 'baseProfile',
	  bbox: 'bbox',
	  begin: 'begin',
	  bias: 'bias',
	  by: 'by',
	  calcmode: 'calcMode',
	  capheight: 'capHeight',
	  'cap-height': 'capHeight',
	  clip: 'clip',
	  clippath: 'clipPath',
	  'clip-path': 'clipPath',
	  clippathunits: 'clipPathUnits',
	  cliprule: 'clipRule',
	  'clip-rule': 'clipRule',
	  color: 'color',
	  colorinterpolation: 'colorInterpolation',
	  'color-interpolation': 'colorInterpolation',
	  colorinterpolationfilters: 'colorInterpolationFilters',
	  'color-interpolation-filters': 'colorInterpolationFilters',
	  colorprofile: 'colorProfile',
	  'color-profile': 'colorProfile',
	  colorrendering: 'colorRendering',
	  'color-rendering': 'colorRendering',
	  contentscripttype: 'contentScriptType',
	  contentstyletype: 'contentStyleType',
	  cursor: 'cursor',
	  cx: 'cx',
	  cy: 'cy',
	  d: 'd',
	  datatype: 'datatype',
	  decelerate: 'decelerate',
	  descent: 'descent',
	  diffuseconstant: 'diffuseConstant',
	  direction: 'direction',
	  display: 'display',
	  divisor: 'divisor',
	  dominantbaseline: 'dominantBaseline',
	  'dominant-baseline': 'dominantBaseline',
	  dur: 'dur',
	  dx: 'dx',
	  dy: 'dy',
	  edgemode: 'edgeMode',
	  elevation: 'elevation',
	  enablebackground: 'enableBackground',
	  'enable-background': 'enableBackground',
	  end: 'end',
	  exponent: 'exponent',
	  externalresourcesrequired: 'externalResourcesRequired',
	  fill: 'fill',
	  fillopacity: 'fillOpacity',
	  'fill-opacity': 'fillOpacity',
	  fillrule: 'fillRule',
	  'fill-rule': 'fillRule',
	  filter: 'filter',
	  filterres: 'filterRes',
	  filterunits: 'filterUnits',
	  floodopacity: 'floodOpacity',
	  'flood-opacity': 'floodOpacity',
	  floodcolor: 'floodColor',
	  'flood-color': 'floodColor',
	  focusable: 'focusable',
	  fontfamily: 'fontFamily',
	  'font-family': 'fontFamily',
	  fontsize: 'fontSize',
	  'font-size': 'fontSize',
	  fontsizeadjust: 'fontSizeAdjust',
	  'font-size-adjust': 'fontSizeAdjust',
	  fontstretch: 'fontStretch',
	  'font-stretch': 'fontStretch',
	  fontstyle: 'fontStyle',
	  'font-style': 'fontStyle',
	  fontvariant: 'fontVariant',
	  'font-variant': 'fontVariant',
	  fontweight: 'fontWeight',
	  'font-weight': 'fontWeight',
	  format: 'format',
	  from: 'from',
	  fx: 'fx',
	  fy: 'fy',
	  g1: 'g1',
	  g2: 'g2',
	  glyphname: 'glyphName',
	  'glyph-name': 'glyphName',
	  glyphorientationhorizontal: 'glyphOrientationHorizontal',
	  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
	  glyphorientationvertical: 'glyphOrientationVertical',
	  'glyph-orientation-vertical': 'glyphOrientationVertical',
	  glyphref: 'glyphRef',
	  gradienttransform: 'gradientTransform',
	  gradientunits: 'gradientUnits',
	  hanging: 'hanging',
	  horizadvx: 'horizAdvX',
	  'horiz-adv-x': 'horizAdvX',
	  horizoriginx: 'horizOriginX',
	  'horiz-origin-x': 'horizOriginX',
	  ideographic: 'ideographic',
	  imagerendering: 'imageRendering',
	  'image-rendering': 'imageRendering',
	  in2: 'in2',
	  in: 'in',
	  inlist: 'inlist',
	  intercept: 'intercept',
	  k1: 'k1',
	  k2: 'k2',
	  k3: 'k3',
	  k4: 'k4',
	  k: 'k',
	  kernelmatrix: 'kernelMatrix',
	  kernelunitlength: 'kernelUnitLength',
	  kerning: 'kerning',
	  keypoints: 'keyPoints',
	  keysplines: 'keySplines',
	  keytimes: 'keyTimes',
	  lengthadjust: 'lengthAdjust',
	  letterspacing: 'letterSpacing',
	  'letter-spacing': 'letterSpacing',
	  lightingcolor: 'lightingColor',
	  'lighting-color': 'lightingColor',
	  limitingconeangle: 'limitingConeAngle',
	  local: 'local',
	  markerend: 'markerEnd',
	  'marker-end': 'markerEnd',
	  markerheight: 'markerHeight',
	  markermid: 'markerMid',
	  'marker-mid': 'markerMid',
	  markerstart: 'markerStart',
	  'marker-start': 'markerStart',
	  markerunits: 'markerUnits',
	  markerwidth: 'markerWidth',
	  mask: 'mask',
	  maskcontentunits: 'maskContentUnits',
	  maskunits: 'maskUnits',
	  mathematical: 'mathematical',
	  mode: 'mode',
	  numoctaves: 'numOctaves',
	  offset: 'offset',
	  opacity: 'opacity',
	  operator: 'operator',
	  order: 'order',
	  orient: 'orient',
	  orientation: 'orientation',
	  origin: 'origin',
	  overflow: 'overflow',
	  overlineposition: 'overlinePosition',
	  'overline-position': 'overlinePosition',
	  overlinethickness: 'overlineThickness',
	  'overline-thickness': 'overlineThickness',
	  paintorder: 'paintOrder',
	  'paint-order': 'paintOrder',
	  panose1: 'panose1',
	  'panose-1': 'panose1',
	  pathlength: 'pathLength',
	  patterncontentunits: 'patternContentUnits',
	  patterntransform: 'patternTransform',
	  patternunits: 'patternUnits',
	  pointerevents: 'pointerEvents',
	  'pointer-events': 'pointerEvents',
	  points: 'points',
	  pointsatx: 'pointsAtX',
	  pointsaty: 'pointsAtY',
	  pointsatz: 'pointsAtZ',
	  prefix: 'prefix',
	  preservealpha: 'preserveAlpha',
	  preserveaspectratio: 'preserveAspectRatio',
	  primitiveunits: 'primitiveUnits',
	  property: 'property',
	  r: 'r',
	  radius: 'radius',
	  refx: 'refX',
	  refy: 'refY',
	  renderingintent: 'renderingIntent',
	  'rendering-intent': 'renderingIntent',
	  repeatcount: 'repeatCount',
	  repeatdur: 'repeatDur',
	  requiredextensions: 'requiredExtensions',
	  requiredfeatures: 'requiredFeatures',
	  resource: 'resource',
	  restart: 'restart',
	  result: 'result',
	  results: 'results',
	  rotate: 'rotate',
	  rx: 'rx',
	  ry: 'ry',
	  scale: 'scale',
	  security: 'security',
	  seed: 'seed',
	  shaperendering: 'shapeRendering',
	  'shape-rendering': 'shapeRendering',
	  slope: 'slope',
	  spacing: 'spacing',
	  specularconstant: 'specularConstant',
	  specularexponent: 'specularExponent',
	  speed: 'speed',
	  spreadmethod: 'spreadMethod',
	  startoffset: 'startOffset',
	  stddeviation: 'stdDeviation',
	  stemh: 'stemh',
	  stemv: 'stemv',
	  stitchtiles: 'stitchTiles',
	  stopcolor: 'stopColor',
	  'stop-color': 'stopColor',
	  stopopacity: 'stopOpacity',
	  'stop-opacity': 'stopOpacity',
	  strikethroughposition: 'strikethroughPosition',
	  'strikethrough-position': 'strikethroughPosition',
	  strikethroughthickness: 'strikethroughThickness',
	  'strikethrough-thickness': 'strikethroughThickness',
	  string: 'string',
	  stroke: 'stroke',
	  strokedasharray: 'strokeDasharray',
	  'stroke-dasharray': 'strokeDasharray',
	  strokedashoffset: 'strokeDashoffset',
	  'stroke-dashoffset': 'strokeDashoffset',
	  strokelinecap: 'strokeLinecap',
	  'stroke-linecap': 'strokeLinecap',
	  strokelinejoin: 'strokeLinejoin',
	  'stroke-linejoin': 'strokeLinejoin',
	  strokemiterlimit: 'strokeMiterlimit',
	  'stroke-miterlimit': 'strokeMiterlimit',
	  strokewidth: 'strokeWidth',
	  'stroke-width': 'strokeWidth',
	  strokeopacity: 'strokeOpacity',
	  'stroke-opacity': 'strokeOpacity',
	  suppresscontenteditablewarning: 'suppressContentEditableWarning',
	  suppresshydrationwarning: 'suppressHydrationWarning',
	  surfacescale: 'surfaceScale',
	  systemlanguage: 'systemLanguage',
	  tablevalues: 'tableValues',
	  targetx: 'targetX',
	  targety: 'targetY',
	  textanchor: 'textAnchor',
	  'text-anchor': 'textAnchor',
	  textdecoration: 'textDecoration',
	  'text-decoration': 'textDecoration',
	  textlength: 'textLength',
	  textrendering: 'textRendering',
	  'text-rendering': 'textRendering',
	  to: 'to',
	  transform: 'transform',
	  typeof: 'typeof',
	  u1: 'u1',
	  u2: 'u2',
	  underlineposition: 'underlinePosition',
	  'underline-position': 'underlinePosition',
	  underlinethickness: 'underlineThickness',
	  'underline-thickness': 'underlineThickness',
	  unicode: 'unicode',
	  unicodebidi: 'unicodeBidi',
	  'unicode-bidi': 'unicodeBidi',
	  unicoderange: 'unicodeRange',
	  'unicode-range': 'unicodeRange',
	  unitsperem: 'unitsPerEm',
	  'units-per-em': 'unitsPerEm',
	  unselectable: 'unselectable',
	  valphabetic: 'vAlphabetic',
	  'v-alphabetic': 'vAlphabetic',
	  values: 'values',
	  vectoreffect: 'vectorEffect',
	  'vector-effect': 'vectorEffect',
	  version: 'version',
	  vertadvy: 'vertAdvY',
	  'vert-adv-y': 'vertAdvY',
	  vertoriginx: 'vertOriginX',
	  'vert-origin-x': 'vertOriginX',
	  vertoriginy: 'vertOriginY',
	  'vert-origin-y': 'vertOriginY',
	  vhanging: 'vHanging',
	  'v-hanging': 'vHanging',
	  videographic: 'vIdeographic',
	  'v-ideographic': 'vIdeographic',
	  viewbox: 'viewBox',
	  viewtarget: 'viewTarget',
	  visibility: 'visibility',
	  vmathematical: 'vMathematical',
	  'v-mathematical': 'vMathematical',
	  vocab: 'vocab',
	  widths: 'widths',
	  wordspacing: 'wordSpacing',
	  'word-spacing': 'wordSpacing',
	  writingmode: 'writingMode',
	  'writing-mode': 'writingMode',
	  x1: 'x1',
	  x2: 'x2',
	  x: 'x',
	  xchannelselector: 'xChannelSelector',
	  xheight: 'xHeight',
	  'x-height': 'xHeight',
	  xlinkactuate: 'xlinkActuate',
	  'xlink:actuate': 'xlinkActuate',
	  xlinkarcrole: 'xlinkArcrole',
	  'xlink:arcrole': 'xlinkArcrole',
	  xlinkhref: 'xlinkHref',
	  'xlink:href': 'xlinkHref',
	  xlinkrole: 'xlinkRole',
	  'xlink:role': 'xlinkRole',
	  xlinkshow: 'xlinkShow',
	  'xlink:show': 'xlinkShow',
	  xlinktitle: 'xlinkTitle',
	  'xlink:title': 'xlinkTitle',
	  xlinktype: 'xlinkType',
	  'xlink:type': 'xlinkType',
	  xmlbase: 'xmlBase',
	  'xml:base': 'xmlBase',
	  xmllang: 'xmlLang',
	  'xml:lang': 'xmlLang',
	  xmlns: 'xmlns',
	  'xml:space': 'xmlSpace',
	  xmlnsxlink: 'xmlnsXlink',
	  'xmlns:xlink': 'xmlnsXlink',
	  xmlspace: 'xmlSpace',
	  y1: 'y1',
	  y2: 'y2',
	  y: 'y',
	  ychannelselector: 'yChannelSelector',
	  z: 'z',
	  zoomandpan: 'zoomAndPan'
	};

	var ariaProperties = {
	  'aria-current': 0,
	  // state
	  'aria-details': 0,
	  'aria-disabled': 0,
	  // state
	  'aria-hidden': 0,
	  // state
	  'aria-invalid': 0,
	  // state
	  'aria-keyshortcuts': 0,
	  'aria-label': 0,
	  'aria-roledescription': 0,
	  // Widget Attributes
	  'aria-autocomplete': 0,
	  'aria-checked': 0,
	  'aria-expanded': 0,
	  'aria-haspopup': 0,
	  'aria-level': 0,
	  'aria-modal': 0,
	  'aria-multiline': 0,
	  'aria-multiselectable': 0,
	  'aria-orientation': 0,
	  'aria-placeholder': 0,
	  'aria-pressed': 0,
	  'aria-readonly': 0,
	  'aria-required': 0,
	  'aria-selected': 0,
	  'aria-sort': 0,
	  'aria-valuemax': 0,
	  'aria-valuemin': 0,
	  'aria-valuenow': 0,
	  'aria-valuetext': 0,
	  // Live Region Attributes
	  'aria-atomic': 0,
	  'aria-busy': 0,
	  'aria-live': 0,
	  'aria-relevant': 0,
	  // Drag-and-Drop Attributes
	  'aria-dropeffect': 0,
	  'aria-grabbed': 0,
	  // Relationship Attributes
	  'aria-activedescendant': 0,
	  'aria-colcount': 0,
	  'aria-colindex': 0,
	  'aria-colspan': 0,
	  'aria-controls': 0,
	  'aria-describedby': 0,
	  'aria-errormessage': 0,
	  'aria-flowto': 0,
	  'aria-labelledby': 0,
	  'aria-owns': 0,
	  'aria-posinset': 0,
	  'aria-rowcount': 0,
	  'aria-rowindex': 0,
	  'aria-rowspan': 0,
	  'aria-setsize': 0
	};

	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
	var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
	var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

	function validateProperty(tagName, name) {
	  {
	    if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
	      return true;
	    }

	    if (rARIACamel.test(name)) {
	      var ariaName = 'aria-' + name.slice(4).toLowerCase();
	      var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
	      // DOM properties, then it is an invalid aria-* attribute.

	      if (correctName == null) {
	        error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);

	        warnedProperties[name] = true;
	        return true;
	      } // aria-* attributes should be lowercase; suggest the lowercase version.


	      if (name !== correctName) {
	        error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);

	        warnedProperties[name] = true;
	        return true;
	      }
	    }

	    if (rARIA.test(name)) {
	      var lowerCasedName = name.toLowerCase();
	      var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
	      // DOM properties, then it is an invalid aria-* attribute.

	      if (standardName == null) {
	        warnedProperties[name] = true;
	        return false;
	      } // aria-* attributes should be lowercase; suggest the lowercase version.


	      if (name !== standardName) {
	        error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);

	        warnedProperties[name] = true;
	        return true;
	      }
	    }
	  }

	  return true;
	}

	function warnInvalidARIAProps(type, props) {
	  {
	    var invalidProps = [];

	    for (var key in props) {
	      var isValid = validateProperty(type, key);

	      if (!isValid) {
	        invalidProps.push(key);
	      }
	    }

	    var unknownPropString = invalidProps.map(function (prop) {
	      return '`' + prop + '`';
	    }).join(', ');

	    if (invalidProps.length === 1) {
	      error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
	    } else if (invalidProps.length > 1) {
	      error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
	    }
	  }
	}

	function validateProperties(type, props) {
	  if (isCustomComponent(type, props)) {
	    return;
	  }

	  warnInvalidARIAProps(type, props);
	}

	var didWarnValueNull = false;
	function validateProperties$1(type, props) {
	  {
	    if (type !== 'input' && type !== 'textarea' && type !== 'select') {
	      return;
	    }

	    if (props != null && props.value === null && !didWarnValueNull) {
	      didWarnValueNull = true;

	      if (type === 'select' && props.multiple) {
	        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
	      } else {
	        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
	      }
	    }
	  }
	}

	var validateProperty$1 = function () {};

	{
	  var warnedProperties$1 = {};
	  var _hasOwnProperty = Object.prototype.hasOwnProperty;
	  var EVENT_NAME_REGEX = /^on./;
	  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
	  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
	  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

	  validateProperty$1 = function (tagName, name, value, eventRegistry) {
	    if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
	      return true;
	    }

	    var lowerCasedName = name.toLowerCase();

	    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
	      error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');

	      warnedProperties$1[name] = true;
	      return true;
	    } // We can't rely on the event system being injected on the server.


	    if (eventRegistry != null) {
	      var registrationNameDependencies = eventRegistry.registrationNameDependencies,
	          possibleRegistrationNames = eventRegistry.possibleRegistrationNames;

	      if (registrationNameDependencies.hasOwnProperty(name)) {
	        return true;
	      }

	      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

	      if (registrationName != null) {
	        error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);

	        warnedProperties$1[name] = true;
	        return true;
	      }

	      if (EVENT_NAME_REGEX.test(name)) {
	        error('Unknown event handler property `%s`. It will be ignored.', name);

	        warnedProperties$1[name] = true;
	        return true;
	      }
	    } else if (EVENT_NAME_REGEX.test(name)) {
	      // If no event plugins have been injected, we are in a server environment.
	      // So we can't tell if the event name is correct for sure, but we can filter
	      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
	      if (INVALID_EVENT_NAME_REGEX.test(name)) {
	        error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
	      }

	      warnedProperties$1[name] = true;
	      return true;
	    } // Let the ARIA attribute hook validate ARIA attributes


	    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
	      return true;
	    }

	    if (lowerCasedName === 'innerhtml') {
	      error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (lowerCasedName === 'aria') {
	      error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
	      error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    var propertyInfo = getPropertyInfo(name);
	    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

	    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	      var standardName = possibleStandardNames[lowerCasedName];

	      if (standardName !== name) {
	        error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);

	        warnedProperties$1[name] = true;
	        return true;
	      }
	    } else if (!isReserved && name !== lowerCasedName) {
	      // Unknown attributes should have lowercase casing since that's how they
	      // will be cased anyway with server rendering.
	      error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
	      if (value) {
	        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
	      } else {
	        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
	      }

	      warnedProperties$1[name] = true;
	      return true;
	    } // Now that we've validated casing, do not validate
	    // data types for reserved props


	    if (isReserved) {
	      return true;
	    } // Warn when a known attribute is a bad type


	    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
	      warnedProperties$1[name] = true;
	      return false;
	    } // Warn when passing the strings 'false' or 'true' into a boolean prop


	    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
	      error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    return true;
	  };
	}

	var warnUnknownProperties = function (type, props, eventRegistry) {
	  {
	    var unknownProps = [];

	    for (var key in props) {
	      var isValid = validateProperty$1(type, key, props[key], eventRegistry);

	      if (!isValid) {
	        unknownProps.push(key);
	      }
	    }

	    var unknownPropString = unknownProps.map(function (prop) {
	      return '`' + prop + '`';
	    }).join(', ');

	    if (unknownProps.length === 1) {
	      error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
	    } else if (unknownProps.length > 1) {
	      error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
	    }
	  }
	};

	function validateProperties$2(type, props, eventRegistry) {
	  if (isCustomComponent(type, props)) {
	    return;
	  }

	  warnUnknownProperties(type, props, eventRegistry);
	}

	var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
	var IS_NON_DELEGATED = 1 << 1;
	var IS_CAPTURE_PHASE = 1 << 2;
	var IS_REPLAYED = 1 << 4;
	// set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
	// we call willDeferLaterForLegacyFBSupport, thus not bailing out
	// will result in endless cycles like an infinite loop.
	// We also don't want to defer during event replaying.

	var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */

	function getEventTarget(nativeEvent) {
	  // Fallback to nativeEvent.srcElement for IE9
	  // https://github.com/facebook/react/issues/12506
	  var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html


	  return target.nodeType === TEXT_NODE ? target.parentNode : target;
	}

	var restoreImpl = null;
	var restoreTarget = null;
	var restoreQueue = null;

	function restoreStateOfTarget(target) {
	  // We perform this translation at the end of the event loop so that we
	  // always receive the correct fiber here
	  var internalInstance = getInstanceFromNode(target);

	  if (!internalInstance) {
	    // Unmounted
	    return;
	  }

	  if (!(typeof restoreImpl === 'function')) {
	    {
	      throw Error( "setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }

	  var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.

	  if (stateNode) {
	    var _props = getFiberCurrentPropsFromNode(stateNode);

	    restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
	  }
	}

	function setRestoreImplementation(impl) {
	  restoreImpl = impl;
	}
	function enqueueStateRestore(target) {
	  if (restoreTarget) {
	    if (restoreQueue) {
	      restoreQueue.push(target);
	    } else {
	      restoreQueue = [target];
	    }
	  } else {
	    restoreTarget = target;
	  }
	}
	function needsStateRestore() {
	  return restoreTarget !== null || restoreQueue !== null;
	}
	function restoreStateIfNeeded() {
	  if (!restoreTarget) {
	    return;
	  }

	  var target = restoreTarget;
	  var queuedTargets = restoreQueue;
	  restoreTarget = null;
	  restoreQueue = null;
	  restoreStateOfTarget(target);

	  if (queuedTargets) {
	    for (var i = 0; i < queuedTargets.length; i++) {
	      restoreStateOfTarget(queuedTargets[i]);
	    }
	  }
	}

	// the renderer. Such as when we're dispatching events or if third party
	// libraries need to call batchedUpdates. Eventually, this API will go away when
	// everything is batched by default. We'll then have a similar API to opt-out of
	// scheduled work and instead do synchronous work.
	// Defaults

	var batchedUpdatesImpl = function (fn, bookkeeping) {
	  return fn(bookkeeping);
	};

	var discreteUpdatesImpl = function (fn, a, b, c, d) {
	  return fn(a, b, c, d);
	};

	var flushDiscreteUpdatesImpl = function () {};

	var batchedEventUpdatesImpl = batchedUpdatesImpl;
	var isInsideEventHandler = false;
	var isBatchingEventUpdates = false;

	function finishEventHandler() {
	  // Here we wait until all updates have propagated, which is important
	  // when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  // Then we restore state of any controlled component.
	  var controlledComponentsHavePendingUpdates = needsStateRestore();

	  if (controlledComponentsHavePendingUpdates) {
	    // If a controlled event was fired, we may need to restore the state of
	    // the DOM node back to the controlled value. This is necessary when React
	    // bails out of the update without touching the DOM.
	    flushDiscreteUpdatesImpl();
	    restoreStateIfNeeded();
	  }
	}

	function batchedUpdates(fn, bookkeeping) {
	  if (isInsideEventHandler) {
	    // If we are currently inside another batch, we need to wait until it
	    // fully completes before restoring state.
	    return fn(bookkeeping);
	  }

	  isInsideEventHandler = true;

	  try {
	    return batchedUpdatesImpl(fn, bookkeeping);
	  } finally {
	    isInsideEventHandler = false;
	    finishEventHandler();
	  }
	}
	function batchedEventUpdates(fn, a, b) {
	  if (isBatchingEventUpdates) {
	    // If we are currently inside another batch, we need to wait until it
	    // fully completes before restoring state.
	    return fn(a, b);
	  }

	  isBatchingEventUpdates = true;

	  try {
	    return batchedEventUpdatesImpl(fn, a, b);
	  } finally {
	    isBatchingEventUpdates = false;
	    finishEventHandler();
	  }
	}
	function discreteUpdates(fn, a, b, c, d) {
	  var prevIsInsideEventHandler = isInsideEventHandler;
	  isInsideEventHandler = true;

	  try {
	    return discreteUpdatesImpl(fn, a, b, c, d);
	  } finally {
	    isInsideEventHandler = prevIsInsideEventHandler;

	    if (!isInsideEventHandler) {
	      finishEventHandler();
	    }
	  }
	}
	function flushDiscreteUpdatesIfNeeded(timeStamp) {
	  {
	    if (!isInsideEventHandler) {
	      flushDiscreteUpdatesImpl();
	    }
	  }
	}
	function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
	  batchedUpdatesImpl = _batchedUpdatesImpl;
	  discreteUpdatesImpl = _discreteUpdatesImpl;
	  flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
	  batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
	}

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	    case 'onMouseEnter':
	      return !!(props.disabled && isInteractive(type));

	    default:
	      return false;
	  }
	}
	/**
	 * @param {object} inst The instance, which is the source of events.
	 * @param {string} registrationName Name of listener (e.g. `onClick`).
	 * @return {?function} The stored callback.
	 */


	function getListener(inst, registrationName) {
	  var stateNode = inst.stateNode;

	  if (stateNode === null) {
	    // Work in progress (ex: onload events in incremental mode).
	    return null;
	  }

	  var props = getFiberCurrentPropsFromNode(stateNode);

	  if (props === null) {
	    // Work in progress.
	    return null;
	  }

	  var listener = props[registrationName];

	  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
	    return null;
	  }

	  if (!(!listener || typeof listener === 'function')) {
	    {
	      throw Error( "Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type." );
	    }
	  }

	  return listener;
	}

	var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
	// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support

	if (canUseDOM) {
	  try {
	    var options = {}; // $FlowFixMe: Ignore Flow complaining about needing a value

	    Object.defineProperty(options, 'passive', {
	      get: function () {
	        passiveBrowserEventsSupported = true;
	      }
	    });
	    window.addEventListener('test', options, options);
	    window.removeEventListener('test', options, options);
	  } catch (e) {
	    passiveBrowserEventsSupported = false;
	  }
	}

	function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
	  var funcArgs = Array.prototype.slice.call(arguments, 3);

	  try {
	    func.apply(context, funcArgs);
	  } catch (error) {
	    this.onError(error);
	  }
	}

	var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;

	{
	  // In DEV mode, we swap out invokeGuardedCallback for a special version
	  // that plays more nicely with the browser's DevTools. The idea is to preserve
	  // "Pause on exceptions" behavior. Because React wraps all user-provided
	  // functions in invokeGuardedCallback, and the production version of
	  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
	  // like caught exceptions, and the DevTools won't pause unless the developer
	  // takes the extra step of enabling pause on caught exceptions. This is
	  // unintuitive, though, because even though React has caught the error, from
	  // the developer's perspective, the error is uncaught.
	  //
	  // To preserve the expected "Pause on exceptions" behavior, we don't use a
	  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
	  // DOM node, and call the user-provided callback from inside an event handler
	  // for that fake event. If the callback throws, the error is "captured" using
	  // a global event handler. But because the error happens in a different
	  // event loop context, it does not interrupt the normal program flow.
	  // Effectively, this gives us try-catch behavior without actually using
	  // try-catch. Neat!
	  // Check that the browser supports the APIs we need to implement our special
	  // DEV version of invokeGuardedCallback
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');

	    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
	      // If document doesn't exist we know for sure we will crash in this method
	      // when we call document.createEvent(). However this can cause confusing
	      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
	      // So we preemptively throw with a better message instead.
	      if (!(typeof document !== 'undefined')) {
	        {
	          throw Error( "The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous." );
	        }
	      }

	      var evt = document.createEvent('Event');
	      var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
	      // set this to true at the beginning, then set it to false right after
	      // calling the function. If the function errors, `didError` will never be
	      // set to false. This strategy works even if the browser is flaky and
	      // fails to call our global error handler, because it doesn't rely on
	      // the error event at all.

	      var didError = true; // Keeps track of the value of window.event so that we can reset it
	      // during the callback to let user code access window.event in the
	      // browsers that support it.

	      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
	      // dispatching: https://github.com/facebook/react/issues/13688

	      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');

	      function restoreAfterDispatch() {
	        // We immediately remove the callback from event listeners so that
	        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
	        // nested call would trigger the fake event handlers of any call higher
	        // in the stack.
	        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
	        // window.event assignment in both IE <= 10 as they throw an error
	        // "Member not found" in strict mode, and in Firefox which does not
	        // support window.event.

	        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
	          window.event = windowEvent;
	        }
	      } // Create an event handler for our fake event. We will synchronously
	      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
	      // call the user-provided callback.


	      var funcArgs = Array.prototype.slice.call(arguments, 3);

	      function callCallback() {
	        didCall = true;
	        restoreAfterDispatch();
	        func.apply(context, funcArgs);
	        didError = false;
	      } // Create a global error event handler. We use this to capture the value
	      // that was thrown. It's possible that this error handler will fire more
	      // than once; for example, if non-React code also calls `dispatchEvent`
	      // and a handler for that event throws. We should be resilient to most of
	      // those cases. Even if our error event handler fires more than once, the
	      // last error event is always used. If the callback actually does error,
	      // we know that the last error event is the correct one, because it's not
	      // possible for anything else to have happened in between our callback
	      // erroring and the code that follows the `dispatchEvent` call below. If
	      // the callback doesn't error, but the error event was fired, we know to
	      // ignore it because `didError` will be false, as described above.


	      var error; // Use this to track whether the error event is ever called.

	      var didSetError = false;
	      var isCrossOriginError = false;

	      function handleWindowError(event) {
	        error = event.error;
	        didSetError = true;

	        if (error === null && event.colno === 0 && event.lineno === 0) {
	          isCrossOriginError = true;
	        }

	        if (event.defaultPrevented) {
	          // Some other error handler has prevented default.
	          // Browsers silence the error report if this happens.
	          // We'll remember this to later decide whether to log it or not.
	          if (error != null && typeof error === 'object') {
	            try {
	              error._suppressLogging = true;
	            } catch (inner) {// Ignore.
	            }
	          }
	        }
	      } // Create a fake event type.


	      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

	      window.addEventListener('error', handleWindowError);
	      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
	      // errors, it will trigger our global error handler.

	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);

	      if (windowEventDescriptor) {
	        Object.defineProperty(window, 'event', windowEventDescriptor);
	      }

	      if (didCall && didError) {
	        if (!didSetError) {
	          // The callback errored, but the error event never fired.
	          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
	        } else if (isCrossOriginError) {
	          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');
	        }

	        this.onError(error);
	      } // Remove our event listeners


	      window.removeEventListener('error', handleWindowError);

	      if (!didCall) {
	        // Something went really wrong, and our event was not dispatched.
	        // https://github.com/facebook/react/issues/16734
	        // https://github.com/facebook/react/issues/16585
	        // Fall back to the production implementation.
	        restoreAfterDispatch();
	        return invokeGuardedCallbackProd.apply(this, arguments);
	      }
	    };
	  }
	}

	var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

	var hasError = false;
	var caughtError = null; // Used by event system to capture/rethrow the first error.

	var hasRethrowError = false;
	var rethrowError = null;
	var reporter = {
	  onError: function (error) {
	    hasError = true;
	    caughtError = error;
	  }
	};
	/**
	 * Call a function while guarding against errors that happens within it.
	 * Returns an error if it throws, otherwise null.
	 *
	 * In production, this is implemented using a try-catch. The reason we don't
	 * use a try-catch directly is so that we can swap out a different
	 * implementation in DEV mode.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */

	function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
	  hasError = false;
	  caughtError = null;
	  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
	}
	/**
	 * Same as invokeGuardedCallback, but instead of returning an error, it stores
	 * it in a global so it can be rethrown by `rethrowCaughtError` later.
	 * TODO: See if caughtError and rethrowError can be unified.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */

	function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
	  invokeGuardedCallback.apply(this, arguments);

	  if (hasError) {
	    var error = clearCaughtError();

	    if (!hasRethrowError) {
	      hasRethrowError = true;
	      rethrowError = error;
	    }
	  }
	}
	/**
	 * During execution of guarded functions we will capture the first error which
	 * we will rethrow to be handled by the top level error handler.
	 */

	function rethrowCaughtError() {
	  if (hasRethrowError) {
	    var error = rethrowError;
	    hasRethrowError = false;
	    rethrowError = null;
	    throw error;
	  }
	}
	function hasCaughtError() {
	  return hasError;
	}
	function clearCaughtError() {
	  if (hasError) {
	    var error = caughtError;
	    hasError = false;
	    caughtError = null;
	    return error;
	  } else {
	    {
	      {
	        throw Error( "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }
	  }
	}

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 *
	 * Note that this module is currently shared and assumed to be stateless.
	 * If this becomes an actual Map, that will break.
	 */
	function get(key) {
	  return key._reactInternals;
	}
	function has(key) {
	  return key._reactInternals !== undefined;
	}
	function set(key, value) {
	  key._reactInternals = value;
	}

	// Don't change these two values. They're used by React Dev Tools.
	var NoFlags =
	/*                      */
	0;
	var PerformedWork =
	/*                */
	1; // You can change the rest (and add more).

	var Placement =
	/*                    */
	2;
	var Update =
	/*                       */
	4;
	var PlacementAndUpdate =
	/*           */
	6;
	var Deletion =
	/*                     */
	8;
	var ContentReset =
	/*                 */
	16;
	var Callback =
	/*                     */
	32;
	var DidCapture =
	/*                   */
	64;
	var Ref =
	/*                          */
	128;
	var Snapshot =
	/*                     */
	256;
	var Passive =
	/*                      */
	512; // TODO (effects) Remove this bit once the new reconciler is synced to the old.

	var PassiveUnmountPendingDev =
	/*     */
	8192;
	var Hydrating =
	/*                    */
	1024;
	var HydratingAndUpdate =
	/*           */
	1028; // Passive & Update & Callback & Ref & Snapshot

	var LifecycleEffectMask =
	/*          */
	932; // Union of all host effects

	var HostEffectMask =
	/*               */
	2047; // These are not really side effects, but we still reuse this field.

	var Incomplete =
	/*                   */
	2048;
	var ShouldCapture =
	/*                */
	4096;
	var ForceUpdateForLegacySuspense =
	/* */
	16384; // Static tags describe aspects of a fiber that are not specific to a render,

	var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
	function getNearestMountedFiber(fiber) {
	  var node = fiber;
	  var nearestMounted = fiber;

	  if (!fiber.alternate) {
	    // If there is no alternate, this might be a new tree that isn't inserted
	    // yet. If it is, then it will have a pending insertion effect on it.
	    var nextNode = node;

	    do {
	      node = nextNode;

	      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
	        // This is an insertion or in-progress hydration. The nearest possible
	        // mounted fiber is the parent but we need to continue to figure out
	        // if that one is still mounted.
	        nearestMounted = node.return;
	      }

	      nextNode = node.return;
	    } while (nextNode);
	  } else {
	    while (node.return) {
	      node = node.return;
	    }
	  }

	  if (node.tag === HostRoot) {
	    // TODO: Check if this was a nested HostRoot when used with
	    // renderContainerIntoSubtree.
	    return nearestMounted;
	  } // If we didn't hit the root, that means that we're in an disconnected tree
	  // that has been unmounted.


	  return null;
	}
	function getSuspenseInstanceFromFiber(fiber) {
	  if (fiber.tag === SuspenseComponent) {
	    var suspenseState = fiber.memoizedState;

	    if (suspenseState === null) {
	      var current = fiber.alternate;

	      if (current !== null) {
	        suspenseState = current.memoizedState;
	      }
	    }

	    if (suspenseState !== null) {
	      return suspenseState.dehydrated;
	    }
	  }

	  return null;
	}
	function getContainerFromFiber(fiber) {
	  return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
	}
	function isFiberMounted(fiber) {
	  return getNearestMountedFiber(fiber) === fiber;
	}
	function isMounted(component) {
	  {
	    var owner = ReactCurrentOwner.current;

	    if (owner !== null && owner.tag === ClassComponent) {
	      var ownerFiber = owner;
	      var instance = ownerFiber.stateNode;

	      if (!instance._warnedAboutRefsInRender) {
	        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component');
	      }

	      instance._warnedAboutRefsInRender = true;
	    }
	  }

	  var fiber = get(component);

	  if (!fiber) {
	    return false;
	  }

	  return getNearestMountedFiber(fiber) === fiber;
	}

	function assertIsMounted(fiber) {
	  if (!(getNearestMountedFiber(fiber) === fiber)) {
	    {
	      throw Error( "Unable to find node on an unmounted component." );
	    }
	  }
	}

	function findCurrentFiberUsingSlowPath(fiber) {
	  var alternate = fiber.alternate;

	  if (!alternate) {
	    // If there is no alternate, then we only need to check if it is mounted.
	    var nearestMounted = getNearestMountedFiber(fiber);

	    if (!(nearestMounted !== null)) {
	      {
	        throw Error( "Unable to find node on an unmounted component." );
	      }
	    }

	    if (nearestMounted !== fiber) {
	      return null;
	    }

	    return fiber;
	  } // If we have two possible branches, we'll walk backwards up to the root
	  // to see what path the root points to. On the way we may hit one of the
	  // special cases and we'll deal with them.


	  var a = fiber;
	  var b = alternate;

	  while (true) {
	    var parentA = a.return;

	    if (parentA === null) {
	      // We're at the root.
	      break;
	    }

	    var parentB = parentA.alternate;

	    if (parentB === null) {
	      // There is no alternate. This is an unusual case. Currently, it only
	      // happens when a Suspense component is hidden. An extra fragment fiber
	      // is inserted in between the Suspense fiber and its children. Skip
	      // over this extra fragment fiber and proceed to the next parent.
	      var nextParent = parentA.return;

	      if (nextParent !== null) {
	        a = b = nextParent;
	        continue;
	      } // If there's no parent, we're at the root.


	      break;
	    } // If both copies of the parent fiber point to the same child, we can
	    // assume that the child is current. This happens when we bailout on low
	    // priority: the bailed out fiber's child reuses the current child.


	    if (parentA.child === parentB.child) {
	      var child = parentA.child;

	      while (child) {
	        if (child === a) {
	          // We've determined that A is the current branch.
	          assertIsMounted(parentA);
	          return fiber;
	        }

	        if (child === b) {
	          // We've determined that B is the current branch.
	          assertIsMounted(parentA);
	          return alternate;
	        }

	        child = child.sibling;
	      } // We should never have an alternate for any mounting node. So the only
	      // way this could possibly happen is if this was unmounted, if at all.


	      {
	        {
	          throw Error( "Unable to find node on an unmounted component." );
	        }
	      }
	    }

	    if (a.return !== b.return) {
	      // The return pointer of A and the return pointer of B point to different
	      // fibers. We assume that return pointers never criss-cross, so A must
	      // belong to the child set of A.return, and B must belong to the child
	      // set of B.return.
	      a = parentA;
	      b = parentB;
	    } else {
	      // The return pointers point to the same fiber. We'll have to use the
	      // default, slow path: scan the child sets of each parent alternate to see
	      // which child belongs to which set.
	      //
	      // Search parent A's child set
	      var didFindChild = false;
	      var _child = parentA.child;

	      while (_child) {
	        if (_child === a) {
	          didFindChild = true;
	          a = parentA;
	          b = parentB;
	          break;
	        }

	        if (_child === b) {
	          didFindChild = true;
	          b = parentA;
	          a = parentB;
	          break;
	        }

	        _child = _child.sibling;
	      }

	      if (!didFindChild) {
	        // Search parent B's child set
	        _child = parentB.child;

	        while (_child) {
	          if (_child === a) {
	            didFindChild = true;
	            a = parentB;
	            b = parentA;
	            break;
	          }

	          if (_child === b) {
	            didFindChild = true;
	            b = parentB;
	            a = parentA;
	            break;
	          }

	          _child = _child.sibling;
	        }

	        if (!didFindChild) {
	          {
	            throw Error( "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue." );
	          }
	        }
	      }
	    }

	    if (!(a.alternate === b)) {
	      {
	        throw Error( "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }
	  } // If the root is not a host container, we're in a disconnected tree. I.e.
	  // unmounted.


	  if (!(a.tag === HostRoot)) {
	    {
	      throw Error( "Unable to find node on an unmounted component." );
	    }
	  }

	  if (a.stateNode.current === a) {
	    // We've determined that A is the current branch.
	    return fiber;
	  } // Otherwise B has to be current branch.


	  return alternate;
	}
	function findCurrentHostFiber(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);

	  if (!currentParent) {
	    return null;
	  } // Next we'll drill down this component to find the first HostComponent/Text.


	  var node = currentParent;

	  while (true) {
	    if (node.tag === HostComponent || node.tag === HostText) {
	      return node;
	    } else if (node.child) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === currentParent) {
	      return null;
	    }

	    while (!node.sibling) {
	      if (!node.return || node.return === currentParent) {
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  } // Flow needs the return null here, but ESLint complains about it.
	  // eslint-disable-next-line no-unreachable


	  return null;
	}
	function findCurrentHostFiberWithNoPortals(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);

	  if (!currentParent) {
	    return null;
	  } // Next we'll drill down this component to find the first HostComponent/Text.


	  var node = currentParent;

	  while (true) {
	    if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI ) {
	      return node;
	    } else if (node.child && node.tag !== HostPortal) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === currentParent) {
	      return null;
	    }

	    while (!node.sibling) {
	      if (!node.return || node.return === currentParent) {
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  } // Flow needs the return null here, but ESLint complains about it.
	  // eslint-disable-next-line no-unreachable


	  return null;
	}
	function doesFiberContain(parentFiber, childFiber) {
	  var node = childFiber;
	  var parentFiberAlternate = parentFiber.alternate;

	  while (node !== null) {
	    if (node === parentFiber || node === parentFiberAlternate) {
	      return true;
	    }

	    node = node.return;
	  }

	  return false;
	}

	var attemptUserBlockingHydration;
	function setAttemptUserBlockingHydration(fn) {
	  attemptUserBlockingHydration = fn;
	}
	var attemptContinuousHydration;
	function setAttemptContinuousHydration(fn) {
	  attemptContinuousHydration = fn;
	}
	var attemptHydrationAtCurrentPriority;
	function setAttemptHydrationAtCurrentPriority(fn) {
	  attemptHydrationAtCurrentPriority = fn;
	}
	var attemptHydrationAtPriority;
	function setAttemptHydrationAtPriority(fn) {
	  attemptHydrationAtPriority = fn;
	} // TODO: Upgrade this definition once we're on a newer version of Flow that
	var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

	var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
	// if the last target was dehydrated.

	var queuedFocus = null;
	var queuedDrag = null;
	var queuedMouse = null; // For pointer events there can be one latest event per pointerId.

	var queuedPointers = new Map();
	var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

	var queuedExplicitHydrationTargets = [];
	function hasQueuedDiscreteEvents() {
	  return queuedDiscreteEvents.length > 0;
	}
	var discreteReplayableEvents = ['mousedown', 'mouseup', 'touchcancel', 'touchend', 'touchstart', 'auxclick', 'dblclick', 'pointercancel', 'pointerdown', 'pointerup', 'dragend', 'dragstart', 'drop', 'compositionend', 'compositionstart', 'keydown', 'keypress', 'keyup', 'input', 'textInput', // Intentionally camelCase
	'copy', 'cut', 'paste', 'click', 'change', 'contextmenu', 'reset', 'submit'];
	function isReplayableDiscreteEvent(eventType) {
	  return discreteReplayableEvents.indexOf(eventType) > -1;
	}

	function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
	  return {
	    blockedOn: blockedOn,
	    domEventName: domEventName,
	    eventSystemFlags: eventSystemFlags | IS_REPLAYED,
	    nativeEvent: nativeEvent,
	    targetContainers: [targetContainer]
	  };
	}

	function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
	  var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
	  queuedDiscreteEvents.push(queuedEvent);
	} // Resets the replaying for this type of continuous event to no event.

	function clearIfContinuousEvent(domEventName, nativeEvent) {
	  switch (domEventName) {
	    case 'focusin':
	    case 'focusout':
	      queuedFocus = null;
	      break;

	    case 'dragenter':
	    case 'dragleave':
	      queuedDrag = null;
	      break;

	    case 'mouseover':
	    case 'mouseout':
	      queuedMouse = null;
	      break;

	    case 'pointerover':
	    case 'pointerout':
	      {
	        var pointerId = nativeEvent.pointerId;
	        queuedPointers.delete(pointerId);
	        break;
	      }

	    case 'gotpointercapture':
	    case 'lostpointercapture':
	      {
	        var _pointerId = nativeEvent.pointerId;
	        queuedPointerCaptures.delete(_pointerId);
	        break;
	      }
	  }
	}

	function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
	  if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
	    var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);

	    if (blockedOn !== null) {
	      var _fiber2 = getInstanceFromNode(blockedOn);

	      if (_fiber2 !== null) {
	        // Attempt to increase the priority of this target.
	        attemptContinuousHydration(_fiber2);
	      }
	    }

	    return queuedEvent;
	  } // If we have already queued this exact event, then it's because
	  // the different event systems have different DOM event listeners.
	  // We can accumulate the flags, and the targetContainers, and
	  // store a single event to be replayed.


	  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
	  var targetContainers = existingQueuedEvent.targetContainers;

	  if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
	    targetContainers.push(targetContainer);
	  }

	  return existingQueuedEvent;
	}

	function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
	  // These set relatedTarget to null because the replayed event will be treated as if we
	  // moved from outside the window (no target) onto the target once it hydrates.
	  // Instead of mutating we could clone the event.
	  switch (domEventName) {
	    case 'focusin':
	      {
	        var focusEvent = nativeEvent;
	        queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
	        return true;
	      }

	    case 'dragenter':
	      {
	        var dragEvent = nativeEvent;
	        queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
	        return true;
	      }

	    case 'mouseover':
	      {
	        var mouseEvent = nativeEvent;
	        queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
	        return true;
	      }

	    case 'pointerover':
	      {
	        var pointerEvent = nativeEvent;
	        var pointerId = pointerEvent.pointerId;
	        queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
	        return true;
	      }

	    case 'gotpointercapture':
	      {
	        var _pointerEvent = nativeEvent;
	        var _pointerId2 = _pointerEvent.pointerId;
	        queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
	        return true;
	      }
	  }

	  return false;
	} // Check if this target is unblocked. Returns true if it's unblocked.

	function attemptExplicitHydrationTarget(queuedTarget) {
	  // TODO: This function shares a lot of logic with attemptToDispatchEvent.
	  // Try to unify them. It's a bit tricky since it would require two return
	  // values.
	  var targetInst = getClosestInstanceFromNode(queuedTarget.target);

	  if (targetInst !== null) {
	    var nearestMounted = getNearestMountedFiber(targetInst);

	    if (nearestMounted !== null) {
	      var tag = nearestMounted.tag;

	      if (tag === SuspenseComponent) {
	        var instance = getSuspenseInstanceFromFiber(nearestMounted);

	        if (instance !== null) {
	          // We're blocked on hydrating this boundary.
	          // Increase its priority.
	          queuedTarget.blockedOn = instance;
	          attemptHydrationAtPriority(queuedTarget.lanePriority, function () {
	            Scheduler.unstable_runWithPriority(queuedTarget.priority, function () {
	              attemptHydrationAtCurrentPriority(nearestMounted);
	            });
	          });
	          return;
	        }
	      } else if (tag === HostRoot) {
	        var root = nearestMounted.stateNode;

	        if (root.hydrate) {
	          queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
	          // a root other than sync.

	          return;
	        }
	      }
	    }
	  }

	  queuedTarget.blockedOn = null;
	}

	function attemptReplayContinuousQueuedEvent(queuedEvent) {
	  if (queuedEvent.blockedOn !== null) {
	    return false;
	  }

	  var targetContainers = queuedEvent.targetContainers;

	  while (targetContainers.length > 0) {
	    var targetContainer = targetContainers[0];
	    var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);

	    if (nextBlockedOn !== null) {
	      // We're still blocked. Try again later.
	      var _fiber3 = getInstanceFromNode(nextBlockedOn);

	      if (_fiber3 !== null) {
	        attemptContinuousHydration(_fiber3);
	      }

	      queuedEvent.blockedOn = nextBlockedOn;
	      return false;
	    } // This target container was successfully dispatched. Try the next.


	    targetContainers.shift();
	  }

	  return true;
	}

	function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
	  if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
	    map.delete(key);
	  }
	}

	function replayUnblockedEvents() {
	  hasScheduledReplayAttempt = false; // First replay discrete events.

	  while (queuedDiscreteEvents.length > 0) {
	    var nextDiscreteEvent = queuedDiscreteEvents[0];

	    if (nextDiscreteEvent.blockedOn !== null) {
	      // We're still blocked.
	      // Increase the priority of this boundary to unblock
	      // the next discrete event.
	      var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);

	      if (_fiber4 !== null) {
	        attemptUserBlockingHydration(_fiber4);
	      }

	      break;
	    }

	    var targetContainers = nextDiscreteEvent.targetContainers;

	    while (targetContainers.length > 0) {
	      var targetContainer = targetContainers[0];
	      var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);

	      if (nextBlockedOn !== null) {
	        // We're still blocked. Try again later.
	        nextDiscreteEvent.blockedOn = nextBlockedOn;
	        break;
	      } // This target container was successfully dispatched. Try the next.


	      targetContainers.shift();
	    }

	    if (nextDiscreteEvent.blockedOn === null) {
	      // We've successfully replayed the first event. Let's try the next one.
	      queuedDiscreteEvents.shift();
	    }
	  } // Next replay any continuous events.


	  if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
	    queuedFocus = null;
	  }

	  if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
	    queuedDrag = null;
	  }

	  if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
	    queuedMouse = null;
	  }

	  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
	  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
	}

	function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
	  if (queuedEvent.blockedOn === unblocked) {
	    queuedEvent.blockedOn = null;

	    if (!hasScheduledReplayAttempt) {
	      hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
	      // now unblocked. This first might not actually be unblocked yet.
	      // We could check it early to avoid scheduling an unnecessary callback.

	      Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
	    }
	  }
	}

	function retryIfBlockedOn(unblocked) {
	  // Mark anything that was blocked on this as no longer blocked
	  // and eligible for a replay.
	  if (queuedDiscreteEvents.length > 0) {
	    scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
	    // worth it because we expect very few discrete events to queue up and once
	    // we are actually fully unblocked it will be fast to replay them.

	    for (var i = 1; i < queuedDiscreteEvents.length; i++) {
	      var queuedEvent = queuedDiscreteEvents[i];

	      if (queuedEvent.blockedOn === unblocked) {
	        queuedEvent.blockedOn = null;
	      }
	    }
	  }

	  if (queuedFocus !== null) {
	    scheduleCallbackIfUnblocked(queuedFocus, unblocked);
	  }

	  if (queuedDrag !== null) {
	    scheduleCallbackIfUnblocked(queuedDrag, unblocked);
	  }

	  if (queuedMouse !== null) {
	    scheduleCallbackIfUnblocked(queuedMouse, unblocked);
	  }

	  var unblock = function (queuedEvent) {
	    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
	  };

	  queuedPointers.forEach(unblock);
	  queuedPointerCaptures.forEach(unblock);

	  for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
	    var queuedTarget = queuedExplicitHydrationTargets[_i];

	    if (queuedTarget.blockedOn === unblocked) {
	      queuedTarget.blockedOn = null;
	    }
	  }

	  while (queuedExplicitHydrationTargets.length > 0) {
	    var nextExplicitTarget = queuedExplicitHydrationTargets[0];

	    if (nextExplicitTarget.blockedOn !== null) {
	      // We're still blocked.
	      break;
	    } else {
	      attemptExplicitHydrationTarget(nextExplicitTarget);

	      if (nextExplicitTarget.blockedOn === null) {
	        // We're unblocked.
	        queuedExplicitHydrationTargets.shift();
	      }
	    }
	  }
	}

	var DiscreteEvent = 0;
	var UserBlockingEvent = 1;
	var ContinuousEvent = 2;

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */

	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};
	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  return prefixes;
	}
	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */


	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};
	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */

	var prefixedEventNames = {};
	/**
	 * Element to check for prefixes on.
	 */

	var style = {};
	/**
	 * Bootstrap if a DOM exists.
	 */

	if (canUseDOM) {
	  style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.

	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  } // Same as above


	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}
	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */


	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return eventName;
	}

	var ANIMATION_END = getVendorPrefixedEventName('animationend');
	var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
	var ANIMATION_START = getVendorPrefixedEventName('animationstart');
	var TRANSITION_END = getVendorPrefixedEventName('transitionend');

	var topLevelEventsToReactNames = new Map();
	var eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
	// the code required to apply the same logic for event prioritization and that of the
	// SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
	// duplication (for which there would be quite a bit). For the events that are not needed
	// for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
	// array of top level events.
	// Lastly, we ignore prettier so we can keep the formatting sane.
	// prettier-ignore

	var discreteEventPairsForSimpleEventPlugin = ['cancel', 'cancel', 'click', 'click', 'close', 'close', 'contextmenu', 'contextMenu', 'copy', 'copy', 'cut', 'cut', 'auxclick', 'auxClick', 'dblclick', 'doubleClick', // Careful!
	'dragend', 'dragEnd', 'dragstart', 'dragStart', 'drop', 'drop', 'focusin', 'focus', // Careful!
	'focusout', 'blur', // Careful!
	'input', 'input', 'invalid', 'invalid', 'keydown', 'keyDown', 'keypress', 'keyPress', 'keyup', 'keyUp', 'mousedown', 'mouseDown', 'mouseup', 'mouseUp', 'paste', 'paste', 'pause', 'pause', 'play', 'play', 'pointercancel', 'pointerCancel', 'pointerdown', 'pointerDown', 'pointerup', 'pointerUp', 'ratechange', 'rateChange', 'reset', 'reset', 'seeked', 'seeked', 'submit', 'submit', 'touchcancel', 'touchCancel', 'touchend', 'touchEnd', 'touchstart', 'touchStart', 'volumechange', 'volumeChange'];
	var otherDiscreteEvents = ['change', 'selectionchange', 'textInput', 'compositionstart', 'compositionend', 'compositionupdate'];


	var userBlockingPairsForSimpleEventPlugin = ['drag', 'drag', 'dragenter', 'dragEnter', 'dragexit', 'dragExit', 'dragleave', 'dragLeave', 'dragover', 'dragOver', 'mousemove', 'mouseMove', 'mouseout', 'mouseOut', 'mouseover', 'mouseOver', 'pointermove', 'pointerMove', 'pointerout', 'pointerOut', 'pointerover', 'pointerOver', 'scroll', 'scroll', 'toggle', 'toggle', 'touchmove', 'touchMove', 'wheel', 'wheel']; // prettier-ignore

	var continuousPairsForSimpleEventPlugin = ['abort', 'abort', ANIMATION_END, 'animationEnd', ANIMATION_ITERATION, 'animationIteration', ANIMATION_START, 'animationStart', 'canplay', 'canPlay', 'canplaythrough', 'canPlayThrough', 'durationchange', 'durationChange', 'emptied', 'emptied', 'encrypted', 'encrypted', 'ended', 'ended', 'error', 'error', 'gotpointercapture', 'gotPointerCapture', 'load', 'load', 'loadeddata', 'loadedData', 'loadedmetadata', 'loadedMetadata', 'loadstart', 'loadStart', 'lostpointercapture', 'lostPointerCapture', 'playing', 'playing', 'progress', 'progress', 'seeking', 'seeking', 'stalled', 'stalled', 'suspend', 'suspend', 'timeupdate', 'timeUpdate', TRANSITION_END, 'transitionEnd', 'waiting', 'waiting'];
	/**
	 * Turns
	 * ['abort', ...]
	 *
	 * into
	 *
	 * topLevelEventsToReactNames = new Map([
	 *   ['abort', 'onAbort'],
	 * ]);
	 *
	 * and registers them.
	 */

	function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
	  // As the event types are in pairs of two, we need to iterate
	  // through in twos. The events are in pairs of two to save code
	  // and improve init perf of processing this array, as it will
	  // result in far fewer object allocations and property accesses
	  // if we only use three arrays to process all the categories of
	  // instead of tuples.
	  for (var i = 0; i < eventTypes.length; i += 2) {
	    var topEvent = eventTypes[i];
	    var event = eventTypes[i + 1];
	    var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	    var reactName = 'on' + capitalizedEvent;
	    eventPriorities.set(topEvent, priority);
	    topLevelEventsToReactNames.set(topEvent, reactName);
	    registerTwoPhaseEvent(reactName, [topEvent]);
	  }
	}

	function setEventPriorities(eventTypes, priority) {
	  for (var i = 0; i < eventTypes.length; i++) {
	    eventPriorities.set(eventTypes[i], priority);
	  }
	}

	function getEventPriorityForPluginSystem(domEventName) {
	  var priority = eventPriorities.get(domEventName); // Default to a ContinuousEvent. Note: we might
	  // want to warn if we can't detect the priority
	  // for the event.

	  return priority === undefined ? ContinuousEvent : priority;
	}
	function registerSimpleEvents() {
	  registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
	  registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
	  registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
	  setEventPriorities(otherDiscreteEvents, DiscreteEvent);
	}

	var Scheduler_now = Scheduler.unstable_now;

	{
	  // Provide explicit error message when production+profiling bundle of e.g.
	  // react-dom is used with production (non-profiling) bundle of
	  // scheduler/tracing
	  if (!(tracing$1.__interactionsRef != null && tracing$1.__interactionsRef.current != null)) {
	    {
	      throw Error( "It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling" );
	    }
	  }
	}
	// ascending numbers so we can compare them like numbers. They start at 90 to
	// avoid clashing with Scheduler's priorities.

	var ImmediatePriority = 99;
	var UserBlockingPriority = 98;
	var NormalPriority = 97;
	var LowPriority = 96;
	var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.

	var NoPriority = 90;
	Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.

	var SyncLanePriority = 15;
	var SyncBatchedLanePriority = 14;
	var InputDiscreteHydrationLanePriority = 13;
	var InputDiscreteLanePriority = 12;
	var InputContinuousHydrationLanePriority = 11;
	var InputContinuousLanePriority = 10;
	var DefaultHydrationLanePriority = 9;
	var DefaultLanePriority = 8;
	var TransitionHydrationPriority = 7;
	var TransitionPriority = 6;
	var RetryLanePriority = 5;
	var SelectiveHydrationLanePriority = 4;
	var IdleHydrationLanePriority = 3;
	var IdleLanePriority = 2;
	var OffscreenLanePriority = 1;
	var NoLanePriority = 0;
	var TotalLanes = 31;
	var NoLanes =
	/*                        */
	0;
	var NoLane =
	/*                          */
	0;
	var SyncLane =
	/*                        */
	1;
	var SyncBatchedLane =
	/*                 */
	2;
	var InputDiscreteHydrationLane =
	/*      */
	4;
	var InputDiscreteLanes =
	/*                    */
	24;
	var InputContinuousHydrationLane =
	/*           */
	32;
	var InputContinuousLanes =
	/*                  */
	192;
	var DefaultHydrationLane =
	/*            */
	256;
	var DefaultLanes =
	/*                   */
	3584;
	var TransitionHydrationLane =
	/*                */
	4096;
	var TransitionLanes =
	/*                       */
	4186112;
	var RetryLanes =
	/*                            */
	62914560;
	var SomeRetryLane =
	/*                  */
	33554432;
	var SelectiveHydrationLane =
	/*          */
	67108864;
	var NonIdleLanes =
	/*                                 */
	134217727;
	var IdleHydrationLane =
	/*               */
	134217728;
	var IdleLanes =
	/*                             */
	805306368;
	var OffscreenLane =
	/*                   */
	1073741824;
	var NoTimestamp = -1;
	function setCurrentUpdateLanePriority(newLanePriority) {
	} // "Registers" used to "return" multiple values
	// Used by getHighestPriorityLanes and getNextLanes:

	var return_highestLanePriority = DefaultLanePriority;

	function getHighestPriorityLanes(lanes) {
	  if ((SyncLane & lanes) !== NoLanes) {
	    return_highestLanePriority = SyncLanePriority;
	    return SyncLane;
	  }

	  if ((SyncBatchedLane & lanes) !== NoLanes) {
	    return_highestLanePriority = SyncBatchedLanePriority;
	    return SyncBatchedLane;
	  }

	  if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
	    return_highestLanePriority = InputDiscreteHydrationLanePriority;
	    return InputDiscreteHydrationLane;
	  }

	  var inputDiscreteLanes = InputDiscreteLanes & lanes;

	  if (inputDiscreteLanes !== NoLanes) {
	    return_highestLanePriority = InputDiscreteLanePriority;
	    return inputDiscreteLanes;
	  }

	  if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
	    return_highestLanePriority = InputContinuousHydrationLanePriority;
	    return InputContinuousHydrationLane;
	  }

	  var inputContinuousLanes = InputContinuousLanes & lanes;

	  if (inputContinuousLanes !== NoLanes) {
	    return_highestLanePriority = InputContinuousLanePriority;
	    return inputContinuousLanes;
	  }

	  if ((lanes & DefaultHydrationLane) !== NoLanes) {
	    return_highestLanePriority = DefaultHydrationLanePriority;
	    return DefaultHydrationLane;
	  }

	  var defaultLanes = DefaultLanes & lanes;

	  if (defaultLanes !== NoLanes) {
	    return_highestLanePriority = DefaultLanePriority;
	    return defaultLanes;
	  }

	  if ((lanes & TransitionHydrationLane) !== NoLanes) {
	    return_highestLanePriority = TransitionHydrationPriority;
	    return TransitionHydrationLane;
	  }

	  var transitionLanes = TransitionLanes & lanes;

	  if (transitionLanes !== NoLanes) {
	    return_highestLanePriority = TransitionPriority;
	    return transitionLanes;
	  }

	  var retryLanes = RetryLanes & lanes;

	  if (retryLanes !== NoLanes) {
	    return_highestLanePriority = RetryLanePriority;
	    return retryLanes;
	  }

	  if (lanes & SelectiveHydrationLane) {
	    return_highestLanePriority = SelectiveHydrationLanePriority;
	    return SelectiveHydrationLane;
	  }

	  if ((lanes & IdleHydrationLane) !== NoLanes) {
	    return_highestLanePriority = IdleHydrationLanePriority;
	    return IdleHydrationLane;
	  }

	  var idleLanes = IdleLanes & lanes;

	  if (idleLanes !== NoLanes) {
	    return_highestLanePriority = IdleLanePriority;
	    return idleLanes;
	  }

	  if ((OffscreenLane & lanes) !== NoLanes) {
	    return_highestLanePriority = OffscreenLanePriority;
	    return OffscreenLane;
	  }

	  {
	    error('Should have found matching lanes. This is a bug in React.');
	  } // This shouldn't be reachable, but as a fallback, return the entire bitmask.


	  return_highestLanePriority = DefaultLanePriority;
	  return lanes;
	}

	function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
	  switch (schedulerPriorityLevel) {
	    case ImmediatePriority:
	      return SyncLanePriority;

	    case UserBlockingPriority:
	      return InputContinuousLanePriority;

	    case NormalPriority:
	    case LowPriority:
	      // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
	      return DefaultLanePriority;

	    case IdlePriority:
	      return IdleLanePriority;

	    default:
	      return NoLanePriority;
	  }
	}
	function lanePriorityToSchedulerPriority(lanePriority) {
	  switch (lanePriority) {
	    case SyncLanePriority:
	    case SyncBatchedLanePriority:
	      return ImmediatePriority;

	    case InputDiscreteHydrationLanePriority:
	    case InputDiscreteLanePriority:
	    case InputContinuousHydrationLanePriority:
	    case InputContinuousLanePriority:
	      return UserBlockingPriority;

	    case DefaultHydrationLanePriority:
	    case DefaultLanePriority:
	    case TransitionHydrationPriority:
	    case TransitionPriority:
	    case SelectiveHydrationLanePriority:
	    case RetryLanePriority:
	      return NormalPriority;

	    case IdleHydrationLanePriority:
	    case IdleLanePriority:
	    case OffscreenLanePriority:
	      return IdlePriority;

	    case NoLanePriority:
	      return NoPriority;

	    default:
	      {
	        {
	          throw Error( "Invalid update priority: " + lanePriority + ". This is a bug in React." );
	        }
	      }

	  }
	}
	function getNextLanes(root, wipLanes) {
	  // Early bailout if there's no pending work left.
	  var pendingLanes = root.pendingLanes;

	  if (pendingLanes === NoLanes) {
	    return_highestLanePriority = NoLanePriority;
	    return NoLanes;
	  }

	  var nextLanes = NoLanes;
	  var nextLanePriority = NoLanePriority;
	  var expiredLanes = root.expiredLanes;
	  var suspendedLanes = root.suspendedLanes;
	  var pingedLanes = root.pingedLanes; // Check if any work has expired.

	  if (expiredLanes !== NoLanes) {
	    nextLanes = expiredLanes;
	    nextLanePriority = return_highestLanePriority = SyncLanePriority;
	  } else {
	    // Do not work on any idle work until all the non-idle work has finished,
	    // even if the work is suspended.
	    var nonIdlePendingLanes = pendingLanes & NonIdleLanes;

	    if (nonIdlePendingLanes !== NoLanes) {
	      var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;

	      if (nonIdleUnblockedLanes !== NoLanes) {
	        nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
	        nextLanePriority = return_highestLanePriority;
	      } else {
	        var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;

	        if (nonIdlePingedLanes !== NoLanes) {
	          nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
	          nextLanePriority = return_highestLanePriority;
	        }
	      }
	    } else {
	      // The only remaining work is Idle.
	      var unblockedLanes = pendingLanes & ~suspendedLanes;

	      if (unblockedLanes !== NoLanes) {
	        nextLanes = getHighestPriorityLanes(unblockedLanes);
	        nextLanePriority = return_highestLanePriority;
	      } else {
	        if (pingedLanes !== NoLanes) {
	          nextLanes = getHighestPriorityLanes(pingedLanes);
	          nextLanePriority = return_highestLanePriority;
	        }
	      }
	    }
	  }

	  if (nextLanes === NoLanes) {
	    // This should only be reachable if we're suspended
	    // TODO: Consider warning in this path if a fallback timer is not scheduled.
	    return NoLanes;
	  } // If there are higher priority lanes, we'll include them even if they
	  // are suspended.


	  nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes); // If we're already in the middle of a render, switching lanes will interrupt
	  // it and we'll lose our progress. We should only do this if the new lanes are
	  // higher priority.

	  if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
	  // bother waiting until the root is complete.
	  (wipLanes & suspendedLanes) === NoLanes) {
	    getHighestPriorityLanes(wipLanes);
	    var wipLanePriority = return_highestLanePriority;

	    if (nextLanePriority <= wipLanePriority) {
	      return wipLanes;
	    } else {
	      return_highestLanePriority = nextLanePriority;
	    }
	  } // Check for entangled lanes and add them to the batch.
	  //
	  // A lane is said to be entangled with another when it's not allowed to render
	  // in a batch that does not also include the other lane. Typically we do this
	  // when multiple updates have the same source, and we only want to respond to
	  // the most recent event from that source.
	  //
	  // Note that we apply entanglements *after* checking for partial work above.
	  // This means that if a lane is entangled during an interleaved event while
	  // it's already rendering, we won't interrupt it. This is intentional, since
	  // entanglement is usually "best effort": we'll try our best to render the
	  // lanes in the same batch, but it's not worth throwing out partially
	  // completed work in order to do it.
	  //
	  // For those exceptions where entanglement is semantically important, like
	  // useMutableSource, we should ensure that there is no partial work at the
	  // time we apply the entanglement.


	  var entangledLanes = root.entangledLanes;

	  if (entangledLanes !== NoLanes) {
	    var entanglements = root.entanglements;
	    var lanes = nextLanes & entangledLanes;

	    while (lanes > 0) {
	      var index = pickArbitraryLaneIndex(lanes);
	      var lane = 1 << index;
	      nextLanes |= entanglements[index];
	      lanes &= ~lane;
	    }
	  }

	  return nextLanes;
	}
	function getMostRecentEventTime(root, lanes) {
	  var eventTimes = root.eventTimes;
	  var mostRecentEventTime = NoTimestamp;

	  while (lanes > 0) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;
	    var eventTime = eventTimes[index];

	    if (eventTime > mostRecentEventTime) {
	      mostRecentEventTime = eventTime;
	    }

	    lanes &= ~lane;
	  }

	  return mostRecentEventTime;
	}

	function computeExpirationTime(lane, currentTime) {
	  // TODO: Expiration heuristic is constant per lane, so could use a map.
	  getHighestPriorityLanes(lane);
	  var priority = return_highestLanePriority;

	  if (priority >= InputContinuousLanePriority) {
	    // User interactions should expire slightly more quickly.
	    //
	    // NOTE: This is set to the corresponding constant as in Scheduler.js. When
	    // we made it larger, a product metric in www regressed, suggesting there's
	    // a user interaction that's being starved by a series of synchronous
	    // updates. If that theory is correct, the proper solution is to fix the
	    // starvation. However, this scenario supports the idea that expiration
	    // times are an important safeguard when starvation does happen.
	    //
	    // Also note that, in the case of user input specifically, this will soon no
	    // longer be an issue because we plan to make user input synchronous by
	    // default (until you enter `startTransition`, of course.)
	    //
	    // If weren't planning to make these updates synchronous soon anyway, I
	    // would probably make this number a configurable parameter.
	    return currentTime + 250;
	  } else if (priority >= TransitionPriority) {
	    return currentTime + 5000;
	  } else {
	    // Anything idle priority or lower should never expire.
	    return NoTimestamp;
	  }
	}

	function markStarvedLanesAsExpired(root, currentTime) {
	  // TODO: This gets called every time we yield. We can optimize by storing
	  // the earliest expiration time on the root. Then use that to quickly bail out
	  // of this function.
	  var pendingLanes = root.pendingLanes;
	  var suspendedLanes = root.suspendedLanes;
	  var pingedLanes = root.pingedLanes;
	  var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
	  // expiration time. If so, we'll assume the update is being starved and mark
	  // it as expired to force it to finish.

	  var lanes = pendingLanes;

	  while (lanes > 0) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;
	    var expirationTime = expirationTimes[index];

	    if (expirationTime === NoTimestamp) {
	      // Found a pending lane with no expiration time. If it's not suspended, or
	      // if it's pinged, assume it's CPU-bound. Compute a new expiration time
	      // using the current time.
	      if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
	        // Assumes timestamps are monotonically increasing.
	        expirationTimes[index] = computeExpirationTime(lane, currentTime);
	      }
	    } else if (expirationTime <= currentTime) {
	      // This lane expired
	      root.expiredLanes |= lane;
	    }

	    lanes &= ~lane;
	  }
	} // This returns the highest priority pending lanes regardless of whether they
	function getLanesToRetrySynchronouslyOnError(root) {
	  var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;

	  if (everythingButOffscreen !== NoLanes) {
	    return everythingButOffscreen;
	  }

	  if (everythingButOffscreen & OffscreenLane) {
	    return OffscreenLane;
	  }

	  return NoLanes;
	}
	function returnNextLanesPriority() {
	  return return_highestLanePriority;
	}
	function includesNonIdleWork(lanes) {
	  return (lanes & NonIdleLanes) !== NoLanes;
	}
	function includesOnlyRetries(lanes) {
	  return (lanes & RetryLanes) === lanes;
	}
	function includesOnlyTransitions(lanes) {
	  return (lanes & TransitionLanes) === lanes;
	} // To ensure consistency across multiple updates in the same event, this should
	// be a pure function, so that it always returns the same lane for given inputs.

	function findUpdateLane(lanePriority, wipLanes) {
	  switch (lanePriority) {
	    case NoLanePriority:
	      break;

	    case SyncLanePriority:
	      return SyncLane;

	    case SyncBatchedLanePriority:
	      return SyncBatchedLane;

	    case InputDiscreteLanePriority:
	      {
	        var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);

	        if (_lane === NoLane) {
	          // Shift to the next priority level
	          return findUpdateLane(InputContinuousLanePriority, wipLanes);
	        }

	        return _lane;
	      }

	    case InputContinuousLanePriority:
	      {
	        var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);

	        if (_lane2 === NoLane) {
	          // Shift to the next priority level
	          return findUpdateLane(DefaultLanePriority, wipLanes);
	        }

	        return _lane2;
	      }

	    case DefaultLanePriority:
	      {
	        var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);

	        if (_lane3 === NoLane) {
	          // If all the default lanes are already being worked on, look for a
	          // lane in the transition range.
	          _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);

	          if (_lane3 === NoLane) {
	            // All the transition lanes are taken, too. This should be very
	            // rare, but as a last resort, pick a default lane. This will have
	            // the effect of interrupting the current work-in-progress render.
	            _lane3 = pickArbitraryLane(DefaultLanes);
	          }
	        }

	        return _lane3;
	      }

	    case TransitionPriority: // Should be handled by findTransitionLane instead

	    case RetryLanePriority:
	      // Should be handled by findRetryLane instead
	      break;

	    case IdleLanePriority:
	      var lane = pickArbitraryLane(IdleLanes & ~wipLanes);

	      if (lane === NoLane) {
	        lane = pickArbitraryLane(IdleLanes);
	      }

	      return lane;
	  }

	  {
	    {
	      throw Error( "Invalid update priority: " + lanePriority + ". This is a bug in React." );
	    }
	  }
	} // To ensure consistency across multiple updates in the same event, this should
	// be pure function, so that it always returns the same lane for given inputs.

	function findTransitionLane(wipLanes, pendingLanes) {
	  // First look for lanes that are completely unclaimed, i.e. have no
	  // pending work.
	  var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);

	  if (lane === NoLane) {
	    // If all lanes have pending work, look for a lane that isn't currently
	    // being worked on.
	    lane = pickArbitraryLane(TransitionLanes & ~wipLanes);

	    if (lane === NoLane) {
	      // If everything is being worked on, pick any lane. This has the
	      // effect of interrupting the current work-in-progress.
	      lane = pickArbitraryLane(TransitionLanes);
	    }
	  }

	  return lane;
	} // To ensure consistency across multiple updates in the same event, this should
	// be pure function, so that it always returns the same lane for given inputs.

	function findRetryLane(wipLanes) {
	  // This is a fork of `findUpdateLane` designed specifically for Suspense
	  // "retries" — a special update that attempts to flip a Suspense boundary
	  // from its placeholder state to its primary/resolved state.
	  var lane = pickArbitraryLane(RetryLanes & ~wipLanes);

	  if (lane === NoLane) {
	    lane = pickArbitraryLane(RetryLanes);
	  }

	  return lane;
	}

	function getHighestPriorityLane(lanes) {
	  return lanes & -lanes;
	}

	function getLowestPriorityLane(lanes) {
	  // This finds the most significant non-zero bit.
	  var index = 31 - clz32(lanes);
	  return index < 0 ? NoLanes : 1 << index;
	}

	function getEqualOrHigherPriorityLanes(lanes) {
	  return (getLowestPriorityLane(lanes) << 1) - 1;
	}

	function pickArbitraryLane(lanes) {
	  // This wrapper function gets inlined. Only exists so to communicate that it
	  // doesn't matter which bit is selected; you can pick any bit without
	  // affecting the algorithms where its used. Here I'm using
	  // getHighestPriorityLane because it requires the fewest operations.
	  return getHighestPriorityLane(lanes);
	}

	function pickArbitraryLaneIndex(lanes) {
	  return 31 - clz32(lanes);
	}

	function laneToIndex(lane) {
	  return pickArbitraryLaneIndex(lane);
	}

	function includesSomeLane(a, b) {
	  return (a & b) !== NoLanes;
	}
	function isSubsetOfLanes(set, subset) {
	  return (set & subset) === subset;
	}
	function mergeLanes(a, b) {
	  return a | b;
	}
	function removeLanes(set, subset) {
	  return set & ~subset;
	} // Seems redundant, but it changes the type from a single lane (used for
	// updates) to a group of lanes (used for flushing work).

	function laneToLanes(lane) {
	  return lane;
	}
	function higherPriorityLane(a, b) {
	  // This works because the bit ranges decrease in priority as you go left.
	  return a !== NoLane && a < b ? a : b;
	}
	function createLaneMap(initial) {
	  // Intentionally pushing one by one.
	  // https://v8.dev/blog/elements-kinds#avoid-creating-holes
	  var laneMap = [];

	  for (var i = 0; i < TotalLanes; i++) {
	    laneMap.push(initial);
	  }

	  return laneMap;
	}
	function markRootUpdated(root, updateLane, eventTime) {
	  root.pendingLanes |= updateLane; // TODO: Theoretically, any update to any lane can unblock any other lane. But
	  // it's not practical to try every single possible combination. We need a
	  // heuristic to decide which lanes to attempt to render, and in which batches.
	  // For now, we use the same heuristic as in the old ExpirationTimes model:
	  // retry any lane at equal or lower priority, but don't try updates at higher
	  // priority without also including the lower priority updates. This works well
	  // when considering updates across different priority levels, but isn't
	  // sufficient for updates within the same priority, since we want to treat
	  // those updates as parallel.
	  // Unsuspend any update at equal or lower priority.

	  var higherPriorityLanes = updateLane - 1; // Turns 0b1000 into 0b0111

	  root.suspendedLanes &= higherPriorityLanes;
	  root.pingedLanes &= higherPriorityLanes;
	  var eventTimes = root.eventTimes;
	  var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
	  // recent event, and we assume time is monotonically increasing.

	  eventTimes[index] = eventTime;
	}
	function markRootSuspended(root, suspendedLanes) {
	  root.suspendedLanes |= suspendedLanes;
	  root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.

	  var expirationTimes = root.expirationTimes;
	  var lanes = suspendedLanes;

	  while (lanes > 0) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;
	    expirationTimes[index] = NoTimestamp;
	    lanes &= ~lane;
	  }
	}
	function markRootPinged(root, pingedLanes, eventTime) {
	  root.pingedLanes |= root.suspendedLanes & pingedLanes;
	}
	function markDiscreteUpdatesExpired(root) {
	  root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;
	}
	function hasDiscreteLanes(lanes) {
	  return (lanes & InputDiscreteLanes) !== NoLanes;
	}
	function markRootMutableRead(root, updateLane) {
	  root.mutableReadLanes |= updateLane & root.pendingLanes;
	}
	function markRootFinished(root, remainingLanes) {
	  var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
	  root.pendingLanes = remainingLanes; // Let's try everything again

	  root.suspendedLanes = 0;
	  root.pingedLanes = 0;
	  root.expiredLanes &= remainingLanes;
	  root.mutableReadLanes &= remainingLanes;
	  root.entangledLanes &= remainingLanes;
	  var entanglements = root.entanglements;
	  var eventTimes = root.eventTimes;
	  var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work

	  var lanes = noLongerPendingLanes;

	  while (lanes > 0) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;
	    entanglements[index] = NoLanes;
	    eventTimes[index] = NoTimestamp;
	    expirationTimes[index] = NoTimestamp;
	    lanes &= ~lane;
	  }
	}
	function markRootEntangled(root, entangledLanes) {
	  root.entangledLanes |= entangledLanes;
	  var entanglements = root.entanglements;
	  var lanes = entangledLanes;

	  while (lanes > 0) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;
	    entanglements[index] |= entangledLanes;
	    lanes &= ~lane;
	  }
	}
	var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros. Only used on lanes, so assume input is an integer.
	// Based on:
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

	var log = Math.log;
	var LN2 = Math.LN2;

	function clz32Fallback(lanes) {
	  if (lanes === 0) {
	    return 32;
	  }

	  return 31 - (log(lanes) / LN2 | 0) | 0;
	}

	// Intentionally not named imports because Rollup would use dynamic dispatch for
	var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority,
	    runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?

	var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
	// We'd like to remove this but it's not clear if this is safe.

	function setEnabled(enabled) {
	  _enabled = !!enabled;
	}
	function isEnabled() {
	  return _enabled;
	}
	function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
	  var eventPriority = getEventPriorityForPluginSystem(domEventName);
	  var listenerWrapper;

	  switch (eventPriority) {
	    case DiscreteEvent:
	      listenerWrapper = dispatchDiscreteEvent;
	      break;

	    case UserBlockingEvent:
	      listenerWrapper = dispatchUserBlockingUpdate;
	      break;

	    case ContinuousEvent:
	    default:
	      listenerWrapper = dispatchEvent;
	      break;
	  }

	  return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
	}

	function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
	  {
	    flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
	  }

	  discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
	}

	function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
	  {
	    runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
	  }
	}

	function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
	  if (!_enabled) {
	    return;
	  }

	  var allowReplay = true;

	  {
	    // TODO: replaying capture phase events is currently broken
	    // because we used to do it during top-level native bubble handlers
	    // but now we use different bubble and capture handlers.
	    // In eager mode, we attach capture listeners early, so we need
	    // to filter them out until we fix the logic to handle them correctly.
	    // This could've been outside the flag but I put it inside to reduce risk.
	    allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
	  }

	  if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
	    // If we already have a queue of discrete events, and this is another discrete
	    // event, then we can't dispatch it regardless of its target, since they
	    // need to dispatch in order.
	    queueDiscreteEvent(null, // Flags that we're not actually blocked on anything as far as we know.
	    domEventName, eventSystemFlags, targetContainer, nativeEvent);
	    return;
	  }

	  var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);

	  if (blockedOn === null) {
	    // We successfully dispatched this event.
	    if (allowReplay) {
	      clearIfContinuousEvent(domEventName, nativeEvent);
	    }

	    return;
	  }

	  if (allowReplay) {
	    if (isReplayableDiscreteEvent(domEventName)) {
	      // This this to be replayed later once the target is available.
	      queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
	      return;
	    }

	    if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
	      return;
	    } // We need to clear only if we didn't queue because
	    // queueing is accummulative.


	    clearIfContinuousEvent(domEventName, nativeEvent);
	  } // This is not replayable so we'll invoke it but without a target,
	  // in case the event system needs to trace it.


	  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
	} // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.

	function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
	  // TODO: Warn if _enabled is false.
	  var nativeEventTarget = getEventTarget(nativeEvent);
	  var targetInst = getClosestInstanceFromNode(nativeEventTarget);

	  if (targetInst !== null) {
	    var nearestMounted = getNearestMountedFiber(targetInst);

	    if (nearestMounted === null) {
	      // This tree has been unmounted already. Dispatch without a target.
	      targetInst = null;
	    } else {
	      var tag = nearestMounted.tag;

	      if (tag === SuspenseComponent) {
	        var instance = getSuspenseInstanceFromFiber(nearestMounted);

	        if (instance !== null) {
	          // Queue the event to be replayed later. Abort dispatching since we
	          // don't want this event dispatched twice through the event system.
	          // TODO: If this is the first discrete event in the queue. Schedule an increased
	          // priority for this boundary.
	          return instance;
	        } // This shouldn't happen, something went wrong but to avoid blocking
	        // the whole system, dispatch the event without a target.
	        // TODO: Warn.


	        targetInst = null;
	      } else if (tag === HostRoot) {
	        var root = nearestMounted.stateNode;

	        if (root.hydrate) {
	          // If this happens during a replay something went wrong and it might block
	          // the whole system.
	          return getContainerFromFiber(nearestMounted);
	        }

	        targetInst = null;
	      } else if (nearestMounted !== targetInst) {
	        // If we get an event (ex: img onload) before committing that
	        // component's mount, ignore it for now (that is, treat it as if it was an
	        // event on a non-React tree). We might also consider queueing events and
	        // dispatching them after the mount.
	        targetInst = null;
	      }
	    }
	  }

	  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer); // We're not blocked on anything.

	  return null;
	}

	function addEventBubbleListener(target, eventType, listener) {
	  target.addEventListener(eventType, listener, false);
	  return listener;
	}
	function addEventCaptureListener(target, eventType, listener) {
	  target.addEventListener(eventType, listener, true);
	  return listener;
	}
	function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
	  target.addEventListener(eventType, listener, {
	    capture: true,
	    passive: passive
	  });
	  return listener;
	}
	function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
	  target.addEventListener(eventType, listener, {
	    passive: passive
	  });
	  return listener;
	}

	/**
	 * These variables store information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 *
	 */
	var root = null;
	var startText = null;
	var fallbackText = null;
	function initialize(nativeEventTarget) {
	  root = nativeEventTarget;
	  startText = getText();
	  return true;
	}
	function reset() {
	  root = null;
	  startText = null;
	  fallbackText = null;
	}
	function getData() {
	  if (fallbackText) {
	    return fallbackText;
	  }

	  var start;
	  var startValue = startText;
	  var startLength = startValue.length;
	  var end;
	  var endValue = getText();
	  var endLength = endValue.length;

	  for (start = 0; start < startLength; start++) {
	    if (startValue[start] !== endValue[start]) {
	      break;
	    }
	  }

	  var minEnd = startLength - start;

	  for (end = 1; end <= minEnd; end++) {
	    if (startValue[startLength - end] !== endValue[endLength - end]) {
	      break;
	    }
	  }

	  var sliceTail = end > 1 ? 1 - end : undefined;
	  fallbackText = endValue.slice(start, sliceTail);
	  return fallbackText;
	}
	function getText() {
	  if ('value' in root) {
	    return root.value;
	  }

	  return root.textContent;
	}

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
	  // report Enter as charCode 10 when ctrl is pressed.


	  if (charCode === 10) {
	    charCode = 13;
	  } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.


	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	function functionThatReturnsTrue() {
	  return true;
	}

	function functionThatReturnsFalse() {
	  return false;
	} // This is intentionally a factory so that we have different returned constructors.
	// If we had a single constructor, it would be megamorphic and engines would deopt.


	function createSyntheticEvent(Interface) {
	  /**
	   * Synthetic events are dispatched by event plugins, typically in response to a
	   * top-level event delegation handler.
	   *
	   * These systems should generally use pooling to reduce the frequency of garbage
	   * collection. The system should check `isPersistent` to determine whether the
	   * event should be released into the pool after being dispatched. Users that
	   * need a persisted event should invoke `persist`.
	   *
	   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	   * normalizing browser quirks. Subclasses do not necessarily have to implement a
	   * DOM interface; custom application-specific events can also subclass this.
	   */
	  function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
	    this._reactName = reactName;
	    this._targetInst = targetInst;
	    this.type = reactEventType;
	    this.nativeEvent = nativeEvent;
	    this.target = nativeEventTarget;
	    this.currentTarget = null;

	    for (var _propName in Interface) {
	      if (!Interface.hasOwnProperty(_propName)) {
	        continue;
	      }

	      var normalize = Interface[_propName];

	      if (normalize) {
	        this[_propName] = normalize(nativeEvent);
	      } else {
	        this[_propName] = nativeEvent[_propName];
	      }
	    }

	    var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

	    if (defaultPrevented) {
	      this.isDefaultPrevented = functionThatReturnsTrue;
	    } else {
	      this.isDefaultPrevented = functionThatReturnsFalse;
	    }

	    this.isPropagationStopped = functionThatReturnsFalse;
	    return this;
	  }

	  _assign(SyntheticBaseEvent.prototype, {
	    preventDefault: function () {
	      this.defaultPrevented = true;
	      var event = this.nativeEvent;

	      if (!event) {
	        return;
	      }

	      if (event.preventDefault) {
	        event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
	      } else if (typeof event.returnValue !== 'unknown') {
	        event.returnValue = false;
	      }

	      this.isDefaultPrevented = functionThatReturnsTrue;
	    },
	    stopPropagation: function () {
	      var event = this.nativeEvent;

	      if (!event) {
	        return;
	      }

	      if (event.stopPropagation) {
	        event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
	      } else if (typeof event.cancelBubble !== 'unknown') {
	        // The ChangeEventPlugin registers a "propertychange" event for
	        // IE. This event does not support bubbling or cancelling, and
	        // any references to cancelBubble throw "Member not found".  A
	        // typeof check of "unknown" circumvents this issue (and is also
	        // IE specific).
	        event.cancelBubble = true;
	      }

	      this.isPropagationStopped = functionThatReturnsTrue;
	    },

	    /**
	     * We release all dispatched `SyntheticEvent`s after each event loop, adding
	     * them back into the pool. This allows a way to hold onto a reference that
	     * won't be added back into the pool.
	     */
	    persist: function () {// Modern event system doesn't use pooling.
	    },

	    /**
	     * Checks if this event should be released back into the pool.
	     *
	     * @return {boolean} True if this should not be released, false otherwise.
	     */
	    isPersistent: functionThatReturnsTrue
	  });

	  return SyntheticBaseEvent;
	}
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */


	var EventInterface = {
	  eventPhase: 0,
	  bubbles: 0,
	  cancelable: 0,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: 0,
	  isTrusted: 0
	};
	var SyntheticEvent = createSyntheticEvent(EventInterface);

	var UIEventInterface = _assign({}, EventInterface, {
	  view: 0,
	  detail: 0
	});

	var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
	var lastMovementX;
	var lastMovementY;
	var lastMouseEvent;

	function updateMouseMovementPolyfillState(event) {
	  if (event !== lastMouseEvent) {
	    if (lastMouseEvent && event.type === 'mousemove') {
	      lastMovementX = event.screenX - lastMouseEvent.screenX;
	      lastMovementY = event.screenY - lastMouseEvent.screenY;
	    } else {
	      lastMovementX = 0;
	      lastMovementY = 0;
	    }

	    lastMouseEvent = event;
	  }
	}
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */


	var MouseEventInterface = _assign({}, UIEventInterface, {
	  screenX: 0,
	  screenY: 0,
	  clientX: 0,
	  clientY: 0,
	  pageX: 0,
	  pageY: 0,
	  ctrlKey: 0,
	  shiftKey: 0,
	  altKey: 0,
	  metaKey: 0,
	  getModifierState: getEventModifierState,
	  button: 0,
	  buttons: 0,
	  relatedTarget: function (event) {
	    if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
	    return event.relatedTarget;
	  },
	  movementX: function (event) {
	    if ('movementX' in event) {
	      return event.movementX;
	    }

	    updateMouseMovementPolyfillState(event);
	    return lastMovementX;
	  },
	  movementY: function (event) {
	    if ('movementY' in event) {
	      return event.movementY;
	    } // Don't need to call updateMouseMovementPolyfillState() here
	    // because it's guaranteed to have already run when movementX
	    // was copied.


	    return lastMovementY;
	  }
	});

	var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var DragEventInterface = _assign({}, MouseEventInterface, {
	  dataTransfer: 0
	});

	var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var FocusEventInterface = _assign({}, UIEventInterface, {
	  relatedTarget: 0
	});

	var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */

	var AnimationEventInterface = _assign({}, EventInterface, {
	  animationName: 0,
	  elapsedTime: 0,
	  pseudoElement: 0
	});

	var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */

	var ClipboardEventInterface = _assign({}, EventInterface, {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	});

	var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */

	var CompositionEventInterface = _assign({}, EventInterface, {
	  data: 0
	});

	var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	// Happens to share the same list for now.

	var SyntheticInputEvent = SyntheticCompositionEvent;
	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */

	var normalizeKey = {
	  Esc: 'Escape',
	  Spacebar: ' ',
	  Left: 'ArrowLeft',
	  Up: 'ArrowUp',
	  Right: 'ArrowRight',
	  Down: 'ArrowDown',
	  Del: 'Delete',
	  Win: 'OS',
	  Menu: 'ContextMenu',
	  Apps: 'ContextMenu',
	  Scroll: 'ScrollLock',
	  MozPrintableKey: 'Unidentified'
	};
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */

	var translateToKey = {
	  '8': 'Backspace',
	  '9': 'Tab',
	  '12': 'Clear',
	  '13': 'Enter',
	  '16': 'Shift',
	  '17': 'Control',
	  '18': 'Alt',
	  '19': 'Pause',
	  '20': 'CapsLock',
	  '27': 'Escape',
	  '32': ' ',
	  '33': 'PageUp',
	  '34': 'PageDown',
	  '35': 'End',
	  '36': 'Home',
	  '37': 'ArrowLeft',
	  '38': 'ArrowUp',
	  '39': 'ArrowRight',
	  '40': 'ArrowDown',
	  '45': 'Insert',
	  '46': 'Delete',
	  '112': 'F1',
	  '113': 'F2',
	  '114': 'F3',
	  '115': 'F4',
	  '116': 'F5',
	  '117': 'F6',
	  '118': 'F7',
	  '119': 'F8',
	  '120': 'F9',
	  '121': 'F10',
	  '122': 'F11',
	  '123': 'F12',
	  '144': 'NumLock',
	  '145': 'ScrollLock',
	  '224': 'Meta'
	};
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */

	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

	    if (key !== 'Unidentified') {
	      return key;
	    }
	  } // Browser does not implement `key`, polyfill as much of it as we can.


	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.

	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }

	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }

	  return '';
	}
	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */


	var modifierKeyToProp = {
	  Alt: 'altKey',
	  Control: 'ctrlKey',
	  Meta: 'metaKey',
	  Shift: 'shiftKey'
	}; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
	// getModifierState. If getModifierState is not supported, we map it to a set of
	// modifier keys exposed by the event. In this case, Lock-keys are not supported.

	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;

	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }

	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}
	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */


	var KeyboardEventInterface = _assign({}, UIEventInterface, {
	  key: getEventKey,
	  code: 0,
	  location: 0,
	  ctrlKey: 0,
	  shiftKey: 0,
	  altKey: 0,
	  metaKey: 0,
	  repeat: 0,
	  locale: 0,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }

	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }

	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }

	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }

	    return 0;
	  }
	});

	var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
	/**
	 * @interface PointerEvent
	 * @see http://www.w3.org/TR/pointerevents/
	 */

	var PointerEventInterface = _assign({}, MouseEventInterface, {
	  pointerId: 0,
	  width: 0,
	  height: 0,
	  pressure: 0,
	  tangentialPressure: 0,
	  tiltX: 0,
	  tiltY: 0,
	  twist: 0,
	  pointerType: 0,
	  isPrimary: 0
	});

	var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */

	var TouchEventInterface = _assign({}, UIEventInterface, {
	  touches: 0,
	  targetTouches: 0,
	  changedTouches: 0,
	  altKey: 0,
	  metaKey: 0,
	  ctrlKey: 0,
	  shiftKey: 0,
	  getModifierState: getEventModifierState
	});

	var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */

	var TransitionEventInterface = _assign({}, EventInterface, {
	  propertyName: 0,
	  elapsedTime: 0,
	  pseudoElement: 0
	});

	var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var WheelEventInterface = _assign({}, MouseEventInterface, {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: 0,
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: 0
	});

	var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

	var START_KEYCODE = 229;
	var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
	var documentMode = null;

	if (canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	} // Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.


	var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.

	var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	function registerEvents() {
	  registerTwoPhaseEvent('onBeforeInput', ['compositionend', 'keypress', 'textInput', 'paste']);
	  registerTwoPhaseEvent('onCompositionEnd', ['compositionend', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
	  registerTwoPhaseEvent('onCompositionStart', ['compositionstart', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
	  registerTwoPhaseEvent('onCompositionUpdate', ['compositionupdate', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
	} // Track whether we've ever handled a keypress on the space key.


	var hasSpaceKeypress = false;
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */

	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}
	/**
	 * Translate native top level events into event types.
	 */


	function getCompositionEventType(domEventName) {
	  switch (domEventName) {
	    case 'compositionstart':
	      return 'onCompositionStart';

	    case 'compositionend':
	      return 'onCompositionEnd';

	    case 'compositionupdate':
	      return 'onCompositionUpdate';
	  }
	}
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 */


	function isFallbackCompositionStart(domEventName, nativeEvent) {
	  return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
	}
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 */


	function isFallbackCompositionEnd(domEventName, nativeEvent) {
	  switch (domEventName) {
	    case 'keyup':
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

	    case 'keydown':
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;

	    case 'keypress':
	    case 'mousedown':
	    case 'focusout':
	      // Events are not possible without cancelling IME.
	      return true;

	    default:
	      return false;
	  }
	}
	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */


	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;

	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }

	  return null;
	}
	/**
	 * Check if a composition event was triggered by Korean IME.
	 * Our fallback mode does not work well with IE's Korean IME,
	 * so just use native composition events when Korean IME is used.
	 * Although CompositionEvent.locale property is deprecated,
	 * it is available in IE, where our fallback mode is enabled.
	 *
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */


	function isUsingKoreanIME(nativeEvent) {
	  return nativeEvent.locale === 'ko';
	} // Track the current IME composition status, if any.


	var isComposing = false;
	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */

	function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(domEventName);
	  } else if (!isComposing) {
	    if (isFallbackCompositionStart(domEventName, nativeEvent)) {
	      eventType = 'onCompositionStart';
	    }
	  } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
	    eventType = 'onCompositionEnd';
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!isComposing && eventType === 'onCompositionStart') {
	      isComposing = initialize(nativeEventTarget);
	    } else if (eventType === 'onCompositionEnd') {
	      if (isComposing) {
	        fallbackData = getData();
	      }
	    }
	  }

	  var listeners = accumulateTwoPhaseListeners(targetInst, eventType);

	  if (listeners.length > 0) {
	    var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
	    dispatchQueue.push({
	      event: event,
	      listeners: listeners
	    });

	    if (fallbackData) {
	      // Inject data generated from fallback path into the synthetic event.
	      // This matches the property of native CompositionEventInterface.
	      event.data = fallbackData;
	    } else {
	      var customData = getDataFromCustomEvent(nativeEvent);

	      if (customData !== null) {
	        event.data = customData;
	      }
	    }
	  }
	}

	function getNativeBeforeInputChars(domEventName, nativeEvent) {
	  switch (domEventName) {
	    case 'compositionend':
	      return getDataFromCustomEvent(nativeEvent);

	    case 'keypress':
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;

	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case 'textInput':
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to ignore it.

	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}
	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 */


	function getFallbackBeforeInputChars(domEventName, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (isComposing) {
	    if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
	      var chars = getData();
	      reset();
	      isComposing = false;
	      return chars;
	    }

	    return null;
	  }

	  switch (domEventName) {
	    case 'paste':
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;

	    case 'keypress':
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (!isKeypressCommand(nativeEvent)) {
	        // IE fires the `keypress` event when a user types an emoji via
	        // Touch keyboard of Windows.  In such a case, the `char` property
	        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
	        // is 2, the property `which` does not represent an emoji correctly.
	        // In such a case, we directly return the `char` property instead of
	        // using `which`.
	        if (nativeEvent.char && nativeEvent.char.length > 1) {
	          return nativeEvent.char;
	        } else if (nativeEvent.which) {
	          return String.fromCharCode(nativeEvent.which);
	        }
	      }

	      return null;

	    case 'compositionend':
	      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

	    default:
	      return null;
	  }
	}
	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */


	function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(domEventName, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
	  } // If no characters are being inserted, no BeforeInput event should
	  // be fired.


	  if (!chars) {
	    return null;
	  }

	  var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');

	  if (listeners.length > 0) {
	    var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
	    dispatchQueue.push({
	      event: event,
	      listeners: listeners
	    });
	    event.data = chars;
	  }
	}
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */


	function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
	  extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
	  extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
	}

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  color: true,
	  date: true,
	  datetime: true,
	  'datetime-local': true,
	  email: true,
	  month: true,
	  number: true,
	  password: true,
	  range: true,
	  search: true,
	  tel: true,
	  text: true,
	  time: true,
	  url: true,
	  week: true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }

	  if (nodeName === 'textarea') {
	    return true;
	  }

	  return false;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */

	function isEventSupported(eventNameSuffix) {
	  if (!canUseDOM) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = (eventName in document);

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  return isSupported;
	}

	function registerEvents$1() {
	  registerTwoPhaseEvent('onChange', ['change', 'click', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'selectionchange']);
	}

	function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
	  // Flag this event loop as needing state restore.
	  enqueueStateRestore(target);
	  var listeners = accumulateTwoPhaseListeners(inst, 'onChange');

	  if (listeners.length > 0) {
	    var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
	    dispatchQueue.push({
	      event: event,
	      listeners: listeners
	    });
	  }
	}
	/**
	 * For IE shims
	 */


	var activeElement = null;
	var activeElementInst = null;
	/**
	 * SECTION: handle `change` event
	 */

	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var dispatchQueue = [];
	  createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.

	  batchedUpdates(runEventInBatch, dispatchQueue);
	}

	function runEventInBatch(dispatchQueue) {
	  processDispatchQueue(dispatchQueue, 0);
	}

	function getInstIfValueChanged(targetInst) {
	  var targetNode = getNodeFromInstance(targetInst);

	  if (updateValueIfChanged(targetNode)) {
	    return targetInst;
	  }
	}

	function getTargetInstForChangeEvent(domEventName, targetInst) {
	  if (domEventName === 'change') {
	    return targetInst;
	  }
	}
	/**
	 * SECTION: handle `input` event
	 */


	var isInputEventSupported = false;

	if (canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
	}
	/**
	 * (For IE <=9) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */


	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}
	/**
	 * (For IE <=9) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */


	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  activeElement = null;
	  activeElementInst = null;
	}
	/**
	 * (For IE <=9) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */


	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }

	  if (getInstIfValueChanged(activeElementInst)) {
	    manualDispatchChangeEvent(nativeEvent);
	  }
	}

	function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
	  if (domEventName === 'focusin') {
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (domEventName === 'focusout') {
	    stopWatchingForValueChange();
	  }
	} // For IE8 and IE9.


	function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
	  if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    return getInstIfValueChanged(activeElementInst);
	  }
	}
	/**
	 * SECTION: handle `click` event
	 */


	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(domEventName, targetInst) {
	  if (domEventName === 'click') {
	    return getInstIfValueChanged(targetInst);
	  }
	}

	function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
	  if (domEventName === 'input' || domEventName === 'change') {
	    return getInstIfValueChanged(targetInst);
	  }
	}

	function handleControlledInputBlur(node) {
	  var state = node._wrapperState;

	  if (!state || !state.controlled || node.type !== 'number') {
	    return;
	  }

	  {
	    // If controlled, assign the value attribute to the current value on blur
	    setDefaultValue(node, 'number', node.value);
	  }
	}
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */


	function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
	  var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
	  var getTargetInstFunc, handleEventFunc;

	  if (shouldUseChangeEvent(targetNode)) {
	    getTargetInstFunc = getTargetInstForChangeEvent;
	  } else if (isTextInputElement(targetNode)) {
	    if (isInputEventSupported) {
	      getTargetInstFunc = getTargetInstForInputOrChangeEvent;
	    } else {
	      getTargetInstFunc = getTargetInstForInputEventPolyfill;
	      handleEventFunc = handleEventsForInputEventPolyfill;
	    }
	  } else if (shouldUseClickEvent(targetNode)) {
	    getTargetInstFunc = getTargetInstForClickEvent;
	  }

	  if (getTargetInstFunc) {
	    var inst = getTargetInstFunc(domEventName, targetInst);

	    if (inst) {
	      createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
	      return;
	    }
	  }

	  if (handleEventFunc) {
	    handleEventFunc(domEventName, targetNode, targetInst);
	  } // When blurring, set the value attribute for number inputs


	  if (domEventName === 'focusout') {
	    handleControlledInputBlur(targetNode);
	  }
	}

	function registerEvents$2() {
	  registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover']);
	  registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover']);
	  registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover']);
	  registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover']);
	}
	/**
	 * For almost every interaction we care about, there will be both a top-level
	 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	 * we do not extract duplicate events. However, moving the mouse into the
	 * browser from outside will not fire a `mouseout` event. In this case, we use
	 * the `mouseover` top-level event.
	 */


	function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
	  var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
	  var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';

	  if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
	    // If this is an over event with a target, we might have already dispatched
	    // the event in the out event of the other target. If this is replayed,
	    // then it's because we couldn't dispatch against this target previously
	    // so we have to do it now instead.
	    var related = nativeEvent.relatedTarget || nativeEvent.fromElement;

	    if (related) {
	      // If the related node is managed by React, we can assume that we have
	      // already dispatched the corresponding events during its mouseout.
	      if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
	        return;
	      }
	    }
	  }

	  if (!isOutEvent && !isOverEvent) {
	    // Must not be a mouse or pointer in or out - ignoring.
	    return;
	  }

	  var win; // TODO: why is this nullable in the types but we read from it?

	  if (nativeEventTarget.window === nativeEventTarget) {
	    // `nativeEventTarget` is probably a window object.
	    win = nativeEventTarget;
	  } else {
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    var doc = nativeEventTarget.ownerDocument;

	    if (doc) {
	      win = doc.defaultView || doc.parentWindow;
	    } else {
	      win = window;
	    }
	  }

	  var from;
	  var to;

	  if (isOutEvent) {
	    var _related = nativeEvent.relatedTarget || nativeEvent.toElement;

	    from = targetInst;
	    to = _related ? getClosestInstanceFromNode(_related) : null;

	    if (to !== null) {
	      var nearestMounted = getNearestMountedFiber(to);

	      if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
	        to = null;
	      }
	    }
	  } else {
	    // Moving to a node from outside the window.
	    from = null;
	    to = targetInst;
	  }

	  if (from === to) {
	    // Nothing pertains to our managed components.
	    return;
	  }

	  var SyntheticEventCtor = SyntheticMouseEvent;
	  var leaveEventType = 'onMouseLeave';
	  var enterEventType = 'onMouseEnter';
	  var eventTypePrefix = 'mouse';

	  if (domEventName === 'pointerout' || domEventName === 'pointerover') {
	    SyntheticEventCtor = SyntheticPointerEvent;
	    leaveEventType = 'onPointerLeave';
	    enterEventType = 'onPointerEnter';
	    eventTypePrefix = 'pointer';
	  }

	  var fromNode = from == null ? win : getNodeFromInstance(from);
	  var toNode = to == null ? win : getNodeFromInstance(to);
	  var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
	  leave.target = fromNode;
	  leave.relatedTarget = toNode;
	  var enter = null; // We should only process this nativeEvent if we are processing
	  // the first ancestor. Next time, we will ignore the event.

	  var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);

	  if (nativeTargetInst === targetInst) {
	    var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
	    enterEvent.target = toNode;
	    enterEvent.relatedTarget = fromNode;
	    enter = enterEvent;
	  }

	  accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
	}

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
	  ;
	}

	var objectIs = typeof Object.is === 'function' ? Object.is : is;

	var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */

	function shallowEqual(objA, objB) {
	  if (objectIs(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  } // Test for A's keys different from B.


	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */

	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }

	  return node;
	}
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */


	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }

	    node = node.parentNode;
	  }
	}
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */


	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === TEXT_NODE) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	/**
	 * @param {DOMElement} outerNode
	 * @return {?object}
	 */

	function getOffsets(outerNode) {
	  var ownerDocument = outerNode.ownerDocument;
	  var win = ownerDocument && ownerDocument.defaultView || window;
	  var selection = win.getSelection && win.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode,
	      anchorOffset = selection.anchorOffset,
	      focusNode = selection.focusNode,
	      focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
	  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
	  // expose properties, triggering a "Permission denied error" if any of its
	  // properties are accessed. The only seemingly possible way to avoid erroring
	  // is to access a property that typically works for non-anonymous divs and
	  // catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

	  try {
	    /* eslint-disable no-unused-expressions */
	    anchorNode.nodeType;
	    focusNode.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
	}
	/**
	 * Returns {start, end} where `start` is the character/codepoint index of
	 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
	 * `end` is the index of (focusNode, focusOffset).
	 *
	 * Returns null if you pass in garbage input but we should probably just crash.
	 *
	 * Exported only for testing.
	 */

	function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
	  var length = 0;
	  var start = -1;
	  var end = -1;
	  var indexWithinAnchor = 0;
	  var indexWithinFocus = 0;
	  var node = outerNode;
	  var parentNode = null;

	  outer: while (true) {
	    var next = null;

	    while (true) {
	      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
	        start = length + anchorOffset;
	      }

	      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
	        end = length + focusOffset;
	      }

	      if (node.nodeType === TEXT_NODE) {
	        length += node.nodeValue.length;
	      }

	      if ((next = node.firstChild) === null) {
	        break;
	      } // Moving from `node` to its first child `next`.


	      parentNode = node;
	      node = next;
	    }

	    while (true) {
	      if (node === outerNode) {
	        // If `outerNode` has children, this is always the second time visiting
	        // it. If it has no children, this is still the first loop, and the only
	        // valid selection is anchorNode and focusNode both equal to this node
	        // and both offsets 0, in which case we will have handled above.
	        break outer;
	      }

	      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
	        start = length;
	      }

	      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
	        end = length;
	      }

	      if ((next = node.nextSibling) !== null) {
	        break;
	      }

	      node = parentNode;
	      parentNode = node.parentNode;
	    } // Moving from `node` to its next sibling `next`.


	    node = next;
	  }

	  if (start === -1 || end === -1) {
	    // This should never happen. (Would happen if the anchor/focus nodes aren't
	    // actually inside the passed-in node.)
	    return null;
	  }

	  return {
	    start: start,
	    end: end
	  };
	}
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */

	function setOffsets(node, offsets) {
	  var doc = node.ownerDocument || document;
	  var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
	  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
	  // fails when pasting 100+ items)

	  if (!win.getSelection) {
	    return;
	  }

	  var selection = win.getSelection();
	  var length = node.textContent.length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.

	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
	      return;
	    }

	    var range = doc.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	function isTextNode(node) {
	  return node && node.nodeType === TEXT_NODE;
	}

	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	function isInDocument(node) {
	  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
	}

	function isSameOriginFrame(iframe) {
	  try {
	    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
	    // to throw, e.g. if it has a cross-origin src attribute.
	    // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
	    // iframe.contentDocument.defaultView;
	    // A safety way is to access one of the cross origin properties: Window or Location
	    // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
	    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
	    return typeof iframe.contentWindow.location.href === 'string';
	  } catch (err) {
	    return false;
	  }
	}

	function getActiveElementDeep() {
	  var win = window;
	  var element = getActiveElement();

	  while (element instanceof win.HTMLIFrameElement) {
	    if (isSameOriginFrame(element)) {
	      win = element.contentWindow;
	    } else {
	      return element;
	    }

	    element = getActiveElement(win.document);
	  }

	  return element;
	}
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */

	/**
	 * @hasSelectionCapabilities: we get the element types that support selection
	 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
	 * and `selectionEnd` rows.
	 */


	function hasSelectionCapabilities(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
	}
	function getSelectionInformation() {
	  var focusedElem = getActiveElementDeep();
	  return {
	    focusedElem: focusedElem,
	    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
	  };
	}
	/**
	 * @restoreSelection: If any selection information was potentially lost,
	 * restore it. This is useful when performing operations that could remove dom
	 * nodes and place them back in, resulting in focus being lost.
	 */

	function restoreSelection(priorSelectionInformation) {
	  var curFocusedElem = getActiveElementDeep();
	  var priorFocusedElem = priorSelectionInformation.focusedElem;
	  var priorSelectionRange = priorSelectionInformation.selectionRange;

	  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
	      setSelection(priorFocusedElem, priorSelectionRange);
	    } // Focusing a node can change the scroll position, which is undesirable


	    var ancestors = [];
	    var ancestor = priorFocusedElem;

	    while (ancestor = ancestor.parentNode) {
	      if (ancestor.nodeType === ELEMENT_NODE) {
	        ancestors.push({
	          element: ancestor,
	          left: ancestor.scrollLeft,
	          top: ancestor.scrollTop
	        });
	      }
	    }

	    if (typeof priorFocusedElem.focus === 'function') {
	      priorFocusedElem.focus();
	    }

	    for (var i = 0; i < ancestors.length; i++) {
	      var info = ancestors[i];
	      info.element.scrollLeft = info.left;
	      info.element.scrollTop = info.top;
	    }
	  }
	}
	/**
	 * @getSelection: Gets the selection bounds of a focused textarea, input or
	 * contentEditable node.
	 * -@input: Look up selection bounds of this input
	 * -@return {start: selectionStart, end: selectionEnd}
	 */

	function getSelection(input) {
	  var selection;

	  if ('selectionStart' in input) {
	    // Modern browser with input or textarea.
	    selection = {
	      start: input.selectionStart,
	      end: input.selectionEnd
	    };
	  } else {
	    // Content editable or old IE textarea.
	    selection = getOffsets(input);
	  }

	  return selection || {
	    start: 0,
	    end: 0
	  };
	}
	/**
	 * @setSelection: Sets the selection bounds of a textarea or input and focuses
	 * the input.
	 * -@input     Set selection bounds of this input or textarea
	 * -@offsets   Object of same form that is returned from get*
	 */

	function setSelection(input, offsets) {
	  var start = offsets.start;
	  var end = offsets.end;

	  if (end === undefined) {
	    end = start;
	  }

	  if ('selectionStart' in input) {
	    input.selectionStart = start;
	    input.selectionEnd = Math.min(end, input.value.length);
	  } else {
	    setOffsets(input, offsets);
	  }
	}

	var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	function registerEvents$3() {
	  registerTwoPhaseEvent('onSelect', ['focusout', 'contextmenu', 'dragend', 'focusin', 'keydown', 'keyup', 'mousedown', 'mouseup', 'selectionchange']);
	}

	var activeElement$1 = null;
	var activeElementInst$1 = null;
	var lastSelection = null;
	var mouseDown = false;
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 */

	function getSelection$1(node) {
	  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else {
	    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
	    var selection = win.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  }
	}
	/**
	 * Get document associated with the event target.
	 */


	function getEventTargetDocument(eventTarget) {
	  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
	}
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @param {object} nativeEventTarget
	 * @return {?SyntheticEvent}
	 */


	function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  var doc = getEventTargetDocument(nativeEventTarget);

	  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
	    return;
	  } // Only fire when selection has actually changed.


	  var currentSelection = getSelection$1(activeElement$1);

	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	    var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');

	    if (listeners.length > 0) {
	      var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
	      dispatchQueue.push({
	        event: event,
	        listeners: listeners
	      });
	      event.target = activeElement$1;
	    }
	  }
	}
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */


	function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {

	  var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;

	  switch (domEventName) {
	    // Track the input node that has focus.
	    case 'focusin':
	      if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	        activeElement$1 = targetNode;
	        activeElementInst$1 = targetInst;
	        lastSelection = null;
	      }

	      break;

	    case 'focusout':
	      activeElement$1 = null;
	      activeElementInst$1 = null;
	      lastSelection = null;
	      break;
	    // Don't fire the event while the user is dragging. This matches the
	    // semantics of the native select event.

	    case 'mousedown':
	      mouseDown = true;
	      break;

	    case 'contextmenu':
	    case 'mouseup':
	    case 'dragend':
	      mouseDown = false;
	      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
	      break;
	    // Chrome and IE fire non-standard event when selection is changed (and
	    // sometimes when it hasn't). IE's event fires out of order with respect
	    // to key and input events on deletion, so we discard it.
	    //
	    // Firefox doesn't support selectionchange, so check selection status
	    // after each key entry. The selection changes after keydown and before
	    // keyup, but we check on keydown as well in the case of holding down a
	    // key, when multiple keydown events are fired but only one keyup is.
	    // This is also our approach for IE handling, for the reason above.

	    case 'selectionchange':
	      if (skipSelectionChangeEvent) {
	        break;
	      }

	    // falls through

	    case 'keydown':
	    case 'keyup':
	      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
	  }
	}

	function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
	  var reactName = topLevelEventsToReactNames.get(domEventName);

	  if (reactName === undefined) {
	    return;
	  }

	  var SyntheticEventCtor = SyntheticEvent;
	  var reactEventType = domEventName;

	  switch (domEventName) {
	    case 'keypress':
	      // Firefox creates a keypress event for function keys too. This removes
	      // the unwanted keypress events. Enter is however both printable and
	      // non-printable. One would expect Tab to be as well (but it isn't).
	      if (getEventCharCode(nativeEvent) === 0) {
	        return;
	      }

	    /* falls through */

	    case 'keydown':
	    case 'keyup':
	      SyntheticEventCtor = SyntheticKeyboardEvent;
	      break;

	    case 'focusin':
	      reactEventType = 'focus';
	      SyntheticEventCtor = SyntheticFocusEvent;
	      break;

	    case 'focusout':
	      reactEventType = 'blur';
	      SyntheticEventCtor = SyntheticFocusEvent;
	      break;

	    case 'beforeblur':
	    case 'afterblur':
	      SyntheticEventCtor = SyntheticFocusEvent;
	      break;

	    case 'click':
	      // Firefox creates a click event on right mouse clicks. This removes the
	      // unwanted click events.
	      if (nativeEvent.button === 2) {
	        return;
	      }

	    /* falls through */

	    case 'auxclick':
	    case 'dblclick':
	    case 'mousedown':
	    case 'mousemove':
	    case 'mouseup': // TODO: Disabled elements should not respond to mouse events

	    /* falls through */

	    case 'mouseout':
	    case 'mouseover':
	    case 'contextmenu':
	      SyntheticEventCtor = SyntheticMouseEvent;
	      break;

	    case 'drag':
	    case 'dragend':
	    case 'dragenter':
	    case 'dragexit':
	    case 'dragleave':
	    case 'dragover':
	    case 'dragstart':
	    case 'drop':
	      SyntheticEventCtor = SyntheticDragEvent;
	      break;

	    case 'touchcancel':
	    case 'touchend':
	    case 'touchmove':
	    case 'touchstart':
	      SyntheticEventCtor = SyntheticTouchEvent;
	      break;

	    case ANIMATION_END:
	    case ANIMATION_ITERATION:
	    case ANIMATION_START:
	      SyntheticEventCtor = SyntheticAnimationEvent;
	      break;

	    case TRANSITION_END:
	      SyntheticEventCtor = SyntheticTransitionEvent;
	      break;

	    case 'scroll':
	      SyntheticEventCtor = SyntheticUIEvent;
	      break;

	    case 'wheel':
	      SyntheticEventCtor = SyntheticWheelEvent;
	      break;

	    case 'copy':
	    case 'cut':
	    case 'paste':
	      SyntheticEventCtor = SyntheticClipboardEvent;
	      break;

	    case 'gotpointercapture':
	    case 'lostpointercapture':
	    case 'pointercancel':
	    case 'pointerdown':
	    case 'pointermove':
	    case 'pointerout':
	    case 'pointerover':
	    case 'pointerup':
	      SyntheticEventCtor = SyntheticPointerEvent;
	      break;
	  }

	  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

	  {
	    // Some events don't bubble in the browser.
	    // In the past, React has always bubbled them, but this can be surprising.
	    // We're going to try aligning closer to the browser behavior by not bubbling
	    // them in React either. We'll start by not bubbling onScroll, and then expand.
	    var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
	    // nonDelegatedEvents list in DOMPluginEventSystem.
	    // Then we can remove this special list.
	    // This is a breaking change that can wait until React 18.
	    domEventName === 'scroll';

	    var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);

	    if (_listeners.length > 0) {
	      // Intentionally create event lazily.
	      var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);

	      dispatchQueue.push({
	        event: _event,
	        listeners: _listeners
	      });
	    }
	  }
	}

	// TODO: remove top-level side effect.
	registerSimpleEvents();
	registerEvents$2();
	registerEvents$1();
	registerEvents$3();
	registerEvents();

	function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
	  // TODO: we should remove the concept of a "SimpleEventPlugin".
	  // This is the basic functionality of the event system. All
	  // the other plugins are essentially polyfills. So the plugin
	  // should probably be inlined somewhere and have its logic
	  // be core the to event system. This would potentially allow
	  // us to ship builds of React without the polyfilled plugins below.
	  extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
	  var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
	  // event's native "bubble" phase, which means that we're
	  // not in the capture phase. That's because we emulate
	  // the capture phase here still. This is a trade-off,
	  // because in an ideal world we would not emulate and use
	  // the phases properly, like we do with the SimpleEvent
	  // plugin. However, the plugins below either expect
	  // emulation (EnterLeave) or use state localized to that
	  // plugin (BeforeInput, Change, Select). The state in
	  // these modules complicates things, as you'll essentially
	  // get the case where the capture phase event might change
	  // state, only for the following bubble event to come in
	  // later and not trigger anything as the state now
	  // invalidates the heuristics of the event plugin. We
	  // could alter all these plugins to work in such ways, but
	  // that might cause other unknown side-effects that we
	  // can't forsee right now.

	  if (shouldProcessPolyfillPlugins) {
	    extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
	    extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
	    extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
	    extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
	  }
	} // List of events that need to be individually attached to media elements.


	var mediaEventTypes = ['abort', 'canplay', 'canplaythrough', 'durationchange', 'emptied', 'encrypted', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart', 'pause', 'play', 'playing', 'progress', 'ratechange', 'seeked', 'seeking', 'stalled', 'suspend', 'timeupdate', 'volumechange', 'waiting']; // We should not delegate these events to the container, but rather
	// set them on the actual target element itself. This is primarily
	// because these events do not consistently bubble in the DOM.

	var nonDelegatedEvents = new Set(['cancel', 'close', 'invalid', 'load', 'scroll', 'toggle'].concat(mediaEventTypes));

	function executeDispatch(event, listener, currentTarget) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = currentTarget;
	  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
	  event.currentTarget = null;
	}

	function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
	  var previousInstance;

	  if (inCapturePhase) {
	    for (var i = dispatchListeners.length - 1; i >= 0; i--) {
	      var _dispatchListeners$i = dispatchListeners[i],
	          instance = _dispatchListeners$i.instance,
	          currentTarget = _dispatchListeners$i.currentTarget,
	          listener = _dispatchListeners$i.listener;

	      if (instance !== previousInstance && event.isPropagationStopped()) {
	        return;
	      }

	      executeDispatch(event, listener, currentTarget);
	      previousInstance = instance;
	    }
	  } else {
	    for (var _i = 0; _i < dispatchListeners.length; _i++) {
	      var _dispatchListeners$_i = dispatchListeners[_i],
	          _instance = _dispatchListeners$_i.instance,
	          _currentTarget = _dispatchListeners$_i.currentTarget,
	          _listener = _dispatchListeners$_i.listener;

	      if (_instance !== previousInstance && event.isPropagationStopped()) {
	        return;
	      }

	      executeDispatch(event, _listener, _currentTarget);
	      previousInstance = _instance;
	    }
	  }
	}

	function processDispatchQueue(dispatchQueue, eventSystemFlags) {
	  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

	  for (var i = 0; i < dispatchQueue.length; i++) {
	    var _dispatchQueue$i = dispatchQueue[i],
	        event = _dispatchQueue$i.event,
	        listeners = _dispatchQueue$i.listeners;
	    processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
	  } // This would be a good time to rethrow if any of the event handlers threw.


	  rethrowCaughtError();
	}

	function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
	  var nativeEventTarget = getEventTarget(nativeEvent);
	  var dispatchQueue = [];
	  extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
	  processDispatchQueue(dispatchQueue, eventSystemFlags);
	}

	function listenToNonDelegatedEvent(domEventName, targetElement) {
	  var isCapturePhaseListener = false;
	  var listenerSet = getEventListenerSet(targetElement);
	  var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);

	  if (!listenerSet.has(listenerSetKey)) {
	    addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
	    listenerSet.add(listenerSetKey);
	  }
	}
	var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
	function listenToAllSupportedEvents(rootContainerElement) {
	  {
	    if (rootContainerElement[listeningMarker]) {
	      // Performance optimization: don't iterate through events
	      // for the same portal container or root node more than once.
	      // TODO: once we remove the flag, we may be able to also
	      // remove some of the bookkeeping maps used for laziness.
	      return;
	    }

	    rootContainerElement[listeningMarker] = true;
	    allNativeEvents.forEach(function (domEventName) {
	      if (!nonDelegatedEvents.has(domEventName)) {
	        listenToNativeEvent(domEventName, false, rootContainerElement, null);
	      }

	      listenToNativeEvent(domEventName, true, rootContainerElement, null);
	    });
	  }
	}
	function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
	  var eventSystemFlags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
	  var target = rootContainerElement; // selectionchange needs to be attached to the document
	  // otherwise it won't capture incoming events that are only
	  // triggered on the document directly.

	  if (domEventName === 'selectionchange' && rootContainerElement.nodeType !== DOCUMENT_NODE) {
	    target = rootContainerElement.ownerDocument;
	  } // If the event can be delegated (or is capture phase), we can
	  // register it to the root container. Otherwise, we should
	  // register the event to the target element and mark it as
	  // a non-delegated event.


	  if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
	    // For all non-delegated events, apart from scroll, we attach
	    // their event listeners to the respective elements that their
	    // events fire on. That means we can skip this step, as event
	    // listener has already been added previously. However, we
	    // special case the scroll event because the reality is that any
	    // element can scroll.
	    // TODO: ideally, we'd eventually apply the same logic to all
	    // events from the nonDelegatedEvents list. Then we can remove
	    // this special case and use the same logic for all events.
	    if (domEventName !== 'scroll') {
	      return;
	    }

	    eventSystemFlags |= IS_NON_DELEGATED;
	    target = targetElement;
	  }

	  var listenerSet = getEventListenerSet(target);
	  var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener); // If the listener entry is empty or we should upgrade, then
	  // we need to trap an event listener onto the target.

	  if (!listenerSet.has(listenerSetKey)) {
	    if (isCapturePhaseListener) {
	      eventSystemFlags |= IS_CAPTURE_PHASE;
	    }

	    addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
	    listenerSet.add(listenerSetKey);
	  }
	}

	function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
	  var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
	  // active and not passive.

	  var isPassiveListener = undefined;

	  if (passiveBrowserEventsSupported) {
	    // Browsers introduced an intervention, making these events
	    // passive by default on document. React doesn't bind them
	    // to document anymore, but changing this now would undo
	    // the performance wins from the change. So we emulate
	    // the existing behavior manually on the roots now.
	    // https://github.com/facebook/react/issues/19651
	    if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') {
	      isPassiveListener = true;
	    }
	  }

	  targetContainer =  targetContainer;


	  if (isCapturePhaseListener) {
	    if (isPassiveListener !== undefined) {
	      addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
	    } else {
	      addEventCaptureListener(targetContainer, domEventName, listener);
	    }
	  } else {
	    if (isPassiveListener !== undefined) {
	      addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
	    } else {
	      addEventBubbleListener(targetContainer, domEventName, listener);
	    }
	  }
	}

	function isMatchingRootContainer(grandContainer, targetContainer) {
	  return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
	}

	function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
	  var ancestorInst = targetInst;

	  if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
	    var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we

	    if (targetInst !== null) {
	      // The below logic attempts to work out if we need to change
	      // the target fiber to a different ancestor. We had similar logic
	      // in the legacy event system, except the big difference between
	      // systems is that the modern event system now has an event listener
	      // attached to each React Root and React Portal Root. Together,
	      // the DOM nodes representing these roots are the "rootContainer".
	      // To figure out which ancestor instance we should use, we traverse
	      // up the fiber tree from the target instance and attempt to find
	      // root boundaries that match that of our current "rootContainer".
	      // If we find that "rootContainer", we find the parent fiber
	      // sub-tree for that root and make that our ancestor instance.
	      var node = targetInst;

	      mainLoop: while (true) {
	        if (node === null) {
	          return;
	        }

	        var nodeTag = node.tag;

	        if (nodeTag === HostRoot || nodeTag === HostPortal) {
	          var container = node.stateNode.containerInfo;

	          if (isMatchingRootContainer(container, targetContainerNode)) {
	            break;
	          }

	          if (nodeTag === HostPortal) {
	            // The target is a portal, but it's not the rootContainer we're looking for.
	            // Normally portals handle their own events all the way down to the root.
	            // So we should be able to stop now. However, we don't know if this portal
	            // was part of *our* root.
	            var grandNode = node.return;

	            while (grandNode !== null) {
	              var grandTag = grandNode.tag;

	              if (grandTag === HostRoot || grandTag === HostPortal) {
	                var grandContainer = grandNode.stateNode.containerInfo;

	                if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
	                  // This is the rootContainer we're looking for and we found it as
	                  // a parent of the Portal. That means we can ignore it because the
	                  // Portal will bubble through to us.
	                  return;
	                }
	              }

	              grandNode = grandNode.return;
	            }
	          } // Now we need to find it's corresponding host fiber in the other
	          // tree. To do this we can use getClosestInstanceFromNode, but we
	          // need to validate that the fiber is a host instance, otherwise
	          // we need to traverse up through the DOM till we find the correct
	          // node that is from the other tree.


	          while (container !== null) {
	            var parentNode = getClosestInstanceFromNode(container);

	            if (parentNode === null) {
	              return;
	            }

	            var parentTag = parentNode.tag;

	            if (parentTag === HostComponent || parentTag === HostText) {
	              node = ancestorInst = parentNode;
	              continue mainLoop;
	            }

	            container = container.parentNode;
	          }
	        }

	        node = node.return;
	      }
	    }
	  }

	  batchedEventUpdates(function () {
	    return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
	  });
	}

	function createDispatchListener(instance, listener, currentTarget) {
	  return {
	    instance: instance,
	    listener: listener,
	    currentTarget: currentTarget
	  };
	}

	function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
	  var captureName = reactName !== null ? reactName + 'Capture' : null;
	  var reactEventName = inCapturePhase ? captureName : reactName;
	  var listeners = [];
	  var instance = targetFiber;
	  var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.

	  while (instance !== null) {
	    var _instance2 = instance,
	        stateNode = _instance2.stateNode,
	        tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)

	    if (tag === HostComponent && stateNode !== null) {
	      lastHostComponent = stateNode; // createEventHandle listeners


	      if (reactEventName !== null) {
	        var listener = getListener(instance, reactEventName);

	        if (listener != null) {
	          listeners.push(createDispatchListener(instance, listener, lastHostComponent));
	        }
	      }
	    } // If we are only accumulating events for the target, then we don't
	    // continue to propagate through the React fiber tree to find other
	    // listeners.


	    if (accumulateTargetOnly) {
	      break;
	    }

	    instance = instance.return;
	  }

	  return listeners;
	} // We should only use this function for:
	// - BeforeInputEventPlugin
	// - ChangeEventPlugin
	// - SelectEventPlugin
	// This is because we only process these plugins
	// in the bubble phase, so we need to accumulate two
	// phase event listeners (via emulation).

	function accumulateTwoPhaseListeners(targetFiber, reactName) {
	  var captureName = reactName + 'Capture';
	  var listeners = [];
	  var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.

	  while (instance !== null) {
	    var _instance3 = instance,
	        stateNode = _instance3.stateNode,
	        tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)

	    if (tag === HostComponent && stateNode !== null) {
	      var currentTarget = stateNode;
	      var captureListener = getListener(instance, captureName);

	      if (captureListener != null) {
	        listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
	      }

	      var bubbleListener = getListener(instance, reactName);

	      if (bubbleListener != null) {
	        listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
	      }
	    }

	    instance = instance.return;
	  }

	  return listeners;
	}

	function getParent(inst) {
	  if (inst === null) {
	    return null;
	  }

	  do {
	    inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
	    // That is depending on if we want nested subtrees (layers) to bubble
	    // events to their parent. We could also go through parentNode on the
	    // host node but that wouldn't work for React Native and doesn't let us
	    // do the portal feature.
	  } while (inst && inst.tag !== HostComponent);

	  if (inst) {
	    return inst;
	  }

	  return null;
	}
	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */


	function getLowestCommonAncestor(instA, instB) {
	  var nodeA = instA;
	  var nodeB = instB;
	  var depthA = 0;

	  for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
	    depthA++;
	  }

	  var depthB = 0;

	  for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
	    depthB++;
	  } // If A is deeper, crawl up.


	  while (depthA - depthB > 0) {
	    nodeA = getParent(nodeA);
	    depthA--;
	  } // If B is deeper, crawl up.


	  while (depthB - depthA > 0) {
	    nodeB = getParent(nodeB);
	    depthB--;
	  } // Walk in lockstep until we find a match.


	  var depth = depthA;

	  while (depth--) {
	    if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
	      return nodeA;
	    }

	    nodeA = getParent(nodeA);
	    nodeB = getParent(nodeB);
	  }

	  return null;
	}

	function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
	  var registrationName = event._reactName;
	  var listeners = [];
	  var instance = target;

	  while (instance !== null) {
	    if (instance === common) {
	      break;
	    }

	    var _instance4 = instance,
	        alternate = _instance4.alternate,
	        stateNode = _instance4.stateNode,
	        tag = _instance4.tag;

	    if (alternate !== null && alternate === common) {
	      break;
	    }

	    if (tag === HostComponent && stateNode !== null) {
	      var currentTarget = stateNode;

	      if (inCapturePhase) {
	        var captureListener = getListener(instance, registrationName);

	        if (captureListener != null) {
	          listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
	        }
	      } else if (!inCapturePhase) {
	        var bubbleListener = getListener(instance, registrationName);

	        if (bubbleListener != null) {
	          listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
	        }
	      }
	    }

	    instance = instance.return;
	  }

	  if (listeners.length !== 0) {
	    dispatchQueue.push({
	      event: event,
	      listeners: listeners
	    });
	  }
	} // We should only use this function for:
	// - EnterLeaveEventPlugin
	// This is because we only process this plugin
	// in the bubble phase, so we need to accumulate two
	// phase event listeners.


	function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;

	  if (from !== null) {
	    accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
	  }

	  if (to !== null && enterEvent !== null) {
	    accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
	  }
	}
	function getListenerSetKey(domEventName, capture) {
	  return domEventName + "__" + (capture ? 'capture' : 'bubble');
	}

	var didWarnInvalidHydration = false;
	var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
	var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
	var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
	var AUTOFOCUS = 'autoFocus';
	var CHILDREN = 'children';
	var STYLE = 'style';
	var HTML$1 = '__html';
	var HTML_NAMESPACE$1 = Namespaces.html;
	var warnedUnknownTags;
	var suppressHydrationWarning;
	var validatePropertiesInDevelopment;
	var warnForTextDifference;
	var warnForPropDifference;
	var warnForExtraAttributes;
	var warnForInvalidEventListener;
	var canDiffStyleForHydrationWarning;
	var normalizeMarkupForTextOrAttribute;
	var normalizeHTML;

	{
	  warnedUnknownTags = {
	    // There are working polyfills for <dialog>. Let people use it.
	    dialog: true,
	    // Electron ships a custom <webview> tag to display external web content in
	    // an isolated frame and process.
	    // This tag is not present in non Electron environments such as JSDom which
	    // is often used for testing purposes.
	    // @see https://electronjs.org/docs/api/webview-tag
	    webview: true
	  };

	  validatePropertiesInDevelopment = function (type, props) {
	    validateProperties(type, props);
	    validateProperties$1(type, props);
	    validateProperties$2(type, props, {
	      registrationNameDependencies: registrationNameDependencies,
	      possibleRegistrationNames: possibleRegistrationNames
	    });
	  }; // IE 11 parses & normalizes the style attribute as opposed to other
	  // browsers. It adds spaces and sorts the properties in some
	  // non-alphabetical order. Handling that would require sorting CSS
	  // properties in the client & server versions or applying
	  // `expectedStyle` to a temporary DOM node to read its `style` attribute
	  // normalized. Since it only affects IE, we're skipping style warnings
	  // in that browser completely in favor of doing all that work.
	  // See https://github.com/facebook/react/issues/11807


	  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
	  // It also can turn \u0000 into \uFFFD inside attributes.
	  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
	  // If we have a mismatch, it might be caused by that.
	  // We will still patch up in this case but not fire the warning.

	  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
	  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

	  normalizeMarkupForTextOrAttribute = function (markup) {
	    var markupString = typeof markup === 'string' ? markup : '' + markup;
	    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
	  };

	  warnForTextDifference = function (serverText, clientText) {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
	    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

	    if (normalizedServerText === normalizedClientText) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
	  };

	  warnForPropDifference = function (propName, serverValue, clientValue) {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
	    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

	    if (normalizedServerValue === normalizedClientValue) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
	  };

	  warnForExtraAttributes = function (attributeNames) {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;
	    var names = [];
	    attributeNames.forEach(function (name) {
	      names.push(name);
	    });

	    error('Extra attributes from the server: %s', names);
	  };

	  warnForInvalidEventListener = function (registrationName, listener) {
	    if (listener === false) {
	      error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
	    } else {
	      error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
	    }
	  }; // Parse the HTML and read it back to normalize the HTML string so that it
	  // can be used for comparison.


	  normalizeHTML = function (parent, html) {
	    // We could have created a separate document here to avoid
	    // re-initializing custom elements if they exist. But this breaks
	    // how <noscript> is being handled. So we use the same document.
	    // See the discussion in https://github.com/facebook/react/pull/11157.
	    var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
	    testElement.innerHTML = html;
	    return testElement.innerHTML;
	  };
	}

	function getOwnerDocumentFromRootContainer(rootContainerElement) {
	  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
	}

	function noop() {}

	function trapClickOnNonInteractiveElement(node) {
	  // Mobile Safari does not fire properly bubble click events on
	  // non-interactive elements, which means delegated click listeners do not
	  // fire. The workaround for this bug involves attaching an empty click
	  // listener on the target node.
	  // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	  // Just set it using the onclick property so that we don't have to manage any
	  // bookkeeping for it. Not sure if we need to clear it when the listener is
	  // removed.
	  // TODO: Only do this for the relevant Safaris maybe?
	  node.onclick = noop;
	}

	function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
	  for (var propKey in nextProps) {
	    if (!nextProps.hasOwnProperty(propKey)) {
	      continue;
	    }

	    var nextProp = nextProps[propKey];

	    if (propKey === STYLE) {
	      {
	        if (nextProp) {
	          // Freeze the next style object so that we can assume it won't be
	          // mutated. We have already warned for this in the past.
	          Object.freeze(nextProp);
	        }
	      } // Relies on `updateStylesByID` not mutating `styleUpdates`.


	      setValueForStyles(domElement, nextProp);
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

	      if (nextHtml != null) {
	        setInnerHTML(domElement, nextHtml);
	      }
	    } else if (propKey === CHILDREN) {
	      if (typeof nextProp === 'string') {
	        // Avoid setting initial textContent when the text is empty. In IE11 setting
	        // textContent on a <textarea> will cause the placeholder to not
	        // show within the <textarea> until it has been focused and blurred again.
	        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
	        var canSetTextContent = tag !== 'textarea' || nextProp !== '';

	        if (canSetTextContent) {
	          setTextContent(domElement, nextProp);
	        }
	      } else if (typeof nextProp === 'number') {
	        setTextContent(domElement, '' + nextProp);
	      }
	    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        if ( typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }

	        if (propKey === 'onScroll') {
	          listenToNonDelegatedEvent('scroll', domElement);
	        }
	      }
	    } else if (nextProp != null) {
	      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
	    }
	  }
	}

	function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
	  // TODO: Handle wasCustomComponentTag
	  for (var i = 0; i < updatePayload.length; i += 2) {
	    var propKey = updatePayload[i];
	    var propValue = updatePayload[i + 1];

	    if (propKey === STYLE) {
	      setValueForStyles(domElement, propValue);
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      setInnerHTML(domElement, propValue);
	    } else if (propKey === CHILDREN) {
	      setTextContent(domElement, propValue);
	    } else {
	      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
	    }
	  }
	}

	function createElement(type, props, rootContainerElement, parentNamespace) {
	  var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
	  // tags get no namespace.

	  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
	  var domElement;
	  var namespaceURI = parentNamespace;

	  if (namespaceURI === HTML_NAMESPACE$1) {
	    namespaceURI = getIntrinsicNamespace(type);
	  }

	  if (namespaceURI === HTML_NAMESPACE$1) {
	    {
	      isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
	      // allow <SVG> or <mATH>.

	      if (!isCustomComponentTag && type !== type.toLowerCase()) {
	        error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
	      }
	    }

	    if (type === 'script') {
	      // Create the script via .innerHTML so its "parser-inserted" flag is
	      // set to true and it does not execute
	      var div = ownerDocument.createElement('div');

	      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
	      // This is guaranteed to yield a script element.

	      var firstChild = div.firstChild;
	      domElement = div.removeChild(firstChild);
	    } else if (typeof props.is === 'string') {
	      // $FlowIssue `createElement` should be updated for Web Components
	      domElement = ownerDocument.createElement(type, {
	        is: props.is
	      });
	    } else {
	      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
	      // See discussion in https://github.com/facebook/react/pull/6896
	      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	      domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
	      // attributes on `select`s needs to be added before `option`s are inserted.
	      // This prevents:
	      // - a bug where the `select` does not scroll to the correct option because singular
	      //  `select` elements automatically pick the first item #13222
	      // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
	      // See https://github.com/facebook/react/issues/13222
	      // and https://github.com/facebook/react/issues/14239

	      if (type === 'select') {
	        var node = domElement;

	        if (props.multiple) {
	          node.multiple = true;
	        } else if (props.size) {
	          // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
	          // it is possible that no option is selected.
	          //
	          // This is only necessary when a select in "single selection mode".
	          node.size = props.size;
	        }
	      }
	    }
	  } else {
	    domElement = ownerDocument.createElementNS(namespaceURI, type);
	  }

	  {
	    if (namespaceURI === HTML_NAMESPACE$1) {
	      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
	        warnedUnknownTags[type] = true;

	        error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
	      }
	    }
	  }

	  return domElement;
	}
	function createTextNode(text, rootContainerElement) {
	  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
	}
	function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
	  var isCustomComponentTag = isCustomComponent(tag, rawProps);

	  {
	    validatePropertiesInDevelopment(tag, rawProps);
	  } // TODO: Make sure that we check isMounted before firing any of these events.


	  var props;

	  switch (tag) {
	    case 'dialog':
	      listenToNonDelegatedEvent('cancel', domElement);
	      listenToNonDelegatedEvent('close', domElement);
	      props = rawProps;
	      break;

	    case 'iframe':
	    case 'object':
	    case 'embed':
	      // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the load event.
	      listenToNonDelegatedEvent('load', domElement);
	      props = rawProps;
	      break;

	    case 'video':
	    case 'audio':
	      // We listen to these events in case to ensure emulated bubble
	      // listeners still fire for all the media events.
	      for (var i = 0; i < mediaEventTypes.length; i++) {
	        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
	      }

	      props = rawProps;
	      break;

	    case 'source':
	      // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the error event.
	      listenToNonDelegatedEvent('error', domElement);
	      props = rawProps;
	      break;

	    case 'img':
	    case 'image':
	    case 'link':
	      // We listen to these events in case to ensure emulated bubble
	      // listeners still fire for error and load events.
	      listenToNonDelegatedEvent('error', domElement);
	      listenToNonDelegatedEvent('load', domElement);
	      props = rawProps;
	      break;

	    case 'details':
	      // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the toggle event.
	      listenToNonDelegatedEvent('toggle', domElement);
	      props = rawProps;
	      break;

	    case 'input':
	      initWrapperState(domElement, rawProps);
	      props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the invalid event.

	      listenToNonDelegatedEvent('invalid', domElement);

	      break;

	    case 'option':
	      validateProps(domElement, rawProps);
	      props = getHostProps$1(domElement, rawProps);
	      break;

	    case 'select':
	      initWrapperState$1(domElement, rawProps);
	      props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the invalid event.

	      listenToNonDelegatedEvent('invalid', domElement);

	      break;

	    case 'textarea':
	      initWrapperState$2(domElement, rawProps);
	      props = getHostProps$3(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the invalid event.

	      listenToNonDelegatedEvent('invalid', domElement);

	      break;

	    default:
	      props = rawProps;
	  }

	  assertValidProps(tag, props);
	  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

	  switch (tag) {
	    case 'input':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper(domElement, rawProps, false);
	      break;

	    case 'textarea':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper$3(domElement);
	      break;

	    case 'option':
	      postMountWrapper$1(domElement, rawProps);
	      break;

	    case 'select':
	      postMountWrapper$2(domElement, rawProps);
	      break;

	    default:
	      if (typeof props.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }

	      break;
	  }
	} // Calculate the diff between the two objects.

	function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
	  {
	    validatePropertiesInDevelopment(tag, nextRawProps);
	  }

	  var updatePayload = null;
	  var lastProps;
	  var nextProps;

	  switch (tag) {
	    case 'input':
	      lastProps = getHostProps(domElement, lastRawProps);
	      nextProps = getHostProps(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    case 'option':
	      lastProps = getHostProps$1(domElement, lastRawProps);
	      nextProps = getHostProps$1(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    case 'select':
	      lastProps = getHostProps$2(domElement, lastRawProps);
	      nextProps = getHostProps$2(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    case 'textarea':
	      lastProps = getHostProps$3(domElement, lastRawProps);
	      nextProps = getHostProps$3(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    default:
	      lastProps = lastRawProps;
	      nextProps = nextRawProps;

	      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }

	      break;
	  }

	  assertValidProps(tag, nextProps);
	  var propKey;
	  var styleName;
	  var styleUpdates = null;

	  for (propKey in lastProps) {
	    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	      continue;
	    }

	    if (propKey === STYLE) {
	      var lastStyle = lastProps[propKey];

	      for (styleName in lastStyle) {
	        if (lastStyle.hasOwnProperty(styleName)) {
	          if (!styleUpdates) {
	            styleUpdates = {};
	          }

	          styleUpdates[styleName] = '';
	        }
	      }
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
	      // This is a special case. If any listener updates we need to ensure
	      // that the "current" fiber pointer gets updated so we need a commit
	      // to update this element.
	      if (!updatePayload) {
	        updatePayload = [];
	      }
	    } else {
	      // For all other deleted properties we add it to the queue. We use
	      // the allowed property list in the commit phase instead.
	      (updatePayload = updatePayload || []).push(propKey, null);
	    }
	  }

	  for (propKey in nextProps) {
	    var nextProp = nextProps[propKey];
	    var lastProp = lastProps != null ? lastProps[propKey] : undefined;

	    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	      continue;
	    }

	    if (propKey === STYLE) {
	      {
	        if (nextProp) {
	          // Freeze the next style object so that we can assume it won't be
	          // mutated. We have already warned for this in the past.
	          Object.freeze(nextProp);
	        }
	      }

	      if (lastProp) {
	        // Unset styles on `lastProp` but not on `nextProp`.
	        for (styleName in lastProp) {
	          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	            if (!styleUpdates) {
	              styleUpdates = {};
	            }

	            styleUpdates[styleName] = '';
	          }
	        } // Update styles that changed since `lastProp`.


	        for (styleName in nextProp) {
	          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	            if (!styleUpdates) {
	              styleUpdates = {};
	            }

	            styleUpdates[styleName] = nextProp[styleName];
	          }
	        }
	      } else {
	        // Relies on `updateStylesByID` not mutating `styleUpdates`.
	        if (!styleUpdates) {
	          if (!updatePayload) {
	            updatePayload = [];
	          }

	          updatePayload.push(propKey, styleUpdates);
	        }

	        styleUpdates = nextProp;
	      }
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
	      var lastHtml = lastProp ? lastProp[HTML$1] : undefined;

	      if (nextHtml != null) {
	        if (lastHtml !== nextHtml) {
	          (updatePayload = updatePayload || []).push(propKey, nextHtml);
	        }
	      }
	    } else if (propKey === CHILDREN) {
	      if (typeof nextProp === 'string' || typeof nextProp === 'number') {
	        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
	      }
	    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        // We eagerly listen to this even though we haven't committed yet.
	        if ( typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }

	        if (propKey === 'onScroll') {
	          listenToNonDelegatedEvent('scroll', domElement);
	        }
	      }

	      if (!updatePayload && lastProp !== nextProp) {
	        // This is a special case. If any listener updates we need to ensure
	        // that the "current" props pointer gets updated so we need a commit
	        // to update this element.
	        updatePayload = [];
	      }
	    } else if (typeof nextProp === 'object' && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
	      // If we encounter useOpaqueReference's opaque object, this means we are hydrating.
	      // In this case, call the opaque object's toString function which generates a new client
	      // ID so client and server IDs match and throws to rerender.
	      nextProp.toString();
	    } else {
	      // For any other property we always add it to the queue and then we
	      // filter it out using the allowed property list during the commit.
	      (updatePayload = updatePayload || []).push(propKey, nextProp);
	    }
	  }

	  if (styleUpdates) {
	    {
	      validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
	    }

	    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
	  }

	  return updatePayload;
	} // Apply the diff.

	function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
	  // Update checked *before* name.
	  // In the middle of an update, it is possible to have multiple checked.
	  // When a checked radio tries to change name, browser makes another radio's checked false.
	  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
	    updateChecked(domElement, nextRawProps);
	  }

	  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
	  var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

	  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
	  // changed.

	  switch (tag) {
	    case 'input':
	      // Update the wrapper around inputs *after* updating props. This has to
	      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
	      // raise warnings and prevent the new value from being assigned.
	      updateWrapper(domElement, nextRawProps);
	      break;

	    case 'textarea':
	      updateWrapper$1(domElement, nextRawProps);
	      break;

	    case 'select':
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      postUpdateWrapper(domElement, nextRawProps);
	      break;
	  }
	}

	function getPossibleStandardName(propName) {
	  {
	    var lowerCasedName = propName.toLowerCase();

	    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	      return null;
	    }

	    return possibleStandardNames[lowerCasedName] || null;
	  }
	}

	function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
	  var isCustomComponentTag;
	  var extraAttributeNames;

	  {
	    suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
	    isCustomComponentTag = isCustomComponent(tag, rawProps);
	    validatePropertiesInDevelopment(tag, rawProps);
	  } // TODO: Make sure that we check isMounted before firing any of these events.


	  switch (tag) {
	    case 'dialog':
	      listenToNonDelegatedEvent('cancel', domElement);
	      listenToNonDelegatedEvent('close', domElement);
	      break;

	    case 'iframe':
	    case 'object':
	    case 'embed':
	      // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the load event.
	      listenToNonDelegatedEvent('load', domElement);
	      break;

	    case 'video':
	    case 'audio':
	      // We listen to these events in case to ensure emulated bubble
	      // listeners still fire for all the media events.
	      for (var i = 0; i < mediaEventTypes.length; i++) {
	        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
	      }

	      break;

	    case 'source':
	      // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the error event.
	      listenToNonDelegatedEvent('error', domElement);
	      break;

	    case 'img':
	    case 'image':
	    case 'link':
	      // We listen to these events in case to ensure emulated bubble
	      // listeners still fire for error and load events.
	      listenToNonDelegatedEvent('error', domElement);
	      listenToNonDelegatedEvent('load', domElement);
	      break;

	    case 'details':
	      // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the toggle event.
	      listenToNonDelegatedEvent('toggle', domElement);
	      break;

	    case 'input':
	      initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the invalid event.

	      listenToNonDelegatedEvent('invalid', domElement);

	      break;

	    case 'option':
	      validateProps(domElement, rawProps);
	      break;

	    case 'select':
	      initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the invalid event.

	      listenToNonDelegatedEvent('invalid', domElement);

	      break;

	    case 'textarea':
	      initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the invalid event.

	      listenToNonDelegatedEvent('invalid', domElement);

	      break;
	  }

	  assertValidProps(tag, rawProps);

	  {
	    extraAttributeNames = new Set();
	    var attributes = domElement.attributes;

	    for (var _i = 0; _i < attributes.length; _i++) {
	      var name = attributes[_i].name.toLowerCase();

	      switch (name) {
	        // Built-in SSR attribute is allowed
	        case 'data-reactroot':
	          break;
	        // Controlled attributes are not validated
	        // TODO: Only ignore them on controlled tags.

	        case 'value':
	          break;

	        case 'checked':
	          break;

	        case 'selected':
	          break;

	        default:
	          // Intentionally use the original name.
	          // See discussion in https://github.com/facebook/react/pull/10676.
	          extraAttributeNames.add(attributes[_i].name);
	      }
	    }
	  }

	  var updatePayload = null;

	  for (var propKey in rawProps) {
	    if (!rawProps.hasOwnProperty(propKey)) {
	      continue;
	    }

	    var nextProp = rawProps[propKey];

	    if (propKey === CHILDREN) {
	      // For text content children we compare against textContent. This
	      // might match additional HTML that is hidden when we read it using
	      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
	      // satisfies our requirement. Our requirement is not to produce perfect
	      // HTML and attributes. Ideally we should preserve structure but it's
	      // ok not to if the visible content is still enough to indicate what
	      // even listeners these nodes might be wired up to.
	      // TODO: Warn if there is more than a single textNode as a child.
	      // TODO: Should we use domElement.firstChild.nodeValue to compare?
	      if (typeof nextProp === 'string') {
	        if (domElement.textContent !== nextProp) {
	          if ( !suppressHydrationWarning) {
	            warnForTextDifference(domElement.textContent, nextProp);
	          }

	          updatePayload = [CHILDREN, nextProp];
	        }
	      } else if (typeof nextProp === 'number') {
	        if (domElement.textContent !== '' + nextProp) {
	          if ( !suppressHydrationWarning) {
	            warnForTextDifference(domElement.textContent, nextProp);
	          }

	          updatePayload = [CHILDREN, '' + nextProp];
	        }
	      }
	    } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        if ( typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }

	        if (propKey === 'onScroll') {
	          listenToNonDelegatedEvent('scroll', domElement);
	        }
	      }
	    } else if ( // Convince Flow we've calculated it (it's DEV-only in this method.)
	    typeof isCustomComponentTag === 'boolean') {
	      // Validate that the properties correspond to their expected values.
	      var serverValue = void 0;
	      var propertyInfo = getPropertyInfo(propKey);

	      if (suppressHydrationWarning) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
	      // TODO: Only ignore them on controlled tags.
	      propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	        var serverHTML = domElement.innerHTML;
	        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

	        if (nextHtml != null) {
	          var expectedHTML = normalizeHTML(domElement, nextHtml);

	          if (expectedHTML !== serverHTML) {
	            warnForPropDifference(propKey, serverHTML, expectedHTML);
	          }
	        }
	      } else if (propKey === STYLE) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        extraAttributeNames.delete(propKey);

	        if (canDiffStyleForHydrationWarning) {
	          var expectedStyle = createDangerousStringForStyles(nextProp);
	          serverValue = domElement.getAttribute('style');

	          if (expectedStyle !== serverValue) {
	            warnForPropDifference(propKey, serverValue, expectedStyle);
	          }
	        }
	      } else if (isCustomComponentTag) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        extraAttributeNames.delete(propKey.toLowerCase());
	        serverValue = getValueForAttribute(domElement, propKey, nextProp);

	        if (nextProp !== serverValue) {
	          warnForPropDifference(propKey, serverValue, nextProp);
	        }
	      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
	        var isMismatchDueToBadCasing = false;

	        if (propertyInfo !== null) {
	          // $FlowFixMe - Should be inferred as not undefined.
	          extraAttributeNames.delete(propertyInfo.attributeName);
	          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
	        } else {
	          var ownNamespace = parentNamespace;

	          if (ownNamespace === HTML_NAMESPACE$1) {
	            ownNamespace = getIntrinsicNamespace(tag);
	          }

	          if (ownNamespace === HTML_NAMESPACE$1) {
	            // $FlowFixMe - Should be inferred as not undefined.
	            extraAttributeNames.delete(propKey.toLowerCase());
	          } else {
	            var standardName = getPossibleStandardName(propKey);

	            if (standardName !== null && standardName !== propKey) {
	              // If an SVG prop is supplied with bad casing, it will
	              // be successfully parsed from HTML, but will produce a mismatch
	              // (and would be incorrectly rendered on the client).
	              // However, we already warn about bad casing elsewhere.
	              // So we'll skip the misleading extra mismatch warning in this case.
	              isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

	              extraAttributeNames.delete(standardName);
	            } // $FlowFixMe - Should be inferred as not undefined.


	            extraAttributeNames.delete(propKey);
	          }

	          serverValue = getValueForAttribute(domElement, propKey, nextProp);
	        }

	        if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
	          warnForPropDifference(propKey, serverValue, nextProp);
	        }
	      }
	    }
	  }

	  {
	    // $FlowFixMe - Should be inferred as not undefined.
	    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
	      // $FlowFixMe - Should be inferred as not undefined.
	      warnForExtraAttributes(extraAttributeNames);
	    }
	  }

	  switch (tag) {
	    case 'input':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper(domElement, rawProps, true);
	      break;

	    case 'textarea':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper$3(domElement);
	      break;

	    case 'select':
	    case 'option':
	      // For input and textarea we current always set the value property at
	      // post mount to force it to diverge from attributes. However, for
	      // option and select we don't quite do the same thing and select
	      // is not resilient to the DOM state changing so we don't do that here.
	      // TODO: Consider not doing this for input and textarea.
	      break;

	    default:
	      if (typeof rawProps.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }

	      break;
	  }

	  return updatePayload;
	}
	function diffHydratedText(textNode, text) {
	  var isDifferent = textNode.nodeValue !== text;
	  return isDifferent;
	}
	function warnForUnmatchedText(textNode, text) {
	  {
	    warnForTextDifference(textNode.nodeValue, text);
	  }
	}
	function warnForDeletedHydratableElement(parentNode, child) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
	  }
	}
	function warnForDeletedHydratableText(parentNode, child) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
	  }
	}
	function warnForInsertedHydratedElement(parentNode, tag, props) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
	  }
	}
	function warnForInsertedHydratedText(parentNode, text) {
	  {
	    if (text === '') {
	      // We expect to insert empty text nodes since they're not represented in
	      // the HTML.
	      // TODO: Remove this special case if we can just avoid inserting empty
	      // text nodes.
	      return;
	    }

	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
	  }
	}
	function restoreControlledState$3(domElement, tag, props) {
	  switch (tag) {
	    case 'input':
	      restoreControlledState(domElement, props);
	      return;

	    case 'textarea':
	      restoreControlledState$2(domElement, props);
	      return;

	    case 'select':
	      restoreControlledState$1(domElement, props);
	      return;
	  }
	}

	var validateDOMNesting = function () {};

	var updatedAncestorInfo = function () {};

	{
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.
	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

	  var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
	  var emptyAncestorInfo = {
	    current: null,
	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,
	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  updatedAncestorInfo = function (oldInfo, tag) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);

	    var info = {
	      tag: tag
	    };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }

	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    } // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }

	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }

	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }

	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }

	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }

	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }

	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };
	  /**
	   * Returns whether
	   */


	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';

	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but

	      case 'option':
	        return tag === '#text';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

	      case 'html':
	        return tag === 'head' || tag === 'body' || tag === 'frameset';

	      case 'frameset':
	        return tag === 'frame';

	      case '#document':
	        return tag === 'html';
	    } // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frameset':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };
	  /**
	   * Returns whether
	   */


	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	      case 'pre':
	      case 'listing':
	      case 'table':
	      case 'hr':
	      case 'xmp':
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  var didWarn$1 = {};

	  validateDOMNesting = function (childTag, childText, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    if (childText != null) {
	      if (childTag != null) {
	        error('validateDOMNesting: when childText is passed, childTag should be null');
	      }

	      childTag = '#text';
	    }

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var invalidParentOrAncestor = invalidParent || invalidAncestor;

	    if (!invalidParentOrAncestor) {
	      return;
	    }

	    var ancestorTag = invalidParentOrAncestor.tag;
	    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;

	    if (didWarn$1[warnKey]) {
	      return;
	    }

	    didWarn$1[warnKey] = true;
	    var tagDisplayName = childTag;
	    var whitespaceInfo = '';

	    if (childTag === '#text') {
	      if (/\S/.test(childText)) {
	        tagDisplayName = 'Text nodes';
	      } else {
	        tagDisplayName = 'Whitespace text nodes';
	        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
	      }
	    } else {
	      tagDisplayName = '<' + childTag + '>';
	    }

	    if (invalidParent) {
	      var info = '';

	      if (ancestorTag === 'table' && childTag === 'tr') {
	        info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
	      }

	      error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
	    } else {
	      error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
	    }
	  };
	}

	var SUPPRESS_HYDRATION_WARNING$1;

	{
	  SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
	}

	var SUSPENSE_START_DATA = '$';
	var SUSPENSE_END_DATA = '/$';
	var SUSPENSE_PENDING_START_DATA = '$?';
	var SUSPENSE_FALLBACK_START_DATA = '$!';
	var STYLE$1 = 'style';
	var eventsEnabled = null;
	var selectionInformation = null;

	function shouldAutoFocusHostComponent(type, props) {
	  switch (type) {
	    case 'button':
	    case 'input':
	    case 'select':
	    case 'textarea':
	      return !!props.autoFocus;
	  }

	  return false;
	}
	function getRootHostContext(rootContainerInstance) {
	  var type;
	  var namespace;
	  var nodeType = rootContainerInstance.nodeType;

	  switch (nodeType) {
	    case DOCUMENT_NODE:
	    case DOCUMENT_FRAGMENT_NODE:
	      {
	        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
	        var root = rootContainerInstance.documentElement;
	        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
	        break;
	      }

	    default:
	      {
	        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
	        var ownNamespace = container.namespaceURI || null;
	        type = container.tagName;
	        namespace = getChildNamespace(ownNamespace, type);
	        break;
	      }
	  }

	  {
	    var validatedTag = type.toLowerCase();
	    var ancestorInfo = updatedAncestorInfo(null, validatedTag);
	    return {
	      namespace: namespace,
	      ancestorInfo: ancestorInfo
	    };
	  }
	}
	function getChildHostContext(parentHostContext, type, rootContainerInstance) {
	  {
	    var parentHostContextDev = parentHostContext;
	    var namespace = getChildNamespace(parentHostContextDev.namespace, type);
	    var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
	    return {
	      namespace: namespace,
	      ancestorInfo: ancestorInfo
	    };
	  }
	}
	function getPublicInstance(instance) {
	  return instance;
	}
	function prepareForCommit(containerInfo) {
	  eventsEnabled = isEnabled();
	  selectionInformation = getSelectionInformation();
	  var activeInstance = null;

	  setEnabled(false);
	  return activeInstance;
	}
	function resetAfterCommit(containerInfo) {
	  restoreSelection(selectionInformation);
	  setEnabled(eventsEnabled);
	  eventsEnabled = null;
	  selectionInformation = null;
	}
	function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
	  var parentNamespace;

	  {
	    // TODO: take namespace into account when validating.
	    var hostContextDev = hostContext;
	    validateDOMNesting(type, null, hostContextDev.ancestorInfo);

	    if (typeof props.children === 'string' || typeof props.children === 'number') {
	      var string = '' + props.children;
	      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
	      validateDOMNesting(null, string, ownAncestorInfo);
	    }

	    parentNamespace = hostContextDev.namespace;
	  }

	  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
	  precacheFiberNode(internalInstanceHandle, domElement);
	  updateFiberProps(domElement, props);
	  return domElement;
	}
	function appendInitialChild(parentInstance, child) {
	  parentInstance.appendChild(child);
	}
	function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
	  setInitialProperties(domElement, type, props, rootContainerInstance);
	  return shouldAutoFocusHostComponent(type, props);
	}
	function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
	  {
	    var hostContextDev = hostContext;

	    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
	      var string = '' + newProps.children;
	      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
	      validateDOMNesting(null, string, ownAncestorInfo);
	    }
	  }

	  return diffProperties(domElement, type, oldProps, newProps);
	}
	function shouldSetTextContent(type, props) {
	  return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
	}
	function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
	  {
	    var hostContextDev = hostContext;
	    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
	  }

	  var textNode = createTextNode(text, rootContainerInstance);
	  precacheFiberNode(internalInstanceHandle, textNode);
	  return textNode;
	}
	// if a component just imports ReactDOM (e.g. for findDOMNode).
	// Some environments might not have setTimeout or clearTimeout.

	var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
	var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
	var noTimeout = -1; // -------------------
	function commitMount(domElement, type, newProps, internalInstanceHandle) {
	  // Despite the naming that might imply otherwise, this method only
	  // fires if there is an `Update` effect scheduled during mounting.
	  // This happens if `finalizeInitialChildren` returns `true` (which it
	  // does to implement the `autoFocus` attribute on the client). But
	  // there are also other cases when this might happen (such as patching
	  // up text content during hydration mismatch). So we'll check this again.
	  if (shouldAutoFocusHostComponent(type, newProps)) {
	    domElement.focus();
	  }
	}
	function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
	  // Update the props handle so that we know which props are the ones with
	  // with current event handlers.
	  updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.

	  updateProperties(domElement, updatePayload, type, oldProps, newProps);
	}
	function resetTextContent(domElement) {
	  setTextContent(domElement, '');
	}
	function commitTextUpdate(textInstance, oldText, newText) {
	  textInstance.nodeValue = newText;
	}
	function appendChild(parentInstance, child) {
	  parentInstance.appendChild(child);
	}
	function appendChildToContainer(container, child) {
	  var parentNode;

	  if (container.nodeType === COMMENT_NODE) {
	    parentNode = container.parentNode;
	    parentNode.insertBefore(child, container);
	  } else {
	    parentNode = container;
	    parentNode.appendChild(child);
	  } // This container might be used for a portal.
	  // If something inside a portal is clicked, that click should bubble
	  // through the React tree. However, on Mobile Safari the click would
	  // never bubble through the *DOM* tree unless an ancestor with onclick
	  // event exists. So we wouldn't see it and dispatch it.
	  // This is why we ensure that non React root containers have inline onclick
	  // defined.
	  // https://github.com/facebook/react/issues/11918


	  var reactRootContainer = container._reactRootContainer;

	  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
	    // TODO: This cast may not be sound for SVG, MathML or custom elements.
	    trapClickOnNonInteractiveElement(parentNode);
	  }
	}
	function insertBefore(parentInstance, child, beforeChild) {
	  parentInstance.insertBefore(child, beforeChild);
	}
	function insertInContainerBefore(container, child, beforeChild) {
	  if (container.nodeType === COMMENT_NODE) {
	    container.parentNode.insertBefore(child, beforeChild);
	  } else {
	    container.insertBefore(child, beforeChild);
	  }
	}

	function removeChild(parentInstance, child) {
	  parentInstance.removeChild(child);
	}
	function removeChildFromContainer(container, child) {
	  if (container.nodeType === COMMENT_NODE) {
	    container.parentNode.removeChild(child);
	  } else {
	    container.removeChild(child);
	  }
	}
	function hideInstance(instance) {
	  // TODO: Does this work for all element types? What about MathML? Should we
	  // pass host context to this method?
	  instance = instance;
	  var style = instance.style;

	  if (typeof style.setProperty === 'function') {
	    style.setProperty('display', 'none', 'important');
	  } else {
	    style.display = 'none';
	  }
	}
	function hideTextInstance(textInstance) {
	  textInstance.nodeValue = '';
	}
	function unhideInstance(instance, props) {
	  instance = instance;
	  var styleProp = props[STYLE$1];
	  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
	  instance.style.display = dangerousStyleValue('display', display);
	}
	function unhideTextInstance(textInstance, text) {
	  textInstance.nodeValue = text;
	}
	function clearContainer(container) {
	  if (container.nodeType === ELEMENT_NODE) {
	    container.textContent = '';
	  } else if (container.nodeType === DOCUMENT_NODE) {
	    var body = container.body;

	    if (body != null) {
	      body.textContent = '';
	    }
	  }
	} // -------------------
	function canHydrateInstance(instance, type, props) {
	  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
	    return null;
	  } // This has now been refined to an element node.


	  return instance;
	}
	function canHydrateTextInstance(instance, text) {
	  if (text === '' || instance.nodeType !== TEXT_NODE) {
	    // Empty strings are not parsed by HTML so there won't be a correct match here.
	    return null;
	  } // This has now been refined to a text node.


	  return instance;
	}
	function isSuspenseInstancePending(instance) {
	  return instance.data === SUSPENSE_PENDING_START_DATA;
	}
	function isSuspenseInstanceFallback(instance) {
	  return instance.data === SUSPENSE_FALLBACK_START_DATA;
	}

	function getNextHydratable(node) {
	  // Skip non-hydratable nodes.
	  for (; node != null; node = node.nextSibling) {
	    var nodeType = node.nodeType;

	    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
	      break;
	    }
	  }

	  return node;
	}

	function getNextHydratableSibling(instance) {
	  return getNextHydratable(instance.nextSibling);
	}
	function getFirstHydratableChild(parentInstance) {
	  return getNextHydratable(parentInstance.firstChild);
	}
	function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
	  precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
	  // get attached.

	  updateFiberProps(instance, props);
	  var parentNamespace;

	  {
	    var hostContextDev = hostContext;
	    parentNamespace = hostContextDev.namespace;
	  }

	  return diffHydratedProperties(instance, type, props, parentNamespace);
	}
	function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
	  precacheFiberNode(internalInstanceHandle, textInstance);
	  return diffHydratedText(textInstance, text);
	}
	function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
	  var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
	  // There might be nested nodes so we need to keep track of how
	  // deep we are and only break out when we're back on top.

	  var depth = 0;

	  while (node) {
	    if (node.nodeType === COMMENT_NODE) {
	      var data = node.data;

	      if (data === SUSPENSE_END_DATA) {
	        if (depth === 0) {
	          return getNextHydratableSibling(node);
	        } else {
	          depth--;
	        }
	      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
	        depth++;
	      }
	    }

	    node = node.nextSibling;
	  } // TODO: Warn, we didn't find the end comment boundary.


	  return null;
	} // Returns the SuspenseInstance if this node is a direct child of a
	// SuspenseInstance. I.e. if its previous sibling is a Comment with
	// SUSPENSE_x_START_DATA. Otherwise, null.

	function getParentSuspenseInstance(targetInstance) {
	  var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
	  // There might be nested nodes so we need to keep track of how
	  // deep we are and only break out when we're back on top.

	  var depth = 0;

	  while (node) {
	    if (node.nodeType === COMMENT_NODE) {
	      var data = node.data;

	      if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
	        if (depth === 0) {
	          return node;
	        } else {
	          depth--;
	        }
	      } else if (data === SUSPENSE_END_DATA) {
	        depth++;
	      }
	    }

	    node = node.previousSibling;
	  }

	  return null;
	}
	function commitHydratedContainer(container) {
	  // Retry if any event replaying was blocked on this.
	  retryIfBlockedOn(container);
	}
	function commitHydratedSuspenseInstance(suspenseInstance) {
	  // Retry if any event replaying was blocked on this.
	  retryIfBlockedOn(suspenseInstance);
	}
	function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
	  {
	    warnForUnmatchedText(textInstance, text);
	  }
	}
	function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	    warnForUnmatchedText(textInstance, text);
	  }
	}
	function didNotHydrateContainerInstance(parentContainer, instance) {
	  {
	    if (instance.nodeType === ELEMENT_NODE) {
	      warnForDeletedHydratableElement(parentContainer, instance);
	    } else if (instance.nodeType === COMMENT_NODE) ; else {
	      warnForDeletedHydratableText(parentContainer, instance);
	    }
	  }
	}
	function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	    if (instance.nodeType === ELEMENT_NODE) {
	      warnForDeletedHydratableElement(parentInstance, instance);
	    } else if (instance.nodeType === COMMENT_NODE) ; else {
	      warnForDeletedHydratableText(parentInstance, instance);
	    }
	  }
	}
	function didNotFindHydratableContainerInstance(parentContainer, type, props) {
	  {
	    warnForInsertedHydratedElement(parentContainer, type);
	  }
	}
	function didNotFindHydratableContainerTextInstance(parentContainer, text) {
	  {
	    warnForInsertedHydratedText(parentContainer, text);
	  }
	}
	function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	    warnForInsertedHydratedElement(parentInstance, type);
	  }
	}
	function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	    warnForInsertedHydratedText(parentInstance, text);
	  }
	}
	function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) ;
	}
	var clientId = 0;
	function makeClientIdInDEV(warnOnAccessInDEV) {
	  var id = 'r:' + (clientId++).toString(36);
	  return {
	    toString: function () {
	      warnOnAccessInDEV();
	      return id;
	    },
	    valueOf: function () {
	      warnOnAccessInDEV();
	      return id;
	    }
	  };
	}
	function isOpaqueHydratingObject(value) {
	  return value !== null && typeof value === 'object' && value.$$typeof === REACT_OPAQUE_ID_TYPE;
	}
	function makeOpaqueHydratingObject(attemptToReadValue) {
	  return {
	    $$typeof: REACT_OPAQUE_ID_TYPE,
	    toString: attemptToReadValue,
	    valueOf: attemptToReadValue
	  };
	}
	function preparePortalMount(portalInstance) {
	  {
	    listenToAllSupportedEvents(portalInstance);
	  }
	}

	var randomKey = Math.random().toString(36).slice(2);
	var internalInstanceKey = '__reactFiber$' + randomKey;
	var internalPropsKey = '__reactProps$' + randomKey;
	var internalContainerInstanceKey = '__reactContainer$' + randomKey;
	var internalEventHandlersKey = '__reactEvents$' + randomKey;
	function precacheFiberNode(hostInst, node) {
	  node[internalInstanceKey] = hostInst;
	}
	function markContainerAsRoot(hostRoot, node) {
	  node[internalContainerInstanceKey] = hostRoot;
	}
	function unmarkContainerAsRoot(node) {
	  node[internalContainerInstanceKey] = null;
	}
	function isContainerMarkedAsRoot(node) {
	  return !!node[internalContainerInstanceKey];
	} // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
	// If the target node is part of a hydrated or not yet rendered subtree, then
	// this may also return a SuspenseComponent or HostRoot to indicate that.
	// Conceptually the HostRoot fiber is a child of the Container node. So if you
	// pass the Container node as the targetNode, you will not actually get the
	// HostRoot back. To get to the HostRoot, you need to pass a child of it.
	// The same thing applies to Suspense boundaries.

	function getClosestInstanceFromNode(targetNode) {
	  var targetInst = targetNode[internalInstanceKey];

	  if (targetInst) {
	    // Don't return HostRoot or SuspenseComponent here.
	    return targetInst;
	  } // If the direct event target isn't a React owned DOM node, we need to look
	  // to see if one of its parents is a React owned DOM node.


	  var parentNode = targetNode.parentNode;

	  while (parentNode) {
	    // We'll check if this is a container root that could include
	    // React nodes in the future. We need to check this first because
	    // if we're a child of a dehydrated container, we need to first
	    // find that inner container before moving on to finding the parent
	    // instance. Note that we don't check this field on  the targetNode
	    // itself because the fibers are conceptually between the container
	    // node and the first child. It isn't surrounding the container node.
	    // If it's not a container, we check if it's an instance.
	    targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

	    if (targetInst) {
	      // Since this wasn't the direct target of the event, we might have
	      // stepped past dehydrated DOM nodes to get here. However they could
	      // also have been non-React nodes. We need to answer which one.
	      // If we the instance doesn't have any children, then there can't be
	      // a nested suspense boundary within it. So we can use this as a fast
	      // bailout. Most of the time, when people add non-React children to
	      // the tree, it is using a ref to a child-less DOM node.
	      // Normally we'd only need to check one of the fibers because if it
	      // has ever gone from having children to deleting them or vice versa
	      // it would have deleted the dehydrated boundary nested inside already.
	      // However, since the HostRoot starts out with an alternate it might
	      // have one on the alternate so we need to check in case this was a
	      // root.
	      var alternate = targetInst.alternate;

	      if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
	        // Next we need to figure out if the node that skipped past is
	        // nested within a dehydrated boundary and if so, which one.
	        var suspenseInstance = getParentSuspenseInstance(targetNode);

	        while (suspenseInstance !== null) {
	          // We found a suspense instance. That means that we haven't
	          // hydrated it yet. Even though we leave the comments in the
	          // DOM after hydrating, and there are boundaries in the DOM
	          // that could already be hydrated, we wouldn't have found them
	          // through this pass since if the target is hydrated it would
	          // have had an internalInstanceKey on it.
	          // Let's get the fiber associated with the SuspenseComponent
	          // as the deepest instance.
	          var targetSuspenseInst = suspenseInstance[internalInstanceKey];

	          if (targetSuspenseInst) {
	            return targetSuspenseInst;
	          } // If we don't find a Fiber on the comment, it might be because
	          // we haven't gotten to hydrate it yet. There might still be a
	          // parent boundary that hasn't above this one so we need to find
	          // the outer most that is known.


	          suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
	          // host component also hasn't hydrated yet. We can return it
	          // below since it will bail out on the isMounted check later.
	        }
	      }

	      return targetInst;
	    }

	    targetNode = parentNode;
	    parentNode = targetNode.parentNode;
	  }

	  return null;
	}
	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */

	function getInstanceFromNode(node) {
	  var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

	  if (inst) {
	    if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
	      return inst;
	    } else {
	      return null;
	    }
	  }

	  return null;
	}
	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */

	function getNodeFromInstance(inst) {
	  if (inst.tag === HostComponent || inst.tag === HostText) {
	    // In Fiber this, is just the state node right now. We assume it will be
	    // a host component or host text.
	    return inst.stateNode;
	  } // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.


	  {
	    {
	      throw Error( "getNodeFromInstance: Invalid argument." );
	    }
	  }
	}
	function getFiberCurrentPropsFromNode(node) {
	  return node[internalPropsKey] || null;
	}
	function updateFiberProps(node, props) {
	  node[internalPropsKey] = props;
	}
	function getEventListenerSet(node) {
	  var elementListenerSet = node[internalEventHandlersKey];

	  if (elementListenerSet === undefined) {
	    elementListenerSet = node[internalEventHandlersKey] = new Set();
	  }

	  return elementListenerSet;
	}

	var loggedTypeFailures = {};
	var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

	function setCurrentlyValidatingElement(element) {
	  {
	    if (element) {
	      var owner = element._owner;
	      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
	    } else {
	      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
	    }
	  }
	}

	function checkPropTypes(typeSpecs, values, location, componentName, element) {
	  {
	    // $FlowFixMe This is okay but Flow doesn't know it.
	    var has = Function.call.bind(Object.prototype.hasOwnProperty);

	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.

	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
	            err.name = 'Invariant Violation';
	            throw err;
	          }

	          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	        } catch (ex) {
	          error$1 = ex;
	        }

	        if (error$1 && !(error$1 instanceof Error)) {
	          setCurrentlyValidatingElement(element);

	          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

	          setCurrentlyValidatingElement(null);
	        }

	        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error$1.message] = true;
	          setCurrentlyValidatingElement(element);

	          error('Failed %s type: %s', location, error$1.message);

	          setCurrentlyValidatingElement(null);
	        }
	      }
	    }
	  }
	}

	var valueStack = [];
	var fiberStack;

	{
	  fiberStack = [];
	}

	var index = -1;

	function createCursor(defaultValue) {
	  return {
	    current: defaultValue
	  };
	}

	function pop(cursor, fiber) {
	  if (index < 0) {
	    {
	      error('Unexpected pop.');
	    }

	    return;
	  }

	  {
	    if (fiber !== fiberStack[index]) {
	      error('Unexpected Fiber popped.');
	    }
	  }

	  cursor.current = valueStack[index];
	  valueStack[index] = null;

	  {
	    fiberStack[index] = null;
	  }

	  index--;
	}

	function push(cursor, value, fiber) {
	  index++;
	  valueStack[index] = cursor.current;

	  {
	    fiberStack[index] = fiber;
	  }

	  cursor.current = value;
	}

	var warnedAboutMissingGetChildContext;

	{
	  warnedAboutMissingGetChildContext = {};
	}

	var emptyContextObject = {};

	{
	  Object.freeze(emptyContextObject);
	} // A cursor to the current merged context object on the stack.


	var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

	var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
	// We use this to get access to the parent context after we have already
	// pushed the next context provider, and now need to merge their contexts.

	var previousContext = emptyContextObject;

	function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
	  {
	    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
	      // If the fiber is a context provider itself, when we read its context
	      // we may have already pushed its own child context on the stack. A context
	      // provider should not "see" its own child context. Therefore we read the
	      // previous (parent) context instead for a context provider.
	      return previousContext;
	    }

	    return contextStackCursor.current;
	  }
	}

	function cacheContext(workInProgress, unmaskedContext, maskedContext) {
	  {
	    var instance = workInProgress.stateNode;
	    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
	    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
	  }
	}

	function getMaskedContext(workInProgress, unmaskedContext) {
	  {
	    var type = workInProgress.type;
	    var contextTypes = type.contextTypes;

	    if (!contextTypes) {
	      return emptyContextObject;
	    } // Avoid recreating masked context unless unmasked context has changed.
	    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
	    // This may trigger infinite loops if componentWillReceiveProps calls setState.


	    var instance = workInProgress.stateNode;

	    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
	      return instance.__reactInternalMemoizedMaskedChildContext;
	    }

	    var context = {};

	    for (var key in contextTypes) {
	      context[key] = unmaskedContext[key];
	    }

	    {
	      var name = getComponentName(type) || 'Unknown';
	      checkPropTypes(contextTypes, context, 'context', name);
	    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
	    // Context is created before the class component is instantiated so check for instance.


	    if (instance) {
	      cacheContext(workInProgress, unmaskedContext, context);
	    }

	    return context;
	  }
	}

	function hasContextChanged() {
	  {
	    return didPerformWorkStackCursor.current;
	  }
	}

	function isContextProvider(type) {
	  {
	    var childContextTypes = type.childContextTypes;
	    return childContextTypes !== null && childContextTypes !== undefined;
	  }
	}

	function popContext(fiber) {
	  {
	    pop(didPerformWorkStackCursor, fiber);
	    pop(contextStackCursor, fiber);
	  }
	}

	function popTopLevelContextObject(fiber) {
	  {
	    pop(didPerformWorkStackCursor, fiber);
	    pop(contextStackCursor, fiber);
	  }
	}

	function pushTopLevelContextObject(fiber, context, didChange) {
	  {
	    if (!(contextStackCursor.current === emptyContextObject)) {
	      {
	        throw Error( "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }

	    push(contextStackCursor, context, fiber);
	    push(didPerformWorkStackCursor, didChange, fiber);
	  }
	}

	function processChildContext(fiber, type, parentContext) {
	  {
	    var instance = fiber.stateNode;
	    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
	    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

	    if (typeof instance.getChildContext !== 'function') {
	      {
	        var componentName = getComponentName(type) || 'Unknown';

	        if (!warnedAboutMissingGetChildContext[componentName]) {
	          warnedAboutMissingGetChildContext[componentName] = true;

	          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
	        }
	      }

	      return parentContext;
	    }

	    var childContext = instance.getChildContext();

	    for (var contextKey in childContext) {
	      if (!(contextKey in childContextTypes)) {
	        {
	          throw Error( (getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes." );
	        }
	      }
	    }

	    {
	      var name = getComponentName(type) || 'Unknown';
	      checkPropTypes(childContextTypes, childContext, 'child context', name);
	    }

	    return _assign({}, parentContext, childContext);
	  }
	}

	function pushContextProvider(workInProgress) {
	  {
	    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
	    // If the instance does not exist yet, we will push null at first,
	    // and replace it on the stack later when invalidating the context.

	    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
	    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

	    previousContext = contextStackCursor.current;
	    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
	    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
	    return true;
	  }
	}

	function invalidateContextProvider(workInProgress, type, didChange) {
	  {
	    var instance = workInProgress.stateNode;

	    if (!instance) {
	      {
	        throw Error( "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }

	    if (didChange) {
	      // Merge parent and own context.
	      // Skip this if we're not updating due to sCU.
	      // This avoids unnecessarily recomputing memoized values.
	      var mergedContext = processChildContext(workInProgress, type, previousContext);
	      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
	      // It is important to unwind the context in the reverse order.

	      pop(didPerformWorkStackCursor, workInProgress);
	      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

	      push(contextStackCursor, mergedContext, workInProgress);
	      push(didPerformWorkStackCursor, didChange, workInProgress);
	    } else {
	      pop(didPerformWorkStackCursor, workInProgress);
	      push(didPerformWorkStackCursor, didChange, workInProgress);
	    }
	  }
	}

	function findCurrentUnmaskedContext(fiber) {
	  {
	    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
	    // makes sense elsewhere
	    if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
	      {
	        throw Error( "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }

	    var node = fiber;

	    do {
	      switch (node.tag) {
	        case HostRoot:
	          return node.stateNode.context;

	        case ClassComponent:
	          {
	            var Component = node.type;

	            if (isContextProvider(Component)) {
	              return node.stateNode.__reactInternalMemoizedMergedChildContext;
	            }

	            break;
	          }
	      }

	      node = node.return;
	    } while (node !== null);

	    {
	      {
	        throw Error( "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }
	  }
	}

	var LegacyRoot = 0;
	var BlockingRoot = 1;
	var ConcurrentRoot = 2;

	var rendererID = null;
	var injectedHook = null;
	var hasLoggedError = false;
	var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
	function injectInternals(internals) {
	  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	    // No DevTools
	    return false;
	  }

	  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

	  if (hook.isDisabled) {
	    // This isn't a real property on the hook, but it can be set to opt out
	    // of DevTools integration and associated warnings and logs.
	    // https://github.com/facebook/react/issues/3877
	    return true;
	  }

	  if (!hook.supportsFiber) {
	    {
	      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');
	    } // DevTools exists, even though it doesn't support Fiber.


	    return true;
	  }

	  try {
	    rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

	    injectedHook = hook;
	  } catch (err) {
	    // Catch all errors because it is unsafe to throw during initialization.
	    {
	      error('React instrumentation encountered an error: %s.', err);
	    }
	  } // DevTools exists


	  return true;
	}
	function onScheduleRoot(root, children) {
	  {
	    if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {
	      try {
	        injectedHook.onScheduleFiberRoot(rendererID, root, children);
	      } catch (err) {
	        if ( !hasLoggedError) {
	          hasLoggedError = true;

	          error('React instrumentation encountered an error: %s', err);
	        }
	      }
	    }
	  }
	}
	function onCommitRoot(root, priorityLevel) {
	  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {
	    try {
	      var didError = (root.current.flags & DidCapture) === DidCapture;

	      if (enableProfilerTimer) {
	        injectedHook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
	      }
	    } catch (err) {
	      {
	        if (!hasLoggedError) {
	          hasLoggedError = true;

	          error('React instrumentation encountered an error: %s', err);
	        }
	      }
	    }
	  }
	}
	function onCommitUnmount(fiber) {
	  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {
	    try {
	      injectedHook.onCommitFiberUnmount(rendererID, fiber);
	    } catch (err) {
	      {
	        if (!hasLoggedError) {
	          hasLoggedError = true;

	          error('React instrumentation encountered an error: %s', err);
	        }
	      }
	    }
	  }
	}

	var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
	    Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
	    Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
	    Scheduler_shouldYield = Scheduler.unstable_shouldYield,
	    Scheduler_requestPaint = Scheduler.unstable_requestPaint,
	    Scheduler_now$1 = Scheduler.unstable_now,
	    Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
	    Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
	    Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
	    Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
	    Scheduler_LowPriority = Scheduler.unstable_LowPriority,
	    Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;

	{
	  // Provide explicit error message when production+profiling bundle of e.g.
	  // react-dom is used with production (non-profiling) bundle of
	  // scheduler/tracing
	  if (!(tracing$1.__interactionsRef != null && tracing$1.__interactionsRef.current != null)) {
	    {
	      throw Error( "It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling" );
	    }
	  }
	}

	var fakeCallbackNode = {}; // Except for NoPriority, these correspond to Scheduler priorities. We use
	// ascending numbers so we can compare them like numbers. They start at 90 to
	// avoid clashing with Scheduler's priorities.

	var ImmediatePriority$1 = 99;
	var UserBlockingPriority$2 = 98;
	var NormalPriority$1 = 97;
	var LowPriority$1 = 96;
	var IdlePriority$1 = 95; // NoPriority is the absence of priority. Also React-only.

	var NoPriority$1 = 90;
	var shouldYield = Scheduler_shouldYield;
	var requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
	Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
	var syncQueue = null;
	var immediateQueueCallbackNode = null;
	var isFlushingSyncQueue = false;
	var initialTimeMs$1 = Scheduler_now$1(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
	// This will be the case for modern browsers that support `performance.now`. In
	// older browsers, Scheduler falls back to `Date.now`, which returns a Unix
	// timestamp. In that case, subtract the module initialization time to simulate
	// the behavior of performance.now and keep our times small enough to fit
	// within 32 bits.
	// TODO: Consider lifting this into Scheduler.

	var now = initialTimeMs$1 < 10000 ? Scheduler_now$1 : function () {
	  return Scheduler_now$1() - initialTimeMs$1;
	};
	function getCurrentPriorityLevel() {
	  switch (Scheduler_getCurrentPriorityLevel()) {
	    case Scheduler_ImmediatePriority:
	      return ImmediatePriority$1;

	    case Scheduler_UserBlockingPriority:
	      return UserBlockingPriority$2;

	    case Scheduler_NormalPriority:
	      return NormalPriority$1;

	    case Scheduler_LowPriority:
	      return LowPriority$1;

	    case Scheduler_IdlePriority:
	      return IdlePriority$1;

	    default:
	      {
	        {
	          throw Error( "Unknown priority level." );
	        }
	      }

	  }
	}

	function reactPriorityToSchedulerPriority(reactPriorityLevel) {
	  switch (reactPriorityLevel) {
	    case ImmediatePriority$1:
	      return Scheduler_ImmediatePriority;

	    case UserBlockingPriority$2:
	      return Scheduler_UserBlockingPriority;

	    case NormalPriority$1:
	      return Scheduler_NormalPriority;

	    case LowPriority$1:
	      return Scheduler_LowPriority;

	    case IdlePriority$1:
	      return Scheduler_IdlePriority;

	    default:
	      {
	        {
	          throw Error( "Unknown priority level." );
	        }
	      }

	  }
	}

	function runWithPriority$1(reactPriorityLevel, fn) {
	  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
	  return Scheduler_runWithPriority(priorityLevel, fn);
	}
	function scheduleCallback(reactPriorityLevel, callback, options) {
	  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
	  return Scheduler_scheduleCallback(priorityLevel, callback, options);
	}
	function scheduleSyncCallback(callback) {
	  // Push this callback into an internal queue. We'll flush these either in
	  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
	  if (syncQueue === null) {
	    syncQueue = [callback]; // Flush the queue in the next tick, at the earliest.

	    immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
	  } else {
	    // Push onto existing queue. Don't need to schedule a callback because
	    // we already scheduled one when we created the queue.
	    syncQueue.push(callback);
	  }

	  return fakeCallbackNode;
	}
	function cancelCallback(callbackNode) {
	  if (callbackNode !== fakeCallbackNode) {
	    Scheduler_cancelCallback(callbackNode);
	  }
	}
	function flushSyncCallbackQueue() {
	  if (immediateQueueCallbackNode !== null) {
	    var node = immediateQueueCallbackNode;
	    immediateQueueCallbackNode = null;
	    Scheduler_cancelCallback(node);
	  }

	  flushSyncCallbackQueueImpl();
	}

	function flushSyncCallbackQueueImpl() {
	  if (!isFlushingSyncQueue && syncQueue !== null) {
	    // Prevent re-entrancy.
	    isFlushingSyncQueue = true;
	    var i = 0;

	    {
	      try {
	        var _isSync2 = true;
	        var _queue = syncQueue;
	        runWithPriority$1(ImmediatePriority$1, function () {
	          for (; i < _queue.length; i++) {
	            var callback = _queue[i];

	            do {
	              callback = callback(_isSync2);
	            } while (callback !== null);
	          }
	        });
	        syncQueue = null;
	      } catch (error) {
	        // If something throws, leave the remaining callbacks on the queue.
	        if (syncQueue !== null) {
	          syncQueue = syncQueue.slice(i + 1);
	        } // Resume flushing in the next tick


	        Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
	        throw error;
	      } finally {
	        isFlushingSyncQueue = false;
	      }
	    }
	  }
	}

	// TODO: this is special because it gets imported during build.
	var ReactVersion = '17.0.2';

	var NoMode = 0;
	var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
	// tag instead

	var BlockingMode = 2;
	var ConcurrentMode = 4;
	var ProfileMode = 8;
	var DebugTracingMode = 16;

	var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
	var NoTransition = 0;
	function requestCurrentTransition() {
	  return ReactCurrentBatchConfig.transition;
	}

	var ReactStrictModeWarnings = {
	  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
	  flushPendingUnsafeLifecycleWarnings: function () {},
	  recordLegacyContextWarning: function (fiber, instance) {},
	  flushLegacyContextWarning: function () {},
	  discardPendingWarnings: function () {}
	};

	{
	  var findStrictRoot = function (fiber) {
	    var maybeStrictRoot = null;
	    var node = fiber;

	    while (node !== null) {
	      if (node.mode & StrictMode) {
	        maybeStrictRoot = node;
	      }

	      node = node.return;
	    }

	    return maybeStrictRoot;
	  };

	  var setToSortedString = function (set) {
	    var array = [];
	    set.forEach(function (value) {
	      array.push(value);
	    });
	    return array.sort().join(', ');
	  };

	  var pendingComponentWillMountWarnings = [];
	  var pendingUNSAFE_ComponentWillMountWarnings = [];
	  var pendingComponentWillReceivePropsWarnings = [];
	  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	  var pendingComponentWillUpdateWarnings = [];
	  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

	  var didWarnAboutUnsafeLifecycles = new Set();

	  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
	    // Dedup strategy: Warn once per component.
	    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
	      return;
	    }

	    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
	    instance.componentWillMount.__suppressDeprecationWarning !== true) {
	      pendingComponentWillMountWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
	      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
	    }

	    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
	      pendingComponentWillReceivePropsWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
	    }

	    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
	      pendingComponentWillUpdateWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
	      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
	    }
	  };

	  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
	    // We do an initial pass to gather component names
	    var componentWillMountUniqueNames = new Set();

	    if (pendingComponentWillMountWarnings.length > 0) {
	      pendingComponentWillMountWarnings.forEach(function (fiber) {
	        componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillMountWarnings = [];
	    }

	    var UNSAFE_componentWillMountUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillMountWarnings = [];
	    }

	    var componentWillReceivePropsUniqueNames = new Set();

	    if (pendingComponentWillReceivePropsWarnings.length > 0) {
	      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
	        componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillReceivePropsWarnings = [];
	    }

	    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	    }

	    var componentWillUpdateUniqueNames = new Set();

	    if (pendingComponentWillUpdateWarnings.length > 0) {
	      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
	        componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillUpdateWarnings = [];
	    }

	    var UNSAFE_componentWillUpdateUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillUpdateWarnings = [];
	    } // Finally, we flush all the warnings
	    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


	    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
	      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);

	      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
	    }

	    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
	      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

	      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
	    }

	    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
	      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

	      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
	    }

	    if (componentWillMountUniqueNames.size > 0) {
	      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

	      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
	    }

	    if (componentWillReceivePropsUniqueNames.size > 0) {
	      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

	      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
	    }

	    if (componentWillUpdateUniqueNames.size > 0) {
	      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

	      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
	    }
	  };

	  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

	  var didWarnAboutLegacyContext = new Set();

	  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
	    var strictRoot = findStrictRoot(fiber);

	    if (strictRoot === null) {
	      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');

	      return;
	    } // Dedup strategy: Warn once per component.


	    if (didWarnAboutLegacyContext.has(fiber.type)) {
	      return;
	    }

	    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

	    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
	      if (warningsForRoot === undefined) {
	        warningsForRoot = [];
	        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
	      }

	      warningsForRoot.push(fiber);
	    }
	  };

	  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
	    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
	      if (fiberArray.length === 0) {
	        return;
	      }

	      var firstFiber = fiberArray[0];
	      var uniqueNames = new Set();
	      fiberArray.forEach(function (fiber) {
	        uniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutLegacyContext.add(fiber.type);
	      });
	      var sortedNames = setToSortedString(uniqueNames);

	      try {
	        setCurrentFiber(firstFiber);

	        error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);
	      } finally {
	        resetCurrentFiber();
	      }
	    });
	  };

	  ReactStrictModeWarnings.discardPendingWarnings = function () {
	    pendingComponentWillMountWarnings = [];
	    pendingUNSAFE_ComponentWillMountWarnings = [];
	    pendingComponentWillReceivePropsWarnings = [];
	    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	    pendingComponentWillUpdateWarnings = [];
	    pendingUNSAFE_ComponentWillUpdateWarnings = [];
	    pendingLegacyContextWarning = new Map();
	  };
	}

	function resolveDefaultProps(Component, baseProps) {
	  if (Component && Component.defaultProps) {
	    // Resolve default props. Taken from ReactElement
	    var props = _assign({}, baseProps);

	    var defaultProps = Component.defaultProps;

	    for (var propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }

	    return props;
	  }

	  return baseProps;
	}

	// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
	// Math.pow(2, 30) - 1
	// 0b111111111111111111111111111111
	var MAX_SIGNED_31_BIT_INT = 1073741823;

	var valueCursor = createCursor(null);
	var rendererSigil;

	{
	  // Use this to detect multiple renderers using the same context
	  rendererSigil = {};
	}

	var currentlyRenderingFiber = null;
	var lastContextDependency = null;
	var lastContextWithAllBitsObserved = null;
	var isDisallowedContextReadInDEV = false;
	function resetContextDependencies() {
	  // This is called right before React yields execution, to ensure `readContext`
	  // cannot be called outside the render phase.
	  currentlyRenderingFiber = null;
	  lastContextDependency = null;
	  lastContextWithAllBitsObserved = null;

	  {
	    isDisallowedContextReadInDEV = false;
	  }
	}
	function enterDisallowedContextReadInDEV() {
	  {
	    isDisallowedContextReadInDEV = true;
	  }
	}
	function exitDisallowedContextReadInDEV() {
	  {
	    isDisallowedContextReadInDEV = false;
	  }
	}
	function pushProvider(providerFiber, nextValue) {
	  var context = providerFiber.type._context;

	  {
	    push(valueCursor, context._currentValue, providerFiber);
	    context._currentValue = nextValue;

	    {
	      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
	        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
	      }

	      context._currentRenderer = rendererSigil;
	    }
	  }
	}
	function popProvider(providerFiber) {
	  var currentValue = valueCursor.current;
	  pop(valueCursor, providerFiber);
	  var context = providerFiber.type._context;

	  {
	    context._currentValue = currentValue;
	  }
	}
	function calculateChangedBits(context, newValue, oldValue) {
	  if (objectIs(oldValue, newValue)) {
	    // No change
	    return 0;
	  } else {
	    var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

	    {
	      if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
	        error('calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
	      }
	    }

	    return changedBits | 0;
	  }
	}
	function scheduleWorkOnParentPath(parent, renderLanes) {
	  // Update the child lanes of all the ancestors, including the alternates.
	  var node = parent;

	  while (node !== null) {
	    var alternate = node.alternate;

	    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
	      node.childLanes = mergeLanes(node.childLanes, renderLanes);

	      if (alternate !== null) {
	        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
	      }
	    } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {
	      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
	    } else {
	      // Neither alternate was updated, which means the rest of the
	      // ancestor path already has sufficient priority.
	      break;
	    }

	    node = node.return;
	  }
	}
	function propagateContextChange(workInProgress, context, changedBits, renderLanes) {
	  var fiber = workInProgress.child;

	  if (fiber !== null) {
	    // Set the return pointer of the child to the work-in-progress fiber.
	    fiber.return = workInProgress;
	  }

	  while (fiber !== null) {
	    var nextFiber = void 0; // Visit this fiber.

	    var list = fiber.dependencies;

	    if (list !== null) {
	      nextFiber = fiber.child;
	      var dependency = list.firstContext;

	      while (dependency !== null) {
	        // Check if the context matches.
	        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
	          // Match! Schedule an update on this fiber.
	          if (fiber.tag === ClassComponent) {
	            // Schedule a force update on the work-in-progress.
	            var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes));
	            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
	            // update to the current fiber, too, which means it will persist even if
	            // this render is thrown away. Since it's a race condition, not sure it's
	            // worth fixing.

	            enqueueUpdate(fiber, update);
	          }

	          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
	          var alternate = fiber.alternate;

	          if (alternate !== null) {
	            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
	          }

	          scheduleWorkOnParentPath(fiber.return, renderLanes); // Mark the updated lanes on the list, too.

	          list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
	          // dependency list.

	          break;
	        }

	        dependency = dependency.next;
	      }
	    } else if (fiber.tag === ContextProvider) {
	      // Don't scan deeper if this is a matching provider
	      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
	    } else {
	      // Traverse down.
	      nextFiber = fiber.child;
	    }

	    if (nextFiber !== null) {
	      // Set the return pointer of the child to the work-in-progress fiber.
	      nextFiber.return = fiber;
	    } else {
	      // No child. Traverse to next sibling.
	      nextFiber = fiber;

	      while (nextFiber !== null) {
	        if (nextFiber === workInProgress) {
	          // We're back to the root of this subtree. Exit.
	          nextFiber = null;
	          break;
	        }

	        var sibling = nextFiber.sibling;

	        if (sibling !== null) {
	          // Set the return pointer of the sibling to the work-in-progress fiber.
	          sibling.return = nextFiber.return;
	          nextFiber = sibling;
	          break;
	        } // No more siblings. Traverse up.


	        nextFiber = nextFiber.return;
	      }
	    }

	    fiber = nextFiber;
	  }
	}
	function prepareToReadContext(workInProgress, renderLanes) {
	  currentlyRenderingFiber = workInProgress;
	  lastContextDependency = null;
	  lastContextWithAllBitsObserved = null;
	  var dependencies = workInProgress.dependencies;

	  if (dependencies !== null) {
	    var firstContext = dependencies.firstContext;

	    if (firstContext !== null) {
	      if (includesSomeLane(dependencies.lanes, renderLanes)) {
	        // Context list has a pending update. Mark that this fiber performed work.
	        markWorkInProgressReceivedUpdate();
	      } // Reset the work-in-progress list


	      dependencies.firstContext = null;
	    }
	  }
	}
	function readContext(context, observedBits) {
	  {
	    // This warning would fire if you read context inside a Hook like useMemo.
	    // Unlike the class check below, it's not enforced in production for perf.
	    if (isDisallowedContextReadInDEV) {
	      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
	    }
	  }

	  if (lastContextWithAllBitsObserved === context) ; else if (observedBits === false || observedBits === 0) ; else {
	    var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.

	    if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
	      // Observe all updates.
	      lastContextWithAllBitsObserved = context;
	      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
	    } else {
	      resolvedObservedBits = observedBits;
	    }

	    var contextItem = {
	      context: context,
	      observedBits: resolvedObservedBits,
	      next: null
	    };

	    if (lastContextDependency === null) {
	      if (!(currentlyRenderingFiber !== null)) {
	        {
	          throw Error( "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()." );
	        }
	      } // This is the first dependency for this component. Create a new list.


	      lastContextDependency = contextItem;
	      currentlyRenderingFiber.dependencies = {
	        lanes: NoLanes,
	        firstContext: contextItem,
	        responders: null
	      };
	    } else {
	      // Append a new context item.
	      lastContextDependency = lastContextDependency.next = contextItem;
	    }
	  }

	  return  context._currentValue ;
	}

	var UpdateState = 0;
	var ReplaceState = 1;
	var ForceUpdate = 2;
	var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
	// It should only be read right after calling `processUpdateQueue`, via
	// `checkHasForceUpdateAfterProcessing`.

	var hasForceUpdate = false;
	var didWarnUpdateInsideUpdate;
	var currentlyProcessingQueue;

	{
	  didWarnUpdateInsideUpdate = false;
	  currentlyProcessingQueue = null;
	}

	function initializeUpdateQueue(fiber) {
	  var queue = {
	    baseState: fiber.memoizedState,
	    firstBaseUpdate: null,
	    lastBaseUpdate: null,
	    shared: {
	      pending: null
	    },
	    effects: null
	  };
	  fiber.updateQueue = queue;
	}
	function cloneUpdateQueue(current, workInProgress) {
	  // Clone the update queue from current. Unless it's already a clone.
	  var queue = workInProgress.updateQueue;
	  var currentQueue = current.updateQueue;

	  if (queue === currentQueue) {
	    var clone = {
	      baseState: currentQueue.baseState,
	      firstBaseUpdate: currentQueue.firstBaseUpdate,
	      lastBaseUpdate: currentQueue.lastBaseUpdate,
	      shared: currentQueue.shared,
	      effects: currentQueue.effects
	    };
	    workInProgress.updateQueue = clone;
	  }
	}
	function createUpdate(eventTime, lane) {
	  var update = {
	    eventTime: eventTime,
	    lane: lane,
	    tag: UpdateState,
	    payload: null,
	    callback: null,
	    next: null
	  };
	  return update;
	}
	function enqueueUpdate(fiber, update) {
	  var updateQueue = fiber.updateQueue;

	  if (updateQueue === null) {
	    // Only occurs if the fiber has been unmounted.
	    return;
	  }

	  var sharedQueue = updateQueue.shared;
	  var pending = sharedQueue.pending;

	  if (pending === null) {
	    // This is the first update. Create a circular list.
	    update.next = update;
	  } else {
	    update.next = pending.next;
	    pending.next = update;
	  }

	  sharedQueue.pending = update;

	  {
	    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
	      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');

	      didWarnUpdateInsideUpdate = true;
	    }
	  }
	}
	function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
	  // Captured updates are updates that are thrown by a child during the render
	  // phase. They should be discarded if the render is aborted. Therefore,
	  // we should only put them on the work-in-progress queue, not the current one.
	  var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.

	  var current = workInProgress.alternate;

	  if (current !== null) {
	    var currentQueue = current.updateQueue;

	    if (queue === currentQueue) {
	      // The work-in-progress queue is the same as current. This happens when
	      // we bail out on a parent fiber that then captures an error thrown by
	      // a child. Since we want to append the update only to the work-in
	      // -progress queue, we need to clone the updates. We usually clone during
	      // processUpdateQueue, but that didn't happen in this case because we
	      // skipped over the parent when we bailed out.
	      var newFirst = null;
	      var newLast = null;
	      var firstBaseUpdate = queue.firstBaseUpdate;

	      if (firstBaseUpdate !== null) {
	        // Loop through the updates and clone them.
	        var update = firstBaseUpdate;

	        do {
	          var clone = {
	            eventTime: update.eventTime,
	            lane: update.lane,
	            tag: update.tag,
	            payload: update.payload,
	            callback: update.callback,
	            next: null
	          };

	          if (newLast === null) {
	            newFirst = newLast = clone;
	          } else {
	            newLast.next = clone;
	            newLast = clone;
	          }

	          update = update.next;
	        } while (update !== null); // Append the captured update the end of the cloned list.


	        if (newLast === null) {
	          newFirst = newLast = capturedUpdate;
	        } else {
	          newLast.next = capturedUpdate;
	          newLast = capturedUpdate;
	        }
	      } else {
	        // There are no base updates.
	        newFirst = newLast = capturedUpdate;
	      }

	      queue = {
	        baseState: currentQueue.baseState,
	        firstBaseUpdate: newFirst,
	        lastBaseUpdate: newLast,
	        shared: currentQueue.shared,
	        effects: currentQueue.effects
	      };
	      workInProgress.updateQueue = queue;
	      return;
	    }
	  } // Append the update to the end of the list.


	  var lastBaseUpdate = queue.lastBaseUpdate;

	  if (lastBaseUpdate === null) {
	    queue.firstBaseUpdate = capturedUpdate;
	  } else {
	    lastBaseUpdate.next = capturedUpdate;
	  }

	  queue.lastBaseUpdate = capturedUpdate;
	}

	function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
	  switch (update.tag) {
	    case ReplaceState:
	      {
	        var payload = update.payload;

	        if (typeof payload === 'function') {
	          // Updater function
	          {
	            enterDisallowedContextReadInDEV();
	          }

	          var nextState = payload.call(instance, prevState, nextProps);

	          {
	            if ( workInProgress.mode & StrictMode) {
	              disableLogs();

	              try {
	                payload.call(instance, prevState, nextProps);
	              } finally {
	                reenableLogs();
	              }
	            }

	            exitDisallowedContextReadInDEV();
	          }

	          return nextState;
	        } // State object


	        return payload;
	      }

	    case CaptureUpdate:
	      {
	        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
	      }
	    // Intentional fallthrough

	    case UpdateState:
	      {
	        var _payload = update.payload;
	        var partialState;

	        if (typeof _payload === 'function') {
	          // Updater function
	          {
	            enterDisallowedContextReadInDEV();
	          }

	          partialState = _payload.call(instance, prevState, nextProps);

	          {
	            if ( workInProgress.mode & StrictMode) {
	              disableLogs();

	              try {
	                _payload.call(instance, prevState, nextProps);
	              } finally {
	                reenableLogs();
	              }
	            }

	            exitDisallowedContextReadInDEV();
	          }
	        } else {
	          // Partial state object
	          partialState = _payload;
	        }

	        if (partialState === null || partialState === undefined) {
	          // Null and undefined are treated as no-ops.
	          return prevState;
	        } // Merge the partial state and the previous state.


	        return _assign({}, prevState, partialState);
	      }

	    case ForceUpdate:
	      {
	        hasForceUpdate = true;
	        return prevState;
	      }
	  }

	  return prevState;
	}

	function processUpdateQueue(workInProgress, props, instance, renderLanes) {
	  // This is always non-null on a ClassComponent or HostRoot
	  var queue = workInProgress.updateQueue;
	  hasForceUpdate = false;

	  {
	    currentlyProcessingQueue = queue.shared;
	  }

	  var firstBaseUpdate = queue.firstBaseUpdate;
	  var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.

	  var pendingQueue = queue.shared.pending;

	  if (pendingQueue !== null) {
	    queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
	    // and last so that it's non-circular.

	    var lastPendingUpdate = pendingQueue;
	    var firstPendingUpdate = lastPendingUpdate.next;
	    lastPendingUpdate.next = null; // Append pending updates to base queue

	    if (lastBaseUpdate === null) {
	      firstBaseUpdate = firstPendingUpdate;
	    } else {
	      lastBaseUpdate.next = firstPendingUpdate;
	    }

	    lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
	    // we need to transfer the updates to that queue, too. Because the base
	    // queue is a singly-linked list with no cycles, we can append to both
	    // lists and take advantage of structural sharing.
	    // TODO: Pass `current` as argument

	    var current = workInProgress.alternate;

	    if (current !== null) {
	      // This is always non-null on a ClassComponent or HostRoot
	      var currentQueue = current.updateQueue;
	      var currentLastBaseUpdate = currentQueue.lastBaseUpdate;

	      if (currentLastBaseUpdate !== lastBaseUpdate) {
	        if (currentLastBaseUpdate === null) {
	          currentQueue.firstBaseUpdate = firstPendingUpdate;
	        } else {
	          currentLastBaseUpdate.next = firstPendingUpdate;
	        }

	        currentQueue.lastBaseUpdate = lastPendingUpdate;
	      }
	    }
	  } // These values may change as we process the queue.


	  if (firstBaseUpdate !== null) {
	    // Iterate through the list of updates to compute the result.
	    var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
	    // from the original lanes.

	    var newLanes = NoLanes;
	    var newBaseState = null;
	    var newFirstBaseUpdate = null;
	    var newLastBaseUpdate = null;
	    var update = firstBaseUpdate;

	    do {
	      var updateLane = update.lane;
	      var updateEventTime = update.eventTime;

	      if (!isSubsetOfLanes(renderLanes, updateLane)) {
	        // Priority is insufficient. Skip this update. If this is the first
	        // skipped update, the previous update/state is the new base
	        // update/state.
	        var clone = {
	          eventTime: updateEventTime,
	          lane: updateLane,
	          tag: update.tag,
	          payload: update.payload,
	          callback: update.callback,
	          next: null
	        };

	        if (newLastBaseUpdate === null) {
	          newFirstBaseUpdate = newLastBaseUpdate = clone;
	          newBaseState = newState;
	        } else {
	          newLastBaseUpdate = newLastBaseUpdate.next = clone;
	        } // Update the remaining priority in the queue.


	        newLanes = mergeLanes(newLanes, updateLane);
	      } else {
	        // This update does have sufficient priority.
	        if (newLastBaseUpdate !== null) {
	          var _clone = {
	            eventTime: updateEventTime,
	            // This update is going to be committed so we never want uncommit
	            // it. Using NoLane works because 0 is a subset of all bitmasks, so
	            // this will never be skipped by the check above.
	            lane: NoLane,
	            tag: update.tag,
	            payload: update.payload,
	            callback: update.callback,
	            next: null
	          };
	          newLastBaseUpdate = newLastBaseUpdate.next = _clone;
	        } // Process this update.


	        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
	        var callback = update.callback;

	        if (callback !== null) {
	          workInProgress.flags |= Callback;
	          var effects = queue.effects;

	          if (effects === null) {
	            queue.effects = [update];
	          } else {
	            effects.push(update);
	          }
	        }
	      }

	      update = update.next;

	      if (update === null) {
	        pendingQueue = queue.shared.pending;

	        if (pendingQueue === null) {
	          break;
	        } else {
	          // An update was scheduled from inside a reducer. Add the new
	          // pending updates to the end of the list and keep processing.
	          var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
	          // unravel them when transferring them to the base queue.

	          var _firstPendingUpdate = _lastPendingUpdate.next;
	          _lastPendingUpdate.next = null;
	          update = _firstPendingUpdate;
	          queue.lastBaseUpdate = _lastPendingUpdate;
	          queue.shared.pending = null;
	        }
	      }
	    } while (true);

	    if (newLastBaseUpdate === null) {
	      newBaseState = newState;
	    }

	    queue.baseState = newBaseState;
	    queue.firstBaseUpdate = newFirstBaseUpdate;
	    queue.lastBaseUpdate = newLastBaseUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
	    // This should be fine because the only two other things that contribute to
	    // expiration time are props and context. We're already in the middle of the
	    // begin phase by the time we start processing the queue, so we've already
	    // dealt with the props. Context in components that specify
	    // shouldComponentUpdate is tricky; but we'll have to account for
	    // that regardless.

	    markSkippedUpdateLanes(newLanes);
	    workInProgress.lanes = newLanes;
	    workInProgress.memoizedState = newState;
	  }

	  {
	    currentlyProcessingQueue = null;
	  }
	}

	function callCallback(callback, context) {
	  if (!(typeof callback === 'function')) {
	    {
	      throw Error( "Invalid argument passed as callback. Expected a function. Instead received: " + callback );
	    }
	  }

	  callback.call(context);
	}

	function resetHasForceUpdateBeforeProcessing() {
	  hasForceUpdate = false;
	}
	function checkHasForceUpdateAfterProcessing() {
	  return hasForceUpdate;
	}
	function commitUpdateQueue(finishedWork, finishedQueue, instance) {
	  // Commit the effects
	  var effects = finishedQueue.effects;
	  finishedQueue.effects = null;

	  if (effects !== null) {
	    for (var i = 0; i < effects.length; i++) {
	      var effect = effects[i];
	      var callback = effect.callback;

	      if (callback !== null) {
	        effect.callback = null;
	        callCallback(callback, instance);
	      }
	    }
	  }
	}

	var fakeInternalInstance = {};
	var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
	// We'll use it to determine whether we need to initialize legacy refs.

	var emptyRefsObject = new React.Component().refs;
	var didWarnAboutStateAssignmentForComponent;
	var didWarnAboutUninitializedState;
	var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
	var didWarnAboutLegacyLifecyclesAndDerivedState;
	var didWarnAboutUndefinedDerivedState;
	var warnOnUndefinedDerivedState;
	var warnOnInvalidCallback;
	var didWarnAboutDirectlyAssigningPropsToState;
	var didWarnAboutContextTypeAndContextTypes;
	var didWarnAboutInvalidateContextType;

	{
	  didWarnAboutStateAssignmentForComponent = new Set();
	  didWarnAboutUninitializedState = new Set();
	  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
	  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
	  didWarnAboutDirectlyAssigningPropsToState = new Set();
	  didWarnAboutUndefinedDerivedState = new Set();
	  didWarnAboutContextTypeAndContextTypes = new Set();
	  didWarnAboutInvalidateContextType = new Set();
	  var didWarnOnInvalidCallback = new Set();

	  warnOnInvalidCallback = function (callback, callerName) {
	    if (callback === null || typeof callback === 'function') {
	      return;
	    }

	    var key = callerName + '_' + callback;

	    if (!didWarnOnInvalidCallback.has(key)) {
	      didWarnOnInvalidCallback.add(key);

	      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
	    }
	  };

	  warnOnUndefinedDerivedState = function (type, partialState) {
	    if (partialState === undefined) {
	      var componentName = getComponentName(type) || 'Component';

	      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
	        didWarnAboutUndefinedDerivedState.add(componentName);

	        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
	      }
	    }
	  }; // This is so gross but it's at least non-critical and can be removed if
	  // it causes problems. This is meant to give a nicer error message for
	  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
	  // ...)) which otherwise throws a "_processChildContext is not a function"
	  // exception.


	  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
	    enumerable: false,
	    value: function () {
	      {
	        {
	          throw Error( "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal)." );
	        }
	      }
	    }
	  });
	  Object.freeze(fakeInternalInstance);
	}

	function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
	  var prevState = workInProgress.memoizedState;

	  {
	    if ( workInProgress.mode & StrictMode) {
	      disableLogs();

	      try {
	        // Invoke the function an extra time to help detect side-effects.
	        getDerivedStateFromProps(nextProps, prevState);
	      } finally {
	        reenableLogs();
	      }
	    }
	  }

	  var partialState = getDerivedStateFromProps(nextProps, prevState);

	  {
	    warnOnUndefinedDerivedState(ctor, partialState);
	  } // Merge the partial state and the previous state.


	  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
	  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
	  // base state.

	  if (workInProgress.lanes === NoLanes) {
	    // Queue is always non-null for classes
	    var updateQueue = workInProgress.updateQueue;
	    updateQueue.baseState = memoizedState;
	  }
	}
	var classComponentUpdater = {
	  isMounted: isMounted,
	  enqueueSetState: function (inst, payload, callback) {
	    var fiber = get(inst);
	    var eventTime = requestEventTime();
	    var lane = requestUpdateLane(fiber);
	    var update = createUpdate(eventTime, lane);
	    update.payload = payload;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback(callback, 'setState');
	      }

	      update.callback = callback;
	    }

	    enqueueUpdate(fiber, update);
	    scheduleUpdateOnFiber(fiber, lane, eventTime);
	  },
	  enqueueReplaceState: function (inst, payload, callback) {
	    var fiber = get(inst);
	    var eventTime = requestEventTime();
	    var lane = requestUpdateLane(fiber);
	    var update = createUpdate(eventTime, lane);
	    update.tag = ReplaceState;
	    update.payload = payload;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback(callback, 'replaceState');
	      }

	      update.callback = callback;
	    }

	    enqueueUpdate(fiber, update);
	    scheduleUpdateOnFiber(fiber, lane, eventTime);
	  },
	  enqueueForceUpdate: function (inst, callback) {
	    var fiber = get(inst);
	    var eventTime = requestEventTime();
	    var lane = requestUpdateLane(fiber);
	    var update = createUpdate(eventTime, lane);
	    update.tag = ForceUpdate;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback(callback, 'forceUpdate');
	      }

	      update.callback = callback;
	    }

	    enqueueUpdate(fiber, update);
	    scheduleUpdateOnFiber(fiber, lane, eventTime);
	  }
	};

	function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
	  var instance = workInProgress.stateNode;

	  if (typeof instance.shouldComponentUpdate === 'function') {
	    {
	      if ( workInProgress.mode & StrictMode) {
	        disableLogs();

	        try {
	          // Invoke the function an extra time to help detect side-effects.
	          instance.shouldComponentUpdate(newProps, newState, nextContext);
	        } finally {
	          reenableLogs();
	        }
	      }
	    }

	    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);

	    {
	      if (shouldUpdate === undefined) {
	        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component');
	      }
	    }

	    return shouldUpdate;
	  }

	  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
	    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
	  }

	  return true;
	}

	function checkClassInstance(workInProgress, ctor, newProps) {
	  var instance = workInProgress.stateNode;

	  {
	    var name = getComponentName(ctor) || 'Component';
	    var renderPresent = instance.render;

	    if (!renderPresent) {
	      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
	        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
	      } else {
	        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
	      }
	    }

	    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
	      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
	    }

	    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
	      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
	    }

	    if (instance.propTypes) {
	      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
	    }

	    if (instance.contextType) {
	      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
	    }

	    {
	      if (instance.contextTypes) {
	        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
	      }

	      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
	        didWarnAboutContextTypeAndContextTypes.add(ctor);

	        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
	      }
	    }

	    if (typeof instance.componentShouldUpdate === 'function') {
	      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
	    }

	    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
	      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
	    }

	    if (typeof instance.componentDidUnmount === 'function') {
	      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
	    }

	    if (typeof instance.componentDidReceiveProps === 'function') {
	      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
	    }

	    if (typeof instance.componentWillRecieveProps === 'function') {
	      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
	    }

	    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
	      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
	    }

	    var hasMutatedProps = instance.props !== newProps;

	    if (instance.props !== undefined && hasMutatedProps) {
	      error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
	    }

	    if (instance.defaultProps) {
	      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
	      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);

	      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
	    }

	    if (typeof instance.getDerivedStateFromProps === 'function') {
	      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
	    }

	    if (typeof instance.getDerivedStateFromError === 'function') {
	      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
	    }

	    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
	      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
	    }

	    var _state = instance.state;

	    if (_state && (typeof _state !== 'object' || isArray(_state))) {
	      error('%s.state: must be set to an object or null', name);
	    }

	    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
	      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
	    }
	  }
	}

	function adoptClassInstance(workInProgress, instance) {
	  instance.updater = classComponentUpdater;
	  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

	  set(instance, workInProgress);

	  {
	    instance._reactInternalInstance = fakeInternalInstance;
	  }
	}

	function constructClassInstance(workInProgress, ctor, props) {
	  var isLegacyContextConsumer = false;
	  var unmaskedContext = emptyContextObject;
	  var context = emptyContextObject;
	  var contextType = ctor.contextType;

	  {
	    if ('contextType' in ctor) {
	      var isValid = // Allow null for conditional declaration
	      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

	      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
	        didWarnAboutInvalidateContextType.add(ctor);
	        var addendum = '';

	        if (contextType === undefined) {
	          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
	        } else if (typeof contextType !== 'object') {
	          addendum = ' However, it is set to a ' + typeof contextType + '.';
	        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
	          addendum = ' Did you accidentally pass the Context.Provider instead?';
	        } else if (contextType._context !== undefined) {
	          // <Context.Consumer>
	          addendum = ' Did you accidentally pass the Context.Consumer instead?';
	        } else {
	          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
	        }

	        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
	      }
	    }
	  }

	  if (typeof contextType === 'object' && contextType !== null) {
	    context = readContext(contextType);
	  } else {
	    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    var contextTypes = ctor.contextTypes;
	    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
	    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
	  } // Instantiate twice to help detect side-effects.


	  {
	    if ( workInProgress.mode & StrictMode) {
	      disableLogs();

	      try {
	        new ctor(props, context); // eslint-disable-line no-new
	      } finally {
	        reenableLogs();
	      }
	    }
	  }

	  var instance = new ctor(props, context);
	  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
	  adoptClassInstance(workInProgress, instance);

	  {
	    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
	      var componentName = getComponentName(ctor) || 'Component';

	      if (!didWarnAboutUninitializedState.has(componentName)) {
	        didWarnAboutUninitializedState.add(componentName);

	        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
	      }
	    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
	    // Warn about these lifecycles if they are present.
	    // Don't warn about react-lifecycles-compat polyfilled methods though.


	    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
	      var foundWillMountName = null;
	      var foundWillReceivePropsName = null;
	      var foundWillUpdateName = null;

	      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
	        foundWillMountName = 'componentWillMount';
	      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
	        foundWillMountName = 'UNSAFE_componentWillMount';
	      }

	      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
	        foundWillReceivePropsName = 'componentWillReceiveProps';
	      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
	      }

	      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
	        foundWillUpdateName = 'componentWillUpdate';
	      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
	        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
	      }

	      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
	        var _componentName = getComponentName(ctor) || 'Component';

	        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

	        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
	          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);

	          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
	        }
	      }
	    }
	  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
	  // ReactFiberContext usually updates this cache but can't for newly-created instances.


	  if (isLegacyContextConsumer) {
	    cacheContext(workInProgress, unmaskedContext, context);
	  }

	  return instance;
	}

	function callComponentWillMount(workInProgress, instance) {
	  var oldState = instance.state;

	  if (typeof instance.componentWillMount === 'function') {
	    instance.componentWillMount();
	  }

	  if (typeof instance.UNSAFE_componentWillMount === 'function') {
	    instance.UNSAFE_componentWillMount();
	  }

	  if (oldState !== instance.state) {
	    {
	      error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
	    }

	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	  }
	}

	function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
	  var oldState = instance.state;

	  if (typeof instance.componentWillReceiveProps === 'function') {
	    instance.componentWillReceiveProps(newProps, nextContext);
	  }

	  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
	  }

	  if (instance.state !== oldState) {
	    {
	      var componentName = getComponentName(workInProgress.type) || 'Component';

	      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
	        didWarnAboutStateAssignmentForComponent.add(componentName);

	        error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
	      }
	    }

	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	  }
	} // Invokes the mount life-cycles on a previously never rendered instance.


	function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
	  {
	    checkClassInstance(workInProgress, ctor, newProps);
	  }

	  var instance = workInProgress.stateNode;
	  instance.props = newProps;
	  instance.state = workInProgress.memoizedState;
	  instance.refs = emptyRefsObject;
	  initializeUpdateQueue(workInProgress);
	  var contextType = ctor.contextType;

	  if (typeof contextType === 'object' && contextType !== null) {
	    instance.context = readContext(contextType);
	  } else {
	    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    instance.context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  {
	    if (instance.state === newProps) {
	      var componentName = getComponentName(ctor) || 'Component';

	      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
	        didWarnAboutDirectlyAssigningPropsToState.add(componentName);

	        error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
	      }
	    }

	    if (workInProgress.mode & StrictMode) {
	      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
	    }

	    {
	      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
	    }
	  }

	  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
	  instance.state = workInProgress.memoizedState;
	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    instance.state = workInProgress.memoizedState;
	  } // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.


	  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
	    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
	    // process them now.

	    processUpdateQueue(workInProgress, newProps, instance, renderLanes);
	    instance.state = workInProgress.memoizedState;
	  }

	  if (typeof instance.componentDidMount === 'function') {
	    workInProgress.flags |= Update;
	  }
	}

	function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
	  var instance = workInProgress.stateNode;
	  var oldProps = workInProgress.memoizedProps;
	  instance.props = oldProps;
	  var oldContext = instance.context;
	  var contextType = ctor.contextType;
	  var nextContext = emptyContextObject;

	  if (typeof contextType === 'object' && contextType !== null) {
	    nextContext = readContext(contextType);
	  } else {
	    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
	  // ever the previously attempted to render - not the "current". However,
	  // during componentDidUpdate we pass the "current" props.
	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.

	  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
	    if (oldProps !== newProps || oldContext !== nextContext) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
	    }
	  }

	  resetHasForceUpdateBeforeProcessing();
	  var oldState = workInProgress.memoizedState;
	  var newState = instance.state = oldState;
	  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
	  newState = workInProgress.memoizedState;

	  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.flags |= Update;
	    }

	    return false;
	  }

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    newState = workInProgress.memoizedState;
	  }

	  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

	  if (shouldUpdate) {
	    // In order to support react-lifecycles-compat polyfilled components,
	    // Unsafe lifecycles should not be invoked for components using the new APIs.
	    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
	      if (typeof instance.componentWillMount === 'function') {
	        instance.componentWillMount();
	      }

	      if (typeof instance.UNSAFE_componentWillMount === 'function') {
	        instance.UNSAFE_componentWillMount();
	      }
	    }

	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.flags |= Update;
	    }
	  } else {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.flags |= Update;
	    } // If shouldComponentUpdate returned false, we should still update the
	    // memoized state to indicate that this work can be reused.


	    workInProgress.memoizedProps = newProps;
	    workInProgress.memoizedState = newState;
	  } // Update the existing instance's state, props, and context pointers even
	  // if shouldComponentUpdate returns false.


	  instance.props = newProps;
	  instance.state = newState;
	  instance.context = nextContext;
	  return shouldUpdate;
	} // Invokes the update life-cycles and returns false if it shouldn't rerender.


	function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
	  var instance = workInProgress.stateNode;
	  cloneUpdateQueue(current, workInProgress);
	  var unresolvedOldProps = workInProgress.memoizedProps;
	  var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
	  instance.props = oldProps;
	  var unresolvedNewProps = workInProgress.pendingProps;
	  var oldContext = instance.context;
	  var contextType = ctor.contextType;
	  var nextContext = emptyContextObject;

	  if (typeof contextType === 'object' && contextType !== null) {
	    nextContext = readContext(contextType);
	  } else {
	    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
	  // ever the previously attempted to render - not the "current". However,
	  // during componentDidUpdate we pass the "current" props.
	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.

	  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
	    if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
	    }
	  }

	  resetHasForceUpdateBeforeProcessing();
	  var oldState = workInProgress.memoizedState;
	  var newState = instance.state = oldState;
	  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
	  newState = workInProgress.memoizedState;

	  if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidUpdate === 'function') {
	      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.flags |= Update;
	      }
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.flags |= Snapshot;
	      }
	    }

	    return false;
	  }

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    newState = workInProgress.memoizedState;
	  }

	  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

	  if (shouldUpdate) {
	    // In order to support react-lifecycles-compat polyfilled components,
	    // Unsafe lifecycles should not be invoked for components using the new APIs.
	    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
	      if (typeof instance.componentWillUpdate === 'function') {
	        instance.componentWillUpdate(newProps, newState, nextContext);
	      }

	      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
	        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
	      }
	    }

	    if (typeof instance.componentDidUpdate === 'function') {
	      workInProgress.flags |= Update;
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      workInProgress.flags |= Snapshot;
	    }
	  } else {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidUpdate === 'function') {
	      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.flags |= Update;
	      }
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.flags |= Snapshot;
	      }
	    } // If shouldComponentUpdate returned false, we should still update the
	    // memoized props/state to indicate that this work can be reused.


	    workInProgress.memoizedProps = newProps;
	    workInProgress.memoizedState = newState;
	  } // Update the existing instance's state, props, and context pointers even
	  // if shouldComponentUpdate returns false.


	  instance.props = newProps;
	  instance.state = newState;
	  instance.context = nextContext;
	  return shouldUpdate;
	}

	var didWarnAboutMaps;
	var didWarnAboutGenerators;
	var didWarnAboutStringRefs;
	var ownerHasKeyUseWarning;
	var ownerHasFunctionTypeWarning;

	var warnForMissingKey = function (child, returnFiber) {};

	{
	  didWarnAboutMaps = false;
	  didWarnAboutGenerators = false;
	  didWarnAboutStringRefs = {};
	  /**
	   * Warn if there's no key explicitly set on dynamic arrays of children or
	   * object keys are not valid. This allows us to keep track of children between
	   * updates.
	   */

	  ownerHasKeyUseWarning = {};
	  ownerHasFunctionTypeWarning = {};

	  warnForMissingKey = function (child, returnFiber) {
	    if (child === null || typeof child !== 'object') {
	      return;
	    }

	    if (!child._store || child._store.validated || child.key != null) {
	      return;
	    }

	    if (!(typeof child._store === 'object')) {
	      {
	        throw Error( "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }

	    child._store.validated = true;
	    var componentName = getComponentName(returnFiber.type) || 'Component';

	    if (ownerHasKeyUseWarning[componentName]) {
	      return;
	    }

	    ownerHasKeyUseWarning[componentName] = true;

	    error('Each child in a list should have a unique ' + '"key" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');
	  };
	}

	var isArray$1 = Array.isArray;

	function coerceRef(returnFiber, current, element) {
	  var mixedRef = element.ref;

	  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
	    {
	      // TODO: Clean this up once we turn on the string ref warning for
	      // everyone, because the strict mode case will no longer be relevant
	      if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
	      // because these cannot be automatically converted to an arrow function
	      // using a codemod. Therefore, we don't have to warn about string refs again.
	      !(element._owner && element._self && element._owner.stateNode !== element._self)) {
	        var componentName = getComponentName(returnFiber.type) || 'Component';

	        if (!didWarnAboutStringRefs[componentName]) {
	          {
	            error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);
	          }

	          didWarnAboutStringRefs[componentName] = true;
	        }
	      }
	    }

	    if (element._owner) {
	      var owner = element._owner;
	      var inst;

	      if (owner) {
	        var ownerFiber = owner;

	        if (!(ownerFiber.tag === ClassComponent)) {
	          {
	            throw Error( "Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref" );
	          }
	        }

	        inst = ownerFiber.stateNode;
	      }

	      if (!inst) {
	        {
	          throw Error( "Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue." );
	        }
	      }

	      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

	      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
	        return current.ref;
	      }

	      var ref = function (value) {
	        var refs = inst.refs;

	        if (refs === emptyRefsObject) {
	          // This is a lazy pooled frozen object, so we need to initialize.
	          refs = inst.refs = {};
	        }

	        if (value === null) {
	          delete refs[stringRef];
	        } else {
	          refs[stringRef] = value;
	        }
	      };

	      ref._stringRef = stringRef;
	      return ref;
	    } else {
	      if (!(typeof mixedRef === 'string')) {
	        {
	          throw Error( "Expected ref to be a function, a string, an object returned by React.createRef(), or null." );
	        }
	      }

	      if (!element._owner) {
	        {
	          throw Error( "Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information." );
	        }
	      }
	    }
	  }

	  return mixedRef;
	}

	function throwOnInvalidObjectType(returnFiber, newChild) {
	  if (returnFiber.type !== 'textarea') {
	    {
	      {
	        throw Error( "Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + "). If you meant to render a collection of children, use an array instead." );
	      }
	    }
	  }
	}

	function warnOnFunctionType(returnFiber) {
	  {
	    var componentName = getComponentName(returnFiber.type) || 'Component';

	    if (ownerHasFunctionTypeWarning[componentName]) {
	      return;
	    }

	    ownerHasFunctionTypeWarning[componentName] = true;

	    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
	  }
	} // We avoid inlining this to avoid potential deopts from using try/catch.
	// to be able to optimize each path individually by branching early. This needs
	// a compiler or we can do it manually. Helpers that don't need this branching
	// live outside of this function.


	function ChildReconciler(shouldTrackSideEffects) {
	  function deleteChild(returnFiber, childToDelete) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return;
	    } // Deletions are added in reversed order so we add it to the front.
	    // At this point, the return fiber's effect list is empty except for
	    // deletions, so we can just append the deletion to the list. The remaining
	    // effects aren't added until the complete phase. Once we implement
	    // resuming, this may not be true.


	    var last = returnFiber.lastEffect;

	    if (last !== null) {
	      last.nextEffect = childToDelete;
	      returnFiber.lastEffect = childToDelete;
	    } else {
	      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
	    }

	    childToDelete.nextEffect = null;
	    childToDelete.flags = Deletion;
	  }

	  function deleteRemainingChildren(returnFiber, currentFirstChild) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return null;
	    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
	    // assuming that after the first child we've already added everything.


	    var childToDelete = currentFirstChild;

	    while (childToDelete !== null) {
	      deleteChild(returnFiber, childToDelete);
	      childToDelete = childToDelete.sibling;
	    }

	    return null;
	  }

	  function mapRemainingChildren(returnFiber, currentFirstChild) {
	    // Add the remaining children to a temporary map so that we can find them by
	    // keys quickly. Implicit (null) keys get added to this set with their index
	    // instead.
	    var existingChildren = new Map();
	    var existingChild = currentFirstChild;

	    while (existingChild !== null) {
	      if (existingChild.key !== null) {
	        existingChildren.set(existingChild.key, existingChild);
	      } else {
	        existingChildren.set(existingChild.index, existingChild);
	      }

	      existingChild = existingChild.sibling;
	    }

	    return existingChildren;
	  }

	  function useFiber(fiber, pendingProps) {
	    // We currently set sibling to null and index to 0 here because it is easy
	    // to forget to do before returning it. E.g. for the single child case.
	    var clone = createWorkInProgress(fiber, pendingProps);
	    clone.index = 0;
	    clone.sibling = null;
	    return clone;
	  }

	  function placeChild(newFiber, lastPlacedIndex, newIndex) {
	    newFiber.index = newIndex;

	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return lastPlacedIndex;
	    }

	    var current = newFiber.alternate;

	    if (current !== null) {
	      var oldIndex = current.index;

	      if (oldIndex < lastPlacedIndex) {
	        // This is a move.
	        newFiber.flags = Placement;
	        return lastPlacedIndex;
	      } else {
	        // This item can stay in place.
	        return oldIndex;
	      }
	    } else {
	      // This is an insertion.
	      newFiber.flags = Placement;
	      return lastPlacedIndex;
	    }
	  }

	  function placeSingleChild(newFiber) {
	    // This is simpler for the single child case. We only need to do a
	    // placement for inserting new children.
	    if (shouldTrackSideEffects && newFiber.alternate === null) {
	      newFiber.flags = Placement;
	    }

	    return newFiber;
	  }

	  function updateTextNode(returnFiber, current, textContent, lanes) {
	    if (current === null || current.tag !== HostText) {
	      // Insert
	      var created = createFiberFromText(textContent, returnFiber.mode, lanes);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, textContent);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function updateElement(returnFiber, current, element, lanes) {
	    if (current !== null) {
	      if (current.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
	       isCompatibleFamilyForHotReloading(current, element) )) {
	        // Move based on index
	        var existing = useFiber(current, element.props);
	        existing.ref = coerceRef(returnFiber, current, element);
	        existing.return = returnFiber;

	        {
	          existing._debugSource = element._source;
	          existing._debugOwner = element._owner;
	        }

	        return existing;
	      }
	    } // Insert


	    var created = createFiberFromElement(element, returnFiber.mode, lanes);
	    created.ref = coerceRef(returnFiber, current, element);
	    created.return = returnFiber;
	    return created;
	  }

	  function updatePortal(returnFiber, current, portal, lanes) {
	    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
	      // Insert
	      var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, portal.children || []);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function updateFragment(returnFiber, current, fragment, lanes, key) {
	    if (current === null || current.tag !== Fragment) {
	      // Insert
	      var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, fragment);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function createChild(returnFiber, newChild, lanes) {
	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
	      created.return = returnFiber;
	      return created;
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);

	            _created.ref = coerceRef(returnFiber, null, newChild);
	            _created.return = returnFiber;
	            return _created;
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);

	            _created2.return = returnFiber;
	            return _created2;
	          }
	      }

	      if (isArray$1(newChild) || getIteratorFn(newChild)) {
	        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);

	        _created3.return = returnFiber;
	        return _created3;
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType(returnFiber);
	      }
	    }

	    return null;
	  }

	  function updateSlot(returnFiber, oldFiber, newChild, lanes) {
	    // Update the fiber if the keys match, otherwise return null.
	    var key = oldFiber !== null ? oldFiber.key : null;

	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      if (key !== null) {
	        return null;
	      }

	      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            if (newChild.key === key) {
	              if (newChild.type === REACT_FRAGMENT_TYPE) {
	                return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key);
	              }

	              return updateElement(returnFiber, oldFiber, newChild, lanes);
	            } else {
	              return null;
	            }
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            if (newChild.key === key) {
	              return updatePortal(returnFiber, oldFiber, newChild, lanes);
	            } else {
	              return null;
	            }
	          }
	      }

	      if (isArray$1(newChild) || getIteratorFn(newChild)) {
	        if (key !== null) {
	          return null;
	        }

	        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType(returnFiber);
	      }
	    }

	    return null;
	  }

	  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys, so we neither have to check the old nor
	      // new node for the key. If both are text nodes, they match.
	      var matchedFiber = existingChildren.get(newIdx) || null;
	      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

	            if (newChild.type === REACT_FRAGMENT_TYPE) {
	              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
	            }

	            return updateElement(returnFiber, _matchedFiber, newChild, lanes);
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

	            return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
	          }

	      }

	      if (isArray$1(newChild) || getIteratorFn(newChild)) {
	        var _matchedFiber3 = existingChildren.get(newIdx) || null;

	        return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType(returnFiber);
	      }
	    }

	    return null;
	  }
	  /**
	   * Warns if there is a duplicate or missing key
	   */


	  function warnOnInvalidKey(child, knownKeys, returnFiber) {
	    {
	      if (typeof child !== 'object' || child === null) {
	        return knownKeys;
	      }

	      switch (child.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	        case REACT_PORTAL_TYPE:
	          warnForMissingKey(child, returnFiber);
	          var key = child.key;

	          if (typeof key !== 'string') {
	            break;
	          }

	          if (knownKeys === null) {
	            knownKeys = new Set();
	            knownKeys.add(key);
	            break;
	          }

	          if (!knownKeys.has(key)) {
	            knownKeys.add(key);
	            break;
	          }

	          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);

	          break;
	      }
	    }

	    return knownKeys;
	  }

	  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
	    // This algorithm can't optimize by searching from both ends since we
	    // don't have backpointers on fibers. I'm trying to see how far we can get
	    // with that model. If it ends up not being worth the tradeoffs, we can
	    // add it later.
	    // Even with a two ended optimization, we'd want to optimize for the case
	    // where there are few changes and brute force the comparison instead of
	    // going for the Map. It'd like to explore hitting that path first in
	    // forward-only mode and only go for the Map once we notice that we need
	    // lots of look ahead. This doesn't handle reversal as well as two ended
	    // search but that's unusual. Besides, for the two ended optimization to
	    // work on Iterables, we'd need to copy the whole set.
	    // In this first iteration, we'll just live with hitting the bad case
	    // (adding everything to a Map) in for every insert/move.
	    // If you change this code, also update reconcileChildrenIterator() which
	    // uses the same algorithm.
	    {
	      // First, validate keys.
	      var knownKeys = null;

	      for (var i = 0; i < newChildren.length; i++) {
	        var child = newChildren[i];
	        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
	      }
	    }

	    var resultingFirstChild = null;
	    var previousNewFiber = null;
	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;

	    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }

	      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);

	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (oldFiber === null) {
	          oldFiber = nextOldFiber;
	        }

	        break;
	      }

	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }

	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }

	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (newIdx === newChildren.length) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);
	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; newIdx < newChildren.length; newIdx++) {
	        var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);

	        if (_newFiber === null) {
	          continue;
	        }

	        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber;
	        } else {
	          previousNewFiber.sibling = _newFiber;
	        }

	        previousNewFiber = _newFiber;
	      }

	      return resultingFirstChild;
	    } // Add all children to a key map for quick lookups.


	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

	    for (; newIdx < newChildren.length; newIdx++) {
	      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);

	      if (_newFiber2 !== null) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber2.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
	          }
	        }

	        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber2;
	        } else {
	          previousNewFiber.sibling = _newFiber2;
	        }

	        previousNewFiber = _newFiber2;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    return resultingFirstChild;
	  }

	  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
	    // This is the same implementation as reconcileChildrenArray(),
	    // but using the iterator instead.
	    var iteratorFn = getIteratorFn(newChildrenIterable);

	    if (!(typeof iteratorFn === 'function')) {
	      {
	        throw Error( "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }

	    {
	      // We don't support rendering Generators because it's a mutation.
	      // See https://github.com/facebook/react/issues/12995
	      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
	      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
	        if (!didWarnAboutGenerators) {
	          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
	        }

	        didWarnAboutGenerators = true;
	      } // Warn about using Maps as children


	      if (newChildrenIterable.entries === iteratorFn) {
	        if (!didWarnAboutMaps) {
	          error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
	        }

	        didWarnAboutMaps = true;
	      } // First, validate keys.
	      // We'll get a different iterator later for the main pass.


	      var _newChildren = iteratorFn.call(newChildrenIterable);

	      if (_newChildren) {
	        var knownKeys = null;

	        var _step = _newChildren.next();

	        for (; !_step.done; _step = _newChildren.next()) {
	          var child = _step.value;
	          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
	        }
	      }
	    }

	    var newChildren = iteratorFn.call(newChildrenIterable);

	    if (!(newChildren != null)) {
	      {
	        throw Error( "An iterable object provided no iterator." );
	      }
	    }

	    var resultingFirstChild = null;
	    var previousNewFiber = null;
	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;
	    var step = newChildren.next();

	    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }

	      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);

	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (oldFiber === null) {
	          oldFiber = nextOldFiber;
	        }

	        break;
	      }

	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }

	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }

	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (step.done) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);
	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; !step.done; newIdx++, step = newChildren.next()) {
	        var _newFiber3 = createChild(returnFiber, step.value, lanes);

	        if (_newFiber3 === null) {
	          continue;
	        }

	        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber3;
	        } else {
	          previousNewFiber.sibling = _newFiber3;
	        }

	        previousNewFiber = _newFiber3;
	      }

	      return resultingFirstChild;
	    } // Add all children to a key map for quick lookups.


	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

	    for (; !step.done; newIdx++, step = newChildren.next()) {
	      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);

	      if (_newFiber4 !== null) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber4.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
	          }
	        }

	        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber4;
	        } else {
	          previousNewFiber.sibling = _newFiber4;
	        }

	        previousNewFiber = _newFiber4;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    return resultingFirstChild;
	  }

	  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
	    // There's no need to check for keys on text nodes since we don't have a
	    // way to define them.
	    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
	      // We already have an existing node so let's just update it and delete
	      // the rest.
	      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
	      var existing = useFiber(currentFirstChild, textContent);
	      existing.return = returnFiber;
	      return existing;
	    } // The existing first child is not a text node so we need to create one
	    // and delete the existing ones.


	    deleteRemainingChildren(returnFiber, currentFirstChild);
	    var created = createFiberFromText(textContent, returnFiber.mode, lanes);
	    created.return = returnFiber;
	    return created;
	  }

	  function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
	    var key = element.key;
	    var child = currentFirstChild;

	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        switch (child.tag) {
	          case Fragment:
	            {
	              if (element.type === REACT_FRAGMENT_TYPE) {
	                deleteRemainingChildren(returnFiber, child.sibling);
	                var existing = useFiber(child, element.props.children);
	                existing.return = returnFiber;

	                {
	                  existing._debugSource = element._source;
	                  existing._debugOwner = element._owner;
	                }

	                return existing;
	              }

	              break;
	            }

	          case Block:

	          // We intentionally fallthrough here if enableBlocksAPI is not on.
	          // eslint-disable-next-lined no-fallthrough

	          default:
	            {
	              if (child.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
	               isCompatibleFamilyForHotReloading(child, element) )) {
	                deleteRemainingChildren(returnFiber, child.sibling);

	                var _existing3 = useFiber(child, element.props);

	                _existing3.ref = coerceRef(returnFiber, child, element);
	                _existing3.return = returnFiber;

	                {
	                  _existing3._debugSource = element._source;
	                  _existing3._debugOwner = element._owner;
	                }

	                return _existing3;
	              }

	              break;
	            }
	        } // Didn't match.


	        deleteRemainingChildren(returnFiber, child);
	        break;
	      } else {
	        deleteChild(returnFiber, child);
	      }

	      child = child.sibling;
	    }

	    if (element.type === REACT_FRAGMENT_TYPE) {
	      var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
	      created.return = returnFiber;
	      return created;
	    } else {
	      var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);

	      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
	      _created4.return = returnFiber;
	      return _created4;
	    }
	  }

	  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
	    var key = portal.key;
	    var child = currentFirstChild;

	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
	          deleteRemainingChildren(returnFiber, child.sibling);
	          var existing = useFiber(child, portal.children || []);
	          existing.return = returnFiber;
	          return existing;
	        } else {
	          deleteRemainingChildren(returnFiber, child);
	          break;
	        }
	      } else {
	        deleteChild(returnFiber, child);
	      }

	      child = child.sibling;
	    }

	    var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
	    created.return = returnFiber;
	    return created;
	  } // This API will tag the children with the side-effect of the reconciliation
	  // itself. They will be added to the side-effect list as we pass through the
	  // children and the parent.


	  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
	    // This function is not recursive.
	    // If the top level item is an array, we treat it as a set of children,
	    // not as a fragment. Nested arrays on the other hand will be treated as
	    // fragment nodes. Recursion happens at the normal flow.
	    // Handle top level unkeyed fragments as if they were arrays.
	    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
	    // We treat the ambiguous cases above the same.
	    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

	    if (isUnkeyedTopLevelFragment) {
	      newChild = newChild.props.children;
	    } // Handle object types


	    var isObject = typeof newChild === 'object' && newChild !== null;

	    if (isObject) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));

	        case REACT_PORTAL_TYPE:
	          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));

	      }
	    }

	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
	    }

	    if (isArray$1(newChild)) {
	      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
	    }

	    if (getIteratorFn(newChild)) {
	      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
	    }

	    if (isObject) {
	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType(returnFiber);
	      }
	    }

	    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
	      // If the new child is undefined, and the return fiber is a composite
	      // component, throw an error. If Fiber return types are disabled,
	      // we already threw above.
	      switch (returnFiber.tag) {
	        case ClassComponent:
	          {
	            {
	              var instance = returnFiber.stateNode;

	              if (instance.render._isMockFunction) {
	                // We allow auto-mocks to proceed as if they're returning null.
	                break;
	              }
	            }
	          }
	        // Intentionally fall through to the next case, which handles both
	        // functions and classes
	        // eslint-disable-next-lined no-fallthrough

	        case Block:
	        case FunctionComponent:
	        case ForwardRef:
	        case SimpleMemoComponent:
	          {
	            {
	              {
	                throw Error( (getComponentName(returnFiber.type) || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null." );
	              }
	            }
	          }
	      }
	    } // Remaining cases are all treated as empty.


	    return deleteRemainingChildren(returnFiber, currentFirstChild);
	  }

	  return reconcileChildFibers;
	}

	var reconcileChildFibers = ChildReconciler(true);
	var mountChildFibers = ChildReconciler(false);
	function cloneChildFibers(current, workInProgress) {
	  if (!(current === null || workInProgress.child === current.child)) {
	    {
	      throw Error( "Resuming work not yet implemented." );
	    }
	  }

	  if (workInProgress.child === null) {
	    return;
	  }

	  var currentChild = workInProgress.child;
	  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
	  workInProgress.child = newChild;
	  newChild.return = workInProgress;

	  while (currentChild.sibling !== null) {
	    currentChild = currentChild.sibling;
	    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
	    newChild.return = workInProgress;
	  }

	  newChild.sibling = null;
	} // Reset a workInProgress child set to prepare it for a second pass.

	function resetChildFibers(workInProgress, lanes) {
	  var child = workInProgress.child;

	  while (child !== null) {
	    resetWorkInProgress(child, lanes);
	    child = child.sibling;
	  }
	}

	var NO_CONTEXT = {};
	var contextStackCursor$1 = createCursor(NO_CONTEXT);
	var contextFiberStackCursor = createCursor(NO_CONTEXT);
	var rootInstanceStackCursor = createCursor(NO_CONTEXT);

	function requiredContext(c) {
	  if (!(c !== NO_CONTEXT)) {
	    {
	      throw Error( "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }

	  return c;
	}

	function getRootHostContainer() {
	  var rootInstance = requiredContext(rootInstanceStackCursor.current);
	  return rootInstance;
	}

	function pushHostContainer(fiber, nextRootInstance) {
	  // Push current root instance onto the stack;
	  // This allows us to reset root when portals are popped.
	  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
	  // This enables us to pop only Fibers that provide unique contexts.

	  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
	  // However, we can't just call getRootHostContext() and push it because
	  // we'd have a different number of entries on the stack depending on
	  // whether getRootHostContext() throws somewhere in renderer code or not.
	  // So we push an empty value first. This lets us safely unwind on errors.

	  push(contextStackCursor$1, NO_CONTEXT, fiber);
	  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

	  pop(contextStackCursor$1, fiber);
	  push(contextStackCursor$1, nextRootContext, fiber);
	}

	function popHostContainer(fiber) {
	  pop(contextStackCursor$1, fiber);
	  pop(contextFiberStackCursor, fiber);
	  pop(rootInstanceStackCursor, fiber);
	}

	function getHostContext() {
	  var context = requiredContext(contextStackCursor$1.current);
	  return context;
	}

	function pushHostContext(fiber) {
	  requiredContext(rootInstanceStackCursor.current);
	  var context = requiredContext(contextStackCursor$1.current);
	  var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.

	  if (context === nextContext) {
	    return;
	  } // Track the context and the Fiber that provided it.
	  // This enables us to pop only Fibers that provide unique contexts.


	  push(contextFiberStackCursor, fiber, fiber);
	  push(contextStackCursor$1, nextContext, fiber);
	}

	function popHostContext(fiber) {
	  // Do not pop unless this Fiber provided the current context.
	  // pushHostContext() only pushes Fibers that provide unique contexts.
	  if (contextFiberStackCursor.current !== fiber) {
	    return;
	  }

	  pop(contextStackCursor$1, fiber);
	  pop(contextFiberStackCursor, fiber);
	}

	var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
	// inherited deeply down the subtree. The upper bits only affect
	// this immediate suspense boundary and gets reset each new
	// boundary or suspense list.

	var SubtreeSuspenseContextMask = 1; // Subtree Flags:
	// InvisibleParentSuspenseContext indicates that one of our parent Suspense
	// boundaries is not currently showing visible main content.
	// Either because it is already showing a fallback or is not mounted at all.
	// We can use this to determine if it is desirable to trigger a fallback at
	// the parent. If not, then we might need to trigger undesirable boundaries
	// and/or suspend the commit to avoid hiding the parent content.

	var InvisibleParentSuspenseContext = 1; // Shallow Flags:
	// ForceSuspenseFallback can be used by SuspenseList to force newly added
	// items into their fallback state during one of the render passes.

	var ForceSuspenseFallback = 2;
	var suspenseStackCursor = createCursor(DefaultSuspenseContext);
	function hasSuspenseContext(parentContext, flag) {
	  return (parentContext & flag) !== 0;
	}
	function setDefaultShallowSuspenseContext(parentContext) {
	  return parentContext & SubtreeSuspenseContextMask;
	}
	function setShallowSuspenseContext(parentContext, shallowContext) {
	  return parentContext & SubtreeSuspenseContextMask | shallowContext;
	}
	function addSubtreeSuspenseContext(parentContext, subtreeContext) {
	  return parentContext | subtreeContext;
	}
	function pushSuspenseContext(fiber, newContext) {
	  push(suspenseStackCursor, newContext, fiber);
	}
	function popSuspenseContext(fiber) {
	  pop(suspenseStackCursor, fiber);
	}

	function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
	  // If it was the primary children that just suspended, capture and render the
	  // fallback. Otherwise, don't capture and bubble to the next boundary.
	  var nextState = workInProgress.memoizedState;

	  if (nextState !== null) {
	    if (nextState.dehydrated !== null) {
	      // A dehydrated boundary always captures.
	      return true;
	    }

	    return false;
	  }

	  var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.

	  if (props.fallback === undefined) {
	    return false;
	  } // Regular boundaries always capture.


	  if (props.unstable_avoidThisFallback !== true) {
	    return true;
	  } // If it's a boundary we should avoid, then we prefer to bubble up to the
	  // parent boundary if it is currently invisible.


	  if (hasInvisibleParent) {
	    return false;
	  } // If the parent is not able to handle it, we must handle it.


	  return true;
	}
	function findFirstSuspended(row) {
	  var node = row;

	  while (node !== null) {
	    if (node.tag === SuspenseComponent) {
	      var state = node.memoizedState;

	      if (state !== null) {
	        var dehydrated = state.dehydrated;

	        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
	          return node;
	        }
	      }
	    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
	    // keep track of whether it suspended or not.
	    node.memoizedProps.revealOrder !== undefined) {
	      var didSuspend = (node.flags & DidCapture) !== NoFlags;

	      if (didSuspend) {
	        return node;
	      }
	    } else if (node.child !== null) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === row) {
	      return null;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === row) {
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }

	  return null;
	}

	var NoFlags$1 =
	/*  */
	0; // Represents whether effect should fire.

	var HasEffect =
	/* */
	1; // Represents the phase in which the effect (not the clean-up) fires.

	var Layout =
	/*    */
	2;
	var Passive$1 =
	/*   */
	4;

	// This may have been an insertion or a hydration.

	var hydrationParentFiber = null;
	var nextHydratableInstance = null;
	var isHydrating = false;

	function enterHydrationState(fiber) {

	  var parentInstance = fiber.stateNode.containerInfo;
	  nextHydratableInstance = getFirstHydratableChild(parentInstance);
	  hydrationParentFiber = fiber;
	  isHydrating = true;
	  return true;
	}

	function deleteHydratableInstance(returnFiber, instance) {
	  {
	    switch (returnFiber.tag) {
	      case HostRoot:
	        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
	        break;

	      case HostComponent:
	        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
	        break;
	    }
	  }

	  var childToDelete = createFiberFromHostInstanceForDeletion();
	  childToDelete.stateNode = instance;
	  childToDelete.return = returnFiber;
	  childToDelete.flags = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
	  // these children are not part of the reconciliation list of children.
	  // Even if we abort and rereconcile the children, that will try to hydrate
	  // again and the nodes are still in the host tree so these will be
	  // recreated.

	  if (returnFiber.lastEffect !== null) {
	    returnFiber.lastEffect.nextEffect = childToDelete;
	    returnFiber.lastEffect = childToDelete;
	  } else {
	    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
	  }
	}

	function insertNonHydratedInstance(returnFiber, fiber) {
	  fiber.flags = fiber.flags & ~Hydrating | Placement;

	  {
	    switch (returnFiber.tag) {
	      case HostRoot:
	        {
	          var parentContainer = returnFiber.stateNode.containerInfo;

	          switch (fiber.tag) {
	            case HostComponent:
	              var type = fiber.type;
	              fiber.pendingProps;
	              didNotFindHydratableContainerInstance(parentContainer, type);
	              break;

	            case HostText:
	              var text = fiber.pendingProps;
	              didNotFindHydratableContainerTextInstance(parentContainer, text);
	              break;
	          }

	          break;
	        }

	      case HostComponent:
	        {
	          var parentType = returnFiber.type;
	          var parentProps = returnFiber.memoizedProps;
	          var parentInstance = returnFiber.stateNode;

	          switch (fiber.tag) {
	            case HostComponent:
	              var _type = fiber.type;
	              fiber.pendingProps;
	              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
	              break;

	            case HostText:
	              var _text = fiber.pendingProps;
	              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
	              break;

	            case SuspenseComponent:
	              didNotFindHydratableSuspenseInstance(parentType, parentProps);
	              break;
	          }

	          break;
	        }

	      default:
	        return;
	    }
	  }
	}

	function tryHydrate(fiber, nextInstance) {
	  switch (fiber.tag) {
	    case HostComponent:
	      {
	        var type = fiber.type;
	        fiber.pendingProps;
	        var instance = canHydrateInstance(nextInstance, type);

	        if (instance !== null) {
	          fiber.stateNode = instance;
	          return true;
	        }

	        return false;
	      }

	    case HostText:
	      {
	        var text = fiber.pendingProps;
	        var textInstance = canHydrateTextInstance(nextInstance, text);

	        if (textInstance !== null) {
	          fiber.stateNode = textInstance;
	          return true;
	        }

	        return false;
	      }

	    case SuspenseComponent:
	      {

	        return false;
	      }

	    default:
	      return false;
	  }
	}

	function tryToClaimNextHydratableInstance(fiber) {
	  if (!isHydrating) {
	    return;
	  }

	  var nextInstance = nextHydratableInstance;

	  if (!nextInstance) {
	    // Nothing to hydrate. Make it an insertion.
	    insertNonHydratedInstance(hydrationParentFiber, fiber);
	    isHydrating = false;
	    hydrationParentFiber = fiber;
	    return;
	  }

	  var firstAttemptedInstance = nextInstance;

	  if (!tryHydrate(fiber, nextInstance)) {
	    // If we can't hydrate this instance let's try the next one.
	    // We use this as a heuristic. It's based on intuition and not data so it
	    // might be flawed or unnecessary.
	    nextInstance = getNextHydratableSibling(firstAttemptedInstance);

	    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
	      // Nothing to hydrate. Make it an insertion.
	      insertNonHydratedInstance(hydrationParentFiber, fiber);
	      isHydrating = false;
	      hydrationParentFiber = fiber;
	      return;
	    } // We matched the next one, we'll now assume that the first one was
	    // superfluous and we'll delete it. Since we can't eagerly delete it
	    // we'll have to schedule a deletion. To do that, this node needs a dummy
	    // fiber associated with it.


	    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
	  }

	  hydrationParentFiber = fiber;
	  nextHydratableInstance = getFirstHydratableChild(nextInstance);
	}

	function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {

	  var instance = fiber.stateNode;
	  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

	  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
	  // is a new ref we mark this as an update.

	  if (updatePayload !== null) {
	    return true;
	  }

	  return false;
	}

	function prepareToHydrateHostTextInstance(fiber) {

	  var textInstance = fiber.stateNode;
	  var textContent = fiber.memoizedProps;
	  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

	  {
	    if (shouldUpdate) {
	      // We assume that prepareToHydrateHostTextInstance is called in a context where the
	      // hydration parent is the parent host component of this host text.
	      var returnFiber = hydrationParentFiber;

	      if (returnFiber !== null) {
	        switch (returnFiber.tag) {
	          case HostRoot:
	            {
	              var parentContainer = returnFiber.stateNode.containerInfo;
	              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
	              break;
	            }

	          case HostComponent:
	            {
	              var parentType = returnFiber.type;
	              var parentProps = returnFiber.memoizedProps;
	              var parentInstance = returnFiber.stateNode;
	              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
	              break;
	            }
	        }
	      }
	    }
	  }

	  return shouldUpdate;
	}

	function skipPastDehydratedSuspenseInstance(fiber) {

	  var suspenseState = fiber.memoizedState;
	  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

	  if (!suspenseInstance) {
	    {
	      throw Error( "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }

	  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
	}

	function popToNextHostParent(fiber) {
	  var parent = fiber.return;

	  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
	    parent = parent.return;
	  }

	  hydrationParentFiber = parent;
	}

	function popHydrationState(fiber) {

	  if (fiber !== hydrationParentFiber) {
	    // We're deeper than the current hydration context, inside an inserted
	    // tree.
	    return false;
	  }

	  if (!isHydrating) {
	    // If we're not currently hydrating but we're in a hydration context, then
	    // we were an insertion and now need to pop up reenter hydration of our
	    // siblings.
	    popToNextHostParent(fiber);
	    isHydrating = true;
	    return false;
	  }

	  var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
	  // We only do this deeper than head and body since they tend to have random
	  // other nodes in them. We also ignore components with pure text content in
	  // side of them.
	  // TODO: Better heuristic.

	  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
	    var nextInstance = nextHydratableInstance;

	    while (nextInstance) {
	      deleteHydratableInstance(fiber, nextInstance);
	      nextInstance = getNextHydratableSibling(nextInstance);
	    }
	  }

	  popToNextHostParent(fiber);

	  if (fiber.tag === SuspenseComponent) {
	    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
	  } else {
	    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
	  }

	  return true;
	}

	function resetHydrationState() {

	  hydrationParentFiber = null;
	  nextHydratableInstance = null;
	  isHydrating = false;
	}

	function getIsHydrating() {
	  return isHydrating;
	}

	// and should be reset before starting a new render.
	// This tracks which mutable sources need to be reset after a render.

	var workInProgressSources = [];
	var rendererSigil$1;

	{
	  // Used to detect multiple renderers using the same mutable source.
	  rendererSigil$1 = {};
	}

	function markSourceAsDirty(mutableSource) {
	  workInProgressSources.push(mutableSource);
	}
	function resetWorkInProgressVersions() {
	  for (var i = 0; i < workInProgressSources.length; i++) {
	    var mutableSource = workInProgressSources[i];

	    {
	      mutableSource._workInProgressVersionPrimary = null;
	    }
	  }

	  workInProgressSources.length = 0;
	}
	function getWorkInProgressVersion(mutableSource) {
	  {
	    return mutableSource._workInProgressVersionPrimary;
	  }
	}
	function setWorkInProgressVersion(mutableSource, version) {
	  {
	    mutableSource._workInProgressVersionPrimary = version;
	  }

	  workInProgressSources.push(mutableSource);
	}
	function warnAboutMultipleRenderersDEV(mutableSource) {
	  {
	    {
	      if (mutableSource._currentPrimaryRenderer == null) {
	        mutableSource._currentPrimaryRenderer = rendererSigil$1;
	      } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
	        error('Detected multiple renderers concurrently rendering the ' + 'same mutable source. This is currently unsupported.');
	      }
	    }
	  }
	} // Eager reads the version of a mutable source and stores it on the root.

	var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
	    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
	var didWarnAboutMismatchedHooksForComponent;
	var didWarnAboutUseOpaqueIdentifier;

	{
	  didWarnAboutUseOpaqueIdentifier = {};
	  didWarnAboutMismatchedHooksForComponent = new Set();
	}

	// These are set right before calling the component.
	var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
	// the work-in-progress hook.

	var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
	// current hook list is the list that belongs to the current fiber. The
	// work-in-progress hook list is a new list that will be added to the
	// work-in-progress fiber.

	var currentHook = null;
	var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
	// does not get reset if we do another render pass; only when we're completely
	// finished evaluating this component. This is an optimization so we know
	// whether we need to clear render phase updates after a throw.

	var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
	// gets reset after each attempt.
	// TODO: Maybe there's some way to consolidate this with
	// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.

	var didScheduleRenderPhaseUpdateDuringThisPass = false;
	var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

	var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
	// The list stores the order of hooks used during the initial render (mount).
	// Subsequent renders (updates) reference this list.

	var hookTypesDev = null;
	var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
	// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
	// When true, such Hooks will always be "remounted". Only used during hot reload.

	var ignorePreviousDependencies = false;

	function mountHookTypesDev() {
	  {
	    var hookName = currentHookNameInDev;

	    if (hookTypesDev === null) {
	      hookTypesDev = [hookName];
	    } else {
	      hookTypesDev.push(hookName);
	    }
	  }
	}

	function updateHookTypesDev() {
	  {
	    var hookName = currentHookNameInDev;

	    if (hookTypesDev !== null) {
	      hookTypesUpdateIndexDev++;

	      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
	        warnOnHookMismatchInDev(hookName);
	      }
	    }
	  }
	}

	function checkDepsAreArrayDev(deps) {
	  {
	    if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
	      // Verify deps, but only on mount to avoid extra checks.
	      // It's unlikely their type would change as usually you define them inline.
	      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
	    }
	  }
	}

	function warnOnHookMismatchInDev(currentHookName) {
	  {
	    var componentName = getComponentName(currentlyRenderingFiber$1.type);

	    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
	      didWarnAboutMismatchedHooksForComponent.add(componentName);

	      if (hookTypesDev !== null) {
	        var table = '';
	        var secondColumnStart = 30;

	        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
	          var oldHookName = hookTypesDev[i];
	          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
	          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
	          // lol @ IE not supporting String#repeat

	          while (row.length < secondColumnStart) {
	            row += ' ';
	          }

	          row += newHookName + '\n';
	          table += row;
	        }

	        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
	      }
	    }
	  }
	}

	function throwInvalidHookError() {
	  {
	    {
	      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem." );
	    }
	  }
	}

	function areHookInputsEqual(nextDeps, prevDeps) {
	  {
	    if (ignorePreviousDependencies) {
	      // Only true when this component is being hot reloaded.
	      return false;
	    }
	  }

	  if (prevDeps === null) {
	    {
	      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
	    }

	    return false;
	  }

	  {
	    // Don't bother comparing lengths in prod because these arrays should be
	    // passed inline.
	    if (nextDeps.length !== prevDeps.length) {
	      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
	    }
	  }

	  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
	    if (objectIs(nextDeps[i], prevDeps[i])) {
	      continue;
	    }

	    return false;
	  }

	  return true;
	}

	function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
	  renderLanes = nextRenderLanes;
	  currentlyRenderingFiber$1 = workInProgress;

	  {
	    hookTypesDev = current !== null ? current._debugHookTypes : null;
	    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

	    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
	  }

	  workInProgress.memoizedState = null;
	  workInProgress.updateQueue = null;
	  workInProgress.lanes = NoLanes; // The following should have already been reset
	  // currentHook = null;
	  // workInProgressHook = null;
	  // didScheduleRenderPhaseUpdate = false;
	  // TODO Warn if no hooks are used at all during mount, then some are used during update.
	  // Currently we will identify the update render as a mount because memoizedState === null.
	  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
	  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
	  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
	  // so memoizedState would be null during updates and mounts.

	  {
	    if (current !== null && current.memoizedState !== null) {
	      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
	    } else if (hookTypesDev !== null) {
	      // This dispatcher handles an edge case where a component is updating,
	      // but no stateful hooks have been used.
	      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
	      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
	      // This dispatcher does that.
	      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
	    } else {
	      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
	    }
	  }

	  var children = Component(props, secondArg); // Check if there was a render phase update

	  if (didScheduleRenderPhaseUpdateDuringThisPass) {
	    // Keep rendering in a loop for as long as render phase updates continue to
	    // be scheduled. Use a counter to prevent infinite loops.
	    var numberOfReRenders = 0;

	    do {
	      didScheduleRenderPhaseUpdateDuringThisPass = false;

	      if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
	        {
	          throw Error( "Too many re-renders. React limits the number of renders to prevent an infinite loop." );
	        }
	      }

	      numberOfReRenders += 1;

	      {
	        // Even when hot reloading, allow dependencies to stabilize
	        // after first render to prevent infinite render phase updates.
	        ignorePreviousDependencies = false;
	      } // Start over from the beginning of the list


	      currentHook = null;
	      workInProgressHook = null;
	      workInProgress.updateQueue = null;

	      {
	        // Also validate hook order for cascading updates.
	        hookTypesUpdateIndexDev = -1;
	      }

	      ReactCurrentDispatcher$1.current =  HooksDispatcherOnRerenderInDEV ;
	      children = Component(props, secondArg);
	    } while (didScheduleRenderPhaseUpdateDuringThisPass);
	  } // We can assume the previous dispatcher is always this one, since we set it
	  // at the beginning of the render phase and there's no re-entrancy.


	  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

	  {
	    workInProgress._debugHookTypes = hookTypesDev;
	  } // This check uses currentHook so that it works the same in DEV and prod bundles.
	  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


	  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
	  renderLanes = NoLanes;
	  currentlyRenderingFiber$1 = null;
	  currentHook = null;
	  workInProgressHook = null;

	  {
	    currentHookNameInDev = null;
	    hookTypesDev = null;
	    hookTypesUpdateIndexDev = -1;
	  }

	  didScheduleRenderPhaseUpdate = false;

	  if (!!didRenderTooFewHooks) {
	    {
	      throw Error( "Rendered fewer hooks than expected. This may be caused by an accidental early return statement." );
	    }
	  }

	  return children;
	}
	function bailoutHooks(current, workInProgress, lanes) {
	  workInProgress.updateQueue = current.updateQueue;
	  workInProgress.flags &= ~(Passive | Update);
	  current.lanes = removeLanes(current.lanes, lanes);
	}
	function resetHooksAfterThrow() {
	  // We can assume the previous dispatcher is always this one, since we set it
	  // at the beginning of the render phase and there's no re-entrancy.
	  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

	  if (didScheduleRenderPhaseUpdate) {
	    // There were render phase updates. These are only valid for this render
	    // phase, which we are now aborting. Remove the updates from the queues so
	    // they do not persist to the next render. Do not remove updates from hooks
	    // that weren't processed.
	    //
	    // Only reset the updates from the queue if it has a clone. If it does
	    // not have a clone, that means it wasn't processed, and the updates were
	    // scheduled before we entered the render phase.
	    var hook = currentlyRenderingFiber$1.memoizedState;

	    while (hook !== null) {
	      var queue = hook.queue;

	      if (queue !== null) {
	        queue.pending = null;
	      }

	      hook = hook.next;
	    }

	    didScheduleRenderPhaseUpdate = false;
	  }

	  renderLanes = NoLanes;
	  currentlyRenderingFiber$1 = null;
	  currentHook = null;
	  workInProgressHook = null;

	  {
	    hookTypesDev = null;
	    hookTypesUpdateIndexDev = -1;
	    currentHookNameInDev = null;
	    isUpdatingOpaqueValueInRenderPhase = false;
	  }

	  didScheduleRenderPhaseUpdateDuringThisPass = false;
	}

	function mountWorkInProgressHook() {
	  var hook = {
	    memoizedState: null,
	    baseState: null,
	    baseQueue: null,
	    queue: null,
	    next: null
	  };

	  if (workInProgressHook === null) {
	    // This is the first hook in the list
	    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
	  } else {
	    // Append to the end of the list
	    workInProgressHook = workInProgressHook.next = hook;
	  }

	  return workInProgressHook;
	}

	function updateWorkInProgressHook() {
	  // This function is used both for updates and for re-renders triggered by a
	  // render phase update. It assumes there is either a current hook we can
	  // clone, or a work-in-progress hook from a previous render pass that we can
	  // use as a base. When we reach the end of the base list, we must switch to
	  // the dispatcher used for mounts.
	  var nextCurrentHook;

	  if (currentHook === null) {
	    var current = currentlyRenderingFiber$1.alternate;

	    if (current !== null) {
	      nextCurrentHook = current.memoizedState;
	    } else {
	      nextCurrentHook = null;
	    }
	  } else {
	    nextCurrentHook = currentHook.next;
	  }

	  var nextWorkInProgressHook;

	  if (workInProgressHook === null) {
	    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
	  } else {
	    nextWorkInProgressHook = workInProgressHook.next;
	  }

	  if (nextWorkInProgressHook !== null) {
	    // There's already a work-in-progress. Reuse it.
	    workInProgressHook = nextWorkInProgressHook;
	    nextWorkInProgressHook = workInProgressHook.next;
	    currentHook = nextCurrentHook;
	  } else {
	    // Clone from the current hook.
	    if (!(nextCurrentHook !== null)) {
	      {
	        throw Error( "Rendered more hooks than during the previous render." );
	      }
	    }

	    currentHook = nextCurrentHook;
	    var newHook = {
	      memoizedState: currentHook.memoizedState,
	      baseState: currentHook.baseState,
	      baseQueue: currentHook.baseQueue,
	      queue: currentHook.queue,
	      next: null
	    };

	    if (workInProgressHook === null) {
	      // This is the first hook in the list.
	      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
	    } else {
	      // Append to the end of the list.
	      workInProgressHook = workInProgressHook.next = newHook;
	    }
	  }

	  return workInProgressHook;
	}

	function createFunctionComponentUpdateQueue() {
	  return {
	    lastEffect: null
	  };
	}

	function basicStateReducer(state, action) {
	  // $FlowFixMe: Flow doesn't like mixed types
	  return typeof action === 'function' ? action(state) : action;
	}

	function mountReducer(reducer, initialArg, init) {
	  var hook = mountWorkInProgressHook();
	  var initialState;

	  if (init !== undefined) {
	    initialState = init(initialArg);
	  } else {
	    initialState = initialArg;
	  }

	  hook.memoizedState = hook.baseState = initialState;
	  var queue = hook.queue = {
	    pending: null,
	    dispatch: null,
	    lastRenderedReducer: reducer,
	    lastRenderedState: initialState
	  };
	  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
	  return [hook.memoizedState, dispatch];
	}

	function updateReducer(reducer, initialArg, init) {
	  var hook = updateWorkInProgressHook();
	  var queue = hook.queue;

	  if (!(queue !== null)) {
	    {
	      throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
	    }
	  }

	  queue.lastRenderedReducer = reducer;
	  var current = currentHook; // The last rebase update that is NOT part of the base state.

	  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.

	  var pendingQueue = queue.pending;

	  if (pendingQueue !== null) {
	    // We have new updates that haven't been processed yet.
	    // We'll add them to the base queue.
	    if (baseQueue !== null) {
	      // Merge the pending queue and the base queue.
	      var baseFirst = baseQueue.next;
	      var pendingFirst = pendingQueue.next;
	      baseQueue.next = pendingFirst;
	      pendingQueue.next = baseFirst;
	    }

	    {
	      if (current.baseQueue !== baseQueue) {
	        // Internal invariant that should never happen, but feasibly could in
	        // the future if we implement resuming, or some form of that.
	        error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');
	      }
	    }

	    current.baseQueue = baseQueue = pendingQueue;
	    queue.pending = null;
	  }

	  if (baseQueue !== null) {
	    // We have a queue to process.
	    var first = baseQueue.next;
	    var newState = current.baseState;
	    var newBaseState = null;
	    var newBaseQueueFirst = null;
	    var newBaseQueueLast = null;
	    var update = first;

	    do {
	      var updateLane = update.lane;

	      if (!isSubsetOfLanes(renderLanes, updateLane)) {
	        // Priority is insufficient. Skip this update. If this is the first
	        // skipped update, the previous update/state is the new base
	        // update/state.
	        var clone = {
	          lane: updateLane,
	          action: update.action,
	          eagerReducer: update.eagerReducer,
	          eagerState: update.eagerState,
	          next: null
	        };

	        if (newBaseQueueLast === null) {
	          newBaseQueueFirst = newBaseQueueLast = clone;
	          newBaseState = newState;
	        } else {
	          newBaseQueueLast = newBaseQueueLast.next = clone;
	        } // Update the remaining priority in the queue.
	        // TODO: Don't need to accumulate this. Instead, we can remove
	        // renderLanes from the original lanes.


	        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
	        markSkippedUpdateLanes(updateLane);
	      } else {
	        // This update does have sufficient priority.
	        if (newBaseQueueLast !== null) {
	          var _clone = {
	            // This update is going to be committed so we never want uncommit
	            // it. Using NoLane works because 0 is a subset of all bitmasks, so
	            // this will never be skipped by the check above.
	            lane: NoLane,
	            action: update.action,
	            eagerReducer: update.eagerReducer,
	            eagerState: update.eagerState,
	            next: null
	          };
	          newBaseQueueLast = newBaseQueueLast.next = _clone;
	        } // Process this update.


	        if (update.eagerReducer === reducer) {
	          // If this update was processed eagerly, and its reducer matches the
	          // current reducer, we can use the eagerly computed state.
	          newState = update.eagerState;
	        } else {
	          var action = update.action;
	          newState = reducer(newState, action);
	        }
	      }

	      update = update.next;
	    } while (update !== null && update !== first);

	    if (newBaseQueueLast === null) {
	      newBaseState = newState;
	    } else {
	      newBaseQueueLast.next = newBaseQueueFirst;
	    } // Mark that the fiber performed work, but only if the new state is
	    // different from the current state.


	    if (!objectIs(newState, hook.memoizedState)) {
	      markWorkInProgressReceivedUpdate();
	    }

	    hook.memoizedState = newState;
	    hook.baseState = newBaseState;
	    hook.baseQueue = newBaseQueueLast;
	    queue.lastRenderedState = newState;
	  }

	  var dispatch = queue.dispatch;
	  return [hook.memoizedState, dispatch];
	}

	function rerenderReducer(reducer, initialArg, init) {
	  var hook = updateWorkInProgressHook();
	  var queue = hook.queue;

	  if (!(queue !== null)) {
	    {
	      throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
	    }
	  }

	  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
	  // work-in-progress hook.

	  var dispatch = queue.dispatch;
	  var lastRenderPhaseUpdate = queue.pending;
	  var newState = hook.memoizedState;

	  if (lastRenderPhaseUpdate !== null) {
	    // The queue doesn't persist past this render pass.
	    queue.pending = null;
	    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
	    var update = firstRenderPhaseUpdate;

	    do {
	      // Process this render phase update. We don't have to check the
	      // priority because it will always be the same as the current
	      // render's.
	      var action = update.action;
	      newState = reducer(newState, action);
	      update = update.next;
	    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
	    // different from the current state.


	    if (!objectIs(newState, hook.memoizedState)) {
	      markWorkInProgressReceivedUpdate();
	    }

	    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
	    // the base state unless the queue is empty.
	    // TODO: Not sure if this is the desired semantics, but it's what we
	    // do for gDSFP. I can't remember why.

	    if (hook.baseQueue === null) {
	      hook.baseState = newState;
	    }

	    queue.lastRenderedState = newState;
	  }

	  return [newState, dispatch];
	}

	function readFromUnsubcribedMutableSource(root, source, getSnapshot) {
	  {
	    warnAboutMultipleRenderersDEV(source);
	  }

	  var getVersion = source._getVersion;
	  var version = getVersion(source._source); // Is it safe for this component to read from this source during the current render?

	  var isSafeToReadFromSource = false; // Check the version first.
	  // If this render has already been started with a specific version,
	  // we can use it alone to determine if we can safely read from the source.

	  var currentRenderVersion = getWorkInProgressVersion(source);

	  if (currentRenderVersion !== null) {
	    // It's safe to read if the store hasn't been mutated since the last time
	    // we read something.
	    isSafeToReadFromSource = currentRenderVersion === version;
	  } else {
	    // If there's no version, then this is the first time we've read from the
	    // source during the current render pass, so we need to do a bit more work.
	    // What we need to determine is if there are any hooks that already
	    // subscribed to the source, and if so, whether there are any pending
	    // mutations that haven't been synchronized yet.
	    //
	    // If there are no pending mutations, then `root.mutableReadLanes` will be
	    // empty, and we know we can safely read.
	    //
	    // If there *are* pending mutations, we may still be able to safely read
	    // if the currently rendering lanes are inclusive of the pending mutation
	    // lanes, since that guarantees that the value we're about to read from
	    // the source is consistent with the values that we read during the most
	    // recent mutation.
	    isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root.mutableReadLanes);

	    if (isSafeToReadFromSource) {
	      // If it's safe to read from this source during the current render,
	      // store the version in case other components read from it.
	      // A changed version number will let those components know to throw and restart the render.
	      setWorkInProgressVersion(source, version);
	    }
	  }

	  if (isSafeToReadFromSource) {
	    var snapshot = getSnapshot(source._source);

	    {
	      if (typeof snapshot === 'function') {
	        error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');
	      }
	    }

	    return snapshot;
	  } else {
	    // This handles the special case of a mutable source being shared between renderers.
	    // In that case, if the source is mutated between the first and second renderer,
	    // The second renderer don't know that it needs to reset the WIP version during unwind,
	    // (because the hook only marks sources as dirty if it's written to their WIP version).
	    // That would cause this tear check to throw again and eventually be visible to the user.
	    // We can avoid this infinite loop by explicitly marking the source as dirty.
	    //
	    // This can lead to tearing in the first renderer when it resumes,
	    // but there's nothing we can do about that (short of throwing here and refusing to continue the render).
	    markSourceAsDirty(source);

	    {
	      {
	        throw Error( "Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue." );
	      }
	    }
	  }
	}

	function useMutableSource(hook, source, getSnapshot, subscribe) {
	  var root = getWorkInProgressRoot();

	  if (!(root !== null)) {
	    {
	      throw Error( "Expected a work-in-progress root. This is a bug in React. Please file an issue." );
	    }
	  }

	  var getVersion = source._getVersion;
	  var version = getVersion(source._source);
	  var dispatcher = ReactCurrentDispatcher$1.current; // eslint-disable-next-line prefer-const

	  var _dispatcher$useState = dispatcher.useState(function () {
	    return readFromUnsubcribedMutableSource(root, source, getSnapshot);
	  }),
	      currentSnapshot = _dispatcher$useState[0],
	      setSnapshot = _dispatcher$useState[1];

	  var snapshot = currentSnapshot; // Grab a handle to the state hook as well.
	  // We use it to clear the pending update queue if we have a new source.

	  var stateHook = workInProgressHook;
	  var memoizedState = hook.memoizedState;
	  var refs = memoizedState.refs;
	  var prevGetSnapshot = refs.getSnapshot;
	  var prevSource = memoizedState.source;
	  var prevSubscribe = memoizedState.subscribe;
	  var fiber = currentlyRenderingFiber$1;
	  hook.memoizedState = {
	    refs: refs,
	    source: source,
	    subscribe: subscribe
	  }; // Sync the values needed by our subscription handler after each commit.

	  dispatcher.useEffect(function () {
	    refs.getSnapshot = getSnapshot; // Normally the dispatch function for a state hook never changes,
	    // but this hook recreates the queue in certain cases  to avoid updates from stale sources.
	    // handleChange() below needs to reference the dispatch function without re-subscribing,
	    // so we use a ref to ensure that it always has the latest version.

	    refs.setSnapshot = setSnapshot; // Check for a possible change between when we last rendered now.

	    var maybeNewVersion = getVersion(source._source);

	    if (!objectIs(version, maybeNewVersion)) {
	      var maybeNewSnapshot = getSnapshot(source._source);

	      {
	        if (typeof maybeNewSnapshot === 'function') {
	          error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');
	        }
	      }

	      if (!objectIs(snapshot, maybeNewSnapshot)) {
	        setSnapshot(maybeNewSnapshot);
	        var lane = requestUpdateLane(fiber);
	        markRootMutableRead(root, lane);
	      } // If the source mutated between render and now,
	      // there may be state updates already scheduled from the old source.
	      // Entangle the updates so that they render in the same batch.


	      markRootEntangled(root, root.mutableReadLanes);
	    }
	  }, [getSnapshot, source, subscribe]); // If we got a new source or subscribe function, re-subscribe in a passive effect.

	  dispatcher.useEffect(function () {
	    var handleChange = function () {
	      var latestGetSnapshot = refs.getSnapshot;
	      var latestSetSnapshot = refs.setSnapshot;

	      try {
	        latestSetSnapshot(latestGetSnapshot(source._source)); // Record a pending mutable source update with the same expiration time.

	        var lane = requestUpdateLane(fiber);
	        markRootMutableRead(root, lane);
	      } catch (error) {
	        // A selector might throw after a source mutation.
	        // e.g. it might try to read from a part of the store that no longer exists.
	        // In this case we should still schedule an update with React.
	        // Worst case the selector will throw again and then an error boundary will handle it.
	        latestSetSnapshot(function () {
	          throw error;
	        });
	      }
	    };

	    var unsubscribe = subscribe(source._source, handleChange);

	    {
	      if (typeof unsubscribe !== 'function') {
	        error('Mutable source subscribe function must return an unsubscribe function.');
	      }
	    }

	    return unsubscribe;
	  }, [source, subscribe]); // If any of the inputs to useMutableSource change, reading is potentially unsafe.
	  //
	  // If either the source or the subscription have changed we can't can't trust the update queue.
	  // Maybe the source changed in a way that the old subscription ignored but the new one depends on.
	  //
	  // If the getSnapshot function changed, we also shouldn't rely on the update queue.
	  // It's possible that the underlying source was mutated between the when the last "change" event fired,
	  // and when the current render (with the new getSnapshot function) is processed.
	  //
	  // In both cases, we need to throw away pending updates (since they are no longer relevant)
	  // and treat reading from the source as we do in the mount case.

	  if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
	    // Create a new queue and setState method,
	    // So if there are interleaved updates, they get pushed to the older queue.
	    // When this becomes current, the previous queue and dispatch method will be discarded,
	    // including any interleaving updates that occur.
	    var newQueue = {
	      pending: null,
	      dispatch: null,
	      lastRenderedReducer: basicStateReducer,
	      lastRenderedState: snapshot
	    };
	    newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
	    stateHook.queue = newQueue;
	    stateHook.baseQueue = null;
	    snapshot = readFromUnsubcribedMutableSource(root, source, getSnapshot);
	    stateHook.memoizedState = stateHook.baseState = snapshot;
	  }

	  return snapshot;
	}

	function mountMutableSource(source, getSnapshot, subscribe) {
	  var hook = mountWorkInProgressHook();
	  hook.memoizedState = {
	    refs: {
	      getSnapshot: getSnapshot,
	      setSnapshot: null
	    },
	    source: source,
	    subscribe: subscribe
	  };
	  return useMutableSource(hook, source, getSnapshot, subscribe);
	}

	function updateMutableSource(source, getSnapshot, subscribe) {
	  var hook = updateWorkInProgressHook();
	  return useMutableSource(hook, source, getSnapshot, subscribe);
	}

	function mountState(initialState) {
	  var hook = mountWorkInProgressHook();

	  if (typeof initialState === 'function') {
	    // $FlowFixMe: Flow doesn't like mixed types
	    initialState = initialState();
	  }

	  hook.memoizedState = hook.baseState = initialState;
	  var queue = hook.queue = {
	    pending: null,
	    dispatch: null,
	    lastRenderedReducer: basicStateReducer,
	    lastRenderedState: initialState
	  };
	  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
	  return [hook.memoizedState, dispatch];
	}

	function updateState(initialState) {
	  return updateReducer(basicStateReducer);
	}

	function rerenderState(initialState) {
	  return rerenderReducer(basicStateReducer);
	}

	function pushEffect(tag, create, destroy, deps) {
	  var effect = {
	    tag: tag,
	    create: create,
	    destroy: destroy,
	    deps: deps,
	    // Circular
	    next: null
	  };
	  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

	  if (componentUpdateQueue === null) {
	    componentUpdateQueue = createFunctionComponentUpdateQueue();
	    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
	    componentUpdateQueue.lastEffect = effect.next = effect;
	  } else {
	    var lastEffect = componentUpdateQueue.lastEffect;

	    if (lastEffect === null) {
	      componentUpdateQueue.lastEffect = effect.next = effect;
	    } else {
	      var firstEffect = lastEffect.next;
	      lastEffect.next = effect;
	      effect.next = firstEffect;
	      componentUpdateQueue.lastEffect = effect;
	    }
	  }

	  return effect;
	}

	function mountRef(initialValue) {
	  var hook = mountWorkInProgressHook();
	  var ref = {
	    current: initialValue
	  };

	  {
	    Object.seal(ref);
	  }

	  hook.memoizedState = ref;
	  return ref;
	}

	function updateRef(initialValue) {
	  var hook = updateWorkInProgressHook();
	  return hook.memoizedState;
	}

	function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  currentlyRenderingFiber$1.flags |= fiberFlags;
	  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
	}

	function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var destroy = undefined;

	  if (currentHook !== null) {
	    var prevEffect = currentHook.memoizedState;
	    destroy = prevEffect.destroy;

	    if (nextDeps !== null) {
	      var prevDeps = prevEffect.deps;

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        pushEffect(hookFlags, create, destroy, nextDeps);
	        return;
	      }
	    }
	  }

	  currentlyRenderingFiber$1.flags |= fiberFlags;
	  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
	}

	function mountEffect(create, deps) {
	  {
	    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
	    if ('undefined' !== typeof jest) {
	      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
	    }
	  }

	  return mountEffectImpl(Update | Passive, Passive$1, create, deps);
	}

	function updateEffect(create, deps) {
	  {
	    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
	    if ('undefined' !== typeof jest) {
	      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
	    }
	  }

	  return updateEffectImpl(Update | Passive, Passive$1, create, deps);
	}

	function mountLayoutEffect(create, deps) {
	  return mountEffectImpl(Update, Layout, create, deps);
	}

	function updateLayoutEffect(create, deps) {
	  return updateEffectImpl(Update, Layout, create, deps);
	}

	function imperativeHandleEffect(create, ref) {
	  if (typeof ref === 'function') {
	    var refCallback = ref;

	    var _inst = create();

	    refCallback(_inst);
	    return function () {
	      refCallback(null);
	    };
	  } else if (ref !== null && ref !== undefined) {
	    var refObject = ref;

	    {
	      if (!refObject.hasOwnProperty('current')) {
	        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
	      }
	    }

	    var _inst2 = create();

	    refObject.current = _inst2;
	    return function () {
	      refObject.current = null;
	    };
	  }
	}

	function mountImperativeHandle(ref, create, deps) {
	  {
	    if (typeof create !== 'function') {
	      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
	    }
	  } // TODO: If deps are provided, should we skip comparing the ref itself?


	  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
	  return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
	}

	function updateImperativeHandle(ref, create, deps) {
	  {
	    if (typeof create !== 'function') {
	      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
	    }
	  } // TODO: If deps are provided, should we skip comparing the ref itself?


	  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
	  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
	}

	function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
	  // The react-debug-hooks package injects its own implementation
	  // so that e.g. DevTools can display custom hook values.
	}

	var updateDebugValue = mountDebugValue;

	function mountCallback(callback, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  hook.memoizedState = [callback, nextDeps];
	  return callback;
	}

	function updateCallback(callback, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var prevState = hook.memoizedState;

	  if (prevState !== null) {
	    if (nextDeps !== null) {
	      var prevDeps = prevState[1];

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        return prevState[0];
	      }
	    }
	  }

	  hook.memoizedState = [callback, nextDeps];
	  return callback;
	}

	function mountMemo(nextCreate, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var nextValue = nextCreate();
	  hook.memoizedState = [nextValue, nextDeps];
	  return nextValue;
	}

	function updateMemo(nextCreate, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var prevState = hook.memoizedState;

	  if (prevState !== null) {
	    // Assume these are defined. If they're not, areHookInputsEqual will warn.
	    if (nextDeps !== null) {
	      var prevDeps = prevState[1];

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        return prevState[0];
	      }
	    }
	  }

	  var nextValue = nextCreate();
	  hook.memoizedState = [nextValue, nextDeps];
	  return nextValue;
	}

	function mountDeferredValue(value) {
	  var _mountState = mountState(value),
	      prevValue = _mountState[0],
	      setValue = _mountState[1];

	  mountEffect(function () {
	    var prevTransition = ReactCurrentBatchConfig$1.transition;
	    ReactCurrentBatchConfig$1.transition = 1;

	    try {
	      setValue(value);
	    } finally {
	      ReactCurrentBatchConfig$1.transition = prevTransition;
	    }
	  }, [value]);
	  return prevValue;
	}

	function updateDeferredValue(value) {
	  var _updateState = updateState(),
	      prevValue = _updateState[0],
	      setValue = _updateState[1];

	  updateEffect(function () {
	    var prevTransition = ReactCurrentBatchConfig$1.transition;
	    ReactCurrentBatchConfig$1.transition = 1;

	    try {
	      setValue(value);
	    } finally {
	      ReactCurrentBatchConfig$1.transition = prevTransition;
	    }
	  }, [value]);
	  return prevValue;
	}

	function rerenderDeferredValue(value) {
	  var _rerenderState = rerenderState(),
	      prevValue = _rerenderState[0],
	      setValue = _rerenderState[1];

	  updateEffect(function () {
	    var prevTransition = ReactCurrentBatchConfig$1.transition;
	    ReactCurrentBatchConfig$1.transition = 1;

	    try {
	      setValue(value);
	    } finally {
	      ReactCurrentBatchConfig$1.transition = prevTransition;
	    }
	  }, [value]);
	  return prevValue;
	}

	function startTransition(setPending, callback) {
	  var priorityLevel = getCurrentPriorityLevel();

	  {
	    runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function () {
	      setPending(true);
	    });
	    runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function () {
	      var prevTransition = ReactCurrentBatchConfig$1.transition;
	      ReactCurrentBatchConfig$1.transition = 1;

	      try {
	        setPending(false);
	        callback();
	      } finally {
	        ReactCurrentBatchConfig$1.transition = prevTransition;
	      }
	    });
	  }
	}

	function mountTransition() {
	  var _mountState2 = mountState(false),
	      isPending = _mountState2[0],
	      setPending = _mountState2[1]; // The `start` method can be stored on a ref, since `setPending`
	  // never changes.


	  var start = startTransition.bind(null, setPending);
	  mountRef(start);
	  return [start, isPending];
	}

	function updateTransition() {
	  var _updateState2 = updateState(),
	      isPending = _updateState2[0];

	  var startRef = updateRef();
	  var start = startRef.current;
	  return [start, isPending];
	}

	function rerenderTransition() {
	  var _rerenderState2 = rerenderState(),
	      isPending = _rerenderState2[0];

	  var startRef = updateRef();
	  var start = startRef.current;
	  return [start, isPending];
	}

	var isUpdatingOpaqueValueInRenderPhase = false;
	function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
	  {
	    return isUpdatingOpaqueValueInRenderPhase;
	  }
	}

	function warnOnOpaqueIdentifierAccessInDEV(fiber) {
	  {
	    // TODO: Should warn in effects and callbacks, too
	    var name = getComponentName(fiber.type) || 'Unknown';

	    if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
	      error('The object passed back from useOpaqueIdentifier is meant to be ' + 'passed through to attributes only. Do not read the ' + 'value directly.');

	      didWarnAboutUseOpaqueIdentifier[name] = true;
	    }
	  }
	}

	function mountOpaqueIdentifier() {
	  var makeId =  makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1)) ;

	  if (getIsHydrating()) {
	    var didUpgrade = false;
	    var fiber = currentlyRenderingFiber$1;

	    var readValue = function () {
	      if (!didUpgrade) {
	        // Only upgrade once. This works even inside the render phase because
	        // the update is added to a shared queue, which outlasts the
	        // in-progress render.
	        didUpgrade = true;

	        {
	          isUpdatingOpaqueValueInRenderPhase = true;
	          setId(makeId());
	          isUpdatingOpaqueValueInRenderPhase = false;
	          warnOnOpaqueIdentifierAccessInDEV(fiber);
	        }
	      }

	      {
	        {
	          throw Error( "The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly." );
	        }
	      }
	    };

	    var id = makeOpaqueHydratingObject(readValue);
	    var setId = mountState(id)[1];

	    if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
	      currentlyRenderingFiber$1.flags |= Update | Passive;
	      pushEffect(HasEffect | Passive$1, function () {
	        setId(makeId());
	      }, undefined, null);
	    }

	    return id;
	  } else {
	    var _id = makeId();

	    mountState(_id);
	    return _id;
	  }
	}

	function updateOpaqueIdentifier() {
	  var id = updateState()[0];
	  return id;
	}

	function rerenderOpaqueIdentifier() {
	  var id = rerenderState()[0];
	  return id;
	}

	function dispatchAction(fiber, queue, action) {
	  {
	    if (typeof arguments[3] === 'function') {
	      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
	    }
	  }

	  var eventTime = requestEventTime();
	  var lane = requestUpdateLane(fiber);
	  var update = {
	    lane: lane,
	    action: action,
	    eagerReducer: null,
	    eagerState: null,
	    next: null
	  }; // Append the update to the end of the list.

	  var pending = queue.pending;

	  if (pending === null) {
	    // This is the first update. Create a circular list.
	    update.next = update;
	  } else {
	    update.next = pending.next;
	    pending.next = update;
	  }

	  queue.pending = update;
	  var alternate = fiber.alternate;

	  if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
	    // This is a render phase update. Stash it in a lazily-created map of
	    // queue -> linked list of updates. After this render pass, we'll restart
	    // and apply the stashed updates on top of the work-in-progress hook.
	    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
	  } else {
	    if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
	      // The queue is currently empty, which means we can eagerly compute the
	      // next state before entering the render phase. If the new state is the
	      // same as the current state, we may be able to bail out entirely.
	      var lastRenderedReducer = queue.lastRenderedReducer;

	      if (lastRenderedReducer !== null) {
	        var prevDispatcher;

	        {
	          prevDispatcher = ReactCurrentDispatcher$1.current;
	          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        }

	        try {
	          var currentState = queue.lastRenderedState;
	          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
	          // it, on the update object. If the reducer hasn't changed by the
	          // time we enter the render phase, then the eager state can be used
	          // without calling the reducer again.

	          update.eagerReducer = lastRenderedReducer;
	          update.eagerState = eagerState;

	          if (objectIs(eagerState, currentState)) {
	            // Fast path. We can bail out without scheduling React to re-render.
	            // It's still possible that we'll need to rebase this update later,
	            // if the component re-renders for a different reason and by that
	            // time the reducer has changed.
	            return;
	          }
	        } catch (error) {// Suppress the error. It will throw again in the render phase.
	        } finally {
	          {
	            ReactCurrentDispatcher$1.current = prevDispatcher;
	          }
	        }
	      }
	    }

	    {
	      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
	      if ('undefined' !== typeof jest) {
	        warnIfNotScopedWithMatchingAct(fiber);
	        warnIfNotCurrentlyActingUpdatesInDev(fiber);
	      }
	    }

	    scheduleUpdateOnFiber(fiber, lane, eventTime);
	  }
	}

	var ContextOnlyDispatcher = {
	  readContext: readContext,
	  useCallback: throwInvalidHookError,
	  useContext: throwInvalidHookError,
	  useEffect: throwInvalidHookError,
	  useImperativeHandle: throwInvalidHookError,
	  useLayoutEffect: throwInvalidHookError,
	  useMemo: throwInvalidHookError,
	  useReducer: throwInvalidHookError,
	  useRef: throwInvalidHookError,
	  useState: throwInvalidHookError,
	  useDebugValue: throwInvalidHookError,
	  useDeferredValue: throwInvalidHookError,
	  useTransition: throwInvalidHookError,
	  useMutableSource: throwInvalidHookError,
	  useOpaqueIdentifier: throwInvalidHookError,
	  unstable_isNewReconciler: enableNewReconciler
	};
	var HooksDispatcherOnMountInDEV = null;
	var HooksDispatcherOnMountWithHookTypesInDEV = null;
	var HooksDispatcherOnUpdateInDEV = null;
	var HooksDispatcherOnRerenderInDEV = null;
	var InvalidNestedHooksDispatcherOnMountInDEV = null;
	var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
	var InvalidNestedHooksDispatcherOnRerenderInDEV = null;

	{
	  var warnInvalidContextAccess = function () {
	    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
	  };

	  var warnInvalidHookAccess = function () {
	    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');
	  };

	  HooksDispatcherOnMountInDEV = {
	    readContext: function (context, observedBits) {
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      mountHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      mountHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      mountHookTypesDev();
	      return mountDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      mountHookTypesDev();
	      return mountDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      mountHookTypesDev();
	      return mountTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      mountHookTypesDev();
	      return mountMutableSource(source, getSnapshot, subscribe);
	    },
	    useOpaqueIdentifier: function () {
	      currentHookNameInDev = 'useOpaqueIdentifier';
	      mountHookTypesDev();
	      return mountOpaqueIdentifier();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };
	  HooksDispatcherOnMountWithHookTypesInDEV = {
	    readContext: function (context, observedBits) {
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return mountDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return mountDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return mountTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      updateHookTypesDev();
	      return mountMutableSource(source, getSnapshot, subscribe);
	    },
	    useOpaqueIdentifier: function () {
	      currentHookNameInDev = 'useOpaqueIdentifier';
	      updateHookTypesDev();
	      return mountOpaqueIdentifier();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };
	  HooksDispatcherOnUpdateInDEV = {
	    readContext: function (context, observedBits) {
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return updateDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return updateTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      updateHookTypesDev();
	      return updateMutableSource(source, getSnapshot, subscribe);
	    },
	    useOpaqueIdentifier: function () {
	      currentHookNameInDev = 'useOpaqueIdentifier';
	      updateHookTypesDev();
	      return updateOpaqueIdentifier();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };
	  HooksDispatcherOnRerenderInDEV = {
	    readContext: function (context, observedBits) {
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

	      try {
	        return rerenderReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

	      try {
	        return rerenderState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return rerenderDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return rerenderTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      updateHookTypesDev();
	      return updateMutableSource(source, getSnapshot, subscribe);
	    },
	    useOpaqueIdentifier: function () {
	      currentHookNameInDev = 'useOpaqueIdentifier';
	      updateHookTypesDev();
	      return rerenderOpaqueIdentifier();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };
	  InvalidNestedHooksDispatcherOnMountInDEV = {
	    readContext: function (context, observedBits) {
	      warnInvalidContextAccess();
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountMutableSource(source, getSnapshot, subscribe);
	    },
	    useOpaqueIdentifier: function () {
	      currentHookNameInDev = 'useOpaqueIdentifier';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountOpaqueIdentifier();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };
	  InvalidNestedHooksDispatcherOnUpdateInDEV = {
	    readContext: function (context, observedBits) {
	      warnInvalidContextAccess();
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateMutableSource(source, getSnapshot, subscribe);
	    },
	    useOpaqueIdentifier: function () {
	      currentHookNameInDev = 'useOpaqueIdentifier';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateOpaqueIdentifier();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };
	  InvalidNestedHooksDispatcherOnRerenderInDEV = {
	    readContext: function (context, observedBits) {
	      warnInvalidContextAccess();
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return rerenderReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return rerenderState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return rerenderDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return rerenderTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateMutableSource(source, getSnapshot, subscribe);
	    },
	    useOpaqueIdentifier: function () {
	      currentHookNameInDev = 'useOpaqueIdentifier';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return rerenderOpaqueIdentifier();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };
	}

	var now$1 = Scheduler.unstable_now;
	var commitTime = 0;
	var profilerStartTime = -1;

	function getCommitTime() {
	  return commitTime;
	}

	function recordCommitTime() {

	  commitTime = now$1();
	}

	function startProfilerTimer(fiber) {

	  profilerStartTime = now$1();

	  if (fiber.actualStartTime < 0) {
	    fiber.actualStartTime = now$1();
	  }
	}

	function stopProfilerTimerIfRunning(fiber) {

	  profilerStartTime = -1;
	}

	function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

	  if (profilerStartTime >= 0) {
	    var elapsedTime = now$1() - profilerStartTime;
	    fiber.actualDuration += elapsedTime;

	    if (overrideBaseTime) {
	      fiber.selfBaseDuration = elapsedTime;
	    }

	    profilerStartTime = -1;
	  }
	}

	function transferActualDuration(fiber) {
	  // Transfer time spent rendering these children so we don't lose it
	  // after we rerender. This is used as a helper in special cases
	  // where we should count the work of multiple passes.
	  var child = fiber.child;

	  while (child) {
	    fiber.actualDuration += child.actualDuration;
	    child = child.sibling;
	  }
	}

	var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
	var didReceiveUpdate = false;
	var didWarnAboutBadClass;
	var didWarnAboutModulePatternComponent;
	var didWarnAboutContextTypeOnFunctionComponent;
	var didWarnAboutGetDerivedStateOnFunctionComponent;
	var didWarnAboutFunctionRefs;
	var didWarnAboutReassigningProps;
	var didWarnAboutRevealOrder;
	var didWarnAboutTailOptions;

	{
	  didWarnAboutBadClass = {};
	  didWarnAboutModulePatternComponent = {};
	  didWarnAboutContextTypeOnFunctionComponent = {};
	  didWarnAboutGetDerivedStateOnFunctionComponent = {};
	  didWarnAboutFunctionRefs = {};
	  didWarnAboutReassigningProps = false;
	  didWarnAboutRevealOrder = {};
	  didWarnAboutTailOptions = {};
	}

	function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
	  if (current === null) {
	    // If this is a fresh new component that hasn't been rendered yet, we
	    // won't update its child set by applying minimal side-effects. Instead,
	    // we will add them all to the child before it gets rendered. That means
	    // we can optimize this reconciliation pass by not tracking side-effects.
	    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
	  } else {
	    // If the current child is the same as the work in progress, it means that
	    // we haven't yet started any work on these children. Therefore, we use
	    // the clone algorithm to create a copy of all the current children.
	    // If we had any progressed work already, that is invalid at this point so
	    // let's throw it out.
	    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
	  }
	}

	function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
	  // This function is fork of reconcileChildren. It's used in cases where we
	  // want to reconcile without matching against the existing set. This has the
	  // effect of all current children being unmounted; even if the type and key
	  // are the same, the old child is unmounted and a new child is created.
	  //
	  // To do this, we're going to go through the reconcile algorithm twice. In
	  // the first pass, we schedule a deletion for all the current children by
	  // passing null.
	  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
	  // pass null in place of where we usually pass the current child set. This has
	  // the effect of remounting all children regardless of whether their
	  // identities match.

	  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
	}

	function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
	  // TODO: current can be non-null here even if the component
	  // hasn't yet mounted. This happens after the first render suspends.
	  // We'll need to figure out if this is fine or can cause issues.
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentName(Component));
	      }
	    }
	  }

	  var render = Component.render;
	  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

	  var nextChildren;
	  prepareToReadContext(workInProgress, renderLanes);

	  {
	    ReactCurrentOwner$1.current = workInProgress;
	    setIsRendering(true);
	    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);

	    if ( workInProgress.mode & StrictMode) {
	      disableLogs();

	      try {
	        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
	      } finally {
	        reenableLogs();
	      }
	    }

	    setIsRendering(false);
	  }

	  if (current !== null && !didReceiveUpdate) {
	    bailoutHooks(current, workInProgress, renderLanes);
	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
	  if (current === null) {
	    var type = Component.type;

	    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
	    Component.defaultProps === undefined) {
	      var resolvedType = type;

	      {
	        resolvedType = resolveFunctionForHotReloading(type);
	      } // If this is a plain function component without default props,
	      // and with only the default shallow comparison, we upgrade it
	      // to a SimpleMemoComponent to allow fast path updates.


	      workInProgress.tag = SimpleMemoComponent;
	      workInProgress.type = resolvedType;

	      {
	        validateFunctionComponentInDev(workInProgress, type);
	      }

	      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateLanes, renderLanes);
	    }

	    {
	      var innerPropTypes = type.propTypes;

	      if (innerPropTypes) {
	        // Inner memo component props aren't currently validated in createElement.
	        // We could move it there, but we'd still need this for lazy code path.
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentName(type));
	      }
	    }

	    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
	    child.ref = workInProgress.ref;
	    child.return = workInProgress;
	    workInProgress.child = child;
	    return child;
	  }

	  {
	    var _type = Component.type;
	    var _innerPropTypes = _type.propTypes;

	    if (_innerPropTypes) {
	      // Inner memo component props aren't currently validated in createElement.
	      // We could move it there, but we'd still need this for lazy code path.
	      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
	      'prop', getComponentName(_type));
	    }
	  }

	  var currentChild = current.child; // This is always exactly one child

	  if (!includesSomeLane(updateLanes, renderLanes)) {
	    // This will be the props with resolved defaultProps,
	    // unlike current.memoizedProps which will be the unresolved ones.
	    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

	    var compare = Component.compare;
	    compare = compare !== null ? compare : shallowEqual;

	    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
	      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	    }
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;
	  var newChild = createWorkInProgress(currentChild, nextProps);
	  newChild.ref = workInProgress.ref;
	  newChild.return = workInProgress;
	  workInProgress.child = newChild;
	  return newChild;
	}

	function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
	  // TODO: current can be non-null here even if the component
	  // hasn't yet mounted. This happens when the inner render suspends.
	  // We'll need to figure out if this is fine or can cause issues.
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var outerMemoType = workInProgress.elementType;

	      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
	        // We warn when you define propTypes on lazy()
	        // so let's just skip over it to find memo() outer wrapper.
	        // Inner props for memo are validated later.
	        var lazyComponent = outerMemoType;
	        var payload = lazyComponent._payload;
	        var init = lazyComponent._init;

	        try {
	          outerMemoType = init(payload);
	        } catch (x) {
	          outerMemoType = null;
	        } // Inner propTypes will be validated in the function component path.


	        var outerPropTypes = outerMemoType && outerMemoType.propTypes;

	        if (outerPropTypes) {
	          checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
	          'prop', getComponentName(outerMemoType));
	        }
	      }
	    }
	  }

	  if (current !== null) {
	    var prevProps = current.memoizedProps;

	    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.
	     workInProgress.type === current.type )) {
	      didReceiveUpdate = false;

	      if (!includesSomeLane(renderLanes, updateLanes)) {
	        // The pending lanes were cleared at the beginning of beginWork. We're
	        // about to bail out, but there might be other lanes that weren't
	        // included in the current render. Usually, the priority level of the
	        // remaining updates is accumlated during the evaluation of the
	        // component (i.e. when processing the update queue). But since since
	        // we're bailing out early *without* evaluating the component, we need
	        // to account for it here, too. Reset to the value of the current fiber.
	        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
	        // because a MemoComponent fiber does not have hooks or an update queue;
	        // rather, it wraps around an inner component, which may or may not
	        // contains hooks.
	        // TODO: Move the reset at in beginWork out of the common path so that
	        // this is no longer necessary.
	        workInProgress.lanes = current.lanes;
	        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
	        // This is a special case that only exists for legacy mode.
	        // See https://github.com/facebook/react/pull/19216.
	        didReceiveUpdate = true;
	      }
	    }
	  }

	  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
	}

	function updateOffscreenComponent(current, workInProgress, renderLanes) {
	  var nextProps = workInProgress.pendingProps;
	  var nextChildren = nextProps.children;
	  var prevState = current !== null ? current.memoizedState : null;

	  if (nextProps.mode === 'hidden' || nextProps.mode === 'unstable-defer-without-hiding') {
	    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	      // In legacy sync mode, don't defer the subtree. Render it now.
	      // TODO: Figure out what we should do in Blocking mode.
	      var nextState = {
	        baseLanes: NoLanes
	      };
	      workInProgress.memoizedState = nextState;
	      pushRenderLanes(workInProgress, renderLanes);
	    } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
	      var nextBaseLanes;

	      if (prevState !== null) {
	        var prevBaseLanes = prevState.baseLanes;
	        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
	      } else {
	        nextBaseLanes = renderLanes;
	      } // Schedule this fiber to re-render at offscreen priority. Then bailout.


	      {
	        markSpawnedWork(OffscreenLane);
	      }

	      workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
	      var _nextState = {
	        baseLanes: nextBaseLanes
	      };
	      workInProgress.memoizedState = _nextState; // We're about to bail out, but we need to push this to the stack anyway
	      // to avoid a push/pop misalignment.

	      pushRenderLanes(workInProgress, nextBaseLanes);
	      return null;
	    } else {
	      // Rendering at offscreen, so we can clear the base lanes.
	      var _nextState2 = {
	        baseLanes: NoLanes
	      };
	      workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.

	      var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
	      pushRenderLanes(workInProgress, subtreeRenderLanes);
	    }
	  } else {
	    var _subtreeRenderLanes;

	    if (prevState !== null) {
	      _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes); // Since we're not hidden anymore, reset the state

	      workInProgress.memoizedState = null;
	    } else {
	      // We weren't previously hidden, and we still aren't, so there's nothing
	      // special to do. Need to push to the stack regardless, though, to avoid
	      // a push/pop misalignment.
	      _subtreeRenderLanes = renderLanes;
	    }

	    pushRenderLanes(workInProgress, _subtreeRenderLanes);
	  }

	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	} // Note: These happen to have identical begin phases, for now. We shouldn't hold
	// ourselves to this constraint, though. If the behavior diverges, we should
	// fork the function.


	var updateLegacyHiddenComponent = updateOffscreenComponent;

	function updateFragment(current, workInProgress, renderLanes) {
	  var nextChildren = workInProgress.pendingProps;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateMode(current, workInProgress, renderLanes) {
	  var nextChildren = workInProgress.pendingProps.children;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateProfiler(current, workInProgress, renderLanes) {
	  {
	    workInProgress.flags |= Update; // Reset effect durations for the next eventual effect phase.
	    // These are reset during render to allow the DevTools commit hook a chance to read them,

	    var stateNode = workInProgress.stateNode;
	    stateNode.effectDuration = 0;
	    stateNode.passiveEffectDuration = 0;
	  }

	  var nextProps = workInProgress.pendingProps;
	  var nextChildren = nextProps.children;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function markRef(current, workInProgress) {
	  var ref = workInProgress.ref;

	  if (current === null && ref !== null || current !== null && current.ref !== ref) {
	    // Schedule a Ref effect
	    workInProgress.flags |= Ref;
	  }
	}

	function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentName(Component));
	      }
	    }
	  }

	  var context;

	  {
	    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
	    context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  var nextChildren;
	  prepareToReadContext(workInProgress, renderLanes);

	  {
	    ReactCurrentOwner$1.current = workInProgress;
	    setIsRendering(true);
	    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);

	    if ( workInProgress.mode & StrictMode) {
	      disableLogs();

	      try {
	        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
	      } finally {
	        reenableLogs();
	      }
	    }

	    setIsRendering(false);
	  }

	  if (current !== null && !didReceiveUpdate) {
	    bailoutHooks(current, workInProgress, renderLanes);
	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentName(Component));
	      }
	    }
	  } // Push context providers early to prevent context stack mismatches.
	  // During mounting we don't know the child context yet as the instance doesn't exist.
	  // We will invalidate the child context in finishClassComponent() right after rendering.


	  var hasContext;

	  if (isContextProvider(Component)) {
	    hasContext = true;
	    pushContextProvider(workInProgress);
	  } else {
	    hasContext = false;
	  }

	  prepareToReadContext(workInProgress, renderLanes);
	  var instance = workInProgress.stateNode;
	  var shouldUpdate;

	  if (instance === null) {
	    if (current !== null) {
	      // A class component without an instance only mounts if it suspended
	      // inside a non-concurrent tree, in an inconsistent state. We want to
	      // treat it like a new mount, even though an empty version of it already
	      // committed. Disconnect the alternate pointers.
	      current.alternate = null;
	      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

	      workInProgress.flags |= Placement;
	    } // In the initial pass we might need to construct the instance.


	    constructClassInstance(workInProgress, Component, nextProps);
	    mountClassInstance(workInProgress, Component, nextProps, renderLanes);
	    shouldUpdate = true;
	  } else if (current === null) {
	    // In a resume, we'll already have an instance we can reuse.
	    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
	  } else {
	    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
	  }

	  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);

	  {
	    var inst = workInProgress.stateNode;

	    if (shouldUpdate && inst.props !== nextProps) {
	      if (!didWarnAboutReassigningProps) {
	        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component');
	      }

	      didWarnAboutReassigningProps = true;
	    }
	  }

	  return nextUnitOfWork;
	}

	function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
	  // Refs should update even if shouldComponentUpdate returns false
	  markRef(current, workInProgress);
	  var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;

	  if (!shouldUpdate && !didCaptureError) {
	    // Context providers should defer to sCU for rendering
	    if (hasContext) {
	      invalidateContextProvider(workInProgress, Component, false);
	    }

	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	  }

	  var instance = workInProgress.stateNode; // Rerender

	  ReactCurrentOwner$1.current = workInProgress;
	  var nextChildren;

	  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
	    // If we captured an error, but getDerivedStateFromError is not defined,
	    // unmount all the children. componentDidCatch will schedule an update to
	    // re-render a fallback. This is temporary until we migrate everyone to
	    // the new API.
	    // TODO: Warn in a future release.
	    nextChildren = null;

	    {
	      stopProfilerTimerIfRunning();
	    }
	  } else {
	    {
	      setIsRendering(true);
	      nextChildren = instance.render();

	      if ( workInProgress.mode & StrictMode) {
	        disableLogs();

	        try {
	          instance.render();
	        } finally {
	          reenableLogs();
	        }
	      }

	      setIsRendering(false);
	    }
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;

	  if (current !== null && didCaptureError) {
	    // If we're recovering from an error, reconcile without reusing any of
	    // the existing children. Conceptually, the normal children and the children
	    // that are shown on error are two different sets, so we shouldn't reuse
	    // normal children even if their identities match.
	    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
	  } else {
	    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  } // Memoize state using the values we just used to render.
	  // TODO: Restructure so we never read values from the instance.


	  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

	  if (hasContext) {
	    invalidateContextProvider(workInProgress, Component, true);
	  }

	  return workInProgress.child;
	}

	function pushHostRootContext(workInProgress) {
	  var root = workInProgress.stateNode;

	  if (root.pendingContext) {
	    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
	  } else if (root.context) {
	    // Should always be set
	    pushTopLevelContextObject(workInProgress, root.context, false);
	  }

	  pushHostContainer(workInProgress, root.containerInfo);
	}

	function updateHostRoot(current, workInProgress, renderLanes) {
	  pushHostRootContext(workInProgress);
	  var updateQueue = workInProgress.updateQueue;

	  if (!(current !== null && updateQueue !== null)) {
	    {
	      throw Error( "If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }

	  var nextProps = workInProgress.pendingProps;
	  var prevState = workInProgress.memoizedState;
	  var prevChildren = prevState !== null ? prevState.element : null;
	  cloneUpdateQueue(current, workInProgress);
	  processUpdateQueue(workInProgress, nextProps, null, renderLanes);
	  var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
	  // being called "element".

	  var nextChildren = nextState.element;

	  if (nextChildren === prevChildren) {
	    resetHydrationState();
	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	  }

	  var root = workInProgress.stateNode;

	  if (root.hydrate && enterHydrationState(workInProgress)) {
	    // If we don't have any current children this might be the first pass.
	    // We always try to hydrate. If this isn't a hydration pass there won't
	    // be any children to hydrate which is effectively the same thing as
	    // not hydrating.
	    {
	      var mutableSourceEagerHydrationData = root.mutableSourceEagerHydrationData;

	      if (mutableSourceEagerHydrationData != null) {
	        for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
	          var mutableSource = mutableSourceEagerHydrationData[i];
	          var version = mutableSourceEagerHydrationData[i + 1];
	          setWorkInProgressVersion(mutableSource, version);
	        }
	      }
	    }

	    var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
	    workInProgress.child = child;
	    var node = child;

	    while (node) {
	      // Mark each child as hydrating. This is a fast path to know whether this
	      // tree is part of a hydrating tree. This is used to determine if a child
	      // node has fully mounted yet, and for scheduling event replaying.
	      // Conceptually this is similar to Placement in that a new subtree is
	      // inserted into the React tree here. It just happens to not need DOM
	      // mutations because it already exists.
	      node.flags = node.flags & ~Placement | Hydrating;
	      node = node.sibling;
	    }
	  } else {
	    // Otherwise reset hydration state in case we aborted and resumed another
	    // root.
	    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	    resetHydrationState();
	  }

	  return workInProgress.child;
	}

	function updateHostComponent(current, workInProgress, renderLanes) {
	  pushHostContext(workInProgress);

	  if (current === null) {
	    tryToClaimNextHydratableInstance(workInProgress);
	  }

	  var type = workInProgress.type;
	  var nextProps = workInProgress.pendingProps;
	  var prevProps = current !== null ? current.memoizedProps : null;
	  var nextChildren = nextProps.children;
	  var isDirectTextChild = shouldSetTextContent(type, nextProps);

	  if (isDirectTextChild) {
	    // We special case a direct text child of a host node. This is a common
	    // case. We won't handle it as a reified child. We will instead handle
	    // this in the host environment that also has access to this prop. That
	    // avoids allocating another HostText fiber and traversing it.
	    nextChildren = null;
	  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
	    // If we're switching from a direct text child to a normal child, or to
	    // empty, we need to schedule the text content to be reset.
	    workInProgress.flags |= ContentReset;
	  }

	  markRef(current, workInProgress);
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateHostText(current, workInProgress) {
	  if (current === null) {
	    tryToClaimNextHydratableInstance(workInProgress);
	  } // Nothing to do here. This is terminal. We'll do the completion step
	  // immediately after.


	  return null;
	}

	function mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes) {
	  if (_current !== null) {
	    // A lazy component only mounts if it suspended inside a non-
	    // concurrent tree, in an inconsistent state. We want to treat it like
	    // a new mount, even though an empty version of it already committed.
	    // Disconnect the alternate pointers.
	    _current.alternate = null;
	    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

	    workInProgress.flags |= Placement;
	  }

	  var props = workInProgress.pendingProps;
	  var lazyComponent = elementType;
	  var payload = lazyComponent._payload;
	  var init = lazyComponent._init;
	  var Component = init(payload); // Store the unwrapped component in the type.

	  workInProgress.type = Component;
	  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
	  var resolvedProps = resolveDefaultProps(Component, props);
	  var child;

	  switch (resolvedTag) {
	    case FunctionComponent:
	      {
	        {
	          validateFunctionComponentInDev(workInProgress, Component);
	          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
	        }

	        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
	        return child;
	      }

	    case ClassComponent:
	      {
	        {
	          workInProgress.type = Component = resolveClassForHotReloading(Component);
	        }

	        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
	        return child;
	      }

	    case ForwardRef:
	      {
	        {
	          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
	        }

	        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
	        return child;
	      }

	    case MemoComponent:
	      {
	        {
	          if (workInProgress.type !== workInProgress.elementType) {
	            var outerPropTypes = Component.propTypes;

	            if (outerPropTypes) {
	              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
	              'prop', getComponentName(Component));
	            }
	          }
	        }

	        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
	        updateLanes, renderLanes);
	        return child;
	      }
	  }

	  var hint = '';

	  {
	    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
	      hint = ' Did you wrap a component in React.lazy() more than once?';
	    }
	  } // This message intentionally doesn't mention ForwardRef or MemoComponent
	  // because the fact that it's a separate type of work is an
	  // implementation detail.


	  {
	    {
	      throw Error( "Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint );
	    }
	  }
	}

	function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
	  if (_current !== null) {
	    // An incomplete component only mounts if it suspended inside a non-
	    // concurrent tree, in an inconsistent state. We want to treat it like
	    // a new mount, even though an empty version of it already committed.
	    // Disconnect the alternate pointers.
	    _current.alternate = null;
	    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

	    workInProgress.flags |= Placement;
	  } // Promote the fiber to a class and try rendering again.


	  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
	  // Push context providers early to prevent context stack mismatches.
	  // During mounting we don't know the child context yet as the instance doesn't exist.
	  // We will invalidate the child context in finishClassComponent() right after rendering.

	  var hasContext;

	  if (isContextProvider(Component)) {
	    hasContext = true;
	    pushContextProvider(workInProgress);
	  } else {
	    hasContext = false;
	  }

	  prepareToReadContext(workInProgress, renderLanes);
	  constructClassInstance(workInProgress, Component, nextProps);
	  mountClassInstance(workInProgress, Component, nextProps, renderLanes);
	  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
	}

	function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
	  if (_current !== null) {
	    // An indeterminate component only mounts if it suspended inside a non-
	    // concurrent tree, in an inconsistent state. We want to treat it like
	    // a new mount, even though an empty version of it already committed.
	    // Disconnect the alternate pointers.
	    _current.alternate = null;
	    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

	    workInProgress.flags |= Placement;
	  }

	  var props = workInProgress.pendingProps;
	  var context;

	  {
	    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
	    context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  prepareToReadContext(workInProgress, renderLanes);
	  var value;

	  {
	    if (Component.prototype && typeof Component.prototype.render === 'function') {
	      var componentName = getComponentName(Component) || 'Unknown';

	      if (!didWarnAboutBadClass[componentName]) {
	        error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);

	        didWarnAboutBadClass[componentName] = true;
	      }
	    }

	    if (workInProgress.mode & StrictMode) {
	      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
	    }

	    setIsRendering(true);
	    ReactCurrentOwner$1.current = workInProgress;
	    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
	    setIsRendering(false);
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;

	  {
	    // Support for module components is deprecated and is removed behind a flag.
	    // Whether or not it would crash later, we want to show a good message in DEV first.
	    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
	      var _componentName = getComponentName(Component) || 'Unknown';

	      if (!didWarnAboutModulePatternComponent[_componentName]) {
	        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);

	        didWarnAboutModulePatternComponent[_componentName] = true;
	      }
	    }
	  }

	  if ( // Run these checks in production only if the flag is off.
	  // Eventually we'll delete this branch altogether.
	   typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
	    {
	      var _componentName2 = getComponentName(Component) || 'Unknown';

	      if (!didWarnAboutModulePatternComponent[_componentName2]) {
	        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);

	        didWarnAboutModulePatternComponent[_componentName2] = true;
	      }
	    } // Proceed under the assumption that this is a class instance


	    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

	    workInProgress.memoizedState = null;
	    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
	    // During mounting we don't know the child context yet as the instance doesn't exist.
	    // We will invalidate the child context in finishClassComponent() right after rendering.

	    var hasContext = false;

	    if (isContextProvider(Component)) {
	      hasContext = true;
	      pushContextProvider(workInProgress);
	    } else {
	      hasContext = false;
	    }

	    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
	    initializeUpdateQueue(workInProgress);
	    var getDerivedStateFromProps = Component.getDerivedStateFromProps;

	    if (typeof getDerivedStateFromProps === 'function') {
	      applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
	    }

	    adoptClassInstance(workInProgress, value);
	    mountClassInstance(workInProgress, Component, props, renderLanes);
	    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
	  } else {
	    // Proceed under the assumption that this is a function component
	    workInProgress.tag = FunctionComponent;

	    {

	      if ( workInProgress.mode & StrictMode) {
	        disableLogs();

	        try {
	          value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
	        } finally {
	          reenableLogs();
	        }
	      }
	    }

	    reconcileChildren(null, workInProgress, value, renderLanes);

	    {
	      validateFunctionComponentInDev(workInProgress, Component);
	    }

	    return workInProgress.child;
	  }
	}

	function validateFunctionComponentInDev(workInProgress, Component) {
	  {
	    if (Component) {
	      if (Component.childContextTypes) {
	        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
	      }
	    }

	    if (workInProgress.ref !== null) {
	      var info = '';
	      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

	      if (ownerName) {
	        info += '\n\nCheck the render method of `' + ownerName + '`.';
	      }

	      var warningKey = ownerName || workInProgress._debugID || '';
	      var debugSource = workInProgress._debugSource;

	      if (debugSource) {
	        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
	      }

	      if (!didWarnAboutFunctionRefs[warningKey]) {
	        didWarnAboutFunctionRefs[warningKey] = true;

	        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
	      }
	    }

	    if (typeof Component.getDerivedStateFromProps === 'function') {
	      var _componentName3 = getComponentName(Component) || 'Unknown';

	      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
	        error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);

	        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
	      }
	    }

	    if (typeof Component.contextType === 'object' && Component.contextType !== null) {
	      var _componentName4 = getComponentName(Component) || 'Unknown';

	      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
	        error('%s: Function components do not support contextType.', _componentName4);

	        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
	      }
	    }
	  }
	}

	var SUSPENDED_MARKER = {
	  dehydrated: null,
	  retryLane: NoLane
	};

	function mountSuspenseOffscreenState(renderLanes) {
	  return {
	    baseLanes: renderLanes
	  };
	}

	function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
	  return {
	    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes)
	  };
	} // TODO: Probably should inline this back


	function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
	  // If we're already showing a fallback, there are cases where we need to
	  // remain on that fallback regardless of whether the content has resolved.
	  // For example, SuspenseList coordinates when nested content appears.
	  if (current !== null) {
	    var suspenseState = current.memoizedState;

	    if (suspenseState === null) {
	      // Currently showing content. Don't hide it, even if ForceSuspenseFallack
	      // is true. More precise name might be "ForceRemainSuspenseFallback".
	      // Note: This is a factoring smell. Can't remain on a fallback if there's
	      // no fallback to remain on.
	      return false;
	    }
	  } // Not currently showing content. Consult the Suspense context.


	  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
	}

	function getRemainingWorkInPrimaryTree(current, renderLanes) {
	  // TODO: Should not remove render lanes that were pinged during this render
	  return removeLanes(current.childLanes, renderLanes);
	}

	function updateSuspenseComponent(current, workInProgress, renderLanes) {
	  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

	  {
	    if (shouldSuspend(workInProgress)) {
	      workInProgress.flags |= DidCapture;
	    }
	  }

	  var suspenseContext = suspenseStackCursor.current;
	  var showFallback = false;
	  var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;

	  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
	    // Something in this boundary's subtree already suspended. Switch to
	    // rendering the fallback children.
	    showFallback = true;
	    workInProgress.flags &= ~DidCapture;
	  } else {
	    // Attempting the main content
	    if (current === null || current.memoizedState !== null) {
	      // This is a new mount or this boundary is already showing a fallback state.
	      // Mark this subtree context as having at least one invisible parent that could
	      // handle the fallback state.
	      // Boundaries without fallbacks or should be avoided are not considered since
	      // they cannot handle preferred fallback states.
	      if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
	        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
	      }
	    }
	  }

	  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	  pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
	  // boundary's children. This involves some custom reconcilation logic. Two
	  // main reasons this is so complicated.
	  //
	  // First, Legacy Mode has different semantics for backwards compatibility. The
	  // primary tree will commit in an inconsistent state, so when we do the
	  // second pass to render the fallback, we do some exceedingly, uh, clever
	  // hacks to make that not totally break. Like transferring effects and
	  // deletions from hidden tree. In Concurrent Mode, it's much simpler,
	  // because we bailout on the primary tree completely and leave it in its old
	  // state, no effects. Same as what we do for Offscreen (except that
	  // Offscreen doesn't have the first render pass).
	  //
	  // Second is hydration. During hydration, the Suspense fiber has a slightly
	  // different layout, where the child points to a dehydrated fragment, which
	  // contains the DOM rendered by the server.
	  //
	  // Third, even if you set all that aside, Suspense is like error boundaries in
	  // that we first we try to render one tree, and if that fails, we render again
	  // and switch to a different tree. Like a try/catch block. So we have to track
	  // which branch we're currently rendering. Ideally we would model this using
	  // a stack.

	  if (current === null) {
	    // Initial mount
	    // If we're currently hydrating, try to hydrate this boundary.
	    // But only if this has a fallback.
	    if (nextProps.fallback !== undefined) {
	      tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
	    }

	    var nextPrimaryChildren = nextProps.children;
	    var nextFallbackChildren = nextProps.fallback;

	    if (showFallback) {
	      var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
	      var primaryChildFragment = workInProgress.child;
	      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
	      workInProgress.memoizedState = SUSPENDED_MARKER;
	      return fallbackFragment;
	    } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {
	      // This is a CPU-bound tree. Skip this tree and show a placeholder to
	      // unblock the surrounding content. Then immediately retry after the
	      // initial commit.
	      var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);

	      var _primaryChildFragment = workInProgress.child;
	      _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
	      workInProgress.memoizedState = SUSPENDED_MARKER; // Since nothing actually suspended, there will nothing to ping this to
	      // get it started back up to attempt the next item. While in terms of
	      // priority this work has the same priority as this current render, it's
	      // not part of the same transition once the transition has committed. If
	      // it's sync, we still want to yield so that it can be painted.
	      // Conceptually, this is really the same as pinging. We can use any
	      // RetryLane even if it's the one currently rendering since we're leaving
	      // it behind on this node.

	      workInProgress.lanes = SomeRetryLane;

	      {
	        markSpawnedWork(SomeRetryLane);
	      }

	      return _fallbackFragment;
	    } else {
	      return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes);
	    }
	  } else {
	    // This is an update.
	    // If the current fiber has a SuspenseState, that means it's already showing
	    // a fallback.
	    var prevState = current.memoizedState;

	    if (prevState !== null) {

	      if (showFallback) {
	        var _nextFallbackChildren2 = nextProps.fallback;
	        var _nextPrimaryChildren2 = nextProps.children;

	        var _fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes);

	        var _primaryChildFragment3 = workInProgress.child;
	        var prevOffscreenState = current.child.memoizedState;
	        _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
	        _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
	        workInProgress.memoizedState = SUSPENDED_MARKER;
	        return _fallbackChildFragment;
	      } else {
	        var _nextPrimaryChildren3 = nextProps.children;

	        var _primaryChildFragment4 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren3, renderLanes);

	        workInProgress.memoizedState = null;
	        return _primaryChildFragment4;
	      }
	    } else {
	      // The current tree is not already showing a fallback.
	      if (showFallback) {
	        // Timed out.
	        var _nextFallbackChildren3 = nextProps.fallback;
	        var _nextPrimaryChildren4 = nextProps.children;

	        var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes);

	        var _primaryChildFragment5 = workInProgress.child;
	        var _prevOffscreenState = current.child.memoizedState;
	        _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes);
	        _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes); // Skip the primary children, and continue working on the
	        // fallback children.

	        workInProgress.memoizedState = SUSPENDED_MARKER;
	        return _fallbackChildFragment2;
	      } else {
	        // Still haven't timed out. Continue rendering the children, like we
	        // normally do.
	        var _nextPrimaryChildren5 = nextProps.children;

	        var _primaryChildFragment6 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren5, renderLanes);

	        workInProgress.memoizedState = null;
	        return _primaryChildFragment6;
	      }
	    }
	  }
	}

	function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
	  var mode = workInProgress.mode;
	  var primaryChildProps = {
	    mode: 'visible',
	    children: primaryChildren
	  };
	  var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes, null);
	  primaryChildFragment.return = workInProgress;
	  workInProgress.child = primaryChildFragment;
	  return primaryChildFragment;
	}

	function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
	  var mode = workInProgress.mode;
	  var progressedPrimaryFragment = workInProgress.child;
	  var primaryChildProps = {
	    mode: 'hidden',
	    children: primaryChildren
	  };
	  var primaryChildFragment;
	  var fallbackChildFragment;

	  if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
	    // In legacy mode, we commit the primary tree as if it successfully
	    // completed, even though it's in an inconsistent state.
	    primaryChildFragment = progressedPrimaryFragment;
	    primaryChildFragment.childLanes = NoLanes;
	    primaryChildFragment.pendingProps = primaryChildProps;

	    if ( workInProgress.mode & ProfileMode) {
	      // Reset the durations from the first pass so they aren't included in the
	      // final amounts. This seems counterintuitive, since we're intentionally
	      // not measuring part of the render phase, but this makes it match what we
	      // do in Concurrent Mode.
	      primaryChildFragment.actualDuration = 0;
	      primaryChildFragment.actualStartTime = -1;
	      primaryChildFragment.selfBaseDuration = 0;
	      primaryChildFragment.treeBaseDuration = 0;
	    }

	    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
	  } else {
	    primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
	    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
	  }

	  primaryChildFragment.return = workInProgress;
	  fallbackChildFragment.return = workInProgress;
	  primaryChildFragment.sibling = fallbackChildFragment;
	  workInProgress.child = primaryChildFragment;
	  return fallbackChildFragment;
	}

	function createWorkInProgressOffscreenFiber(current, offscreenProps) {
	  // The props argument to `createWorkInProgress` is `any` typed, so we use this
	  // wrapper function to constrain it.
	  return createWorkInProgress(current, offscreenProps);
	}

	function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
	  var currentPrimaryChildFragment = current.child;
	  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
	  var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
	    mode: 'visible',
	    children: primaryChildren
	  });

	  if ((workInProgress.mode & BlockingMode) === NoMode) {
	    primaryChildFragment.lanes = renderLanes;
	  }

	  primaryChildFragment.return = workInProgress;
	  primaryChildFragment.sibling = null;

	  if (currentFallbackChildFragment !== null) {
	    // Delete the fallback child fragment
	    currentFallbackChildFragment.nextEffect = null;
	    currentFallbackChildFragment.flags = Deletion;
	    workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;
	  }

	  workInProgress.child = primaryChildFragment;
	  return primaryChildFragment;
	}

	function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
	  var mode = workInProgress.mode;
	  var currentPrimaryChildFragment = current.child;
	  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
	  var primaryChildProps = {
	    mode: 'hidden',
	    children: primaryChildren
	  };
	  var primaryChildFragment;

	  if ( // In legacy mode, we commit the primary tree as if it successfully
	  // completed, even though it's in an inconsistent state.
	  (mode & BlockingMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
	  // already cloned. In legacy mode, the only case where this isn't true is
	  // when DevTools forces us to display a fallback; we skip the first render
	  // pass entirely and go straight to rendering the fallback. (In Concurrent
	  // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
	  // only codepath.)
	  workInProgress.child !== currentPrimaryChildFragment) {
	    var progressedPrimaryFragment = workInProgress.child;
	    primaryChildFragment = progressedPrimaryFragment;
	    primaryChildFragment.childLanes = NoLanes;
	    primaryChildFragment.pendingProps = primaryChildProps;

	    if ( workInProgress.mode & ProfileMode) {
	      // Reset the durations from the first pass so they aren't included in the
	      // final amounts. This seems counterintuitive, since we're intentionally
	      // not measuring part of the render phase, but this makes it match what we
	      // do in Concurrent Mode.
	      primaryChildFragment.actualDuration = 0;
	      primaryChildFragment.actualStartTime = -1;
	      primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
	      primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
	    } // The fallback fiber was added as a deletion effect during the first pass.
	    // However, since we're going to remain on the fallback, we no longer want
	    // to delete it. So we need to remove it from the list. Deletions are stored
	    // on the same list as effects. We want to keep the effects from the primary
	    // tree. So we copy the primary child fragment's effect list, which does not
	    // include the fallback deletion effect.


	    var progressedLastEffect = primaryChildFragment.lastEffect;

	    if (progressedLastEffect !== null) {
	      workInProgress.firstEffect = primaryChildFragment.firstEffect;
	      workInProgress.lastEffect = progressedLastEffect;
	      progressedLastEffect.nextEffect = null;
	    } else {
	      // TODO: Reset this somewhere else? Lol legacy mode is so weird.
	      workInProgress.firstEffect = workInProgress.lastEffect = null;
	    }
	  } else {
	    primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
	  }

	  var fallbackChildFragment;

	  if (currentFallbackChildFragment !== null) {
	    fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
	  } else {
	    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
	    // mounted but this is a new fiber.

	    fallbackChildFragment.flags |= Placement;
	  }

	  fallbackChildFragment.return = workInProgress;
	  primaryChildFragment.return = workInProgress;
	  primaryChildFragment.sibling = fallbackChildFragment;
	  workInProgress.child = primaryChildFragment;
	  return fallbackChildFragment;
	}

	function scheduleWorkOnFiber(fiber, renderLanes) {
	  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
	  var alternate = fiber.alternate;

	  if (alternate !== null) {
	    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
	  }

	  scheduleWorkOnParentPath(fiber.return, renderLanes);
	}

	function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
	  // Mark any Suspense boundaries with fallbacks as having work to do.
	  // If they were previously forced into fallbacks, they may now be able
	  // to unblock.
	  var node = firstChild;

	  while (node !== null) {
	    if (node.tag === SuspenseComponent) {
	      var state = node.memoizedState;

	      if (state !== null) {
	        scheduleWorkOnFiber(node, renderLanes);
	      }
	    } else if (node.tag === SuspenseListComponent) {
	      // If the tail is hidden there might not be an Suspense boundaries
	      // to schedule work on. In this case we have to schedule it on the
	      // list itself.
	      // We don't have to traverse to the children of the list since
	      // the list will propagate the change when it rerenders.
	      scheduleWorkOnFiber(node, renderLanes);
	    } else if (node.child !== null) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === workInProgress) {
	      return;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === workInProgress) {
	        return;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function findLastContentRow(firstChild) {
	  // This is going to find the last row among these children that is already
	  // showing content on the screen, as opposed to being in fallback state or
	  // new. If a row has multiple Suspense boundaries, any of them being in the
	  // fallback state, counts as the whole row being in a fallback state.
	  // Note that the "rows" will be workInProgress, but any nested children
	  // will still be current since we haven't rendered them yet. The mounted
	  // order may not be the same as the new order. We use the new order.
	  var row = firstChild;
	  var lastContentRow = null;

	  while (row !== null) {
	    var currentRow = row.alternate; // New rows can't be content rows.

	    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
	      lastContentRow = row;
	    }

	    row = row.sibling;
	  }

	  return lastContentRow;
	}

	function validateRevealOrder(revealOrder) {
	  {
	    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
	      didWarnAboutRevealOrder[revealOrder] = true;

	      if (typeof revealOrder === 'string') {
	        switch (revealOrder.toLowerCase()) {
	          case 'together':
	          case 'forwards':
	          case 'backwards':
	            {
	              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());

	              break;
	            }

	          case 'forward':
	          case 'backward':
	            {
	              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());

	              break;
	            }

	          default:
	            error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);

	            break;
	        }
	      } else {
	        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
	      }
	    }
	  }
	}

	function validateTailOptions(tailMode, revealOrder) {
	  {
	    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
	      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
	        didWarnAboutTailOptions[tailMode] = true;

	        error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
	      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
	        didWarnAboutTailOptions[tailMode] = true;

	        error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
	      }
	    }
	  }
	}

	function validateSuspenseListNestedChild(childSlot, index) {
	  {
	    var isArray = Array.isArray(childSlot);
	    var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';

	    if (isArray || isIterable) {
	      var type = isArray ? 'array' : 'iterable';

	      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);

	      return false;
	    }
	  }

	  return true;
	}

	function validateSuspenseListChildren(children, revealOrder) {
	  {
	    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
	      if (Array.isArray(children)) {
	        for (var i = 0; i < children.length; i++) {
	          if (!validateSuspenseListNestedChild(children[i], i)) {
	            return;
	          }
	        }
	      } else {
	        var iteratorFn = getIteratorFn(children);

	        if (typeof iteratorFn === 'function') {
	          var childrenIterator = iteratorFn.call(children);

	          if (childrenIterator) {
	            var step = childrenIterator.next();
	            var _i = 0;

	            for (; !step.done; step = childrenIterator.next()) {
	              if (!validateSuspenseListNestedChild(step.value, _i)) {
	                return;
	              }

	              _i++;
	            }
	          }
	        } else {
	          error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
	        }
	      }
	    }
	  }
	}

	function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
	  var renderState = workInProgress.memoizedState;

	  if (renderState === null) {
	    workInProgress.memoizedState = {
	      isBackwards: isBackwards,
	      rendering: null,
	      renderingStartTime: 0,
	      last: lastContentRow,
	      tail: tail,
	      tailMode: tailMode,
	      lastEffect: lastEffectBeforeRendering
	    };
	  } else {
	    // We can reuse the existing object from previous renders.
	    renderState.isBackwards = isBackwards;
	    renderState.rendering = null;
	    renderState.renderingStartTime = 0;
	    renderState.last = lastContentRow;
	    renderState.tail = tail;
	    renderState.tailMode = tailMode;
	    renderState.lastEffect = lastEffectBeforeRendering;
	  }
	} // This can end up rendering this component multiple passes.
	// The first pass splits the children fibers into two sets. A head and tail.
	// We first render the head. If anything is in fallback state, we do another
	// pass through beginWork to rerender all children (including the tail) with
	// the force suspend context. If the first render didn't have anything in
	// in fallback state. Then we render each row in the tail one-by-one.
	// That happens in the completeWork phase without going back to beginWork.


	function updateSuspenseListComponent(current, workInProgress, renderLanes) {
	  var nextProps = workInProgress.pendingProps;
	  var revealOrder = nextProps.revealOrder;
	  var tailMode = nextProps.tail;
	  var newChildren = nextProps.children;
	  validateRevealOrder(revealOrder);
	  validateTailOptions(tailMode, revealOrder);
	  validateSuspenseListChildren(newChildren, revealOrder);
	  reconcileChildren(current, workInProgress, newChildren, renderLanes);
	  var suspenseContext = suspenseStackCursor.current;
	  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

	  if (shouldForceFallback) {
	    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
	    workInProgress.flags |= DidCapture;
	  } else {
	    var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;

	    if (didSuspendBefore) {
	      // If we previously forced a fallback, we need to schedule work
	      // on any nested boundaries to let them know to try to render
	      // again. This is the same as context updating.
	      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
	    }

	    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	  }

	  pushSuspenseContext(workInProgress, suspenseContext);

	  if ((workInProgress.mode & BlockingMode) === NoMode) {
	    // In legacy mode, SuspenseList doesn't work so we just
	    // use make it a noop by treating it as the default revealOrder.
	    workInProgress.memoizedState = null;
	  } else {
	    switch (revealOrder) {
	      case 'forwards':
	        {
	          var lastContentRow = findLastContentRow(workInProgress.child);
	          var tail;

	          if (lastContentRow === null) {
	            // The whole list is part of the tail.
	            // TODO: We could fast path by just rendering the tail now.
	            tail = workInProgress.child;
	            workInProgress.child = null;
	          } else {
	            // Disconnect the tail rows after the content row.
	            // We're going to render them separately later.
	            tail = lastContentRow.sibling;
	            lastContentRow.sibling = null;
	          }

	          initSuspenseListRenderState(workInProgress, false, // isBackwards
	          tail, lastContentRow, tailMode, workInProgress.lastEffect);
	          break;
	        }

	      case 'backwards':
	        {
	          // We're going to find the first row that has existing content.
	          // At the same time we're going to reverse the list of everything
	          // we pass in the meantime. That's going to be our tail in reverse
	          // order.
	          var _tail = null;
	          var row = workInProgress.child;
	          workInProgress.child = null;

	          while (row !== null) {
	            var currentRow = row.alternate; // New rows can't be content rows.

	            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
	              // This is the beginning of the main content.
	              workInProgress.child = row;
	              break;
	            }

	            var nextRow = row.sibling;
	            row.sibling = _tail;
	            _tail = row;
	            row = nextRow;
	          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


	          initSuspenseListRenderState(workInProgress, true, // isBackwards
	          _tail, null, // last
	          tailMode, workInProgress.lastEffect);
	          break;
	        }

	      case 'together':
	        {
	          initSuspenseListRenderState(workInProgress, false, // isBackwards
	          null, // tail
	          null, // last
	          undefined, workInProgress.lastEffect);
	          break;
	        }

	      default:
	        {
	          // The default reveal order is the same as not having
	          // a boundary.
	          workInProgress.memoizedState = null;
	        }
	    }
	  }

	  return workInProgress.child;
	}

	function updatePortalComponent(current, workInProgress, renderLanes) {
	  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	  var nextChildren = workInProgress.pendingProps;

	  if (current === null) {
	    // Portals are special because we don't append the children during mount
	    // but at commit. Therefore we need to track insertions which the normal
	    // flow doesn't do during mount. This doesn't happen at the root because
	    // the root always starts with a "current" with a null child.
	    // TODO: Consider unifying this with how the root works.
	    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
	  } else {
	    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  }

	  return workInProgress.child;
	}

	var hasWarnedAboutUsingNoValuePropOnContextProvider = false;

	function updateContextProvider(current, workInProgress, renderLanes) {
	  var providerType = workInProgress.type;
	  var context = providerType._context;
	  var newProps = workInProgress.pendingProps;
	  var oldProps = workInProgress.memoizedProps;
	  var newValue = newProps.value;

	  {
	    if (!('value' in newProps)) {
	      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
	        hasWarnedAboutUsingNoValuePropOnContextProvider = true;

	        error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
	      }
	    }

	    var providerPropTypes = workInProgress.type.propTypes;

	    if (providerPropTypes) {
	      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
	    }
	  }

	  pushProvider(workInProgress, newValue);

	  if (oldProps !== null) {
	    var oldValue = oldProps.value;
	    var changedBits = calculateChangedBits(context, newValue, oldValue);

	    if (changedBits === 0) {
	      // No change. Bailout early if children are the same.
	      if (oldProps.children === newProps.children && !hasContextChanged()) {
	        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	      }
	    } else {
	      // The context value changed. Search for matching consumers and schedule
	      // them to update.
	      propagateContextChange(workInProgress, context, changedBits, renderLanes);
	    }
	  }

	  var newChildren = newProps.children;
	  reconcileChildren(current, workInProgress, newChildren, renderLanes);
	  return workInProgress.child;
	}

	var hasWarnedAboutUsingContextAsConsumer = false;

	function updateContextConsumer(current, workInProgress, renderLanes) {
	  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
	  // DEV mode, we create a separate object for Context.Consumer that acts
	  // like a proxy to Context. This proxy object adds unnecessary code in PROD
	  // so we use the old behaviour (Context.Consumer references Context) to
	  // reduce size and overhead. The separate object references context via
	  // a property called "_context", which also gives us the ability to check
	  // in DEV mode if this property exists or not and warn if it does not.

	  {
	    if (context._context === undefined) {
	      // This may be because it's a Context (rather than a Consumer).
	      // Or it may be because it's older React where they're the same thing.
	      // We only want to warn if we're sure it's a new React.
	      if (context !== context.Consumer) {
	        if (!hasWarnedAboutUsingContextAsConsumer) {
	          hasWarnedAboutUsingContextAsConsumer = true;

	          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
	        }
	      }
	    } else {
	      context = context._context;
	    }
	  }

	  var newProps = workInProgress.pendingProps;
	  var render = newProps.children;

	  {
	    if (typeof render !== 'function') {
	      error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
	    }
	  }

	  prepareToReadContext(workInProgress, renderLanes);
	  var newValue = readContext(context, newProps.unstable_observedBits);
	  var newChildren;

	  {
	    ReactCurrentOwner$1.current = workInProgress;
	    setIsRendering(true);
	    newChildren = render(newValue);
	    setIsRendering(false);
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;
	  reconcileChildren(current, workInProgress, newChildren, renderLanes);
	  return workInProgress.child;
	}

	function markWorkInProgressReceivedUpdate() {
	  didReceiveUpdate = true;
	}

	function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
	  if (current !== null) {
	    // Reuse previous dependencies
	    workInProgress.dependencies = current.dependencies;
	  }

	  {
	    // Don't update "base" render times for bailouts.
	    stopProfilerTimerIfRunning();
	  }

	  markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.

	  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {
	    // The children don't have any work either. We can skip them.
	    // TODO: Once we add back resuming, we should check if the children are
	    // a work-in-progress set. If so, we need to transfer their effects.
	    return null;
	  } else {
	    // This fiber doesn't have work, but its subtree does. Clone the child
	    // fibers and continue.
	    cloneChildFibers(current, workInProgress);
	    return workInProgress.child;
	  }
	}

	function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
	  {
	    var returnFiber = oldWorkInProgress.return;

	    if (returnFiber === null) {
	      throw new Error('Cannot swap the root fiber.');
	    } // Disconnect from the old current.
	    // It will get deleted.


	    current.alternate = null;
	    oldWorkInProgress.alternate = null; // Connect to the new tree.

	    newWorkInProgress.index = oldWorkInProgress.index;
	    newWorkInProgress.sibling = oldWorkInProgress.sibling;
	    newWorkInProgress.return = oldWorkInProgress.return;
	    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

	    if (oldWorkInProgress === returnFiber.child) {
	      returnFiber.child = newWorkInProgress;
	    } else {
	      var prevSibling = returnFiber.child;

	      if (prevSibling === null) {
	        throw new Error('Expected parent to have a child.');
	      }

	      while (prevSibling.sibling !== oldWorkInProgress) {
	        prevSibling = prevSibling.sibling;

	        if (prevSibling === null) {
	          throw new Error('Expected to find the previous sibling.');
	        }
	      }

	      prevSibling.sibling = newWorkInProgress;
	    } // Delete the old fiber and place the new one.
	    // Since the old fiber is disconnected, we have to schedule it manually.


	    var last = returnFiber.lastEffect;

	    if (last !== null) {
	      last.nextEffect = current;
	      returnFiber.lastEffect = current;
	    } else {
	      returnFiber.firstEffect = returnFiber.lastEffect = current;
	    }

	    current.nextEffect = null;
	    current.flags = Deletion;
	    newWorkInProgress.flags |= Placement; // Restart work from the new fiber.

	    return newWorkInProgress;
	  }
	}

	function beginWork(current, workInProgress, renderLanes) {
	  var updateLanes = workInProgress.lanes;

	  {
	    if (workInProgress._debugNeedsRemount && current !== null) {
	      // This will restart the begin phase with a new fiber.
	      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
	    }
	  }

	  if (current !== null) {
	    var oldProps = current.memoizedProps;
	    var newProps = workInProgress.pendingProps;

	    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
	     workInProgress.type !== current.type )) {
	      // If props or context changed, mark the fiber as having performed work.
	      // This may be unset if the props are determined to be equal later (memo).
	      didReceiveUpdate = true;
	    } else if (!includesSomeLane(renderLanes, updateLanes)) {
	      didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
	      // the begin phase. There's still some bookkeeping we that needs to be done
	      // in this optimized path, mostly pushing stuff onto the stack.

	      switch (workInProgress.tag) {
	        case HostRoot:
	          pushHostRootContext(workInProgress);
	          resetHydrationState();
	          break;

	        case HostComponent:
	          pushHostContext(workInProgress);
	          break;

	        case ClassComponent:
	          {
	            var Component = workInProgress.type;

	            if (isContextProvider(Component)) {
	              pushContextProvider(workInProgress);
	            }

	            break;
	          }

	        case HostPortal:
	          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	          break;

	        case ContextProvider:
	          {
	            var newValue = workInProgress.memoizedProps.value;
	            pushProvider(workInProgress, newValue);
	            break;
	          }

	        case Profiler:
	          {
	            // Profiler should only call onRender when one of its descendants actually rendered.
	            var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

	            if (hasChildWork) {
	              workInProgress.flags |= Update;
	            } // Reset effect durations for the next eventual effect phase.
	            // These are reset during render to allow the DevTools commit hook a chance to read them,


	            var stateNode = workInProgress.stateNode;
	            stateNode.effectDuration = 0;
	            stateNode.passiveEffectDuration = 0;
	          }

	          break;

	        case SuspenseComponent:
	          {
	            var state = workInProgress.memoizedState;

	            if (state !== null) {
	              // whether to retry the primary children, or to skip over it and
	              // go straight to the fallback. Check the priority of the primary
	              // child fragment.


	              var primaryChildFragment = workInProgress.child;
	              var primaryChildLanes = primaryChildFragment.childLanes;

	              if (includesSomeLane(renderLanes, primaryChildLanes)) {
	                // The primary children have pending work. Use the normal path
	                // to attempt to render the primary children again.
	                return updateSuspenseComponent(current, workInProgress, renderLanes);
	              } else {
	                // The primary child fragment does not have pending work marked
	                // on it
	                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
	                // priority. Bailout.

	                var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);

	                if (child !== null) {
	                  // The fallback children have pending work. Skip over the
	                  // primary children and work on the fallback.
	                  return child.sibling;
	                } else {
	                  return null;
	                }
	              }
	            } else {
	              pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
	            }

	            break;
	          }

	        case SuspenseListComponent:
	          {
	            var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;

	            var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

	            if (didSuspendBefore) {
	              if (_hasChildWork) {
	                // If something was in fallback state last time, and we have all the
	                // same children then we're still in progressive loading state.
	                // Something might get unblocked by state updates or retries in the
	                // tree which will affect the tail. So we need to use the normal
	                // path to compute the correct tail.
	                return updateSuspenseListComponent(current, workInProgress, renderLanes);
	              } // If none of the children had any work, that means that none of
	              // them got retried so they'll still be blocked in the same way
	              // as before. We can fast bail out.


	              workInProgress.flags |= DidCapture;
	            } // If nothing suspended before and we're rendering the same children,
	            // then the tail doesn't matter. Anything new that suspends will work
	            // in the "together" mode, so we can continue from the state we had.


	            var renderState = workInProgress.memoizedState;

	            if (renderState !== null) {
	              // Reset to the "together" mode in case we've started a different
	              // update in the past but didn't complete it.
	              renderState.rendering = null;
	              renderState.tail = null;
	              renderState.lastEffect = null;
	            }

	            pushSuspenseContext(workInProgress, suspenseStackCursor.current);

	            if (_hasChildWork) {
	              break;
	            } else {
	              // If none of the children had any work, that means that none of
	              // them got retried so they'll still be blocked in the same way
	              // as before. We can fast bail out.
	              return null;
	            }
	          }

	        case OffscreenComponent:
	        case LegacyHiddenComponent:
	          {
	            // Need to check if the tree still needs to be deferred. This is
	            // almost identical to the logic used in the normal update path,
	            // so we'll just enter that. The only difference is we'll bail out
	            // at the next level instead of this one, because the child props
	            // have not changed. Which is fine.
	            // TODO: Probably should refactor `beginWork` to split the bailout
	            // path from the normal path. I'm tempted to do a labeled break here
	            // but I won't :)
	            workInProgress.lanes = NoLanes;
	            return updateOffscreenComponent(current, workInProgress, renderLanes);
	          }
	      }

	      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	    } else {
	      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
	        // This is a special case that only exists for legacy mode.
	        // See https://github.com/facebook/react/pull/19216.
	        didReceiveUpdate = true;
	      } else {
	        // An update was scheduled on this fiber, but there are no new props
	        // nor legacy context. Set this to false. If an update queue or context
	        // consumer produces a changed value, it will set this to true. Otherwise,
	        // the component will assume the children have not changed and bail out.
	        didReceiveUpdate = false;
	      }
	    }
	  } else {
	    didReceiveUpdate = false;
	  } // Before entering the begin phase, clear pending update priority.
	  // TODO: This assumes that we're about to evaluate the component and process
	  // the update queue. However, there's an exception: SimpleMemoComponent
	  // sometimes bails out later in the begin phase. This indicates that we should
	  // move this assignment out of the common path and into each branch.


	  workInProgress.lanes = NoLanes;

	  switch (workInProgress.tag) {
	    case IndeterminateComponent:
	      {
	        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
	      }

	    case LazyComponent:
	      {
	        var elementType = workInProgress.elementType;
	        return mountLazyComponent(current, workInProgress, elementType, updateLanes, renderLanes);
	      }

	    case FunctionComponent:
	      {
	        var _Component = workInProgress.type;
	        var unresolvedProps = workInProgress.pendingProps;
	        var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
	        return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderLanes);
	      }

	    case ClassComponent:
	      {
	        var _Component2 = workInProgress.type;
	        var _unresolvedProps = workInProgress.pendingProps;

	        var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

	        return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderLanes);
	      }

	    case HostRoot:
	      return updateHostRoot(current, workInProgress, renderLanes);

	    case HostComponent:
	      return updateHostComponent(current, workInProgress, renderLanes);

	    case HostText:
	      return updateHostText(current, workInProgress);

	    case SuspenseComponent:
	      return updateSuspenseComponent(current, workInProgress, renderLanes);

	    case HostPortal:
	      return updatePortalComponent(current, workInProgress, renderLanes);

	    case ForwardRef:
	      {
	        var type = workInProgress.type;
	        var _unresolvedProps2 = workInProgress.pendingProps;

	        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

	        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
	      }

	    case Fragment:
	      return updateFragment(current, workInProgress, renderLanes);

	    case Mode:
	      return updateMode(current, workInProgress, renderLanes);

	    case Profiler:
	      return updateProfiler(current, workInProgress, renderLanes);

	    case ContextProvider:
	      return updateContextProvider(current, workInProgress, renderLanes);

	    case ContextConsumer:
	      return updateContextConsumer(current, workInProgress, renderLanes);

	    case MemoComponent:
	      {
	        var _type2 = workInProgress.type;
	        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

	        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

	        {
	          if (workInProgress.type !== workInProgress.elementType) {
	            var outerPropTypes = _type2.propTypes;

	            if (outerPropTypes) {
	              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
	              'prop', getComponentName(_type2));
	            }
	          }
	        }

	        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
	        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateLanes, renderLanes);
	      }

	    case SimpleMemoComponent:
	      {
	        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateLanes, renderLanes);
	      }

	    case IncompleteClassComponent:
	      {
	        var _Component3 = workInProgress.type;
	        var _unresolvedProps4 = workInProgress.pendingProps;

	        var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

	        return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderLanes);
	      }

	    case SuspenseListComponent:
	      {
	        return updateSuspenseListComponent(current, workInProgress, renderLanes);
	      }

	    case FundamentalComponent:
	      {

	        break;
	      }

	    case ScopeComponent:
	      {

	        break;
	      }

	    case Block:
	      {

	        break;
	      }

	    case OffscreenComponent:
	      {
	        return updateOffscreenComponent(current, workInProgress, renderLanes);
	      }

	    case LegacyHiddenComponent:
	      {
	        return updateLegacyHiddenComponent(current, workInProgress, renderLanes);
	      }
	  }

	  {
	    {
	      throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }
	}

	function markUpdate(workInProgress) {
	  // Tag the fiber with an update effect. This turns a Placement into
	  // a PlacementAndUpdate.
	  workInProgress.flags |= Update;
	}

	function markRef$1(workInProgress) {
	  workInProgress.flags |= Ref;
	}

	var appendAllChildren;
	var updateHostContainer;
	var updateHostComponent$1;
	var updateHostText$1;

	{
	  // Mutation mode
	  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
	    // We only have the top Fiber that was created but we need recurse down its
	    // children to find all the terminal nodes.
	    var node = workInProgress.child;

	    while (node !== null) {
	      if (node.tag === HostComponent || node.tag === HostText) {
	        appendInitialChild(parent, node.stateNode);
	      } else if (node.tag === HostPortal) ; else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === workInProgress) {
	        return;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === workInProgress) {
	          return;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  };

	  updateHostContainer = function (workInProgress) {// Noop
	  };

	  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
	    // If we have an alternate, that means this is an update and we need to
	    // schedule a side-effect to do the updates.
	    var oldProps = current.memoizedProps;

	    if (oldProps === newProps) {
	      // In mutation mode, this is sufficient for a bailout because
	      // we won't touch this node even if children changed.
	      return;
	    } // If we get updated because one of our children updated, we don't
	    // have newProps so we'll have to reuse them.
	    // TODO: Split the update API as separate for the props vs. children.
	    // Even better would be if children weren't special cased at all tho.


	    var instance = workInProgress.stateNode;
	    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
	    // component is hitting the resume path. Figure out why. Possibly
	    // related to `hidden`.

	    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

	    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
	    // is a new ref we mark this as an update. All the work is done in commitWork.

	    if (updatePayload) {
	      markUpdate(workInProgress);
	    }
	  };

	  updateHostText$1 = function (current, workInProgress, oldText, newText) {
	    // If the text differs, mark it as an update. All the work in done in commitWork.
	    if (oldText !== newText) {
	      markUpdate(workInProgress);
	    }
	  };
	}

	function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
	  if (getIsHydrating()) {
	    // If we're hydrating, we should consume as many items as we can
	    // so we don't leave any behind.
	    return;
	  }

	  switch (renderState.tailMode) {
	    case 'hidden':
	      {
	        // Any insertions at the end of the tail list after this point
	        // should be invisible. If there are already mounted boundaries
	        // anything before them are not considered for collapsing.
	        // Therefore we need to go through the whole tail to find if
	        // there are any.
	        var tailNode = renderState.tail;
	        var lastTailNode = null;

	        while (tailNode !== null) {
	          if (tailNode.alternate !== null) {
	            lastTailNode = tailNode;
	          }

	          tailNode = tailNode.sibling;
	        } // Next we're simply going to delete all insertions after the
	        // last rendered item.


	        if (lastTailNode === null) {
	          // All remaining items in the tail are insertions.
	          renderState.tail = null;
	        } else {
	          // Detach the insertion after the last node that was already
	          // inserted.
	          lastTailNode.sibling = null;
	        }

	        break;
	      }

	    case 'collapsed':
	      {
	        // Any insertions at the end of the tail list after this point
	        // should be invisible. If there are already mounted boundaries
	        // anything before them are not considered for collapsing.
	        // Therefore we need to go through the whole tail to find if
	        // there are any.
	        var _tailNode = renderState.tail;
	        var _lastTailNode = null;

	        while (_tailNode !== null) {
	          if (_tailNode.alternate !== null) {
	            _lastTailNode = _tailNode;
	          }

	          _tailNode = _tailNode.sibling;
	        } // Next we're simply going to delete all insertions after the
	        // last rendered item.


	        if (_lastTailNode === null) {
	          // All remaining items in the tail are insertions.
	          if (!hasRenderedATailFallback && renderState.tail !== null) {
	            // We suspended during the head. We want to show at least one
	            // row at the tail. So we'll keep on and cut off the rest.
	            renderState.tail.sibling = null;
	          } else {
	            renderState.tail = null;
	          }
	        } else {
	          // Detach the insertion after the last node that was already
	          // inserted.
	          _lastTailNode.sibling = null;
	        }

	        break;
	      }
	  }
	}

	function completeWork(current, workInProgress, renderLanes) {
	  var newProps = workInProgress.pendingProps;

	  switch (workInProgress.tag) {
	    case IndeterminateComponent:
	    case LazyComponent:
	    case SimpleMemoComponent:
	    case FunctionComponent:
	    case ForwardRef:
	    case Fragment:
	    case Mode:
	    case Profiler:
	    case ContextConsumer:
	    case MemoComponent:
	      return null;

	    case ClassComponent:
	      {
	        var Component = workInProgress.type;

	        if (isContextProvider(Component)) {
	          popContext(workInProgress);
	        }

	        return null;
	      }

	    case HostRoot:
	      {
	        popHostContainer(workInProgress);
	        popTopLevelContextObject(workInProgress);
	        resetWorkInProgressVersions();
	        var fiberRoot = workInProgress.stateNode;

	        if (fiberRoot.pendingContext) {
	          fiberRoot.context = fiberRoot.pendingContext;
	          fiberRoot.pendingContext = null;
	        }

	        if (current === null || current.child === null) {
	          // If we hydrated, pop so that we can delete any remaining children
	          // that weren't hydrated.
	          var wasHydrated = popHydrationState(workInProgress);

	          if (wasHydrated) {
	            // If we hydrated, then we'll need to schedule an update for
	            // the commit side-effects on the root.
	            markUpdate(workInProgress);
	          } else if (!fiberRoot.hydrate) {
	            // Schedule an effect to clear this container at the start of the next commit.
	            // This handles the case of React rendering into a container with previous children.
	            // It's also safe to do for updates too, because current.child would only be null
	            // if the previous render was null (so the the container would already be empty).
	            workInProgress.flags |= Snapshot;
	          }
	        }

	        updateHostContainer(workInProgress);
	        return null;
	      }

	    case HostComponent:
	      {
	        popHostContext(workInProgress);
	        var rootContainerInstance = getRootHostContainer();
	        var type = workInProgress.type;

	        if (current !== null && workInProgress.stateNode != null) {
	          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

	          if (current.ref !== workInProgress.ref) {
	            markRef$1(workInProgress);
	          }
	        } else {
	          if (!newProps) {
	            if (!(workInProgress.stateNode !== null)) {
	              {
	                throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
	              }
	            } // This can happen when we abort work.


	            return null;
	          }

	          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
	          // "stack" as the parent. Then append children as we go in beginWork
	          // or completeWork depending on whether we want to add them top->down or
	          // bottom->up. Top->down is faster in IE11.

	          var _wasHydrated = popHydrationState(workInProgress);

	          if (_wasHydrated) {
	            // TODO: Move this and createInstance step into the beginPhase
	            // to consolidate.
	            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
	              // If changes to the hydrated node need to be applied at the
	              // commit-phase we mark this as such.
	              markUpdate(workInProgress);
	            }
	          } else {
	            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
	            appendAllChildren(instance, workInProgress, false, false);
	            workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
	            // (eg DOM renderer supports auto-focus for certain elements).
	            // Make sure such renderers get scheduled for later work.

	            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
	              markUpdate(workInProgress);
	            }
	          }

	          if (workInProgress.ref !== null) {
	            // If there is a ref on a host node we need to schedule a callback
	            markRef$1(workInProgress);
	          }
	        }

	        return null;
	      }

	    case HostText:
	      {
	        var newText = newProps;

	        if (current && workInProgress.stateNode != null) {
	          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
	          // to schedule a side-effect to do the updates.

	          updateHostText$1(current, workInProgress, oldText, newText);
	        } else {
	          if (typeof newText !== 'string') {
	            if (!(workInProgress.stateNode !== null)) {
	              {
	                throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
	              }
	            } // This can happen when we abort work.

	          }

	          var _rootContainerInstance = getRootHostContainer();

	          var _currentHostContext = getHostContext();

	          var _wasHydrated2 = popHydrationState(workInProgress);

	          if (_wasHydrated2) {
	            if (prepareToHydrateHostTextInstance(workInProgress)) {
	              markUpdate(workInProgress);
	            }
	          } else {
	            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
	          }
	        }

	        return null;
	      }

	    case SuspenseComponent:
	      {
	        popSuspenseContext(workInProgress);
	        var nextState = workInProgress.memoizedState;

	        if ((workInProgress.flags & DidCapture) !== NoFlags) {
	          // Something suspended. Re-render with the fallback children.
	          workInProgress.lanes = renderLanes; // Do not reset the effect list.

	          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
	            transferActualDuration(workInProgress);
	          }

	          return workInProgress;
	        }

	        var nextDidTimeout = nextState !== null;
	        var prevDidTimeout = false;

	        if (current === null) {
	          if (workInProgress.memoizedProps.fallback !== undefined) {
	            popHydrationState(workInProgress);
	          }
	        } else {
	          var prevState = current.memoizedState;
	          prevDidTimeout = prevState !== null;
	        }

	        if (nextDidTimeout && !prevDidTimeout) {
	          // If this subtreee is running in blocking mode we can suspend,
	          // otherwise we won't suspend.
	          // TODO: This will still suspend a synchronous tree if anything
	          // in the concurrent tree already suspended during this render.
	          // This is a known bug.
	          if ((workInProgress.mode & BlockingMode) !== NoMode) {
	            // TODO: Move this back to throwException because this is too late
	            // if this is a large tree which is common for initial loads. We
	            // don't know if we should restart a render or not until we get
	            // this marker, and this is too late.
	            // If this render already had a ping or lower pri updates,
	            // and this is the first time we know we're going to suspend we
	            // should be able to immediately restart from within throwException.
	            var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

	            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
	              // If this was in an invisible tree or a new render, then showing
	              // this boundary is ok.
	              renderDidSuspend();
	            } else {
	              // Otherwise, we're going to have to hide content so we should
	              // suspend for longer if possible.
	              renderDidSuspendDelayIfPossible();
	            }
	          }
	        }

	        {
	          // TODO: Only schedule updates if these values are non equal, i.e. it changed.
	          if (nextDidTimeout || prevDidTimeout) {
	            // If this boundary just timed out, schedule an effect to attach a
	            // retry listener to the promise. This flag is also used to hide the
	            // primary children. In mutation mode, we also need the flag to
	            // *unhide* children that were previously hidden, so check if this
	            // is currently timed out, too.
	            workInProgress.flags |= Update;
	          }
	        }

	        return null;
	      }

	    case HostPortal:
	      popHostContainer(workInProgress);
	      updateHostContainer(workInProgress);

	      if (current === null) {
	        preparePortalMount(workInProgress.stateNode.containerInfo);
	      }

	      return null;

	    case ContextProvider:
	      // Pop provider fiber
	      popProvider(workInProgress);
	      return null;

	    case IncompleteClassComponent:
	      {
	        // Same as class component case. I put it down here so that the tags are
	        // sequential to ensure this switch is compiled to a jump table.
	        var _Component = workInProgress.type;

	        if (isContextProvider(_Component)) {
	          popContext(workInProgress);
	        }

	        return null;
	      }

	    case SuspenseListComponent:
	      {
	        popSuspenseContext(workInProgress);
	        var renderState = workInProgress.memoizedState;

	        if (renderState === null) {
	          // We're running in the default, "independent" mode.
	          // We don't do anything in this mode.
	          return null;
	        }

	        var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
	        var renderedTail = renderState.rendering;

	        if (renderedTail === null) {
	          // We just rendered the head.
	          if (!didSuspendAlready) {
	            // This is the first pass. We need to figure out if anything is still
	            // suspended in the rendered set.
	            // If new content unsuspended, but there's still some content that
	            // didn't. Then we need to do a second pass that forces everything
	            // to keep showing their fallbacks.
	            // We might be suspended if something in this render pass suspended, or
	            // something in the previous committed pass suspended. Otherwise,
	            // there's no chance so we can skip the expensive call to
	            // findFirstSuspended.
	            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);

	            if (!cannotBeSuspended) {
	              var row = workInProgress.child;

	              while (row !== null) {
	                var suspended = findFirstSuspended(row);

	                if (suspended !== null) {
	                  didSuspendAlready = true;
	                  workInProgress.flags |= DidCapture;
	                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
	                  // part of the second pass. In that case nothing will subscribe to
	                  // its thennables. Instead, we'll transfer its thennables to the
	                  // SuspenseList so that it can retry if they resolve.
	                  // There might be multiple of these in the list but since we're
	                  // going to wait for all of them anyway, it doesn't really matter
	                  // which ones gets to ping. In theory we could get clever and keep
	                  // track of how many dependencies remain but it gets tricky because
	                  // in the meantime, we can add/remove/change items and dependencies.
	                  // We might bail out of the loop before finding any but that
	                  // doesn't matter since that means that the other boundaries that
	                  // we did find already has their listeners attached.

	                  var newThennables = suspended.updateQueue;

	                  if (newThennables !== null) {
	                    workInProgress.updateQueue = newThennables;
	                    workInProgress.flags |= Update;
	                  } // Rerender the whole list, but this time, we'll force fallbacks
	                  // to stay in place.
	                  // Reset the effect list before doing the second pass since that's now invalid.


	                  if (renderState.lastEffect === null) {
	                    workInProgress.firstEffect = null;
	                  }

	                  workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.

	                  resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
	                  // rerender the children.

	                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
	                  return workInProgress.child;
	                }

	                row = row.sibling;
	              }
	            }

	            if (renderState.tail !== null && now() > getRenderTargetTime()) {
	              // We have already passed our CPU deadline but we still have rows
	              // left in the tail. We'll just give up further attempts to render
	              // the main content and only render fallbacks.
	              workInProgress.flags |= DidCapture;
	              didSuspendAlready = true;
	              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
	              // to get it started back up to attempt the next item. While in terms
	              // of priority this work has the same priority as this current render,
	              // it's not part of the same transition once the transition has
	              // committed. If it's sync, we still want to yield so that it can be
	              // painted. Conceptually, this is really the same as pinging.
	              // We can use any RetryLane even if it's the one currently rendering
	              // since we're leaving it behind on this node.

	              workInProgress.lanes = SomeRetryLane;

	              {
	                markSpawnedWork(SomeRetryLane);
	              }
	            }
	          } else {
	            cutOffTailIfNeeded(renderState, false);
	          } // Next we're going to render the tail.

	        } else {
	          // Append the rendered row to the child list.
	          if (!didSuspendAlready) {
	            var _suspended = findFirstSuspended(renderedTail);

	            if (_suspended !== null) {
	              workInProgress.flags |= DidCapture;
	              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
	              // get lost if this row ends up dropped during a second pass.

	              var _newThennables = _suspended.updateQueue;

	              if (_newThennables !== null) {
	                workInProgress.updateQueue = _newThennables;
	                workInProgress.flags |= Update;
	              }

	              cutOffTailIfNeeded(renderState, true); // This might have been modified.

	              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
	              ) {
	                  // We need to delete the row we just rendered.
	                  // Reset the effect list to what it was before we rendered this
	                  // child. The nested children have already appended themselves.
	                  var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.

	                  if (lastEffect !== null) {
	                    lastEffect.nextEffect = null;
	                  } // We're done.


	                  return null;
	                }
	            } else if ( // The time it took to render last row is greater than the remaining
	            // time we have to render. So rendering one more row would likely
	            // exceed it.
	            now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
	              // We have now passed our CPU deadline and we'll just give up further
	              // attempts to render the main content and only render fallbacks.
	              // The assumption is that this is usually faster.
	              workInProgress.flags |= DidCapture;
	              didSuspendAlready = true;
	              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
	              // to get it started back up to attempt the next item. While in terms
	              // of priority this work has the same priority as this current render,
	              // it's not part of the same transition once the transition has
	              // committed. If it's sync, we still want to yield so that it can be
	              // painted. Conceptually, this is really the same as pinging.
	              // We can use any RetryLane even if it's the one currently rendering
	              // since we're leaving it behind on this node.

	              workInProgress.lanes = SomeRetryLane;

	              {
	                markSpawnedWork(SomeRetryLane);
	              }
	            }
	          }

	          if (renderState.isBackwards) {
	            // The effect list of the backwards tail will have been added
	            // to the end. This breaks the guarantee that life-cycles fire in
	            // sibling order but that isn't a strong guarantee promised by React.
	            // Especially since these might also just pop in during future commits.
	            // Append to the beginning of the list.
	            renderedTail.sibling = workInProgress.child;
	            workInProgress.child = renderedTail;
	          } else {
	            var previousSibling = renderState.last;

	            if (previousSibling !== null) {
	              previousSibling.sibling = renderedTail;
	            } else {
	              workInProgress.child = renderedTail;
	            }

	            renderState.last = renderedTail;
	          }
	        }

	        if (renderState.tail !== null) {
	          // We still have tail rows to render.
	          // Pop a row.
	          var next = renderState.tail;
	          renderState.rendering = next;
	          renderState.tail = next.sibling;
	          renderState.lastEffect = workInProgress.lastEffect;
	          renderState.renderingStartTime = now();
	          next.sibling = null; // Restore the context.
	          // TODO: We can probably just avoid popping it instead and only
	          // setting it the first time we go from not suspended to suspended.

	          var suspenseContext = suspenseStackCursor.current;

	          if (didSuspendAlready) {
	            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
	          } else {
	            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	          }

	          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.

	          return next;
	        }

	        return null;
	      }

	    case FundamentalComponent:
	      {

	        break;
	      }

	    case ScopeComponent:
	      {

	        break;
	      }

	    case Block:

	      break;

	    case OffscreenComponent:
	    case LegacyHiddenComponent:
	      {
	        popRenderLanes(workInProgress);

	        if (current !== null) {
	          var _nextState = workInProgress.memoizedState;
	          var _prevState = current.memoizedState;
	          var prevIsHidden = _prevState !== null;
	          var nextIsHidden = _nextState !== null;

	          if (prevIsHidden !== nextIsHidden && newProps.mode !== 'unstable-defer-without-hiding') {
	            workInProgress.flags |= Update;
	          }
	        }

	        return null;
	      }
	  }

	  {
	    {
	      throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }
	}

	function unwindWork(workInProgress, renderLanes) {
	  switch (workInProgress.tag) {
	    case ClassComponent:
	      {
	        var Component = workInProgress.type;

	        if (isContextProvider(Component)) {
	          popContext(workInProgress);
	        }

	        var flags = workInProgress.flags;

	        if (flags & ShouldCapture) {
	          workInProgress.flags = flags & ~ShouldCapture | DidCapture;

	          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
	            transferActualDuration(workInProgress);
	          }

	          return workInProgress;
	        }

	        return null;
	      }

	    case HostRoot:
	      {
	        popHostContainer(workInProgress);
	        popTopLevelContextObject(workInProgress);
	        resetWorkInProgressVersions();
	        var _flags = workInProgress.flags;

	        if (!((_flags & DidCapture) === NoFlags)) {
	          {
	            throw Error( "The root failed to unmount after an error. This is likely a bug in React. Please file an issue." );
	          }
	        }

	        workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
	        return workInProgress;
	      }

	    case HostComponent:
	      {
	        // TODO: popHydrationState
	        popHostContext(workInProgress);
	        return null;
	      }

	    case SuspenseComponent:
	      {
	        popSuspenseContext(workInProgress);

	        var _flags2 = workInProgress.flags;

	        if (_flags2 & ShouldCapture) {
	          workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

	          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
	            transferActualDuration(workInProgress);
	          }

	          return workInProgress;
	        }

	        return null;
	      }

	    case SuspenseListComponent:
	      {
	        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
	        // caught by a nested boundary. If not, it should bubble through.

	        return null;
	      }

	    case HostPortal:
	      popHostContainer(workInProgress);
	      return null;

	    case ContextProvider:
	      popProvider(workInProgress);
	      return null;

	    case OffscreenComponent:
	    case LegacyHiddenComponent:
	      popRenderLanes(workInProgress);
	      return null;

	    default:
	      return null;
	  }
	}

	function unwindInterruptedWork(interruptedWork) {
	  switch (interruptedWork.tag) {
	    case ClassComponent:
	      {
	        var childContextTypes = interruptedWork.type.childContextTypes;

	        if (childContextTypes !== null && childContextTypes !== undefined) {
	          popContext(interruptedWork);
	        }

	        break;
	      }

	    case HostRoot:
	      {
	        popHostContainer(interruptedWork);
	        popTopLevelContextObject(interruptedWork);
	        resetWorkInProgressVersions();
	        break;
	      }

	    case HostComponent:
	      {
	        popHostContext(interruptedWork);
	        break;
	      }

	    case HostPortal:
	      popHostContainer(interruptedWork);
	      break;

	    case SuspenseComponent:
	      popSuspenseContext(interruptedWork);
	      break;

	    case SuspenseListComponent:
	      popSuspenseContext(interruptedWork);
	      break;

	    case ContextProvider:
	      popProvider(interruptedWork);
	      break;

	    case OffscreenComponent:
	    case LegacyHiddenComponent:
	      popRenderLanes(interruptedWork);
	      break;
	  }
	}

	function createCapturedValue(value, source) {
	  // If the value is an error, call this function immediately after it is thrown
	  // so the stack is accurate.
	  return {
	    value: value,
	    source: source,
	    stack: getStackByFiberInDevAndProd(source)
	  };
	}

	// This module is forked in different environments.
	// By default, return `true` to log errors to the console.
	// Forks can return `false` if this isn't desirable.
	function showErrorDialog(boundary, errorInfo) {
	  return true;
	}

	function logCapturedError(boundary, errorInfo) {
	  try {
	    var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
	    // This enables renderers like ReactNative to better manage redbox behavior.

	    if (logError === false) {
	      return;
	    }

	    var error = errorInfo.value;

	    if (true) {
	      var source = errorInfo.source;
	      var stack = errorInfo.stack;
	      var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
	      // `preventDefault()` in window `error` handler.
	      // We record this information as an expando on the error.

	      if (error != null && error._suppressLogging) {
	        if (boundary.tag === ClassComponent) {
	          // The error is recoverable and was silenced.
	          // Ignore it and don't print the stack addendum.
	          // This is handy for testing error boundaries without noise.
	          return;
	        } // The error is fatal. Since the silencing might have
	        // been accidental, we'll surface it anyway.
	        // However, the browser would have silenced the original error
	        // so we'll print it first, and then print the stack addendum.


	        console['error'](error); // Don't transform to our wrapper
	        // For a more detailed description of this block, see:
	        // https://github.com/facebook/react/pull/13384
	      }

	      var componentName = source ? getComponentName(source.type) : null;
	      var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
	      var errorBoundaryMessage;
	      var errorBoundaryName = getComponentName(boundary.type);

	      if (errorBoundaryName) {
	        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
	      } else {
	        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';
	      }

	      var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
	      // We don't include the original error message and JS stack because the browser
	      // has already printed it. Even if the application swallows the error, it is still
	      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

	      console['error'](combinedMessage); // Don't transform to our wrapper
	    }
	  } catch (e) {
	    // This method must not throw, or React internal state will get messed up.
	    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
	    // we want to report this error outside of the normal stack as a last resort.
	    // https://github.com/facebook/react/issues/13188
	    setTimeout(function () {
	      throw e;
	    });
	  }
	}

	var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

	function createRootErrorUpdate(fiber, errorInfo, lane) {
	  var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.

	  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
	  // being called "element".

	  update.payload = {
	    element: null
	  };
	  var error = errorInfo.value;

	  update.callback = function () {
	    onUncaughtError(error);
	    logCapturedError(fiber, errorInfo);
	  };

	  return update;
	}

	function createClassErrorUpdate(fiber, errorInfo, lane) {
	  var update = createUpdate(NoTimestamp, lane);
	  update.tag = CaptureUpdate;
	  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

	  if (typeof getDerivedStateFromError === 'function') {
	    var error$1 = errorInfo.value;

	    update.payload = function () {
	      logCapturedError(fiber, errorInfo);
	      return getDerivedStateFromError(error$1);
	    };
	  }

	  var inst = fiber.stateNode;

	  if (inst !== null && typeof inst.componentDidCatch === 'function') {
	    update.callback = function callback() {
	      {
	        markFailedErrorBoundaryForHotReloading(fiber);
	      }

	      if (typeof getDerivedStateFromError !== 'function') {
	        // To preserve the preexisting retry behavior of error boundaries,
	        // we keep track of which ones already failed during this batch.
	        // This gets reset before we yield back to the browser.
	        // TODO: Warn in strict mode if getDerivedStateFromError is
	        // not defined.
	        markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined

	        logCapturedError(fiber, errorInfo);
	      }

	      var error$1 = errorInfo.value;
	      var stack = errorInfo.stack;
	      this.componentDidCatch(error$1, {
	        componentStack: stack !== null ? stack : ''
	      });

	      {
	        if (typeof getDerivedStateFromError !== 'function') {
	          // If componentDidCatch is the only error boundary method defined,
	          // then it needs to call setState to recover from errors.
	          // If no state update is scheduled then the boundary will swallow the error.
	          if (!includesSomeLane(fiber.lanes, SyncLane)) {
	            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown');
	          }
	        }
	      }
	    };
	  } else {
	    update.callback = function () {
	      markFailedErrorBoundaryForHotReloading(fiber);
	    };
	  }

	  return update;
	}

	function attachPingListener(root, wakeable, lanes) {
	  // Attach a listener to the promise to "ping" the root and retry. But only if
	  // one does not already exist for the lanes we're currently rendering (which
	  // acts like a "thread ID" here).
	  var pingCache = root.pingCache;
	  var threadIDs;

	  if (pingCache === null) {
	    pingCache = root.pingCache = new PossiblyWeakMap$1();
	    threadIDs = new Set();
	    pingCache.set(wakeable, threadIDs);
	  } else {
	    threadIDs = pingCache.get(wakeable);

	    if (threadIDs === undefined) {
	      threadIDs = new Set();
	      pingCache.set(wakeable, threadIDs);
	    }
	  }

	  if (!threadIDs.has(lanes)) {
	    // Memoize using the thread ID to prevent redundant listeners.
	    threadIDs.add(lanes);
	    var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
	    wakeable.then(ping, ping);
	  }
	}

	function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
	  // The source fiber did not complete.
	  sourceFiber.flags |= Incomplete; // Its effect list is no longer valid.

	  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

	  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
	    // This is a wakeable.
	    var wakeable = value;

	    if ((sourceFiber.mode & BlockingMode) === NoMode) {
	      // Reset the memoizedState to what it was before we attempted
	      // to render it.
	      var currentSource = sourceFiber.alternate;

	      if (currentSource) {
	        sourceFiber.updateQueue = currentSource.updateQueue;
	        sourceFiber.memoizedState = currentSource.memoizedState;
	        sourceFiber.lanes = currentSource.lanes;
	      } else {
	        sourceFiber.updateQueue = null;
	        sourceFiber.memoizedState = null;
	      }
	    }

	    var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.

	    var _workInProgress = returnFiber;

	    do {
	      if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
	        // Found the nearest boundary.
	        // Stash the promise on the boundary fiber. If the boundary times out, we'll
	        // attach another listener to flip the boundary back to its normal state.
	        var wakeables = _workInProgress.updateQueue;

	        if (wakeables === null) {
	          var updateQueue = new Set();
	          updateQueue.add(wakeable);
	          _workInProgress.updateQueue = updateQueue;
	        } else {
	          wakeables.add(wakeable);
	        } // If the boundary is outside of blocking mode, we should *not*
	        // suspend the commit. Pretend as if the suspended component rendered
	        // null and keep rendering. In the commit phase, we'll schedule a
	        // subsequent synchronous update to re-render the Suspense.
	        //
	        // Note: It doesn't matter whether the component that suspended was
	        // inside a blocking mode tree. If the Suspense is outside of it, we
	        // should *not* suspend the commit.


	        if ((_workInProgress.mode & BlockingMode) === NoMode) {
	          _workInProgress.flags |= DidCapture;
	          sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
	          // But we shouldn't call any lifecycle methods or callbacks. Remove
	          // all lifecycle effect tags.

	          sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);

	          if (sourceFiber.tag === ClassComponent) {
	            var currentSourceFiber = sourceFiber.alternate;

	            if (currentSourceFiber === null) {
	              // This is a new mount. Change the tag so it's not mistaken for a
	              // completed class component. For example, we should not call
	              // componentWillUnmount if it is deleted.
	              sourceFiber.tag = IncompleteClassComponent;
	            } else {
	              // When we try rendering again, we should not reuse the current fiber,
	              // since it's known to be in an inconsistent state. Use a force update to
	              // prevent a bail out.
	              var update = createUpdate(NoTimestamp, SyncLane);
	              update.tag = ForceUpdate;
	              enqueueUpdate(sourceFiber, update);
	            }
	          } // The source fiber did not complete. Mark it with Sync priority to
	          // indicate that it still has pending work.


	          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane); // Exit without suspending.

	          return;
	        } // Confirmed that the boundary is in a concurrent mode tree. Continue
	        // with the normal suspend path.
	        //
	        // After this we'll use a set of heuristics to determine whether this
	        // render pass will run to completion or restart or "suspend" the commit.
	        // The actual logic for this is spread out in different places.
	        //
	        // This first principle is that if we're going to suspend when we complete
	        // a root, then we should also restart if we get an update or ping that
	        // might unsuspend it, and vice versa. The only reason to suspend is
	        // because you think you might want to restart before committing. However,
	        // it doesn't make sense to restart only while in the period we're suspended.
	        //
	        // Restarting too aggressively is also not good because it starves out any
	        // intermediate loading state. So we use heuristics to determine when.
	        // Suspense Heuristics
	        //
	        // If nothing threw a Promise or all the same fallbacks are already showing,
	        // then don't suspend/restart.
	        //
	        // If this is an initial render of a new tree of Suspense boundaries and
	        // those trigger a fallback, then don't suspend/restart. We want to ensure
	        // that we can show the initial loading state as quickly as possible.
	        //
	        // If we hit a "Delayed" case, such as when we'd switch from content back into
	        // a fallback, then we should always suspend/restart. Transitions apply
	        // to this case. If none is defined, JND is used instead.
	        //
	        // If we're already showing a fallback and it gets "retried", allowing us to show
	        // another level, but there's still an inner boundary that would show a fallback,
	        // then we suspend/restart for 500ms since the last time we showed a fallback
	        // anywhere in the tree. This effectively throttles progressive loading into a
	        // consistent train of commits. This also gives us an opportunity to restart to
	        // get to the completed state slightly earlier.
	        //
	        // If there's ambiguity due to batching it's resolved in preference of:
	        // 1) "delayed", 2) "initial render", 3) "retry".
	        //
	        // We want to ensure that a "busy" state doesn't get force committed. We want to
	        // ensure that new initial loading states can commit as soon as possible.


	        attachPingListener(root, wakeable, rootRenderLanes);
	        _workInProgress.flags |= ShouldCapture;
	        _workInProgress.lanes = rootRenderLanes;
	        return;
	      } // This boundary already captured during this render. Continue to the next
	      // boundary.


	      _workInProgress = _workInProgress.return;
	    } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
	    // TODO: Use invariant so the message is stripped in prod?


	    value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.');
	  } // We didn't find a boundary that could handle this type of exception. Start
	  // over and traverse parent path again, this time treating the exception
	  // as an error.


	  renderDidError();
	  value = createCapturedValue(value, sourceFiber);
	  var workInProgress = returnFiber;

	  do {
	    switch (workInProgress.tag) {
	      case HostRoot:
	        {
	          var _errorInfo = value;
	          workInProgress.flags |= ShouldCapture;
	          var lane = pickArbitraryLane(rootRenderLanes);
	          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);

	          var _update = createRootErrorUpdate(workInProgress, _errorInfo, lane);

	          enqueueCapturedUpdate(workInProgress, _update);
	          return;
	        }

	      case ClassComponent:
	        // Capture and retry
	        var errorInfo = value;
	        var ctor = workInProgress.type;
	        var instance = workInProgress.stateNode;

	        if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
	          workInProgress.flags |= ShouldCapture;

	          var _lane = pickArbitraryLane(rootRenderLanes);

	          workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state

	          var _update2 = createClassErrorUpdate(workInProgress, errorInfo, _lane);

	          enqueueCapturedUpdate(workInProgress, _update2);
	          return;
	        }

	        break;
	    }

	    workInProgress = workInProgress.return;
	  } while (workInProgress !== null);
	}

	var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

	{
	  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
	}

	var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;

	var callComponentWillUnmountWithTimer = function (current, instance) {
	  instance.props = current.memoizedProps;
	  instance.state = current.memoizedState;

	  {
	    instance.componentWillUnmount();
	  }
	}; // Capture errors so they don't interrupt unmounting.


	function safelyCallComponentWillUnmount(current, instance) {
	  {
	    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);

	    if (hasCaughtError()) {
	      var unmountError = clearCaughtError();
	      captureCommitPhaseError(current, unmountError);
	    }
	  }
	}

	function safelyDetachRef(current) {
	  var ref = current.ref;

	  if (ref !== null) {
	    if (typeof ref === 'function') {
	      {
	        invokeGuardedCallback(null, ref, null, null);

	        if (hasCaughtError()) {
	          var refError = clearCaughtError();
	          captureCommitPhaseError(current, refError);
	        }
	      }
	    } else {
	      ref.current = null;
	    }
	  }
	}

	function safelyCallDestroy(current, destroy) {
	  {
	    invokeGuardedCallback(null, destroy, null);

	    if (hasCaughtError()) {
	      var error = clearCaughtError();
	      captureCommitPhaseError(current, error);
	    }
	  }
	}

	function commitBeforeMutationLifeCycles(current, finishedWork) {
	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	    case Block:
	      {
	        return;
	      }

	    case ClassComponent:
	      {
	        if (finishedWork.flags & Snapshot) {
	          if (current !== null) {
	            var prevProps = current.memoizedProps;
	            var prevState = current.memoizedState;
	            var instance = finishedWork.stateNode; // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.

	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                if (instance.props !== finishedWork.memoizedProps) {
	                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	                }

	                if (instance.state !== finishedWork.memoizedState) {
	                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	                }
	              }
	            }

	            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

	            {
	              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

	              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
	                didWarnSet.add(finishedWork.type);

	                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
	              }
	            }

	            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
	          }
	        }

	        return;
	      }

	    case HostRoot:
	      {
	        {
	          if (finishedWork.flags & Snapshot) {
	            var root = finishedWork.stateNode;
	            clearContainer(root.containerInfo);
	          }
	        }

	        return;
	      }

	    case HostComponent:
	    case HostText:
	    case HostPortal:
	    case IncompleteClassComponent:
	      // Nothing to do for these component types
	      return;
	  }

	  {
	    {
	      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }
	}

	function commitHookEffectListUnmount(tag, finishedWork) {
	  var updateQueue = finishedWork.updateQueue;
	  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

	  if (lastEffect !== null) {
	    var firstEffect = lastEffect.next;
	    var effect = firstEffect;

	    do {
	      if ((effect.tag & tag) === tag) {
	        // Unmount
	        var destroy = effect.destroy;
	        effect.destroy = undefined;

	        if (destroy !== undefined) {
	          destroy();
	        }
	      }

	      effect = effect.next;
	    } while (effect !== firstEffect);
	  }
	}

	function commitHookEffectListMount(tag, finishedWork) {
	  var updateQueue = finishedWork.updateQueue;
	  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

	  if (lastEffect !== null) {
	    var firstEffect = lastEffect.next;
	    var effect = firstEffect;

	    do {
	      if ((effect.tag & tag) === tag) {
	        // Mount
	        var create = effect.create;
	        effect.destroy = create();

	        {
	          var destroy = effect.destroy;

	          if (destroy !== undefined && typeof destroy !== 'function') {
	            var addendum = void 0;

	            if (destroy === null) {
	              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
	            } else if (typeof destroy.then === 'function') {
	              addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';
	            } else {
	              addendum = ' You returned: ' + destroy;
	            }

	            error('An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s', addendum);
	          }
	        }
	      }

	      effect = effect.next;
	    } while (effect !== firstEffect);
	  }
	}

	function schedulePassiveEffects(finishedWork) {
	  var updateQueue = finishedWork.updateQueue;
	  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

	  if (lastEffect !== null) {
	    var firstEffect = lastEffect.next;
	    var effect = firstEffect;

	    do {
	      var _effect = effect,
	          next = _effect.next,
	          tag = _effect.tag;

	      if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
	        enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
	        enqueuePendingPassiveHookEffectMount(finishedWork, effect);
	      }

	      effect = next;
	    } while (effect !== firstEffect);
	  }
	}

	function commitLifeCycles(finishedRoot, current, finishedWork, committedLanes) {
	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	    case Block:
	      {
	        // At this point layout effects have already been destroyed (during mutation phase).
	        // This is done to prevent sibling component effects from interfering with each other,
	        // e.g. a destroy function in one component should never override a ref set
	        // by a create function in another component during the same commit.
	        {
	          commitHookEffectListMount(Layout | HasEffect, finishedWork);
	        }

	        schedulePassiveEffects(finishedWork);
	        return;
	      }

	    case ClassComponent:
	      {
	        var instance = finishedWork.stateNode;

	        if (finishedWork.flags & Update) {
	          if (current === null) {
	            // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.
	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                if (instance.props !== finishedWork.memoizedProps) {
	                  error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	                }

	                if (instance.state !== finishedWork.memoizedState) {
	                  error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	                }
	              }
	            }

	            {
	              instance.componentDidMount();
	            }
	          } else {
	            var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
	            var prevState = current.memoizedState; // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.

	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                if (instance.props !== finishedWork.memoizedProps) {
	                  error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	                }

	                if (instance.state !== finishedWork.memoizedState) {
	                  error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	                }
	              }
	            }

	            {
	              instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
	            }
	          }
	        } // TODO: I think this is now always non-null by the time it reaches the
	        // commit phase. Consider removing the type check.


	        var updateQueue = finishedWork.updateQueue;

	        if (updateQueue !== null) {
	          {
	            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	              if (instance.props !== finishedWork.memoizedProps) {
	                error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	              }

	              if (instance.state !== finishedWork.memoizedState) {
	                error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	              }
	            }
	          } // We could update instance props and state here,
	          // but instead we rely on them being set during last render.
	          // TODO: revisit this when we implement resuming.


	          commitUpdateQueue(finishedWork, updateQueue, instance);
	        }

	        return;
	      }

	    case HostRoot:
	      {
	        // TODO: I think this is now always non-null by the time it reaches the
	        // commit phase. Consider removing the type check.
	        var _updateQueue = finishedWork.updateQueue;

	        if (_updateQueue !== null) {
	          var _instance = null;

	          if (finishedWork.child !== null) {
	            switch (finishedWork.child.tag) {
	              case HostComponent:
	                _instance = getPublicInstance(finishedWork.child.stateNode);
	                break;

	              case ClassComponent:
	                _instance = finishedWork.child.stateNode;
	                break;
	            }
	          }

	          commitUpdateQueue(finishedWork, _updateQueue, _instance);
	        }

	        return;
	      }

	    case HostComponent:
	      {
	        var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
	        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
	        // These effects should only be committed when components are first mounted,
	        // aka when there is no current/alternate.

	        if (current === null && finishedWork.flags & Update) {
	          var type = finishedWork.type;
	          var props = finishedWork.memoizedProps;
	          commitMount(_instance2, type, props);
	        }

	        return;
	      }

	    case HostText:
	      {
	        // We have no life-cycles associated with text.
	        return;
	      }

	    case HostPortal:
	      {
	        // We have no life-cycles associated with portals.
	        return;
	      }

	    case Profiler:
	      {
	        {
	          var _finishedWork$memoize2 = finishedWork.memoizedProps;
	              _finishedWork$memoize2.onCommit;
	              var onRender = _finishedWork$memoize2.onRender;
	          finishedWork.stateNode.effectDuration;
	          var commitTime = getCommitTime();

	          if (typeof onRender === 'function') {
	            {
	              onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime, finishedRoot.memoizedInteractions);
	            }
	          }
	        }

	        return;
	      }

	    case SuspenseComponent:
	      {
	        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
	        return;
	      }

	    case SuspenseListComponent:
	    case IncompleteClassComponent:
	    case FundamentalComponent:
	    case ScopeComponent:
	    case OffscreenComponent:
	    case LegacyHiddenComponent:
	      return;
	  }

	  {
	    {
	      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }
	}

	function hideOrUnhideAllChildren(finishedWork, isHidden) {
	  {
	    // We only have the top Fiber that was inserted but we need to recurse down its
	    // children to find all the terminal nodes.
	    var node = finishedWork;

	    while (true) {
	      if (node.tag === HostComponent) {
	        var instance = node.stateNode;

	        if (isHidden) {
	          hideInstance(instance);
	        } else {
	          unhideInstance(node.stateNode, node.memoizedProps);
	        }
	      } else if (node.tag === HostText) {
	        var _instance3 = node.stateNode;

	        if (isHidden) {
	          hideTextInstance(_instance3);
	        } else {
	          unhideTextInstance(_instance3, node.memoizedProps);
	        }
	      } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === finishedWork) {
	        return;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === finishedWork) {
	          return;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  }
	}

	function commitAttachRef(finishedWork) {
	  var ref = finishedWork.ref;

	  if (ref !== null) {
	    var instance = finishedWork.stateNode;
	    var instanceToUse;

	    switch (finishedWork.tag) {
	      case HostComponent:
	        instanceToUse = getPublicInstance(instance);
	        break;

	      default:
	        instanceToUse = instance;
	    } // Moved outside to ensure DCE works with this flag

	    if (typeof ref === 'function') {
	      ref(instanceToUse);
	    } else {
	      {
	        if (!ref.hasOwnProperty('current')) {
	          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentName(finishedWork.type));
	        }
	      }

	      ref.current = instanceToUse;
	    }
	  }
	}

	function commitDetachRef(current) {
	  var currentRef = current.ref;

	  if (currentRef !== null) {
	    if (typeof currentRef === 'function') {
	      currentRef(null);
	    } else {
	      currentRef.current = null;
	    }
	  }
	} // User-originating errors (lifecycles and refs) should not interrupt
	// deletion, so don't let them throw. Host-originating errors should
	// interrupt deletion, so it's okay


	function commitUnmount(finishedRoot, current, renderPriorityLevel) {
	  onCommitUnmount(current);

	  switch (current.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case MemoComponent:
	    case SimpleMemoComponent:
	    case Block:
	      {
	        var updateQueue = current.updateQueue;

	        if (updateQueue !== null) {
	          var lastEffect = updateQueue.lastEffect;

	          if (lastEffect !== null) {
	            var firstEffect = lastEffect.next;
	            var effect = firstEffect;

	            do {
	              var _effect2 = effect,
	                  destroy = _effect2.destroy,
	                  tag = _effect2.tag;

	              if (destroy !== undefined) {
	                if ((tag & Passive$1) !== NoFlags$1) {
	                  enqueuePendingPassiveHookEffectUnmount(current, effect);
	                } else {
	                  {
	                    safelyCallDestroy(current, destroy);
	                  }
	                }
	              }

	              effect = effect.next;
	            } while (effect !== firstEffect);
	          }
	        }

	        return;
	      }

	    case ClassComponent:
	      {
	        safelyDetachRef(current);
	        var instance = current.stateNode;

	        if (typeof instance.componentWillUnmount === 'function') {
	          safelyCallComponentWillUnmount(current, instance);
	        }

	        return;
	      }

	    case HostComponent:
	      {
	        safelyDetachRef(current);
	        return;
	      }

	    case HostPortal:
	      {
	        // TODO: this is recursive.
	        // We are also not using this parent because
	        // the portal will get pushed immediately.
	        {
	          unmountHostComponents(finishedRoot, current);
	        }

	        return;
	      }

	    case FundamentalComponent:
	      {

	        return;
	      }

	    case DehydratedFragment:
	      {

	        return;
	      }

	    case ScopeComponent:
	      {

	        return;
	      }
	  }
	}

	function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
	  // While we're inside a removed host node we don't want to call
	  // removeChild on the inner nodes because they're removed by the top
	  // call anyway. We also want to call componentWillUnmount on all
	  // composites before this host node is removed from the tree. Therefore
	  // we do an inner loop while we're still inside the host node.
	  var node = root;

	  while (true) {
	    commitUnmount(finishedRoot, node); // Visit children because they may contain more composite or host nodes.
	    // Skip portals because commitUnmount() currently visits them recursively.

	    if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.
	    // If we don't use mutation we drill down into portals here instead.
	     node.tag !== HostPortal)) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === root) {
	      return;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === root) {
	        return;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function detachFiberMutation(fiber) {
	  // Cut off the return pointers to disconnect it from the tree. Ideally, we
	  // should clear the child pointer of the parent alternate to let this
	  // get GC:ed but we don't know which for sure which parent is the current
	  // one so we'll settle for GC:ing the subtree of this child. This child
	  // itself will be GC:ed when the parent updates the next time.
	  // Note: we cannot null out sibling here, otherwise it can cause issues
	  // with findDOMNode and how it requires the sibling field to carry out
	  // traversal in a later effect. See PR #16820. We now clear the sibling
	  // field after effects, see: detachFiberAfterEffects.
	  //
	  // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.
	  // It may be required if the current component is an error boundary,
	  // and one of its descendants throws while unmounting a passive effect.
	  fiber.alternate = null;
	  fiber.child = null;
	  fiber.dependencies = null;
	  fiber.firstEffect = null;
	  fiber.lastEffect = null;
	  fiber.memoizedProps = null;
	  fiber.memoizedState = null;
	  fiber.pendingProps = null;
	  fiber.return = null;
	  fiber.updateQueue = null;

	  {
	    fiber._debugOwner = null;
	  }
	}

	function getHostParentFiber(fiber) {
	  var parent = fiber.return;

	  while (parent !== null) {
	    if (isHostParent(parent)) {
	      return parent;
	    }

	    parent = parent.return;
	  }

	  {
	    {
	      throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }
	}

	function isHostParent(fiber) {
	  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
	}

	function getHostSibling(fiber) {
	  // We're going to search forward into the tree until we find a sibling host
	  // node. Unfortunately, if multiple insertions are done in a row we have to
	  // search past them. This leads to exponential search for the next sibling.
	  // TODO: Find a more efficient way to do this.
	  var node = fiber;

	  siblings: while (true) {
	    // If we didn't find anything, let's try the next sibling.
	    while (node.sibling === null) {
	      if (node.return === null || isHostParent(node.return)) {
	        // If we pop out of the root or hit the parent the fiber we are the
	        // last sibling.
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;

	    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
	      // If it is not host node and, we might have a host node inside it.
	      // Try to search down until we find one.
	      if (node.flags & Placement) {
	        // If we don't have a child, try the siblings instead.
	        continue siblings;
	      } // If we don't have a child, try the siblings instead.
	      // We also skip portals because they are not part of this host tree.


	      if (node.child === null || node.tag === HostPortal) {
	        continue siblings;
	      } else {
	        node.child.return = node;
	        node = node.child;
	      }
	    } // Check if this host node is stable or about to be placed.


	    if (!(node.flags & Placement)) {
	      // Found it!
	      return node.stateNode;
	    }
	  }
	}

	function commitPlacement(finishedWork) {


	  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

	  var parent;
	  var isContainer;
	  var parentStateNode = parentFiber.stateNode;

	  switch (parentFiber.tag) {
	    case HostComponent:
	      parent = parentStateNode;
	      isContainer = false;
	      break;

	    case HostRoot:
	      parent = parentStateNode.containerInfo;
	      isContainer = true;
	      break;

	    case HostPortal:
	      parent = parentStateNode.containerInfo;
	      isContainer = true;
	      break;

	    case FundamentalComponent:

	    // eslint-disable-next-line-no-fallthrough

	    default:
	      {
	        {
	          throw Error( "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue." );
	        }
	      }

	  }

	  if (parentFiber.flags & ContentReset) {
	    // Reset the text content of the parent before doing any insertions
	    resetTextContent(parent); // Clear ContentReset from the effect tag

	    parentFiber.flags &= ~ContentReset;
	  }

	  var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
	  // children to find all the terminal nodes.

	  if (isContainer) {
	    insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
	  } else {
	    insertOrAppendPlacementNode(finishedWork, before, parent);
	  }
	}

	function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
	  var tag = node.tag;
	  var isHost = tag === HostComponent || tag === HostText;

	  if (isHost || enableFundamentalAPI ) {
	    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

	    if (before) {
	      insertInContainerBefore(parent, stateNode, before);
	    } else {
	      appendChildToContainer(parent, stateNode);
	    }
	  } else if (tag === HostPortal) ; else {
	    var child = node.child;

	    if (child !== null) {
	      insertOrAppendPlacementNodeIntoContainer(child, before, parent);
	      var sibling = child.sibling;

	      while (sibling !== null) {
	        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
	        sibling = sibling.sibling;
	      }
	    }
	  }
	}

	function insertOrAppendPlacementNode(node, before, parent) {
	  var tag = node.tag;
	  var isHost = tag === HostComponent || tag === HostText;

	  if (isHost || enableFundamentalAPI ) {
	    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

	    if (before) {
	      insertBefore(parent, stateNode, before);
	    } else {
	      appendChild(parent, stateNode);
	    }
	  } else if (tag === HostPortal) ; else {
	    var child = node.child;

	    if (child !== null) {
	      insertOrAppendPlacementNode(child, before, parent);
	      var sibling = child.sibling;

	      while (sibling !== null) {
	        insertOrAppendPlacementNode(sibling, before, parent);
	        sibling = sibling.sibling;
	      }
	    }
	  }
	}

	function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
	  // We only have the top Fiber that was deleted but we need to recurse down its
	  // children to find all the terminal nodes.
	  var node = current; // Each iteration, currentParent is populated with node's host parent if not
	  // currentParentIsValid.

	  var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

	  var currentParent;
	  var currentParentIsContainer;

	  while (true) {
	    if (!currentParentIsValid) {
	      var parent = node.return;

	      findParent: while (true) {
	        if (!(parent !== null)) {
	          {
	            throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
	          }
	        }

	        var parentStateNode = parent.stateNode;

	        switch (parent.tag) {
	          case HostComponent:
	            currentParent = parentStateNode;
	            currentParentIsContainer = false;
	            break findParent;

	          case HostRoot:
	            currentParent = parentStateNode.containerInfo;
	            currentParentIsContainer = true;
	            break findParent;

	          case HostPortal:
	            currentParent = parentStateNode.containerInfo;
	            currentParentIsContainer = true;
	            break findParent;

	        }

	        parent = parent.return;
	      }

	      currentParentIsValid = true;
	    }

	    if (node.tag === HostComponent || node.tag === HostText) {
	      commitNestedUnmounts(finishedRoot, node); // After all the children have unmounted, it is now safe to remove the
	      // node from the tree.

	      if (currentParentIsContainer) {
	        removeChildFromContainer(currentParent, node.stateNode);
	      } else {
	        removeChild(currentParent, node.stateNode);
	      } // Don't visit children because we already visited them.

	    } else if (node.tag === HostPortal) {
	      if (node.child !== null) {
	        // When we go into a portal, it becomes the parent to remove from.
	        // We will reassign it back when we pop the portal on the way up.
	        currentParent = node.stateNode.containerInfo;
	        currentParentIsContainer = true; // Visit children because portals might contain host components.

	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	    } else {
	      commitUnmount(finishedRoot, node); // Visit children because we may find more host components below.

	      if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	    }

	    if (node === current) {
	      return;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === current) {
	        return;
	      }

	      node = node.return;

	      if (node.tag === HostPortal) {
	        // When we go out of the portal, we need to restore the parent.
	        // Since we don't keep a stack of them, we will search for it.
	        currentParentIsValid = false;
	      }
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function commitDeletion(finishedRoot, current, renderPriorityLevel) {
	  {
	    // Recursively delete all host nodes from the parent.
	    // Detach refs and call componentWillUnmount() on the whole subtree.
	    unmountHostComponents(finishedRoot, current);
	  }

	  var alternate = current.alternate;
	  detachFiberMutation(current);

	  if (alternate !== null) {
	    detachFiberMutation(alternate);
	  }
	}

	function commitWork(current, finishedWork) {

	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case MemoComponent:
	    case SimpleMemoComponent:
	    case Block:
	      {
	        // Layout effects are destroyed during the mutation phase so that all
	        // destroy functions for all fibers are called before any create functions.
	        // This prevents sibling component effects from interfering with each other,
	        // e.g. a destroy function in one component should never override a ref set
	        // by a create function in another component during the same commit.
	        {
	          commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
	        }

	        return;
	      }

	    case ClassComponent:
	      {
	        return;
	      }

	    case HostComponent:
	      {
	        var instance = finishedWork.stateNode;

	        if (instance != null) {
	          // Commit the work prepared earlier.
	          var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
	          // as the newProps. The updatePayload will contain the real change in
	          // this case.

	          var oldProps = current !== null ? current.memoizedProps : newProps;
	          var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

	          var updatePayload = finishedWork.updateQueue;
	          finishedWork.updateQueue = null;

	          if (updatePayload !== null) {
	            commitUpdate(instance, updatePayload, type, oldProps, newProps);
	          }
	        }

	        return;
	      }

	    case HostText:
	      {
	        if (!(finishedWork.stateNode !== null)) {
	          {
	            throw Error( "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue." );
	          }
	        }

	        var textInstance = finishedWork.stateNode;
	        var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
	        // as the newProps. The updatePayload will contain the real change in
	        // this case.

	        var oldText = current !== null ? current.memoizedProps : newText;
	        commitTextUpdate(textInstance, oldText, newText);
	        return;
	      }

	    case HostRoot:
	      {
	        {
	          var _root = finishedWork.stateNode;

	          if (_root.hydrate) {
	            // We've just hydrated. No need to hydrate again.
	            _root.hydrate = false;
	            commitHydratedContainer(_root.containerInfo);
	          }
	        }

	        return;
	      }

	    case Profiler:
	      {
	        return;
	      }

	    case SuspenseComponent:
	      {
	        commitSuspenseComponent(finishedWork);
	        attachSuspenseRetryListeners(finishedWork);
	        return;
	      }

	    case SuspenseListComponent:
	      {
	        attachSuspenseRetryListeners(finishedWork);
	        return;
	      }

	    case IncompleteClassComponent:
	      {
	        return;
	      }

	    case FundamentalComponent:
	      {

	        break;
	      }

	    case ScopeComponent:
	      {

	        break;
	      }

	    case OffscreenComponent:
	    case LegacyHiddenComponent:
	      {
	        var newState = finishedWork.memoizedState;
	        var isHidden = newState !== null;
	        hideOrUnhideAllChildren(finishedWork, isHidden);
	        return;
	      }
	  }

	  {
	    {
	      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }
	}

	function commitSuspenseComponent(finishedWork) {
	  var newState = finishedWork.memoizedState;

	  if (newState !== null) {
	    markCommitTimeOfFallback();

	    {
	      // Hide the Offscreen component that contains the primary children. TODO:
	      // Ideally, this effect would have been scheduled on the Offscreen fiber
	      // itself. That's how unhiding works: the Offscreen component schedules an
	      // effect on itself. However, in this case, the component didn't complete,
	      // so the fiber was never added to the effect list in the normal path. We
	      // could have appended it to the effect list in the Suspense component's
	      // second pass, but doing it this way is less complicated. This would be
	      // simpler if we got rid of the effect list and traversed the tree, like
	      // we're planning to do.
	      var primaryChildParent = finishedWork.child;
	      hideOrUnhideAllChildren(primaryChildParent, true);
	    }
	  }
	}

	function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {

	  var newState = finishedWork.memoizedState;

	  if (newState === null) {
	    var current = finishedWork.alternate;

	    if (current !== null) {
	      var prevState = current.memoizedState;

	      if (prevState !== null) {
	        var suspenseInstance = prevState.dehydrated;

	        if (suspenseInstance !== null) {
	          commitHydratedSuspenseInstance(suspenseInstance);
	        }
	      }
	    }
	  }
	}

	function attachSuspenseRetryListeners(finishedWork) {
	  // If this boundary just timed out, then it will have a set of wakeables.
	  // For each wakeable, attach a listener so that when it resolves, React
	  // attempts to re-render the boundary in the primary (pre-timeout) state.
	  var wakeables = finishedWork.updateQueue;

	  if (wakeables !== null) {
	    finishedWork.updateQueue = null;
	    var retryCache = finishedWork.stateNode;

	    if (retryCache === null) {
	      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
	    }

	    wakeables.forEach(function (wakeable) {
	      // Memoize using the boundary fiber to prevent redundant listeners.
	      var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);

	      if (!retryCache.has(wakeable)) {
	        {
	          if (wakeable.__reactDoNotTraceInteractions !== true) {
	            retry = tracing$1.unstable_wrap(retry);
	          }
	        }

	        retryCache.add(wakeable);
	        wakeable.then(retry, retry);
	      }
	    });
	  }
	} // This function detects when a Suspense boundary goes from visible to hidden.
	// It returns false if the boundary is already hidden.
	// TODO: Use an effect tag.


	function isSuspenseBoundaryBeingHidden(current, finishedWork) {
	  if (current !== null) {
	    var oldState = current.memoizedState;

	    if (oldState === null || oldState.dehydrated !== null) {
	      var newState = finishedWork.memoizedState;
	      return newState !== null && newState.dehydrated === null;
	    }
	  }

	  return false;
	}

	function commitResetTextContent(current) {

	  resetTextContent(current.stateNode);
	}

	if (typeof Symbol === 'function' && Symbol.for) {
	  var symbolFor$1 = Symbol.for;
	  symbolFor$1('selector.component');
	  symbolFor$1('selector.has_pseudo_class');
	  symbolFor$1('selector.role');
	  symbolFor$1('selector.test_id');
	  symbolFor$1('selector.text');
	}
	var commitHooks = [];
	function onCommitRoot$1() {
	  {
	    commitHooks.forEach(function (commitHook) {
	      return commitHook();
	    });
	  }
	}

	var ceil = Math.ceil;
	var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
	    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
	    IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
	var NoContext =
	/*             */
	0;
	var BatchedContext =
	/*               */
	1;
	var EventContext =
	/*                 */
	2;
	var DiscreteEventContext =
	/*         */
	4;
	var LegacyUnbatchedContext =
	/*       */
	8;
	var RenderContext =
	/*                */
	16;
	var CommitContext =
	/*                */
	32;
	var RetryAfterError =
	/*       */
	64;
	var RootIncomplete = 0;
	var RootFatalErrored = 1;
	var RootErrored = 2;
	var RootSuspended = 3;
	var RootSuspendedWithDelay = 4;
	var RootCompleted = 5; // Describes where we are in the React execution stack

	var executionContext = NoContext; // The root we're working on

	var workInProgressRoot = null; // The fiber we're working on

	var workInProgress = null; // The lanes we're rendering

	var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
	// This is a superset of the lanes we started working on at the root. The only
	// case where it's different from `workInProgressRootRenderLanes` is when we
	// enter a subtree that is hidden and needs to be unhidden: Suspense and
	// Offscreen component.
	//
	// Most things in the work loop should deal with workInProgressRootRenderLanes.
	// Most things in begin/complete phases should deal with subtreeRenderLanes.

	var subtreeRenderLanes = NoLanes;
	var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.

	var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown

	var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
	// slightly different than `renderLanes` because `renderLanes` can change as you
	// enter and exit an Offscreen tree. This value is the combination of all render
	// lanes for the entire render phase.

	var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
	// includes unprocessed updates, not work in bailed out children.

	var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.

	var workInProgressRootUpdatedLanes = NoLanes; // Lanes that were pinged (in an interleaved event) during this render.

	var workInProgressRootPingedLanes = NoLanes;
	var mostRecentlyUpdatedRoot = null; // The most recent time we committed a fallback. This lets us ensure a train
	// model where we don't commit new loading states in too quick succession.

	var globalMostRecentFallbackTime = 0;
	var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
	// more and prefer CPU suspense heuristics instead.

	var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
	// suspense heuristics and opt out of rendering more content.

	var RENDER_TIMEOUT_MS = 500;

	function resetRenderTimer() {
	  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
	}

	function getRenderTargetTime() {
	  return workInProgressRootRenderTargetTime;
	}
	var nextEffect = null;
	var hasUncaughtError = false;
	var firstUncaughtError = null;
	var legacyErrorBoundariesThatAlreadyFailed = null;
	var rootDoesHavePassiveEffects = false;
	var rootWithPendingPassiveEffects = null;
	var pendingPassiveEffectsRenderPriority = NoPriority$1;
	var pendingPassiveEffectsLanes = NoLanes;
	var pendingPassiveHookEffectsMount = [];
	var pendingPassiveHookEffectsUnmount = [];
	var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates

	var NESTED_UPDATE_LIMIT = 50;
	var nestedUpdateCount = 0;
	var rootWithNestedUpdates = null;
	var NESTED_PASSIVE_UPDATE_LIMIT = 50;
	var nestedPassiveUpdateCount = 0; // Marks the need to reschedule pending interactions at these lanes
	// during the commit phase. This enables them to be traced across components
	// that spawn new work during render. E.g. hidden boundaries, suspended SSR
	// hydration or SuspenseList.
	// TODO: Can use a bitmask instead of an array

	var spawnedWorkDuringRender = null; // If two updates are scheduled within the same event, we should treat their
	// event times as simultaneous, even if the actual clock time has advanced
	// between the first and second call.

	var currentEventTime = NoTimestamp;
	var currentEventWipLanes = NoLanes;
	var currentEventPendingLanes = NoLanes; // Dev only flag that tracks if passive effects are currently being flushed.
	// We warn about state updates for unmounted components differently in this case.

	var isFlushingPassiveEffects = false;
	var focusedInstanceHandle = null;
	var shouldFireAfterActiveInstanceBlur = false;
	function getWorkInProgressRoot() {
	  return workInProgressRoot;
	}
	function requestEventTime() {
	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    // We're inside React, so it's fine to read the actual time.
	    return now();
	  } // We're not inside React, so we may be in the middle of a browser event.


	  if (currentEventTime !== NoTimestamp) {
	    // Use the same start time for all updates until we enter React again.
	    return currentEventTime;
	  } // This is the first update since React yielded. Compute a new start time.


	  currentEventTime = now();
	  return currentEventTime;
	}
	function requestUpdateLane(fiber) {
	  // Special cases
	  var mode = fiber.mode;

	  if ((mode & BlockingMode) === NoMode) {
	    return SyncLane;
	  } else if ((mode & ConcurrentMode) === NoMode) {
	    return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
	  } // The algorithm for assigning an update to a lane should be stable for all
	  // updates at the same priority within the same event. To do this, the inputs
	  // to the algorithm must be the same. For example, we use the `renderLanes`
	  // to avoid choosing a lane that is already in the middle of rendering.
	  //
	  // However, the "included" lanes could be mutated in between updates in the
	  // same event, like if you perform an update inside `flushSync`. Or any other
	  // code path that might call `prepareFreshStack`.
	  //
	  // The trick we use is to cache the first of each of these inputs within an
	  // event. Then reset the cached values once we can be sure the event is over.
	  // Our heuristic for that is whenever we enter a concurrent work loop.
	  //
	  // We'll do the same for `currentEventPendingLanes` below.


	  if (currentEventWipLanes === NoLanes) {
	    currentEventWipLanes = workInProgressRootIncludedLanes;
	  }

	  var isTransition = requestCurrentTransition() !== NoTransition;

	  if (isTransition) {
	    if (currentEventPendingLanes !== NoLanes) {
	      currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
	    }

	    return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
	  } // TODO: Remove this dependency on the Scheduler priority.
	  // To do that, we're replacing it with an update lane priority.


	  var schedulerPriority = getCurrentPriorityLevel(); // The old behavior was using the priority level of the Scheduler.
	  // This couples React to the Scheduler internals, so we're replacing it
	  // with the currentUpdateLanePriority above. As an example of how this
	  // could be problematic, if we're not inside `Scheduler.runWithPriority`,
	  // then we'll get the priority of the current running Scheduler task,
	  // which is probably not what we want.

	  var lane;

	  if ( // TODO: Temporary. We're removing the concept of discrete updates.
	  (executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
	    lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
	  } else {
	    var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);

	    lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
	  }

	  return lane;
	}

	function requestRetryLane(fiber) {
	  // This is a fork of `requestUpdateLane` designed specifically for Suspense
	  // "retries" — a special update that attempts to flip a Suspense boundary
	  // from its placeholder state to its primary/resolved state.
	  // Special cases
	  var mode = fiber.mode;

	  if ((mode & BlockingMode) === NoMode) {
	    return SyncLane;
	  } else if ((mode & ConcurrentMode) === NoMode) {
	    return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
	  } // See `requestUpdateLane` for explanation of `currentEventWipLanes`


	  if (currentEventWipLanes === NoLanes) {
	    currentEventWipLanes = workInProgressRootIncludedLanes;
	  }

	  return findRetryLane(currentEventWipLanes);
	}

	function scheduleUpdateOnFiber(fiber, lane, eventTime) {
	  checkForNestedUpdates();
	  warnAboutRenderPhaseUpdatesInDEV(fiber);
	  var root = markUpdateLaneFromFiberToRoot(fiber, lane);

	  if (root === null) {
	    warnAboutUpdateOnUnmountedFiberInDEV(fiber);
	    return null;
	  } // Mark that the root has a pending update.


	  markRootUpdated(root, lane, eventTime);

	  if (root === workInProgressRoot) {
	    // Received an update to a tree that's in the middle of rendering. Mark
	    // that there was an interleaved update work on this root. Unless the
	    // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
	    // phase update. In that case, we don't treat render phase updates as if
	    // they were interleaved, for backwards compat reasons.
	    {
	      workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
	    }

	    if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
	      // The root already suspended with a delay, which means this render
	      // definitely won't finish. Since we have a new update, let's mark it as
	      // suspended now, right before marking the incoming update. This has the
	      // effect of interrupting the current render and switching to the update.
	      // TODO: Make sure this doesn't override pings that happen while we've
	      // already started rendering.
	      markRootSuspended$1(root, workInProgressRootRenderLanes);
	    }
	  } // TODO: requestUpdateLanePriority also reads the priority. Pass the
	  // priority as an argument to that function and this one.


	  var priorityLevel = getCurrentPriorityLevel();

	  if (lane === SyncLane) {
	    if ( // Check if we're inside unbatchedUpdates
	    (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
	    (executionContext & (RenderContext | CommitContext)) === NoContext) {
	      // Register pending interactions on the root to avoid losing traced interaction data.
	      schedulePendingInteractions(root, lane); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
	      // root inside of batchedUpdates should be synchronous, but layout updates
	      // should be deferred until the end of the batch.

	      performSyncWorkOnRoot(root);
	    } else {
	      ensureRootIsScheduled(root, eventTime);
	      schedulePendingInteractions(root, lane);

	      if (executionContext === NoContext) {
	        // Flush the synchronous work now, unless we're already working or inside
	        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
	        // scheduleCallbackForFiber to preserve the ability to schedule a callback
	        // without immediately flushing it. We only do this for user-initiated
	        // updates, to preserve historical behavior of legacy mode.
	        resetRenderTimer();
	        flushSyncCallbackQueue();
	      }
	    }
	  } else {
	    // Schedule a discrete update but only if it's not Sync.
	    if ((executionContext & DiscreteEventContext) !== NoContext && ( // Only updates at user-blocking priority or greater are considered
	    // discrete, even inside a discrete event.
	    priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
	      // This is the result of a discrete event. Track the lowest priority
	      // discrete update per root so we can flush them early, if needed.
	      if (rootsWithPendingDiscreteUpdates === null) {
	        rootsWithPendingDiscreteUpdates = new Set([root]);
	      } else {
	        rootsWithPendingDiscreteUpdates.add(root);
	      }
	    } // Schedule other updates after in case the callback is sync.


	    ensureRootIsScheduled(root, eventTime);
	    schedulePendingInteractions(root, lane);
	  } // We use this when assigning a lane for a transition inside
	  // `requestUpdateLane`. We assume it's the same as the root being updated,
	  // since in the common case of a single root app it probably is. If it's not
	  // the same root, then it's not a huge deal, we just might batch more stuff
	  // together more than necessary.


	  mostRecentlyUpdatedRoot = root;
	} // This is split into a separate function so we can mark a fiber with pending
	// work without treating it as a typical update that originates from an event;
	// e.g. retrying a Suspense boundary isn't an update, but it does schedule work
	// on a fiber.

	function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
	  // Update the source fiber's lanes
	  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
	  var alternate = sourceFiber.alternate;

	  if (alternate !== null) {
	    alternate.lanes = mergeLanes(alternate.lanes, lane);
	  }

	  {
	    if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
	      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
	    }
	  } // Walk the parent path to the root and update the child expiration time.


	  var node = sourceFiber;
	  var parent = sourceFiber.return;

	  while (parent !== null) {
	    parent.childLanes = mergeLanes(parent.childLanes, lane);
	    alternate = parent.alternate;

	    if (alternate !== null) {
	      alternate.childLanes = mergeLanes(alternate.childLanes, lane);
	    } else {
	      {
	        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
	          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
	        }
	      }
	    }

	    node = parent;
	    parent = parent.return;
	  }

	  if (node.tag === HostRoot) {
	    var root = node.stateNode;
	    return root;
	  } else {
	    return null;
	  }
	} // Use this function to schedule a task for a root. There's only one task per
	// root; if a task was already scheduled, we'll check to make sure the priority
	// of the existing task is the same as the priority of the next level that the
	// root has work on. This function is called on every update, and right before
	// exiting a task.


	function ensureRootIsScheduled(root, currentTime) {
	  var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
	  // expired so we know to work on those next.

	  markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.

	  var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes); // This returns the priority level computed during the `getNextLanes` call.

	  var newCallbackPriority = returnNextLanesPriority();

	  if (nextLanes === NoLanes) {
	    // Special case: There's nothing to work on.
	    if (existingCallbackNode !== null) {
	      cancelCallback(existingCallbackNode);
	      root.callbackNode = null;
	      root.callbackPriority = NoLanePriority;
	    }

	    return;
	  } // Check if there's an existing task. We may be able to reuse it.


	  if (existingCallbackNode !== null) {
	    var existingCallbackPriority = root.callbackPriority;

	    if (existingCallbackPriority === newCallbackPriority) {
	      // The priority hasn't changed. We can reuse the existing task. Exit.
	      return;
	    } // The priority changed. Cancel the existing callback. We'll schedule a new
	    // one below.


	    cancelCallback(existingCallbackNode);
	  } // Schedule a new callback.


	  var newCallbackNode;

	  if (newCallbackPriority === SyncLanePriority) {
	    // Special case: Sync React callbacks are scheduled on a special
	    // internal queue
	    newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
	  } else if (newCallbackPriority === SyncBatchedLanePriority) {
	    newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root));
	  } else {
	    var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
	    newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
	  }

	  root.callbackPriority = newCallbackPriority;
	  root.callbackNode = newCallbackNode;
	} // This is the entry point for every concurrent task, i.e. anything that
	// goes through Scheduler.


	function performConcurrentWorkOnRoot(root) {
	  // Since we know we're in a React event, we can clear the current
	  // event time. The next update will compute a new event time.
	  currentEventTime = NoTimestamp;
	  currentEventWipLanes = NoLanes;
	  currentEventPendingLanes = NoLanes;

	  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
	    {
	      throw Error( "Should not already be working." );
	    }
	  } // Flush any pending passive effects before deciding which lanes to work on,
	  // in case they schedule additional work.


	  var originalCallbackNode = root.callbackNode;
	  var didFlushPassiveEffects = flushPassiveEffects();

	  if (didFlushPassiveEffects) {
	    // Something in the passive effect phase may have canceled the current task.
	    // Check if the task node for this root was changed.
	    if (root.callbackNode !== originalCallbackNode) {
	      // The current task was canceled. Exit. We don't need to call
	      // `ensureRootIsScheduled` because the check above implies either that
	      // there's a new task, or that there's no remaining work on this root.
	      return null;
	    }
	  } // Determine the next expiration time to work on, using the fields stored
	  // on the root.


	  var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

	  if (lanes === NoLanes) {
	    // Defensive coding. This is never expected to happen.
	    return null;
	  }

	  var exitStatus = renderRootConcurrent(root, lanes);

	  if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
	    // The render included lanes that were updated during the render phase.
	    // For example, when unhiding a hidden tree, we include all the lanes
	    // that were previously skipped when the tree was hidden. That set of
	    // lanes is a superset of the lanes we started rendering with.
	    //
	    // So we'll throw out the current work and restart.
	    prepareFreshStack(root, NoLanes);
	  } else if (exitStatus !== RootIncomplete) {
	    if (exitStatus === RootErrored) {
	      executionContext |= RetryAfterError; // If an error occurred during hydration,
	      // discard server response and fall back to client side render.

	      if (root.hydrate) {
	        root.hydrate = false;
	        clearContainer(root.containerInfo);
	      } // If something threw an error, try rendering one more time. We'll render
	      // synchronously to block concurrent data mutations, and we'll includes
	      // all pending updates are included. If it still fails after the second
	      // attempt, we'll give up and commit the resulting tree.


	      lanes = getLanesToRetrySynchronouslyOnError(root);

	      if (lanes !== NoLanes) {
	        exitStatus = renderRootSync(root, lanes);
	      }
	    }

	    if (exitStatus === RootFatalErrored) {
	      var fatalError = workInProgressRootFatalError;
	      prepareFreshStack(root, NoLanes);
	      markRootSuspended$1(root, lanes);
	      ensureRootIsScheduled(root, now());
	      throw fatalError;
	    } // We now have a consistent tree. The next step is either to commit it,
	    // or, if something suspended, wait to commit it after a timeout.


	    var finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    root.finishedLanes = lanes;
	    finishConcurrentRender(root, exitStatus, lanes);
	  }

	  ensureRootIsScheduled(root, now());

	  if (root.callbackNode === originalCallbackNode) {
	    // The task node scheduled for this root is the same one that's
	    // currently executed. Need to return a continuation.
	    return performConcurrentWorkOnRoot.bind(null, root);
	  }

	  return null;
	}

	function finishConcurrentRender(root, exitStatus, lanes) {
	  switch (exitStatus) {
	    case RootIncomplete:
	    case RootFatalErrored:
	      {
	        {
	          {
	            throw Error( "Root did not complete. This is a bug in React." );
	          }
	        }
	      }
	    // Flow knows about invariant, so it complains if I add a break
	    // statement, but eslint doesn't know about invariant, so it complains
	    // if I do. eslint-disable-next-line no-fallthrough

	    case RootErrored:
	      {
	        // We should have already attempted to retry this tree. If we reached
	        // this point, it errored again. Commit it.
	        commitRoot(root);
	        break;
	      }

	    case RootSuspended:
	      {
	        markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
	        // should immediately commit it or wait a bit.

	        if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
	        !shouldForceFlushFallbacksInDEV()) {
	          // This render only included retries, no updates. Throttle committing
	          // retries so that we don't show too many loading states too quickly.
	          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

	          if (msUntilTimeout > 10) {
	            var nextLanes = getNextLanes(root, NoLanes);

	            if (nextLanes !== NoLanes) {
	              // There's additional work on this root.
	              break;
	            }

	            var suspendedLanes = root.suspendedLanes;

	            if (!isSubsetOfLanes(suspendedLanes, lanes)) {
	              // We should prefer to render the fallback of at the last
	              // suspended level. Ping the last suspended level to try
	              // rendering it again.
	              // FIXME: What if the suspended lanes are Idle? Should not restart.
	              requestEventTime();
	              markRootPinged(root, suspendedLanes);
	              break;
	            } // The render is suspended, it hasn't timed out, and there's no
	            // lower priority work to do. Instead of committing the fallback
	            // immediately, wait for more data to arrive.


	            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
	            break;
	          }
	        } // The work expired. Commit immediately.


	        commitRoot(root);
	        break;
	      }

	    case RootSuspendedWithDelay:
	      {
	        markRootSuspended$1(root, lanes);

	        if (includesOnlyTransitions(lanes)) {
	          // This is a transition, so we should exit without committing a
	          // placeholder and without scheduling a timeout. Delay indefinitely
	          // until we receive more data.
	          break;
	        }

	        {
	          // This is not a transition, but we did trigger an avoided state.
	          // Schedule a placeholder to display after a short delay, using the Just
	          // Noticeable Difference.
	          // TODO: Is the JND optimization worth the added complexity? If this is
	          // the only reason we track the event time, then probably not.
	          // Consider removing.
	          var mostRecentEventTime = getMostRecentEventTime(root, lanes);
	          var eventTimeMs = mostRecentEventTime;
	          var timeElapsedMs = now() - eventTimeMs;

	          var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.


	          if (_msUntilTimeout > 10) {
	            // Instead of committing the fallback immediately, wait for more data
	            // to arrive.
	            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
	            break;
	          }
	        } // Commit the placeholder.


	        commitRoot(root);
	        break;
	      }

	    case RootCompleted:
	      {
	        // The work completed. Ready to commit.
	        commitRoot(root);
	        break;
	      }

	    default:
	      {
	        {
	          {
	            throw Error( "Unknown root exit status." );
	          }
	        }
	      }
	  }
	}

	function markRootSuspended$1(root, suspendedLanes) {
	  // When suspending, we should always exclude lanes that were pinged or (more
	  // rarely, since we try to avoid it) updated during the render phase.
	  // TODO: Lol maybe there's a better way to factor this besides this
	  // obnoxiously named function :)
	  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
	  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
	  markRootSuspended(root, suspendedLanes);
	} // This is the entry point for synchronous tasks that don't go
	// through Scheduler


	function performSyncWorkOnRoot(root) {
	  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
	    {
	      throw Error( "Should not already be working." );
	    }
	  }

	  flushPassiveEffects();
	  var lanes;
	  var exitStatus;

	  if (root === workInProgressRoot && includesSomeLane(root.expiredLanes, workInProgressRootRenderLanes)) {
	    // There's a partial tree, and at least one of its lanes has expired. Finish
	    // rendering it before rendering the rest of the expired work.
	    lanes = workInProgressRootRenderLanes;
	    exitStatus = renderRootSync(root, lanes);

	    if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
	      // The render included lanes that were updated during the render phase.
	      // For example, when unhiding a hidden tree, we include all the lanes
	      // that were previously skipped when the tree was hidden. That set of
	      // lanes is a superset of the lanes we started rendering with.
	      //
	      // Note that this only happens when part of the tree is rendered
	      // concurrently. If the whole tree is rendered synchronously, then there
	      // are no interleaved events.
	      lanes = getNextLanes(root, lanes);
	      exitStatus = renderRootSync(root, lanes);
	    }
	  } else {
	    lanes = getNextLanes(root, NoLanes);
	    exitStatus = renderRootSync(root, lanes);
	  }

	  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
	    executionContext |= RetryAfterError; // If an error occurred during hydration,
	    // discard server response and fall back to client side render.

	    if (root.hydrate) {
	      root.hydrate = false;
	      clearContainer(root.containerInfo);
	    } // If something threw an error, try rendering one more time. We'll render
	    // synchronously to block concurrent data mutations, and we'll includes
	    // all pending updates are included. If it still fails after the second
	    // attempt, we'll give up and commit the resulting tree.


	    lanes = getLanesToRetrySynchronouslyOnError(root);

	    if (lanes !== NoLanes) {
	      exitStatus = renderRootSync(root, lanes);
	    }
	  }

	  if (exitStatus === RootFatalErrored) {
	    var fatalError = workInProgressRootFatalError;
	    prepareFreshStack(root, NoLanes);
	    markRootSuspended$1(root, lanes);
	    ensureRootIsScheduled(root, now());
	    throw fatalError;
	  } // We now have a consistent tree. Because this is a sync render, we
	  // will commit it even if something suspended.


	  var finishedWork = root.current.alternate;
	  root.finishedWork = finishedWork;
	  root.finishedLanes = lanes;
	  commitRoot(root); // Before exiting, make sure there's a callback scheduled for the next
	  // pending level.

	  ensureRootIsScheduled(root, now());
	  return null;
	}
	function flushDiscreteUpdates() {
	  // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
	  // However, `act` uses `batchedUpdates`, so there's no way to distinguish
	  // those two cases. Need to fix this before exposing flushDiscreteUpdates
	  // as a public API.
	  if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
	    {
	      if ((executionContext & RenderContext) !== NoContext) {
	        error('unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
	      }
	    } // We're already rendering, so we can't synchronously flush pending work.
	    // This is probably a nested event dispatch triggered by a lifecycle/effect,
	    // like `el.focus()`. Exit.


	    return;
	  }

	  flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
	  // they fire before the next serial event.

	  flushPassiveEffects();
	}

	function flushPendingDiscreteUpdates() {
	  if (rootsWithPendingDiscreteUpdates !== null) {
	    // For each root with pending discrete updates, schedule a callback to
	    // immediately flush them.
	    var roots = rootsWithPendingDiscreteUpdates;
	    rootsWithPendingDiscreteUpdates = null;
	    roots.forEach(function (root) {
	      markDiscreteUpdatesExpired(root);
	      ensureRootIsScheduled(root, now());
	    });
	  } // Now flush the immediate queue.


	  flushSyncCallbackQueue();
	}

	function batchedUpdates$1(fn, a) {
	  var prevExecutionContext = executionContext;
	  executionContext |= BatchedContext;

	  try {
	    return fn(a);
	  } finally {
	    executionContext = prevExecutionContext;

	    if (executionContext === NoContext) {
	      // Flush the immediate callbacks that were scheduled during this batch
	      resetRenderTimer();
	      flushSyncCallbackQueue();
	    }
	  }
	}
	function batchedEventUpdates$1(fn, a) {
	  var prevExecutionContext = executionContext;
	  executionContext |= EventContext;

	  try {
	    return fn(a);
	  } finally {
	    executionContext = prevExecutionContext;

	    if (executionContext === NoContext) {
	      // Flush the immediate callbacks that were scheduled during this batch
	      resetRenderTimer();
	      flushSyncCallbackQueue();
	    }
	  }
	}
	function discreteUpdates$1(fn, a, b, c, d) {
	  var prevExecutionContext = executionContext;
	  executionContext |= DiscreteEventContext;

	  {
	    try {
	      return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
	    } finally {
	      executionContext = prevExecutionContext;

	      if (executionContext === NoContext) {
	        // Flush the immediate callbacks that were scheduled during this batch
	        resetRenderTimer();
	        flushSyncCallbackQueue();
	      }
	    }
	  }
	}
	function unbatchedUpdates(fn, a) {
	  var prevExecutionContext = executionContext;
	  executionContext &= ~BatchedContext;
	  executionContext |= LegacyUnbatchedContext;

	  try {
	    return fn(a);
	  } finally {
	    executionContext = prevExecutionContext;

	    if (executionContext === NoContext) {
	      // Flush the immediate callbacks that were scheduled during this batch
	      resetRenderTimer();
	      flushSyncCallbackQueue();
	    }
	  }
	}
	function flushSync(fn, a) {
	  var prevExecutionContext = executionContext;

	  if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
	    {
	      error('flushSync was called from inside a lifecycle method. React cannot ' + 'flush when React is already rendering. Consider moving this call to ' + 'a scheduler task or micro task.');
	    }

	    return fn(a);
	  }

	  executionContext |= BatchedContext;

	  {
	    try {
	      if (fn) {
	        return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
	      } else {
	        return undefined;
	      }
	    } finally {
	      executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
	      // Note that this will happen even if batchedUpdates is higher up
	      // the stack.

	      flushSyncCallbackQueue();
	    }
	  }
	}
	function pushRenderLanes(fiber, lanes) {
	  push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
	  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
	  workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
	}
	function popRenderLanes(fiber) {
	  subtreeRenderLanes = subtreeRenderLanesCursor.current;
	  pop(subtreeRenderLanesCursor, fiber);
	}

	function prepareFreshStack(root, lanes) {
	  root.finishedWork = null;
	  root.finishedLanes = NoLanes;
	  var timeoutHandle = root.timeoutHandle;

	  if (timeoutHandle !== noTimeout) {
	    // The root previous suspended and scheduled a timeout to commit a fallback
	    // state. Now that we have additional work, cancel the timeout.
	    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

	    cancelTimeout(timeoutHandle);
	  }

	  if (workInProgress !== null) {
	    var interruptedWork = workInProgress.return;

	    while (interruptedWork !== null) {
	      unwindInterruptedWork(interruptedWork);
	      interruptedWork = interruptedWork.return;
	    }
	  }

	  workInProgressRoot = root;
	  workInProgress = createWorkInProgress(root.current, null);
	  workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
	  workInProgressRootExitStatus = RootIncomplete;
	  workInProgressRootFatalError = null;
	  workInProgressRootSkippedLanes = NoLanes;
	  workInProgressRootUpdatedLanes = NoLanes;
	  workInProgressRootPingedLanes = NoLanes;

	  {
	    spawnedWorkDuringRender = null;
	  }

	  {
	    ReactStrictModeWarnings.discardPendingWarnings();
	  }
	}

	function handleError(root, thrownValue) {
	  do {
	    var erroredWork = workInProgress;

	    try {
	      // Reset module-level state that was set during the render phase.
	      resetContextDependencies();
	      resetHooksAfterThrow();
	      resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
	      // separate issue. Write a regression test using string refs.

	      ReactCurrentOwner$2.current = null;

	      if (erroredWork === null || erroredWork.return === null) {
	        // Expected to be working on a non-root fiber. This is a fatal error
	        // because there's no ancestor that can handle it; the root is
	        // supposed to capture all errors that weren't caught by an error
	        // boundary.
	        workInProgressRootExitStatus = RootFatalErrored;
	        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
	        // sibling, or the parent if there are no siblings. But since the root
	        // has no siblings nor a parent, we set it to null. Usually this is
	        // handled by `completeUnitOfWork` or `unwindWork`, but since we're
	        // intentionally not calling those, we need set it here.
	        // TODO: Consider calling `unwindWork` to pop the contexts.

	        workInProgress = null;
	        return;
	      }

	      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
	        // Record the time spent rendering before an error was thrown. This
	        // avoids inaccurate Profiler durations in the case of a
	        // suspended render.
	        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
	      }

	      throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
	      completeUnitOfWork(erroredWork);
	    } catch (yetAnotherThrownValue) {
	      // Something in the return path also threw.
	      thrownValue = yetAnotherThrownValue;

	      if (workInProgress === erroredWork && erroredWork !== null) {
	        // If this boundary has already errored, then we had trouble processing
	        // the error. Bubble it to the next boundary.
	        erroredWork = erroredWork.return;
	        workInProgress = erroredWork;
	      } else {
	        erroredWork = workInProgress;
	      }

	      continue;
	    } // Return to the normal work loop.


	    return;
	  } while (true);
	}

	function pushDispatcher() {
	  var prevDispatcher = ReactCurrentDispatcher$2.current;
	  ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;

	  if (prevDispatcher === null) {
	    // The React isomorphic package does not include a default dispatcher.
	    // Instead the first renderer will lazily attach one, in order to give
	    // nicer error messages.
	    return ContextOnlyDispatcher;
	  } else {
	    return prevDispatcher;
	  }
	}

	function popDispatcher(prevDispatcher) {
	  ReactCurrentDispatcher$2.current = prevDispatcher;
	}

	function pushInteractions(root) {
	  {
	    var prevInteractions = tracing$1.__interactionsRef.current;
	    tracing$1.__interactionsRef.current = root.memoizedInteractions;
	    return prevInteractions;
	  }
	}

	function popInteractions(prevInteractions) {
	  {
	    tracing$1.__interactionsRef.current = prevInteractions;
	  }
	}

	function markCommitTimeOfFallback() {
	  globalMostRecentFallbackTime = now();
	}
	function markSkippedUpdateLanes(lane) {
	  workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
	}
	function renderDidSuspend() {
	  if (workInProgressRootExitStatus === RootIncomplete) {
	    workInProgressRootExitStatus = RootSuspended;
	  }
	}
	function renderDidSuspendDelayIfPossible() {
	  if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
	    workInProgressRootExitStatus = RootSuspendedWithDelay;
	  } // Check if there are updates that we skipped tree that might have unblocked
	  // this render.


	  if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
	    // Mark the current render as suspended so that we switch to working on
	    // the updates that were skipped. Usually we only suspend at the end of
	    // the render phase.
	    // TODO: We should probably always mark the root as suspended immediately
	    // (inside this function), since by suspending at the end of the render
	    // phase introduces a potential mistake where we suspend lanes that were
	    // pinged or updated while we were rendering.
	    markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
	  }
	}
	function renderDidError() {
	  if (workInProgressRootExitStatus !== RootCompleted) {
	    workInProgressRootExitStatus = RootErrored;
	  }
	} // Called during render to determine if anything has suspended.
	// Returns false if we're not sure.

	function renderHasNotSuspendedYet() {
	  // If something errored or completed, we can't really be sure,
	  // so those are false.
	  return workInProgressRootExitStatus === RootIncomplete;
	}

	function renderRootSync(root, lanes) {
	  var prevExecutionContext = executionContext;
	  executionContext |= RenderContext;
	  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
	  // and prepare a fresh one. Otherwise we'll continue where we left off.

	  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
	    prepareFreshStack(root, lanes);
	    startWorkOnPendingInteractions(root, lanes);
	  }

	  var prevInteractions = pushInteractions(root);

	  do {
	    try {
	      workLoopSync();
	      break;
	    } catch (thrownValue) {
	      handleError(root, thrownValue);
	    }
	  } while (true);

	  resetContextDependencies();

	  {
	    popInteractions(prevInteractions);
	  }

	  executionContext = prevExecutionContext;
	  popDispatcher(prevDispatcher);

	  if (workInProgress !== null) {
	    // This is a sync render, so we should have finished the whole tree.
	    {
	      {
	        throw Error( "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }
	  }


	  workInProgressRoot = null;
	  workInProgressRootRenderLanes = NoLanes;
	  return workInProgressRootExitStatus;
	} // The work loop is an extremely hot path. Tell Closure not to inline it.

	/** @noinline */


	function workLoopSync() {
	  // Already timed out, so perform work without checking if we need to yield.
	  while (workInProgress !== null) {
	    performUnitOfWork(workInProgress);
	  }
	}

	function renderRootConcurrent(root, lanes) {
	  var prevExecutionContext = executionContext;
	  executionContext |= RenderContext;
	  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
	  // and prepare a fresh one. Otherwise we'll continue where we left off.

	  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
	    resetRenderTimer();
	    prepareFreshStack(root, lanes);
	    startWorkOnPendingInteractions(root, lanes);
	  }

	  var prevInteractions = pushInteractions(root);

	  do {
	    try {
	      workLoopConcurrent();
	      break;
	    } catch (thrownValue) {
	      handleError(root, thrownValue);
	    }
	  } while (true);

	  resetContextDependencies();

	  {
	    popInteractions(prevInteractions);
	  }

	  popDispatcher(prevDispatcher);
	  executionContext = prevExecutionContext;


	  if (workInProgress !== null) {

	    return RootIncomplete;
	  } else {


	    workInProgressRoot = null;
	    workInProgressRootRenderLanes = NoLanes; // Return the final exit status.

	    return workInProgressRootExitStatus;
	  }
	}
	/** @noinline */


	function workLoopConcurrent() {
	  // Perform work until Scheduler asks us to yield
	  while (workInProgress !== null && !shouldYield()) {
	    performUnitOfWork(workInProgress);
	  }
	}

	function performUnitOfWork(unitOfWork) {
	  // The current, flushed, state of this fiber is the alternate. Ideally
	  // nothing should rely on this, but relying on it here means that we don't
	  // need an additional field on the work in progress.
	  var current = unitOfWork.alternate;
	  setCurrentFiber(unitOfWork);
	  var next;

	  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {
	    startProfilerTimer(unitOfWork);
	    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
	    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
	  } else {
	    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
	  }

	  resetCurrentFiber();
	  unitOfWork.memoizedProps = unitOfWork.pendingProps;

	  if (next === null) {
	    // If this doesn't spawn new work, complete the current work.
	    completeUnitOfWork(unitOfWork);
	  } else {
	    workInProgress = next;
	  }

	  ReactCurrentOwner$2.current = null;
	}

	function completeUnitOfWork(unitOfWork) {
	  // Attempt to complete the current unit of work, then move to the next
	  // sibling. If there are no more siblings, return to the parent fiber.
	  var completedWork = unitOfWork;

	  do {
	    // The current, flushed, state of this fiber is the alternate. Ideally
	    // nothing should rely on this, but relying on it here means that we don't
	    // need an additional field on the work in progress.
	    var current = completedWork.alternate;
	    var returnFiber = completedWork.return; // Check if the work completed or if something threw.

	    if ((completedWork.flags & Incomplete) === NoFlags) {
	      setCurrentFiber(completedWork);
	      var next = void 0;

	      if ( (completedWork.mode & ProfileMode) === NoMode) {
	        next = completeWork(current, completedWork, subtreeRenderLanes);
	      } else {
	        startProfilerTimer(completedWork);
	        next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.

	        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
	      }

	      resetCurrentFiber();

	      if (next !== null) {
	        // Completing this fiber spawned new work. Work on that next.
	        workInProgress = next;
	        return;
	      }

	      resetChildLanes(completedWork);

	      if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
	      (returnFiber.flags & Incomplete) === NoFlags) {
	        // Append all the effects of the subtree and this fiber onto the effect
	        // list of the parent. The completion order of the children affects the
	        // side-effect order.
	        if (returnFiber.firstEffect === null) {
	          returnFiber.firstEffect = completedWork.firstEffect;
	        }

	        if (completedWork.lastEffect !== null) {
	          if (returnFiber.lastEffect !== null) {
	            returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
	          }

	          returnFiber.lastEffect = completedWork.lastEffect;
	        } // If this fiber had side-effects, we append it AFTER the children's
	        // side-effects. We can perform certain side-effects earlier if needed,
	        // by doing multiple passes over the effect list. We don't want to
	        // schedule our own side-effect on our own list because if end up
	        // reusing children we'll schedule this effect onto itself since we're
	        // at the end.


	        var flags = completedWork.flags; // Skip both NoWork and PerformedWork tags when creating the effect
	        // list. PerformedWork effect is read by React DevTools but shouldn't be
	        // committed.

	        if (flags > PerformedWork) {
	          if (returnFiber.lastEffect !== null) {
	            returnFiber.lastEffect.nextEffect = completedWork;
	          } else {
	            returnFiber.firstEffect = completedWork;
	          }

	          returnFiber.lastEffect = completedWork;
	        }
	      }
	    } else {
	      // This fiber did not complete because something threw. Pop values off
	      // the stack without entering the complete phase. If this is a boundary,
	      // capture values if possible.
	      var _next = unwindWork(completedWork); // Because this fiber did not complete, don't reset its expiration time.


	      if (_next !== null) {
	        // If completing this work spawned new work, do that next. We'll come
	        // back here again.
	        // Since we're restarting, remove anything that is not a host effect
	        // from the effect tag.
	        _next.flags &= HostEffectMask;
	        workInProgress = _next;
	        return;
	      }

	      if ( (completedWork.mode & ProfileMode) !== NoMode) {
	        // Record the render duration for the fiber that errored.
	        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.

	        var actualDuration = completedWork.actualDuration;
	        var child = completedWork.child;

	        while (child !== null) {
	          actualDuration += child.actualDuration;
	          child = child.sibling;
	        }

	        completedWork.actualDuration = actualDuration;
	      }

	      if (returnFiber !== null) {
	        // Mark the parent fiber as incomplete and clear its effect list.
	        returnFiber.firstEffect = returnFiber.lastEffect = null;
	        returnFiber.flags |= Incomplete;
	      }
	    }

	    var siblingFiber = completedWork.sibling;

	    if (siblingFiber !== null) {
	      // If there is more work to do in this returnFiber, do that next.
	      workInProgress = siblingFiber;
	      return;
	    } // Otherwise, return to the parent


	    completedWork = returnFiber; // Update the next thing we're working on in case something throws.

	    workInProgress = completedWork;
	  } while (completedWork !== null); // We've reached the root.


	  if (workInProgressRootExitStatus === RootIncomplete) {
	    workInProgressRootExitStatus = RootCompleted;
	  }
	}

	function resetChildLanes(completedWork) {
	  if ( // TODO: Move this check out of the hot path by moving `resetChildLanes`
	  // to switch statement in `completeWork`.
	  (completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
	    // The children of this component are hidden. Don't bubble their
	    // expiration times.
	    return;
	  }

	  var newChildLanes = NoLanes; // Bubble up the earliest expiration time.

	  if ( (completedWork.mode & ProfileMode) !== NoMode) {
	    // In profiling mode, resetChildExpirationTime is also used to reset
	    // profiler durations.
	    var actualDuration = completedWork.actualDuration;
	    var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
	    // only be updated if work is done on the fiber (i.e. it doesn't bailout).
	    // When work is done, it should bubble to the parent's actualDuration. If
	    // the fiber has not been cloned though, (meaning no work was done), then
	    // this value will reflect the amount of time spent working on a previous
	    // render. In that case it should not bubble. We determine whether it was
	    // cloned by comparing the child pointer.

	    var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
	    var child = completedWork.child;

	    while (child !== null) {
	      newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));

	      if (shouldBubbleActualDurations) {
	        actualDuration += child.actualDuration;
	      }

	      treeBaseDuration += child.treeBaseDuration;
	      child = child.sibling;
	    }

	    var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;

	    if (isTimedOutSuspense) {
	      // Don't count time spent in a timed out Suspense subtree as part of the base duration.
	      var primaryChildFragment = completedWork.child;

	      if (primaryChildFragment !== null) {
	        treeBaseDuration -= primaryChildFragment.treeBaseDuration;
	      }
	    }

	    completedWork.actualDuration = actualDuration;
	    completedWork.treeBaseDuration = treeBaseDuration;
	  } else {
	    var _child = completedWork.child;

	    while (_child !== null) {
	      newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
	      _child = _child.sibling;
	    }
	  }

	  completedWork.childLanes = newChildLanes;
	}

	function commitRoot(root) {
	  var renderPriorityLevel = getCurrentPriorityLevel();
	  runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root, renderPriorityLevel));
	  return null;
	}

	function commitRootImpl(root, renderPriorityLevel) {
	  do {
	    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
	    // means `flushPassiveEffects` will sometimes result in additional
	    // passive effects. So we need to keep flushing in a loop until there are
	    // no more pending effects.
	    // TODO: Might be better if `flushPassiveEffects` did not automatically
	    // flush synchronous work at the end, to avoid factoring hazards like this.
	    flushPassiveEffects();
	  } while (rootWithPendingPassiveEffects !== null);

	  flushRenderPhaseStrictModeWarningsInDEV();

	  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
	    {
	      throw Error( "Should not already be working." );
	    }
	  }

	  var finishedWork = root.finishedWork;
	  var lanes = root.finishedLanes;

	  if (finishedWork === null) {

	    return null;
	  }

	  root.finishedWork = null;
	  root.finishedLanes = NoLanes;

	  if (!(finishedWork !== root.current)) {
	    {
	      throw Error( "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  } // commitRoot never returns a continuation; it always finishes synchronously.
	  // So we can clear these now to allow a new callback to be scheduled.


	  root.callbackNode = null; // Update the first and last pending times on this root. The new first
	  // pending time is whatever is left on the root fiber.

	  var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
	  markRootFinished(root, remainingLanes); // Clear already finished discrete updates in case that a later call of
	  // `flushDiscreteUpdates` starts a useless render pass which may cancels
	  // a scheduled timeout.

	  if (rootsWithPendingDiscreteUpdates !== null) {
	    if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root)) {
	      rootsWithPendingDiscreteUpdates.delete(root);
	    }
	  }

	  if (root === workInProgressRoot) {
	    // We can reset these now that they are finished.
	    workInProgressRoot = null;
	    workInProgress = null;
	    workInProgressRootRenderLanes = NoLanes;
	  } // Get the list of effects.


	  var firstEffect;

	  if (finishedWork.flags > PerformedWork) {
	    // A fiber's effect list consists only of its children, not itself. So if
	    // the root has an effect, we need to add it to the end of the list. The
	    // resulting list is the set that would belong to the root's parent, if it
	    // had one; that is, all the effects in the tree including the root.
	    if (finishedWork.lastEffect !== null) {
	      finishedWork.lastEffect.nextEffect = finishedWork;
	      firstEffect = finishedWork.firstEffect;
	    } else {
	      firstEffect = finishedWork;
	    }
	  } else {
	    // There is no effect on the root.
	    firstEffect = finishedWork.firstEffect;
	  }

	  if (firstEffect !== null) {

	    var prevExecutionContext = executionContext;
	    executionContext |= CommitContext;
	    var prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles

	    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
	    // of the effect list for each phase: all mutation effects come before all
	    // layout effects, and so on.
	    // The first phase a "before mutation" phase. We use this phase to read the
	    // state of the host tree right before we mutate it. This is where
	    // getSnapshotBeforeUpdate is called.

	    focusedInstanceHandle = prepareForCommit(root.containerInfo);
	    shouldFireAfterActiveInstanceBlur = false;
	    nextEffect = firstEffect;

	    do {
	      {
	        invokeGuardedCallback(null, commitBeforeMutationEffects, null);

	        if (hasCaughtError()) {
	          if (!(nextEffect !== null)) {
	            {
	              throw Error( "Should be working on an effect." );
	            }
	          }

	          var error = clearCaughtError();
	          captureCommitPhaseError(nextEffect, error);
	          nextEffect = nextEffect.nextEffect;
	        }
	      }
	    } while (nextEffect !== null); // We no longer need to track the active instance fiber


	    focusedInstanceHandle = null;

	    {
	      // Mark the current commit time to be shared by all Profilers in this
	      // batch. This enables them to be grouped later.
	      recordCommitTime();
	    } // The next phase is the mutation phase, where we mutate the host tree.


	    nextEffect = firstEffect;

	    do {
	      {
	        invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

	        if (hasCaughtError()) {
	          if (!(nextEffect !== null)) {
	            {
	              throw Error( "Should be working on an effect." );
	            }
	          }

	          var _error = clearCaughtError();

	          captureCommitPhaseError(nextEffect, _error);
	          nextEffect = nextEffect.nextEffect;
	        }
	      }
	    } while (nextEffect !== null);

	    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
	    // the mutation phase, so that the previous tree is still current during
	    // componentWillUnmount, but before the layout phase, so that the finished
	    // work is current during componentDidMount/Update.

	    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
	    // the host tree after it's been mutated. The idiomatic use case for this is
	    // layout, but class component lifecycles also fire here for legacy reasons.

	    nextEffect = firstEffect;

	    do {
	      {
	        invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);

	        if (hasCaughtError()) {
	          if (!(nextEffect !== null)) {
	            {
	              throw Error( "Should be working on an effect." );
	            }
	          }

	          var _error2 = clearCaughtError();

	          captureCommitPhaseError(nextEffect, _error2);
	          nextEffect = nextEffect.nextEffect;
	        }
	      }
	    } while (nextEffect !== null);

	    nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
	    // opportunity to paint.

	    requestPaint();

	    {
	      popInteractions(prevInteractions);
	    }

	    executionContext = prevExecutionContext;
	  } else {
	    // No effects.
	    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
	    // no effects.
	    // TODO: Maybe there's a better way to report this.

	    {
	      recordCommitTime();
	    }
	  }

	  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

	  if (rootDoesHavePassiveEffects) {
	    // This commit has passive effects. Stash a reference to them. But don't
	    // schedule a callback until after flushing layout work.
	    rootDoesHavePassiveEffects = false;
	    rootWithPendingPassiveEffects = root;
	    pendingPassiveEffectsLanes = lanes;
	    pendingPassiveEffectsRenderPriority = renderPriorityLevel;
	  } else {
	    // We are done with the effect chain at this point so let's clear the
	    // nextEffect pointers to assist with GC. If we have passive effects, we'll
	    // clear this in flushPassiveEffects.
	    nextEffect = firstEffect;

	    while (nextEffect !== null) {
	      var nextNextEffect = nextEffect.nextEffect;
	      nextEffect.nextEffect = null;

	      if (nextEffect.flags & Deletion) {
	        detachFiberAfterEffects(nextEffect);
	      }

	      nextEffect = nextNextEffect;
	    }
	  } // Read this again, since an effect might have updated it


	  remainingLanes = root.pendingLanes; // Check if there's remaining work on this root

	  if (remainingLanes !== NoLanes) {
	    {
	      if (spawnedWorkDuringRender !== null) {
	        var expirationTimes = spawnedWorkDuringRender;
	        spawnedWorkDuringRender = null;

	        for (var i = 0; i < expirationTimes.length; i++) {
	          scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
	        }
	      }

	      schedulePendingInteractions(root, remainingLanes);
	    }
	  } else {
	    // If there's no remaining work, we can clear the set of already failed
	    // error boundaries.
	    legacyErrorBoundariesThatAlreadyFailed = null;
	  }

	  {
	    if (!rootDidHavePassiveEffects) {
	      // If there are no passive effects, then we can complete the pending interactions.
	      // Otherwise, we'll wait until after the passive effects are flushed.
	      // Wait to do this until after remaining work has been scheduled,
	      // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
	      finishPendingInteractions(root, lanes);
	    }
	  }

	  if (remainingLanes === SyncLane) {
	    // Count the number of times the root synchronously re-renders without
	    // finishing. If there are too many, it indicates an infinite update loop.
	    if (root === rootWithNestedUpdates) {
	      nestedUpdateCount++;
	    } else {
	      nestedUpdateCount = 0;
	      rootWithNestedUpdates = root;
	    }
	  } else {
	    nestedUpdateCount = 0;
	  }

	  onCommitRoot(finishedWork.stateNode, renderPriorityLevel);

	  {
	    onCommitRoot$1();
	  } // Always call this before exiting `commitRoot`, to ensure that any
	  // additional work on this root is scheduled.


	  ensureRootIsScheduled(root, now());

	  if (hasUncaughtError) {
	    hasUncaughtError = false;
	    var _error3 = firstUncaughtError;
	    firstUncaughtError = null;
	    throw _error3;
	  }

	  if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
	    // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
	    // synchronously, but layout updates should be deferred until the end
	    // of the batch.


	    return null;
	  } // If layout work was scheduled, flush it now.


	  flushSyncCallbackQueue();

	  return null;
	}

	function commitBeforeMutationEffects() {
	  while (nextEffect !== null) {
	    var current = nextEffect.alternate;

	    if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
	      if ((nextEffect.flags & Deletion) !== NoFlags) {
	        if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
	          shouldFireAfterActiveInstanceBlur = true;
	        }
	      } else {
	        // TODO: Move this out of the hot path using a dedicated effect tag.
	        if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
	          shouldFireAfterActiveInstanceBlur = true;
	        }
	      }
	    }

	    var flags = nextEffect.flags;

	    if ((flags & Snapshot) !== NoFlags) {
	      setCurrentFiber(nextEffect);
	      commitBeforeMutationLifeCycles(current, nextEffect);
	      resetCurrentFiber();
	    }

	    if ((flags & Passive) !== NoFlags) {
	      // If there are passive effects, schedule a callback to flush at
	      // the earliest opportunity.
	      if (!rootDoesHavePassiveEffects) {
	        rootDoesHavePassiveEffects = true;
	        scheduleCallback(NormalPriority$1, function () {
	          flushPassiveEffects();
	          return null;
	        });
	      }
	    }

	    nextEffect = nextEffect.nextEffect;
	  }
	}

	function commitMutationEffects(root, renderPriorityLevel) {
	  // TODO: Should probably move the bulk of this function to commitWork.
	  while (nextEffect !== null) {
	    setCurrentFiber(nextEffect);
	    var flags = nextEffect.flags;

	    if (flags & ContentReset) {
	      commitResetTextContent(nextEffect);
	    }

	    if (flags & Ref) {
	      var current = nextEffect.alternate;

	      if (current !== null) {
	        commitDetachRef(current);
	      }
	    } // The following switch statement is only concerned about placement,
	    // updates, and deletions. To avoid needing to add a case for every possible
	    // bitmap value, we remove the secondary effects from the effect tag and
	    // switch on that value.


	    var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);

	    switch (primaryFlags) {
	      case Placement:
	        {
	          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
	          // inserted, before any life-cycles like componentDidMount gets called.
	          // TODO: findDOMNode doesn't rely on this any more but isMounted does
	          // and isMounted is deprecated anyway so we should be able to kill this.

	          nextEffect.flags &= ~Placement;
	          break;
	        }

	      case PlacementAndUpdate:
	        {
	          // Placement
	          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
	          // inserted, before any life-cycles like componentDidMount gets called.

	          nextEffect.flags &= ~Placement; // Update

	          var _current = nextEffect.alternate;
	          commitWork(_current, nextEffect);
	          break;
	        }

	      case Hydrating:
	        {
	          nextEffect.flags &= ~Hydrating;
	          break;
	        }

	      case HydratingAndUpdate:
	        {
	          nextEffect.flags &= ~Hydrating; // Update

	          var _current2 = nextEffect.alternate;
	          commitWork(_current2, nextEffect);
	          break;
	        }

	      case Update:
	        {
	          var _current3 = nextEffect.alternate;
	          commitWork(_current3, nextEffect);
	          break;
	        }

	      case Deletion:
	        {
	          commitDeletion(root, nextEffect);
	          break;
	        }
	    }

	    resetCurrentFiber();
	    nextEffect = nextEffect.nextEffect;
	  }
	}

	function commitLayoutEffects(root, committedLanes) {


	  while (nextEffect !== null) {
	    setCurrentFiber(nextEffect);
	    var flags = nextEffect.flags;

	    if (flags & (Update | Callback)) {
	      var current = nextEffect.alternate;
	      commitLifeCycles(root, current, nextEffect);
	    }

	    {
	      if (flags & Ref) {
	        commitAttachRef(nextEffect);
	      }
	    }

	    resetCurrentFiber();
	    nextEffect = nextEffect.nextEffect;
	  }
	}

	function flushPassiveEffects() {
	  // Returns whether passive effects were flushed.
	  if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
	    var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
	    pendingPassiveEffectsRenderPriority = NoPriority$1;

	    {
	      return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
	    }
	  }

	  return false;
	}
	function enqueuePendingPassiveHookEffectMount(fiber, effect) {
	  pendingPassiveHookEffectsMount.push(effect, fiber);

	  if (!rootDoesHavePassiveEffects) {
	    rootDoesHavePassiveEffects = true;
	    scheduleCallback(NormalPriority$1, function () {
	      flushPassiveEffects();
	      return null;
	    });
	  }
	}
	function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
	  pendingPassiveHookEffectsUnmount.push(effect, fiber);

	  {
	    fiber.flags |= PassiveUnmountPendingDev;
	    var alternate = fiber.alternate;

	    if (alternate !== null) {
	      alternate.flags |= PassiveUnmountPendingDev;
	    }
	  }

	  if (!rootDoesHavePassiveEffects) {
	    rootDoesHavePassiveEffects = true;
	    scheduleCallback(NormalPriority$1, function () {
	      flushPassiveEffects();
	      return null;
	    });
	  }
	}

	function invokePassiveEffectCreate(effect) {
	  var create = effect.create;
	  effect.destroy = create();
	}

	function flushPassiveEffectsImpl() {
	  if (rootWithPendingPassiveEffects === null) {
	    return false;
	  }

	  var root = rootWithPendingPassiveEffects;
	  var lanes = pendingPassiveEffectsLanes;
	  rootWithPendingPassiveEffects = null;
	  pendingPassiveEffectsLanes = NoLanes;

	  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
	    {
	      throw Error( "Cannot flush passive effects while already rendering." );
	    }
	  }

	  {
	    isFlushingPassiveEffects = true;
	  }

	  var prevExecutionContext = executionContext;
	  executionContext |= CommitContext;
	  var prevInteractions = pushInteractions(root); // It's important that ALL pending passive effect destroy functions are called
	  // before ANY passive effect create functions are called.
	  // Otherwise effects in sibling components might interfere with each other.
	  // e.g. a destroy function in one component may unintentionally override a ref
	  // value set by a create function in another component.
	  // Layout effects have the same constraint.
	  // First pass: Destroy stale passive effects.

	  var unmountEffects = pendingPassiveHookEffectsUnmount;
	  pendingPassiveHookEffectsUnmount = [];

	  for (var i = 0; i < unmountEffects.length; i += 2) {
	    var _effect = unmountEffects[i];
	    var fiber = unmountEffects[i + 1];
	    var destroy = _effect.destroy;
	    _effect.destroy = undefined;

	    {
	      fiber.flags &= ~PassiveUnmountPendingDev;
	      var alternate = fiber.alternate;

	      if (alternate !== null) {
	        alternate.flags &= ~PassiveUnmountPendingDev;
	      }
	    }

	    if (typeof destroy === 'function') {
	      {
	        setCurrentFiber(fiber);

	        {
	          invokeGuardedCallback(null, destroy, null);
	        }

	        if (hasCaughtError()) {
	          if (!(fiber !== null)) {
	            {
	              throw Error( "Should be working on an effect." );
	            }
	          }

	          var error = clearCaughtError();
	          captureCommitPhaseError(fiber, error);
	        }

	        resetCurrentFiber();
	      }
	    }
	  } // Second pass: Create new passive effects.


	  var mountEffects = pendingPassiveHookEffectsMount;
	  pendingPassiveHookEffectsMount = [];

	  for (var _i = 0; _i < mountEffects.length; _i += 2) {
	    var _effect2 = mountEffects[_i];
	    var _fiber = mountEffects[_i + 1];

	    {
	      setCurrentFiber(_fiber);

	      {
	        invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
	      }

	      if (hasCaughtError()) {
	        if (!(_fiber !== null)) {
	          {
	            throw Error( "Should be working on an effect." );
	          }
	        }

	        var _error4 = clearCaughtError();

	        captureCommitPhaseError(_fiber, _error4);
	      }

	      resetCurrentFiber();
	    }
	  } // Note: This currently assumes there are no passive effects on the root fiber
	  // because the root is not part of its own effect list.
	  // This could change in the future.


	  var effect = root.current.firstEffect;

	  while (effect !== null) {
	    var nextNextEffect = effect.nextEffect; // Remove nextEffect pointer to assist GC

	    effect.nextEffect = null;

	    if (effect.flags & Deletion) {
	      detachFiberAfterEffects(effect);
	    }

	    effect = nextNextEffect;
	  }

	  {
	    popInteractions(prevInteractions);
	    finishPendingInteractions(root, lanes);
	  }

	  {
	    isFlushingPassiveEffects = false;
	  }

	  executionContext = prevExecutionContext;
	  flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
	  // exceeds the limit, we'll fire a warning.

	  nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
	  return true;
	}

	function isAlreadyFailedLegacyErrorBoundary(instance) {
	  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
	}
	function markLegacyErrorBoundaryAsFailed(instance) {
	  if (legacyErrorBoundariesThatAlreadyFailed === null) {
	    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
	  } else {
	    legacyErrorBoundariesThatAlreadyFailed.add(instance);
	  }
	}

	function prepareToThrowUncaughtError(error) {
	  if (!hasUncaughtError) {
	    hasUncaughtError = true;
	    firstUncaughtError = error;
	  }
	}

	var onUncaughtError = prepareToThrowUncaughtError;

	function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
	  var errorInfo = createCapturedValue(error, sourceFiber);
	  var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
	  enqueueUpdate(rootFiber, update);
	  var eventTime = requestEventTime();
	  var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);

	  if (root !== null) {
	    markRootUpdated(root, SyncLane, eventTime);
	    ensureRootIsScheduled(root, eventTime);
	    schedulePendingInteractions(root, SyncLane);
	  }
	}

	function captureCommitPhaseError(sourceFiber, error) {
	  if (sourceFiber.tag === HostRoot) {
	    // Error was thrown at the root. There is no parent, so the root
	    // itself should capture it.
	    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
	    return;
	  }

	  var fiber = sourceFiber.return;

	  while (fiber !== null) {
	    if (fiber.tag === HostRoot) {
	      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
	      return;
	    } else if (fiber.tag === ClassComponent) {
	      var ctor = fiber.type;
	      var instance = fiber.stateNode;

	      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
	        var errorInfo = createCapturedValue(error, sourceFiber);
	        var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
	        enqueueUpdate(fiber, update);
	        var eventTime = requestEventTime();
	        var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);

	        if (root !== null) {
	          markRootUpdated(root, SyncLane, eventTime);
	          ensureRootIsScheduled(root, eventTime);
	          schedulePendingInteractions(root, SyncLane);
	        } else {
	          // This component has already been unmounted.
	          // We can't schedule any follow up work for the root because the fiber is already unmounted,
	          // but we can still call the log-only boundary so the error isn't swallowed.
	          //
	          // TODO This is only a temporary bandaid for the old reconciler fork.
	          // We can delete this special case once the new fork is merged.
	          if (typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
	            try {
	              instance.componentDidCatch(error, errorInfo);
	            } catch (errorToIgnore) {// TODO Ignore this error? Rethrow it?
	              // This is kind of an edge case.
	            }
	          }
	        }

	        return;
	      }
	    }

	    fiber = fiber.return;
	  }
	}
	function pingSuspendedRoot(root, wakeable, pingedLanes) {
	  var pingCache = root.pingCache;

	  if (pingCache !== null) {
	    // The wakeable resolved, so we no longer need to memoize, because it will
	    // never be thrown again.
	    pingCache.delete(wakeable);
	  }

	  var eventTime = requestEventTime();
	  markRootPinged(root, pingedLanes);

	  if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
	    // Received a ping at the same priority level at which we're currently
	    // rendering. We might want to restart this render. This should mirror
	    // the logic of whether or not a root suspends once it completes.
	    // TODO: If we're rendering sync either due to Sync, Batched or expired,
	    // we should probably never restart.
	    // If we're suspended with delay, or if it's a retry, we'll always suspend
	    // so we can always restart.
	    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
	      // Restart from the root.
	      prepareFreshStack(root, NoLanes);
	    } else {
	      // Even though we can't restart right now, we might get an
	      // opportunity later. So we mark this render as having a ping.
	      workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
	    }
	  }

	  ensureRootIsScheduled(root, eventTime);
	  schedulePendingInteractions(root, pingedLanes);
	}

	function retryTimedOutBoundary(boundaryFiber, retryLane) {
	  // The boundary fiber (a Suspense component or SuspenseList component)
	  // previously was rendered in its fallback state. One of the promises that
	  // suspended it has resolved, which means at least part of the tree was
	  // likely unblocked. Try rendering again, at a new expiration time.
	  if (retryLane === NoLane) {
	    retryLane = requestRetryLane(boundaryFiber);
	  } // TODO: Special case idle priority?


	  var eventTime = requestEventTime();
	  var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);

	  if (root !== null) {
	    markRootUpdated(root, retryLane, eventTime);
	    ensureRootIsScheduled(root, eventTime);
	    schedulePendingInteractions(root, retryLane);
	  }
	}
	function resolveRetryWakeable(boundaryFiber, wakeable) {
	  var retryLane = NoLane; // Default

	  var retryCache;

	  {
	    retryCache = boundaryFiber.stateNode;
	  }

	  if (retryCache !== null) {
	    // The wakeable resolved, so we no longer need to memoize, because it will
	    // never be thrown again.
	    retryCache.delete(wakeable);
	  }

	  retryTimedOutBoundary(boundaryFiber, retryLane);
	} // Computes the next Just Noticeable Difference (JND) boundary.
	// The theory is that a person can't tell the difference between small differences in time.
	// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
	// difference in the experience. However, waiting for longer might mean that we can avoid
	// showing an intermediate loading state. The longer we have already waited, the harder it
	// is to tell small differences in time. Therefore, the longer we've already waited,
	// the longer we can wait additionally. At some point we have to give up though.
	// We pick a train model where the next boundary commits at a consistent schedule.
	// These particular numbers are vague estimates. We expect to adjust them based on research.

	function jnd(timeElapsed) {
	  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
	}

	function checkForNestedUpdates() {
	  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
	    nestedUpdateCount = 0;
	    rootWithNestedUpdates = null;

	    {
	      {
	        throw Error( "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops." );
	      }
	    }
	  }

	  {
	    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
	      nestedPassiveUpdateCount = 0;

	      error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
	    }
	  }
	}

	function flushRenderPhaseStrictModeWarningsInDEV() {
	  {
	    ReactStrictModeWarnings.flushLegacyContextWarning();

	    {
	      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
	    }
	  }
	}

	var didWarnStateUpdateForNotYetMountedComponent = null;

	function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
	  {
	    if ((executionContext & RenderContext) !== NoContext) {
	      // We let the other warning about render phase updates deal with this one.
	      return;
	    }

	    if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
	      return;
	    }

	    var tag = fiber.tag;

	    if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
	      // Only warn for user-defined components, not internal ones like Suspense.
	      return;
	    } // We show the whole stack but dedupe on the top component's name because
	    // the problematic code almost always lies inside that component.


	    var componentName = getComponentName(fiber.type) || 'ReactComponent';

	    if (didWarnStateUpdateForNotYetMountedComponent !== null) {
	      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
	        return;
	      }

	      didWarnStateUpdateForNotYetMountedComponent.add(componentName);
	    } else {
	      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
	    }

	    var previousFiber = current;

	    try {
	      setCurrentFiber(fiber);

	      error("Can't perform a React state update on a component that hasn't mounted yet. " + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');
	    } finally {
	      if (previousFiber) {
	        setCurrentFiber(fiber);
	      } else {
	        resetCurrentFiber();
	      }
	    }
	  }
	}

	var didWarnStateUpdateForUnmountedComponent = null;

	function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
	  {
	    var tag = fiber.tag;

	    if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
	      // Only warn for user-defined components, not internal ones like Suspense.
	      return;
	    } // If there are pending passive effects unmounts for this Fiber,
	    // we can assume that they would have prevented this update.


	    if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
	      return;
	    } // We show the whole stack but dedupe on the top component's name because
	    // the problematic code almost always lies inside that component.


	    var componentName = getComponentName(fiber.type) || 'ReactComponent';

	    if (didWarnStateUpdateForUnmountedComponent !== null) {
	      if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
	        return;
	      }

	      didWarnStateUpdateForUnmountedComponent.add(componentName);
	    } else {
	      didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
	    }

	    if (isFlushingPassiveEffects) ; else {
	      var previousFiber = current;

	      try {
	        setCurrentFiber(fiber);

	        error("Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function');
	      } finally {
	        if (previousFiber) {
	          setCurrentFiber(fiber);
	        } else {
	          resetCurrentFiber();
	        }
	      }
	    }
	  }
	}

	var beginWork$1;

	{
	  var dummyFiber = null;

	  beginWork$1 = function (current, unitOfWork, lanes) {
	    // If a component throws an error, we replay it again in a synchronously
	    // dispatched event, so that the debugger will treat it as an uncaught
	    // error See ReactErrorUtils for more information.
	    // Before entering the begin phase, copy the work-in-progress onto a dummy
	    // fiber. If beginWork throws, we'll use this to reset the state.
	    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

	    try {
	      return beginWork(current, unitOfWork, lanes);
	    } catch (originalError) {
	      if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
	        // Don't replay promises. Treat everything else like an error.
	        throw originalError;
	      } // Keep this code in sync with handleError; any changes here must have
	      // corresponding changes there.


	      resetContextDependencies();
	      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
	      // same fiber again.
	      // Unwind the failed stack frame

	      unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.

	      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

	      if ( unitOfWork.mode & ProfileMode) {
	        // Reset the profiler timer.
	        startProfilerTimer(unitOfWork);
	      } // Run beginWork again.


	      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);

	      if (hasCaughtError()) {
	        var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
	        // Rethrow this error instead of the original one.

	        throw replayError;
	      } else {
	        // This branch is reachable if the render phase is impure.
	        throw originalError;
	      }
	    }
	  };
	}

	var didWarnAboutUpdateInRender = false;
	var didWarnAboutUpdateInRenderForAnotherComponent;

	{
	  didWarnAboutUpdateInRenderForAnotherComponent = new Set();
	}

	function warnAboutRenderPhaseUpdatesInDEV(fiber) {
	  {
	    if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
	      switch (fiber.tag) {
	        case FunctionComponent:
	        case ForwardRef:
	        case SimpleMemoComponent:
	          {
	            var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

	            var dedupeKey = renderingComponentName;

	            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
	              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
	              var setStateComponentName = getComponentName(fiber.type) || 'Unknown';

	              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
	            }

	            break;
	          }

	        case ClassComponent:
	          {
	            if (!didWarnAboutUpdateInRender) {
	              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');

	              didWarnAboutUpdateInRender = true;
	            }

	            break;
	          }
	      }
	    }
	  }
	} // a 'shared' variable that changes when act() opens/closes in tests.


	var IsThisRendererActing = {
	  current: false
	};
	function warnIfNotScopedWithMatchingAct(fiber) {
	  {
	    if ( IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
	      var previousFiber = current;

	      try {
	        setCurrentFiber(fiber);

	        error("It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' + // Break up imports to avoid accidentally parsing them as dependencies.
	        'import {act} fr' + "om 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' + // Break up imports to avoid accidentally parsing them as dependencies.
	        'import TestRenderer fr' + "om react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);');
	      } finally {
	        if (previousFiber) {
	          setCurrentFiber(fiber);
	        } else {
	          resetCurrentFiber();
	        }
	      }
	    }
	  }
	}
	function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
	  {
	    if ( (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
	      error('An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));
	    }
	  }
	}

	function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
	  {
	    if ( executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
	      var previousFiber = current;

	      try {
	        setCurrentFiber(fiber);

	        error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));
	      } finally {
	        if (previousFiber) {
	          setCurrentFiber(fiber);
	        } else {
	          resetCurrentFiber();
	        }
	      }
	    }
	  }
	}

	var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.

	var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
	// scheduler is the actual recommendation. The alternative could be a testing build,
	// a new lib, or whatever; we dunno just yet. This message is for early adopters
	// to get their tests right.

	function warnIfUnmockedScheduler(fiber) {
	  {
	    if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
	      if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
	        didWarnAboutUnmockedScheduler = true;

	        error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + // Break up requires to avoid accidentally parsing them as dependencies.
	        "jest.mock('scheduler', () => require" + "('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://reactjs.org/link/mock-scheduler');
	      }
	    }
	  }
	}

	function computeThreadID(root, lane) {
	  // Interaction threads are unique per root and expiration time.
	  // NOTE: Intentionally unsound cast. All that matters is that it's a number
	  // and it represents a batch of work. Could make a helper function instead,
	  // but meh this is fine for now.
	  return lane * 1000 + root.interactionThreadID;
	}

	function markSpawnedWork(lane) {

	  if (spawnedWorkDuringRender === null) {
	    spawnedWorkDuringRender = [lane];
	  } else {
	    spawnedWorkDuringRender.push(lane);
	  }
	}

	function scheduleInteractions(root, lane, interactions) {

	  if (interactions.size > 0) {
	    var pendingInteractionMap = root.pendingInteractionMap;
	    var pendingInteractions = pendingInteractionMap.get(lane);

	    if (pendingInteractions != null) {
	      interactions.forEach(function (interaction) {
	        if (!pendingInteractions.has(interaction)) {
	          // Update the pending async work count for previously unscheduled interaction.
	          interaction.__count++;
	        }

	        pendingInteractions.add(interaction);
	      });
	    } else {
	      pendingInteractionMap.set(lane, new Set(interactions)); // Update the pending async work count for the current interactions.

	      interactions.forEach(function (interaction) {
	        interaction.__count++;
	      });
	    }

	    var subscriber = tracing$1.__subscriberRef.current;

	    if (subscriber !== null) {
	      var threadID = computeThreadID(root, lane);
	      subscriber.onWorkScheduled(interactions, threadID);
	    }
	  }
	}

	function schedulePendingInteractions(root, lane) {

	  scheduleInteractions(root, lane, tracing$1.__interactionsRef.current);
	}

	function startWorkOnPendingInteractions(root, lanes) {
	  // we can accurately attribute time spent working on it, And so that cascading
	  // work triggered during the render phase will be associated with it.


	  var interactions = new Set();
	  root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledLane) {
	    if (includesSomeLane(lanes, scheduledLane)) {
	      scheduledInteractions.forEach(function (interaction) {
	        return interactions.add(interaction);
	      });
	    }
	  }); // Store the current set of interactions on the FiberRoot for a few reasons:
	  // We can re-use it in hot functions like performConcurrentWorkOnRoot()
	  // without having to recalculate it. We will also use it in commitWork() to
	  // pass to any Profiler onRender() hooks. This also provides DevTools with a
	  // way to access it when the onCommitRoot() hook is called.

	  root.memoizedInteractions = interactions;

	  if (interactions.size > 0) {
	    var subscriber = tracing$1.__subscriberRef.current;

	    if (subscriber !== null) {
	      var threadID = computeThreadID(root, lanes);

	      try {
	        subscriber.onWorkStarted(interactions, threadID);
	      } catch (error) {
	        // If the subscriber throws, rethrow it in a separate task
	        scheduleCallback(ImmediatePriority$1, function () {
	          throw error;
	        });
	      }
	    }
	  }
	}

	function finishPendingInteractions(root, committedLanes) {

	  var remainingLanesAfterCommit = root.pendingLanes;
	  var subscriber;

	  try {
	    subscriber = tracing$1.__subscriberRef.current;

	    if (subscriber !== null && root.memoizedInteractions.size > 0) {
	      // FIXME: More than one lane can finish in a single commit.
	      var threadID = computeThreadID(root, committedLanes);
	      subscriber.onWorkStopped(root.memoizedInteractions, threadID);
	    }
	  } catch (error) {
	    // If the subscriber throws, rethrow it in a separate task
	    scheduleCallback(ImmediatePriority$1, function () {
	      throw error;
	    });
	  } finally {
	    // Clear completed interactions from the pending Map.
	    // Unless the render was suspended or cascading work was scheduled,
	    // In which case– leave pending interactions until the subsequent render.
	    var pendingInteractionMap = root.pendingInteractionMap;
	    pendingInteractionMap.forEach(function (scheduledInteractions, lane) {
	      // Only decrement the pending interaction count if we're done.
	      // If there's still work at the current priority,
	      // That indicates that we are waiting for suspense data.
	      if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
	        pendingInteractionMap.delete(lane);
	        scheduledInteractions.forEach(function (interaction) {
	          interaction.__count--;

	          if (subscriber !== null && interaction.__count === 0) {
	            try {
	              subscriber.onInteractionScheduledWorkCompleted(interaction);
	            } catch (error) {
	              // If the subscriber throws, rethrow it in a separate task
	              scheduleCallback(ImmediatePriority$1, function () {
	                throw error;
	              });
	            }
	          }
	        });
	      }
	    });
	  }
	} // `act` testing API

	function shouldForceFlushFallbacksInDEV() {
	  // Never force flush in production. This function should get stripped out.
	  return  actingUpdatesScopeDepth > 0;
	}
	// so we can tell if any async act() calls try to run in parallel.


	var actingUpdatesScopeDepth = 0;

	function detachFiberAfterEffects(fiber) {
	  fiber.sibling = null;
	  fiber.stateNode = null;
	}

	var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

	var failedBoundaries = null;
	var setRefreshHandler = function (handler) {
	  {
	    resolveFamily = handler;
	  }
	};
	function resolveFunctionForHotReloading(type) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return type;
	    }

	    var family = resolveFamily(type);

	    if (family === undefined) {
	      return type;
	    } // Use the latest known implementation.


	    return family.current;
	  }
	}
	function resolveClassForHotReloading(type) {
	  // No implementation differences.
	  return resolveFunctionForHotReloading(type);
	}
	function resolveForwardRefForHotReloading(type) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return type;
	    }

	    var family = resolveFamily(type);

	    if (family === undefined) {
	      // Check if we're dealing with a real forwardRef. Don't want to crash early.
	      if (type !== null && type !== undefined && typeof type.render === 'function') {
	        // ForwardRef is special because its resolved .type is an object,
	        // but it's possible that we only have its inner render function in the map.
	        // If that inner render function is different, we'll build a new forwardRef type.
	        var currentRender = resolveFunctionForHotReloading(type.render);

	        if (type.render !== currentRender) {
	          var syntheticType = {
	            $$typeof: REACT_FORWARD_REF_TYPE,
	            render: currentRender
	          };

	          if (type.displayName !== undefined) {
	            syntheticType.displayName = type.displayName;
	          }

	          return syntheticType;
	        }
	      }

	      return type;
	    } // Use the latest known implementation.


	    return family.current;
	  }
	}
	function isCompatibleFamilyForHotReloading(fiber, element) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return false;
	    }

	    var prevType = fiber.elementType;
	    var nextType = element.type; // If we got here, we know types aren't === equal.

	    var needsCompareFamilies = false;
	    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

	    switch (fiber.tag) {
	      case ClassComponent:
	        {
	          if (typeof nextType === 'function') {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case FunctionComponent:
	        {
	          if (typeof nextType === 'function') {
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            // We don't know the inner type yet.
	            // We're going to assume that the lazy inner type is stable,
	            // and so it is sufficient to avoid reconciling it away.
	            // We're not going to unwrap or actually use the new lazy type.
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case ForwardRef:
	        {
	          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case MemoComponent:
	      case SimpleMemoComponent:
	        {
	          if ($$typeofNextType === REACT_MEMO_TYPE) {
	            // TODO: if it was but can no longer be simple,
	            // we shouldn't set this.
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      default:
	        return false;
	    } // Check if both types have a family and it's the same one.


	    if (needsCompareFamilies) {
	      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
	      // This means both of them need to be registered to preserve state.
	      // If we unwrapped and compared the inner types for wrappers instead,
	      // then we would risk falsely saying two separate memo(Foo)
	      // calls are equivalent because they wrap the same Foo function.
	      var prevFamily = resolveFamily(prevType);

	      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
	        return true;
	      }
	    }

	    return false;
	  }
	}
	function markFailedErrorBoundaryForHotReloading(fiber) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return;
	    }

	    if (typeof WeakSet !== 'function') {
	      return;
	    }

	    if (failedBoundaries === null) {
	      failedBoundaries = new WeakSet();
	    }

	    failedBoundaries.add(fiber);
	  }
	}
	var scheduleRefresh = function (root, update) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return;
	    }

	    var staleFamilies = update.staleFamilies,
	        updatedFamilies = update.updatedFamilies;
	    flushPassiveEffects();
	    flushSync(function () {
	      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
	    });
	  }
	};
	var scheduleRoot = function (root, element) {
	  {
	    if (root.context !== emptyContextObject) {
	      // Super edge case: root has a legacy _renderSubtree context
	      // but we don't know the parentComponent so we can't pass it.
	      // Just ignore. We'll delete this with _renderSubtree code path later.
	      return;
	    }

	    flushPassiveEffects();
	    flushSync(function () {
	      updateContainer(element, root, null, null);
	    });
	  }
	};

	function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
	  {
	    var alternate = fiber.alternate,
	        child = fiber.child,
	        sibling = fiber.sibling,
	        tag = fiber.tag,
	        type = fiber.type;
	    var candidateType = null;

	    switch (tag) {
	      case FunctionComponent:
	      case SimpleMemoComponent:
	      case ClassComponent:
	        candidateType = type;
	        break;

	      case ForwardRef:
	        candidateType = type.render;
	        break;
	    }

	    if (resolveFamily === null) {
	      throw new Error('Expected resolveFamily to be set during hot reload.');
	    }

	    var needsRender = false;
	    var needsRemount = false;

	    if (candidateType !== null) {
	      var family = resolveFamily(candidateType);

	      if (family !== undefined) {
	        if (staleFamilies.has(family)) {
	          needsRemount = true;
	        } else if (updatedFamilies.has(family)) {
	          if (tag === ClassComponent) {
	            needsRemount = true;
	          } else {
	            needsRender = true;
	          }
	        }
	      }
	    }

	    if (failedBoundaries !== null) {
	      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
	        needsRemount = true;
	      }
	    }

	    if (needsRemount) {
	      fiber._debugNeedsRemount = true;
	    }

	    if (needsRemount || needsRender) {
	      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
	    }

	    if (child !== null && !needsRemount) {
	      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
	    }

	    if (sibling !== null) {
	      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
	    }
	  }
	}

	var findHostInstancesForRefresh = function (root, families) {
	  {
	    var hostInstances = new Set();
	    var types = new Set(families.map(function (family) {
	      return family.current;
	    }));
	    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
	    return hostInstances;
	  }
	};

	function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
	  {
	    var child = fiber.child,
	        sibling = fiber.sibling,
	        tag = fiber.tag,
	        type = fiber.type;
	    var candidateType = null;

	    switch (tag) {
	      case FunctionComponent:
	      case SimpleMemoComponent:
	      case ClassComponent:
	        candidateType = type;
	        break;

	      case ForwardRef:
	        candidateType = type.render;
	        break;
	    }

	    var didMatch = false;

	    if (candidateType !== null) {
	      if (types.has(candidateType)) {
	        didMatch = true;
	      }
	    }

	    if (didMatch) {
	      // We have a match. This only drills down to the closest host components.
	      // There's no need to search deeper because for the purpose of giving
	      // visual feedback, "flashing" outermost parent rectangles is sufficient.
	      findHostInstancesForFiberShallowly(fiber, hostInstances);
	    } else {
	      // If there's no match, maybe there will be one further down in the child tree.
	      if (child !== null) {
	        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
	      }
	    }

	    if (sibling !== null) {
	      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
	    }
	  }
	}

	function findHostInstancesForFiberShallowly(fiber, hostInstances) {
	  {
	    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

	    if (foundHostInstances) {
	      return;
	    } // If we didn't find any host children, fallback to closest host parent.


	    var node = fiber;

	    while (true) {
	      switch (node.tag) {
	        case HostComponent:
	          hostInstances.add(node.stateNode);
	          return;

	        case HostPortal:
	          hostInstances.add(node.stateNode.containerInfo);
	          return;

	        case HostRoot:
	          hostInstances.add(node.stateNode.containerInfo);
	          return;
	      }

	      if (node.return === null) {
	        throw new Error('Expected to reach root first.');
	      }

	      node = node.return;
	    }
	  }
	}

	function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
	  {
	    var node = fiber;
	    var foundHostInstances = false;

	    while (true) {
	      if (node.tag === HostComponent) {
	        // We got a match.
	        foundHostInstances = true;
	        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
	      } else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === fiber) {
	        return foundHostInstances;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === fiber) {
	          return foundHostInstances;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  }

	  return false;
	}

	var hasBadMapPolyfill;

	{
	  hasBadMapPolyfill = false;

	  try {
	    var nonExtensibleObject = Object.preventExtensions({});
	    /* eslint-disable no-new */

	    new Map([[nonExtensibleObject, null]]);
	    new Set([nonExtensibleObject]);
	    /* eslint-enable no-new */
	  } catch (e) {
	    // TODO: Consider warning about bad polyfills
	    hasBadMapPolyfill = true;
	  }
	}

	var debugCounter = 1;

	function FiberNode(tag, pendingProps, key, mode) {
	  // Instance
	  this.tag = tag;
	  this.key = key;
	  this.elementType = null;
	  this.type = null;
	  this.stateNode = null; // Fiber

	  this.return = null;
	  this.child = null;
	  this.sibling = null;
	  this.index = 0;
	  this.ref = null;
	  this.pendingProps = pendingProps;
	  this.memoizedProps = null;
	  this.updateQueue = null;
	  this.memoizedState = null;
	  this.dependencies = null;
	  this.mode = mode; // Effects

	  this.flags = NoFlags;
	  this.nextEffect = null;
	  this.firstEffect = null;
	  this.lastEffect = null;
	  this.lanes = NoLanes;
	  this.childLanes = NoLanes;
	  this.alternate = null;

	  {
	    // Note: The following is done to avoid a v8 performance cliff.
	    //
	    // Initializing the fields below to smis and later updating them with
	    // double values will cause Fibers to end up having separate shapes.
	    // This behavior/bug has something to do with Object.preventExtension().
	    // Fortunately this only impacts DEV builds.
	    // Unfortunately it makes React unusably slow for some applications.
	    // To work around this, initialize the fields below with doubles.
	    //
	    // Learn more about this here:
	    // https://github.com/facebook/react/issues/14365
	    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
	    this.actualDuration = Number.NaN;
	    this.actualStartTime = Number.NaN;
	    this.selfBaseDuration = Number.NaN;
	    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
	    // This won't trigger the performance cliff mentioned above,
	    // and it simplifies other profiler code (including DevTools).

	    this.actualDuration = 0;
	    this.actualStartTime = -1;
	    this.selfBaseDuration = 0;
	    this.treeBaseDuration = 0;
	  }

	  {
	    // This isn't directly used but is handy for debugging internals:
	    this._debugID = debugCounter++;
	    this._debugSource = null;
	    this._debugOwner = null;
	    this._debugNeedsRemount = false;
	    this._debugHookTypes = null;

	    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
	      Object.preventExtensions(this);
	    }
	  }
	} // This is a constructor function, rather than a POJO constructor, still
	// please ensure we do the following:
	// 1) Nobody should add any instance methods on this. Instance methods can be
	//    more difficult to predict when they get optimized and they are almost
	//    never inlined properly in static compilers.
	// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
	//    always know when it is a fiber.
	// 3) We might want to experiment with using numeric keys since they are easier
	//    to optimize in a non-JIT environment.
	// 4) We can easily go from a constructor to a createFiber object literal if that
	//    is faster.
	// 5) It should be easy to port this to a C struct and keep a C implementation
	//    compatible.


	var createFiber = function (tag, pendingProps, key, mode) {
	  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
	  return new FiberNode(tag, pendingProps, key, mode);
	};

	function shouldConstruct$1(Component) {
	  var prototype = Component.prototype;
	  return !!(prototype && prototype.isReactComponent);
	}

	function isSimpleFunctionComponent(type) {
	  return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
	}
	function resolveLazyComponentTag(Component) {
	  if (typeof Component === 'function') {
	    return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
	  } else if (Component !== undefined && Component !== null) {
	    var $$typeof = Component.$$typeof;

	    if ($$typeof === REACT_FORWARD_REF_TYPE) {
	      return ForwardRef;
	    }

	    if ($$typeof === REACT_MEMO_TYPE) {
	      return MemoComponent;
	    }
	  }

	  return IndeterminateComponent;
	} // This is used to create an alternate fiber to do work on.

	function createWorkInProgress(current, pendingProps) {
	  var workInProgress = current.alternate;

	  if (workInProgress === null) {
	    // We use a double buffering pooling technique because we know that we'll
	    // only ever need at most two versions of a tree. We pool the "other" unused
	    // node that we're free to reuse. This is lazily created to avoid allocating
	    // extra objects for things that are never updated. It also allow us to
	    // reclaim the extra memory if needed.
	    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
	    workInProgress.elementType = current.elementType;
	    workInProgress.type = current.type;
	    workInProgress.stateNode = current.stateNode;

	    {
	      // DEV-only fields
	      workInProgress._debugID = current._debugID;
	      workInProgress._debugSource = current._debugSource;
	      workInProgress._debugOwner = current._debugOwner;
	      workInProgress._debugHookTypes = current._debugHookTypes;
	    }

	    workInProgress.alternate = current;
	    current.alternate = workInProgress;
	  } else {
	    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.

	    workInProgress.type = current.type; // We already have an alternate.
	    // Reset the effect tag.

	    workInProgress.flags = NoFlags; // The effect list is no longer valid.

	    workInProgress.nextEffect = null;
	    workInProgress.firstEffect = null;
	    workInProgress.lastEffect = null;

	    {
	      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
	      // This prevents time from endlessly accumulating in new commits.
	      // This has the downside of resetting values for different priority renders,
	      // But works for yielding (the common case) and should support resuming.
	      workInProgress.actualDuration = 0;
	      workInProgress.actualStartTime = -1;
	    }
	  }

	  workInProgress.childLanes = current.childLanes;
	  workInProgress.lanes = current.lanes;
	  workInProgress.child = current.child;
	  workInProgress.memoizedProps = current.memoizedProps;
	  workInProgress.memoizedState = current.memoizedState;
	  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
	  // it cannot be shared with the current fiber.

	  var currentDependencies = current.dependencies;
	  workInProgress.dependencies = currentDependencies === null ? null : {
	    lanes: currentDependencies.lanes,
	    firstContext: currentDependencies.firstContext
	  }; // These will be overridden during the parent's reconciliation

	  workInProgress.sibling = current.sibling;
	  workInProgress.index = current.index;
	  workInProgress.ref = current.ref;

	  {
	    workInProgress.selfBaseDuration = current.selfBaseDuration;
	    workInProgress.treeBaseDuration = current.treeBaseDuration;
	  }

	  {
	    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

	    switch (workInProgress.tag) {
	      case IndeterminateComponent:
	      case FunctionComponent:
	      case SimpleMemoComponent:
	        workInProgress.type = resolveFunctionForHotReloading(current.type);
	        break;

	      case ClassComponent:
	        workInProgress.type = resolveClassForHotReloading(current.type);
	        break;

	      case ForwardRef:
	        workInProgress.type = resolveForwardRefForHotReloading(current.type);
	        break;
	    }
	  }

	  return workInProgress;
	} // Used to reuse a Fiber for a second pass.

	function resetWorkInProgress(workInProgress, renderLanes) {
	  // This resets the Fiber to what createFiber or createWorkInProgress would
	  // have set the values to before during the first pass. Ideally this wouldn't
	  // be necessary but unfortunately many code paths reads from the workInProgress
	  // when they should be reading from current and writing to workInProgress.
	  // We assume pendingProps, index, key, ref, return are still untouched to
	  // avoid doing another reconciliation.
	  // Reset the effect tag but keep any Placement tags, since that's something
	  // that child fiber is setting, not the reconciliation.
	  workInProgress.flags &= Placement; // The effect list is no longer valid.

	  workInProgress.nextEffect = null;
	  workInProgress.firstEffect = null;
	  workInProgress.lastEffect = null;
	  var current = workInProgress.alternate;

	  if (current === null) {
	    // Reset to createFiber's initial values.
	    workInProgress.childLanes = NoLanes;
	    workInProgress.lanes = renderLanes;
	    workInProgress.child = null;
	    workInProgress.memoizedProps = null;
	    workInProgress.memoizedState = null;
	    workInProgress.updateQueue = null;
	    workInProgress.dependencies = null;
	    workInProgress.stateNode = null;

	    {
	      // Note: We don't reset the actualTime counts. It's useful to accumulate
	      // actual time across multiple render passes.
	      workInProgress.selfBaseDuration = 0;
	      workInProgress.treeBaseDuration = 0;
	    }
	  } else {
	    // Reset to the cloned values that createWorkInProgress would've.
	    workInProgress.childLanes = current.childLanes;
	    workInProgress.lanes = current.lanes;
	    workInProgress.child = current.child;
	    workInProgress.memoizedProps = current.memoizedProps;
	    workInProgress.memoizedState = current.memoizedState;
	    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.

	    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
	    // it cannot be shared with the current fiber.

	    var currentDependencies = current.dependencies;
	    workInProgress.dependencies = currentDependencies === null ? null : {
	      lanes: currentDependencies.lanes,
	      firstContext: currentDependencies.firstContext
	    };

	    {
	      // Note: We don't reset the actualTime counts. It's useful to accumulate
	      // actual time across multiple render passes.
	      workInProgress.selfBaseDuration = current.selfBaseDuration;
	      workInProgress.treeBaseDuration = current.treeBaseDuration;
	    }
	  }

	  return workInProgress;
	}
	function createHostRootFiber(tag) {
	  var mode;

	  if (tag === ConcurrentRoot) {
	    mode = ConcurrentMode | BlockingMode | StrictMode;
	  } else if (tag === BlockingRoot) {
	    mode = BlockingMode | StrictMode;
	  } else {
	    mode = NoMode;
	  }

	  if ( isDevToolsPresent) {
	    // Always collect profile timings when DevTools are present.
	    // This enables DevTools to start capturing timing at any point–
	    // Without some nodes in the tree having empty base times.
	    mode |= ProfileMode;
	  }

	  return createFiber(HostRoot, null, null, mode);
	}
	function createFiberFromTypeAndProps(type, // React$ElementType
	key, pendingProps, owner, mode, lanes) {
	  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

	  var resolvedType = type;

	  if (typeof type === 'function') {
	    if (shouldConstruct$1(type)) {
	      fiberTag = ClassComponent;

	      {
	        resolvedType = resolveClassForHotReloading(resolvedType);
	      }
	    } else {
	      {
	        resolvedType = resolveFunctionForHotReloading(resolvedType);
	      }
	    }
	  } else if (typeof type === 'string') {
	    fiberTag = HostComponent;
	  } else {
	    getTag: switch (type) {
	      case REACT_FRAGMENT_TYPE:
	        return createFiberFromFragment(pendingProps.children, mode, lanes, key);

	      case REACT_DEBUG_TRACING_MODE_TYPE:
	        fiberTag = Mode;
	        mode |= DebugTracingMode;
	        break;

	      case REACT_STRICT_MODE_TYPE:
	        fiberTag = Mode;
	        mode |= StrictMode;
	        break;

	      case REACT_PROFILER_TYPE:
	        return createFiberFromProfiler(pendingProps, mode, lanes, key);

	      case REACT_SUSPENSE_TYPE:
	        return createFiberFromSuspense(pendingProps, mode, lanes, key);

	      case REACT_SUSPENSE_LIST_TYPE:
	        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);

	      case REACT_OFFSCREEN_TYPE:
	        return createFiberFromOffscreen(pendingProps, mode, lanes, key);

	      case REACT_LEGACY_HIDDEN_TYPE:
	        return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);

	      case REACT_SCOPE_TYPE:

	      // eslint-disable-next-line no-fallthrough

	      default:
	        {
	          if (typeof type === 'object' && type !== null) {
	            switch (type.$$typeof) {
	              case REACT_PROVIDER_TYPE:
	                fiberTag = ContextProvider;
	                break getTag;

	              case REACT_CONTEXT_TYPE:
	                // This is a consumer
	                fiberTag = ContextConsumer;
	                break getTag;

	              case REACT_FORWARD_REF_TYPE:
	                fiberTag = ForwardRef;

	                {
	                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
	                }

	                break getTag;

	              case REACT_MEMO_TYPE:
	                fiberTag = MemoComponent;
	                break getTag;

	              case REACT_LAZY_TYPE:
	                fiberTag = LazyComponent;
	                resolvedType = null;
	                break getTag;

	              case REACT_BLOCK_TYPE:
	                fiberTag = Block;
	                break getTag;
	            }
	          }

	          var info = '';

	          {
	            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
	            }

	            var ownerName = owner ? getComponentName(owner.type) : null;

	            if (ownerName) {
	              info += '\n\nCheck the render method of `' + ownerName + '`.';
	            }
	          }

	          {
	            {
	              throw Error( "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info );
	            }
	          }
	        }
	    }
	  }

	  var fiber = createFiber(fiberTag, pendingProps, key, mode);
	  fiber.elementType = type;
	  fiber.type = resolvedType;
	  fiber.lanes = lanes;

	  {
	    fiber._debugOwner = owner;
	  }

	  return fiber;
	}
	function createFiberFromElement(element, mode, lanes) {
	  var owner = null;

	  {
	    owner = element._owner;
	  }

	  var type = element.type;
	  var key = element.key;
	  var pendingProps = element.props;
	  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);

	  {
	    fiber._debugSource = element._source;
	    fiber._debugOwner = element._owner;
	  }

	  return fiber;
	}
	function createFiberFromFragment(elements, mode, lanes, key) {
	  var fiber = createFiber(Fragment, elements, key, mode);
	  fiber.lanes = lanes;
	  return fiber;
	}

	function createFiberFromProfiler(pendingProps, mode, lanes, key) {
	  {
	    if (typeof pendingProps.id !== 'string') {
	      error('Profiler must specify an "id" as a prop');
	    }
	  }

	  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

	  fiber.elementType = REACT_PROFILER_TYPE;
	  fiber.type = REACT_PROFILER_TYPE;
	  fiber.lanes = lanes;

	  {
	    fiber.stateNode = {
	      effectDuration: 0,
	      passiveEffectDuration: 0
	    };
	  }

	  return fiber;
	}

	function createFiberFromSuspense(pendingProps, mode, lanes, key) {
	  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
	  // This needs to be fixed in getComponentName so that it relies on the tag
	  // instead.

	  fiber.type = REACT_SUSPENSE_TYPE;
	  fiber.elementType = REACT_SUSPENSE_TYPE;
	  fiber.lanes = lanes;
	  return fiber;
	}
	function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
	  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);

	  {
	    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
	    // This needs to be fixed in getComponentName so that it relies on the tag
	    // instead.
	    fiber.type = REACT_SUSPENSE_LIST_TYPE;
	  }

	  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
	  fiber.lanes = lanes;
	  return fiber;
	}
	function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
	  var fiber = createFiber(OffscreenComponent, pendingProps, key, mode); // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.
	  // This needs to be fixed in getComponentName so that it relies on the tag
	  // instead.

	  {
	    fiber.type = REACT_OFFSCREEN_TYPE;
	  }

	  fiber.elementType = REACT_OFFSCREEN_TYPE;
	  fiber.lanes = lanes;
	  return fiber;
	}
	function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
	  var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode); // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.
	  // This needs to be fixed in getComponentName so that it relies on the tag
	  // instead.

	  {
	    fiber.type = REACT_LEGACY_HIDDEN_TYPE;
	  }

	  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
	  fiber.lanes = lanes;
	  return fiber;
	}
	function createFiberFromText(content, mode, lanes) {
	  var fiber = createFiber(HostText, content, null, mode);
	  fiber.lanes = lanes;
	  return fiber;
	}
	function createFiberFromHostInstanceForDeletion() {
	  var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.

	  fiber.elementType = 'DELETED';
	  fiber.type = 'DELETED';
	  return fiber;
	}
	function createFiberFromPortal(portal, mode, lanes) {
	  var pendingProps = portal.children !== null ? portal.children : [];
	  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
	  fiber.lanes = lanes;
	  fiber.stateNode = {
	    containerInfo: portal.containerInfo,
	    pendingChildren: null,
	    // Used by persistent updates
	    implementation: portal.implementation
	  };
	  return fiber;
	} // Used for stashing WIP properties to replay failed work in DEV.

	function assignFiberPropertiesInDEV(target, source) {
	  if (target === null) {
	    // This Fiber's initial properties will always be overwritten.
	    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
	    target = createFiber(IndeterminateComponent, null, null, NoMode);
	  } // This is intentionally written as a list of all properties.
	  // We tried to use Object.assign() instead but this is called in
	  // the hottest path, and Object.assign() was too slow:
	  // https://github.com/facebook/react/issues/12502
	  // This code is DEV-only so size is not a concern.


	  target.tag = source.tag;
	  target.key = source.key;
	  target.elementType = source.elementType;
	  target.type = source.type;
	  target.stateNode = source.stateNode;
	  target.return = source.return;
	  target.child = source.child;
	  target.sibling = source.sibling;
	  target.index = source.index;
	  target.ref = source.ref;
	  target.pendingProps = source.pendingProps;
	  target.memoizedProps = source.memoizedProps;
	  target.updateQueue = source.updateQueue;
	  target.memoizedState = source.memoizedState;
	  target.dependencies = source.dependencies;
	  target.mode = source.mode;
	  target.flags = source.flags;
	  target.nextEffect = source.nextEffect;
	  target.firstEffect = source.firstEffect;
	  target.lastEffect = source.lastEffect;
	  target.lanes = source.lanes;
	  target.childLanes = source.childLanes;
	  target.alternate = source.alternate;

	  {
	    target.actualDuration = source.actualDuration;
	    target.actualStartTime = source.actualStartTime;
	    target.selfBaseDuration = source.selfBaseDuration;
	    target.treeBaseDuration = source.treeBaseDuration;
	  }

	  target._debugID = source._debugID;
	  target._debugSource = source._debugSource;
	  target._debugOwner = source._debugOwner;
	  target._debugNeedsRemount = source._debugNeedsRemount;
	  target._debugHookTypes = source._debugHookTypes;
	  return target;
	}

	function FiberRootNode(containerInfo, tag, hydrate) {
	  this.tag = tag;
	  this.containerInfo = containerInfo;
	  this.pendingChildren = null;
	  this.current = null;
	  this.pingCache = null;
	  this.finishedWork = null;
	  this.timeoutHandle = noTimeout;
	  this.context = null;
	  this.pendingContext = null;
	  this.hydrate = hydrate;
	  this.callbackNode = null;
	  this.callbackPriority = NoLanePriority;
	  this.eventTimes = createLaneMap(NoLanes);
	  this.expirationTimes = createLaneMap(NoTimestamp);
	  this.pendingLanes = NoLanes;
	  this.suspendedLanes = NoLanes;
	  this.pingedLanes = NoLanes;
	  this.expiredLanes = NoLanes;
	  this.mutableReadLanes = NoLanes;
	  this.finishedLanes = NoLanes;
	  this.entangledLanes = NoLanes;
	  this.entanglements = createLaneMap(NoLanes);

	  {
	    this.mutableSourceEagerHydrationData = null;
	  }

	  {
	    this.interactionThreadID = tracing$1.unstable_getThreadID();
	    this.memoizedInteractions = new Set();
	    this.pendingInteractionMap = new Map();
	  }

	  {
	    switch (tag) {
	      case BlockingRoot:
	        this._debugRootType = 'createBlockingRoot()';
	        break;

	      case ConcurrentRoot:
	        this._debugRootType = 'createRoot()';
	        break;

	      case LegacyRoot:
	        this._debugRootType = 'createLegacyRoot()';
	        break;
	    }
	  }
	}

	function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
	  var root = new FiberRootNode(containerInfo, tag, hydrate);
	  // stateNode is any.


	  var uninitializedFiber = createHostRootFiber(tag);
	  root.current = uninitializedFiber;
	  uninitializedFiber.stateNode = root;
	  initializeUpdateQueue(uninitializedFiber);
	  return root;
	}

	// This ensures that the version used for server rendering matches the one
	// that is eventually read during hydration.
	// If they don't match there's a potential tear and a full deopt render is required.

	function registerMutableSourceForHydration(root, mutableSource) {
	  var getVersion = mutableSource._getVersion;
	  var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
	  // Retaining it forever may interfere with GC.

	  if (root.mutableSourceEagerHydrationData == null) {
	    root.mutableSourceEagerHydrationData = [mutableSource, version];
	  } else {
	    root.mutableSourceEagerHydrationData.push(mutableSource, version);
	  }
	}

	function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
	implementation) {
	  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
	  return {
	    // This tag allow us to uniquely identify this as a React Portal
	    $$typeof: REACT_PORTAL_TYPE,
	    key: key == null ? null : '' + key,
	    children: children,
	    containerInfo: containerInfo,
	    implementation: implementation
	  };
	}

	var didWarnAboutNestedUpdates;
	var didWarnAboutFindNodeInStrictMode;

	{
	  didWarnAboutNestedUpdates = false;
	  didWarnAboutFindNodeInStrictMode = {};
	}

	function getContextForSubtree(parentComponent) {
	  if (!parentComponent) {
	    return emptyContextObject;
	  }

	  var fiber = get(parentComponent);
	  var parentContext = findCurrentUnmaskedContext(fiber);

	  if (fiber.tag === ClassComponent) {
	    var Component = fiber.type;

	    if (isContextProvider(Component)) {
	      return processChildContext(fiber, Component, parentContext);
	    }
	  }

	  return parentContext;
	}

	function findHostInstanceWithWarning(component, methodName) {
	  {
	    var fiber = get(component);

	    if (fiber === undefined) {
	      if (typeof component.render === 'function') {
	        {
	          {
	            throw Error( "Unable to find node on an unmounted component." );
	          }
	        }
	      } else {
	        {
	          {
	            throw Error( "Argument appears to not be a ReactComponent. Keys: " + Object.keys(component) );
	          }
	        }
	      }
	    }

	    var hostFiber = findCurrentHostFiber(fiber);

	    if (hostFiber === null) {
	      return null;
	    }

	    if (hostFiber.mode & StrictMode) {
	      var componentName = getComponentName(fiber.type) || 'Component';

	      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
	        didWarnAboutFindNodeInStrictMode[componentName] = true;
	        var previousFiber = current;

	        try {
	          setCurrentFiber(hostFiber);

	          if (fiber.mode & StrictMode) {
	            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
	          } else {
	            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
	          }
	        } finally {
	          // Ideally this should reset to previous but this shouldn't be called in
	          // render and there's another warning for that anyway.
	          if (previousFiber) {
	            setCurrentFiber(previousFiber);
	          } else {
	            resetCurrentFiber();
	          }
	        }
	      }
	    }

	    return hostFiber.stateNode;
	  }
	}

	function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
	  return createFiberRoot(containerInfo, tag, hydrate);
	}
	function updateContainer(element, container, parentComponent, callback) {
	  {
	    onScheduleRoot(container, element);
	  }

	  var current$1 = container.current;
	  var eventTime = requestEventTime();

	  {
	    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
	    if ('undefined' !== typeof jest) {
	      warnIfUnmockedScheduler(current$1);
	      warnIfNotScopedWithMatchingAct(current$1);
	    }
	  }

	  var lane = requestUpdateLane(current$1);

	  var context = getContextForSubtree(parentComponent);

	  if (container.context === null) {
	    container.context = context;
	  } else {
	    container.pendingContext = context;
	  }

	  {
	    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
	      didWarnAboutNestedUpdates = true;

	      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
	    }
	  }

	  var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
	  // being called "element".

	  update.payload = {
	    element: element
	  };
	  callback = callback === undefined ? null : callback;

	  if (callback !== null) {
	    {
	      if (typeof callback !== 'function') {
	        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
	      }
	    }

	    update.callback = callback;
	  }

	  enqueueUpdate(current$1, update);
	  scheduleUpdateOnFiber(current$1, lane, eventTime);
	  return lane;
	}
	function getPublicRootInstance(container) {
	  var containerFiber = container.current;

	  if (!containerFiber.child) {
	    return null;
	  }

	  switch (containerFiber.child.tag) {
	    case HostComponent:
	      return getPublicInstance(containerFiber.child.stateNode);

	    default:
	      return containerFiber.child.stateNode;
	  }
	}

	function markRetryLaneImpl(fiber, retryLane) {
	  var suspenseState = fiber.memoizedState;

	  if (suspenseState !== null && suspenseState.dehydrated !== null) {
	    suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
	  }
	} // Increases the priority of thennables when they resolve within this boundary.


	function markRetryLaneIfNotHydrated(fiber, retryLane) {
	  markRetryLaneImpl(fiber, retryLane);
	  var alternate = fiber.alternate;

	  if (alternate) {
	    markRetryLaneImpl(alternate, retryLane);
	  }
	}

	function attemptUserBlockingHydration$1(fiber) {
	  if (fiber.tag !== SuspenseComponent) {
	    // We ignore HostRoots here because we can't increase
	    // their priority and they should not suspend on I/O,
	    // since you have to wrap anything that might suspend in
	    // Suspense.
	    return;
	  }

	  var eventTime = requestEventTime();
	  var lane = InputDiscreteHydrationLane;
	  scheduleUpdateOnFiber(fiber, lane, eventTime);
	  markRetryLaneIfNotHydrated(fiber, lane);
	}
	function attemptContinuousHydration$1(fiber) {
	  if (fiber.tag !== SuspenseComponent) {
	    // We ignore HostRoots here because we can't increase
	    // their priority and they should not suspend on I/O,
	    // since you have to wrap anything that might suspend in
	    // Suspense.
	    return;
	  }

	  var eventTime = requestEventTime();
	  var lane = SelectiveHydrationLane;
	  scheduleUpdateOnFiber(fiber, lane, eventTime);
	  markRetryLaneIfNotHydrated(fiber, lane);
	}
	function attemptHydrationAtCurrentPriority$1(fiber) {
	  if (fiber.tag !== SuspenseComponent) {
	    // We ignore HostRoots here because we can't increase
	    // their priority other than synchronously flush it.
	    return;
	  }

	  var eventTime = requestEventTime();
	  var lane = requestUpdateLane(fiber);
	  scheduleUpdateOnFiber(fiber, lane, eventTime);
	  markRetryLaneIfNotHydrated(fiber, lane);
	}
	function runWithPriority$2(priority, fn) {

	  try {
	    setCurrentUpdateLanePriority(priority);
	    return fn();
	  } finally {
	  }
	}
	function findHostInstanceWithNoPortals(fiber) {
	  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

	  if (hostFiber === null) {
	    return null;
	  }

	  if (hostFiber.tag === FundamentalComponent) {
	    return hostFiber.stateNode.instance;
	  }

	  return hostFiber.stateNode;
	}

	var shouldSuspendImpl = function (fiber) {
	  return false;
	};

	function shouldSuspend(fiber) {
	  return shouldSuspendImpl(fiber);
	}
	var overrideHookState = null;
	var overrideHookStateDeletePath = null;
	var overrideHookStateRenamePath = null;
	var overrideProps = null;
	var overridePropsDeletePath = null;
	var overridePropsRenamePath = null;
	var scheduleUpdate = null;
	var setSuspenseHandler = null;

	{
	  var copyWithDeleteImpl = function (obj, path, index) {
	    var key = path[index];
	    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);

	    if (index + 1 === path.length) {
	      if (Array.isArray(updated)) {
	        updated.splice(key, 1);
	      } else {
	        delete updated[key];
	      }

	      return updated;
	    } // $FlowFixMe number or string is fine here


	    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
	    return updated;
	  };

	  var copyWithDelete = function (obj, path) {
	    return copyWithDeleteImpl(obj, path, 0);
	  };

	  var copyWithRenameImpl = function (obj, oldPath, newPath, index) {
	    var oldKey = oldPath[index];
	    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);

	    if (index + 1 === oldPath.length) {
	      var newKey = newPath[index]; // $FlowFixMe number or string is fine here

	      updated[newKey] = updated[oldKey];

	      if (Array.isArray(updated)) {
	        updated.splice(oldKey, 1);
	      } else {
	        delete updated[oldKey];
	      }
	    } else {
	      // $FlowFixMe number or string is fine here
	      updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here
	      obj[oldKey], oldPath, newPath, index + 1);
	    }

	    return updated;
	  };

	  var copyWithRename = function (obj, oldPath, newPath) {
	    if (oldPath.length !== newPath.length) {
	      warn('copyWithRename() expects paths of the same length');

	      return;
	    } else {
	      for (var i = 0; i < newPath.length - 1; i++) {
	        if (oldPath[i] !== newPath[i]) {
	          warn('copyWithRename() expects paths to be the same except for the deepest key');

	          return;
	        }
	      }
	    }

	    return copyWithRenameImpl(obj, oldPath, newPath, 0);
	  };

	  var copyWithSetImpl = function (obj, path, index, value) {
	    if (index >= path.length) {
	      return value;
	    }

	    var key = path[index];
	    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here

	    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
	    return updated;
	  };

	  var copyWithSet = function (obj, path, value) {
	    return copyWithSetImpl(obj, path, 0, value);
	  };

	  var findHook = function (fiber, id) {
	    // For now, the "id" of stateful hooks is just the stateful hook index.
	    // This may change in the future with e.g. nested hooks.
	    var currentHook = fiber.memoizedState;

	    while (currentHook !== null && id > 0) {
	      currentHook = currentHook.next;
	      id--;
	    }

	    return currentHook;
	  }; // Support DevTools editable values for useState and useReducer.


	  overrideHookState = function (fiber, id, path, value) {
	    var hook = findHook(fiber, id);

	    if (hook !== null) {
	      var newState = copyWithSet(hook.memoizedState, path, value);
	      hook.memoizedState = newState;
	      hook.baseState = newState; // We aren't actually adding an update to the queue,
	      // because there is no update we can add for useReducer hooks that won't trigger an error.
	      // (There's no appropriate action type for DevTools overrides.)
	      // As a result though, React will see the scheduled update as a noop and bailout.
	      // Shallow cloning props works as a workaround for now to bypass the bailout check.

	      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
	      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
	    }
	  };

	  overrideHookStateDeletePath = function (fiber, id, path) {
	    var hook = findHook(fiber, id);

	    if (hook !== null) {
	      var newState = copyWithDelete(hook.memoizedState, path);
	      hook.memoizedState = newState;
	      hook.baseState = newState; // We aren't actually adding an update to the queue,
	      // because there is no update we can add for useReducer hooks that won't trigger an error.
	      // (There's no appropriate action type for DevTools overrides.)
	      // As a result though, React will see the scheduled update as a noop and bailout.
	      // Shallow cloning props works as a workaround for now to bypass the bailout check.

	      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
	      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
	    }
	  };

	  overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
	    var hook = findHook(fiber, id);

	    if (hook !== null) {
	      var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
	      hook.memoizedState = newState;
	      hook.baseState = newState; // We aren't actually adding an update to the queue,
	      // because there is no update we can add for useReducer hooks that won't trigger an error.
	      // (There's no appropriate action type for DevTools overrides.)
	      // As a result though, React will see the scheduled update as a noop and bailout.
	      // Shallow cloning props works as a workaround for now to bypass the bailout check.

	      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
	      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
	    }
	  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


	  overrideProps = function (fiber, path, value) {
	    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

	    if (fiber.alternate) {
	      fiber.alternate.pendingProps = fiber.pendingProps;
	    }

	    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
	  };

	  overridePropsDeletePath = function (fiber, path) {
	    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);

	    if (fiber.alternate) {
	      fiber.alternate.pendingProps = fiber.pendingProps;
	    }

	    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
	  };

	  overridePropsRenamePath = function (fiber, oldPath, newPath) {
	    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);

	    if (fiber.alternate) {
	      fiber.alternate.pendingProps = fiber.pendingProps;
	    }

	    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
	  };

	  scheduleUpdate = function (fiber) {
	    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
	  };

	  setSuspenseHandler = function (newShouldSuspendImpl) {
	    shouldSuspendImpl = newShouldSuspendImpl;
	  };
	}

	function findHostInstanceByFiber(fiber) {
	  var hostFiber = findCurrentHostFiber(fiber);

	  if (hostFiber === null) {
	    return null;
	  }

	  return hostFiber.stateNode;
	}

	function emptyFindFiberByHostInstance(instance) {
	  return null;
	}

	function getCurrentFiberForDevTools() {
	  return current;
	}

	function injectIntoDevTools(devToolsConfig) {
	  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
	  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
	  return injectInternals({
	    bundleType: devToolsConfig.bundleType,
	    version: devToolsConfig.version,
	    rendererPackageName: devToolsConfig.rendererPackageName,
	    rendererConfig: devToolsConfig.rendererConfig,
	    overrideHookState: overrideHookState,
	    overrideHookStateDeletePath: overrideHookStateDeletePath,
	    overrideHookStateRenamePath: overrideHookStateRenamePath,
	    overrideProps: overrideProps,
	    overridePropsDeletePath: overridePropsDeletePath,
	    overridePropsRenamePath: overridePropsRenamePath,
	    setSuspenseHandler: setSuspenseHandler,
	    scheduleUpdate: scheduleUpdate,
	    currentDispatcherRef: ReactCurrentDispatcher,
	    findHostInstanceByFiber: findHostInstanceByFiber,
	    findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
	    // React Refresh
	    findHostInstancesForRefresh:  findHostInstancesForRefresh ,
	    scheduleRefresh:  scheduleRefresh ,
	    scheduleRoot:  scheduleRoot ,
	    setRefreshHandler:  setRefreshHandler ,
	    // Enables DevTools to append owner stacks to error messages in DEV mode.
	    getCurrentFiber:  getCurrentFiberForDevTools 
	  });
	}

	function ReactDOMBlockingRoot(container, tag, options) {
	  this._internalRoot = createRootImpl(container, tag, options);
	}

	ReactDOMBlockingRoot.prototype.render = function (children) {
	  var root = this._internalRoot;

	  {
	    if (typeof arguments[1] === 'function') {
	      error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
	    }

	    var container = root.containerInfo;

	    if (container.nodeType !== COMMENT_NODE) {
	      var hostInstance = findHostInstanceWithNoPortals(root.current);

	      if (hostInstance) {
	        if (hostInstance.parentNode !== container) {
	          error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
	        }
	      }
	    }
	  }

	  updateContainer(children, root, null, null);
	};

	ReactDOMBlockingRoot.prototype.unmount = function () {
	  {
	    if (typeof arguments[0] === 'function') {
	      error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
	    }
	  }

	  var root = this._internalRoot;
	  var container = root.containerInfo;
	  updateContainer(null, root, null, function () {
	    unmarkContainerAsRoot(container);
	  });
	};

	function createRootImpl(container, tag, options) {
	  // Tag is either LegacyRoot or Concurrent Root
	  var hydrate = options != null && options.hydrate === true;
	  options != null && options.hydrationOptions || null;
	  var mutableSources = options != null && options.hydrationOptions != null && options.hydrationOptions.mutableSources || null;
	  var root = createContainer(container, tag, hydrate);
	  markContainerAsRoot(root.current, container);
	  container.nodeType;

	  {
	    var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
	    listenToAllSupportedEvents(rootContainerElement);
	  }

	  if (mutableSources) {
	    for (var i = 0; i < mutableSources.length; i++) {
	      var mutableSource = mutableSources[i];
	      registerMutableSourceForHydration(root, mutableSource);
	    }
	  }

	  return root;
	}
	function createLegacyRoot(container, options) {
	  return new ReactDOMBlockingRoot(container, LegacyRoot, options);
	}
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
	}

	var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
	var topLevelUpdateWarnings;
	var warnedAboutHydrateAPI = false;

	{
	  topLevelUpdateWarnings = function (container) {
	    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
	      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);

	      if (hostInstance) {
	        if (hostInstance.parentNode !== container) {
	          error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
	        }
	      }
	    }

	    var isRootRenderedBySomeReact = !!container._reactRootContainer;
	    var rootEl = getReactRootElementInContainer(container);
	    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));

	    if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
	      error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
	    }

	    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
	      error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
	    }
	  };
	}

	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOCUMENT_NODE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function shouldHydrateDueToLegacyHeuristic(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
	}

	function legacyCreateRootFromDOMContainer(container, forceHydrate) {
	  var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.

	  if (!shouldHydrate) {
	    var warned = false;
	    var rootSibling;

	    while (rootSibling = container.lastChild) {
	      {
	        if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
	          warned = true;

	          error('render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
	        }
	      }

	      container.removeChild(rootSibling);
	    }
	  }

	  {
	    if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
	      warnedAboutHydrateAPI = true;

	      warn('render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v18. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
	    }
	  }

	  return createLegacyRoot(container, shouldHydrate ? {
	    hydrate: true
	  } : undefined);
	}

	function warnOnInvalidCallback$1(callback, callerName) {
	  {
	    if (callback !== null && typeof callback !== 'function') {
	      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
	    }
	  }
	}

	function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
	  {
	    topLevelUpdateWarnings(container);
	    warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
	  } // TODO: Without `any` type, Flow says "Property cannot be accessed on any
	  // member of intersection type." Whyyyyyy.


	  var root = container._reactRootContainer;
	  var fiberRoot;

	  if (!root) {
	    // Initial mount
	    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
	    fiberRoot = root._internalRoot;

	    if (typeof callback === 'function') {
	      var originalCallback = callback;

	      callback = function () {
	        var instance = getPublicRootInstance(fiberRoot);
	        originalCallback.call(instance);
	      };
	    } // Initial mount should not be batched.


	    unbatchedUpdates(function () {
	      updateContainer(children, fiberRoot, parentComponent, callback);
	    });
	  } else {
	    fiberRoot = root._internalRoot;

	    if (typeof callback === 'function') {
	      var _originalCallback = callback;

	      callback = function () {
	        var instance = getPublicRootInstance(fiberRoot);

	        _originalCallback.call(instance);
	      };
	    } // Update


	    updateContainer(children, fiberRoot, parentComponent, callback);
	  }

	  return getPublicRootInstance(fiberRoot);
	}

	function findDOMNode(componentOrElement) {
	  {
	    var owner = ReactCurrentOwner$3.current;

	    if (owner !== null && owner.stateNode !== null) {
	      var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;

	      if (!warnedAboutRefsInRender) {
	        error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component');
	      }

	      owner.stateNode._warnedAboutRefsInRender = true;
	    }
	  }

	  if (componentOrElement == null) {
	    return null;
	  }

	  if (componentOrElement.nodeType === ELEMENT_NODE) {
	    return componentOrElement;
	  }

	  {
	    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
	  }
	}
	function hydrate(element, container, callback) {
	  if (!isValidContainer(container)) {
	    {
	      throw Error( "Target container is not a DOM element." );
	    }
	  }

	  {
	    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

	    if (isModernRoot) {
	      error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?');
	    }
	  } // TODO: throw or warn if we couldn't hydrate?


	  return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
	}
	function render(element, container, callback) {
	  if (!isValidContainer(container)) {
	    {
	      throw Error( "Target container is not a DOM element." );
	    }
	  }

	  {
	    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

	    if (isModernRoot) {
	      error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
	    }
	  }

	  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
	}
	function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
	  if (!isValidContainer(containerNode)) {
	    {
	      throw Error( "Target container is not a DOM element." );
	    }
	  }

	  if (!(parentComponent != null && has(parentComponent))) {
	    {
	      throw Error( "parentComponent must be a valid React Component" );
	    }
	  }

	  return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
	}
	function unmountComponentAtNode(container) {
	  if (!isValidContainer(container)) {
	    {
	      throw Error( "unmountComponentAtNode(...): Target container is not a DOM element." );
	    }
	  }

	  {
	    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

	    if (isModernRoot) {
	      error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?');
	    }
	  }

	  if (container._reactRootContainer) {
	    {
	      var rootEl = getReactRootElementInContainer(container);
	      var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);

	      if (renderedByDifferentReact) {
	        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
	      }
	    } // Unmount should not be batched.


	    unbatchedUpdates(function () {
	      legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
	        // $FlowFixMe This should probably use `delete container._reactRootContainer`
	        container._reactRootContainer = null;
	        unmarkContainerAsRoot(container);
	      });
	    }); // If you call unmountComponentAtNode twice in quick succession, you'll
	    // get `true` twice. That's probably fine?

	    return true;
	  } else {
	    {
	      var _rootEl = getReactRootElementInContainer(container);

	      var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.

	      var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

	      if (hasNonRootReactChild) {
	        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
	      }
	    }

	    return false;
	  }
	}

	setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
	setAttemptContinuousHydration(attemptContinuousHydration$1);
	setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
	setAttemptHydrationAtPriority(runWithPriority$2);
	var didWarnAboutUnstableCreatePortal = false;

	{
	  if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
	  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
	  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
	    error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
	  }
	}

	setRestoreImplementation(restoreControlledState$3);
	setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);

	function createPortal$1(children, container) {
	  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	  if (!isValidContainer(container)) {
	    {
	      throw Error( "Target container is not a DOM element." );
	    }
	  } // TODO: pass ReactDOM portal implementation as third argument
	  // $FlowFixMe The Flow type is opaque but there's no way to actually create it.


	  return createPortal(children, container, null, key);
	}

	function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {

	  return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
	}

	function unstable_createPortal(children, container) {
	  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	  {
	    if (!didWarnAboutUnstableCreatePortal) {
	      didWarnAboutUnstableCreatePortal = true;

	      warn('The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 18+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
	    }
	  }

	  return createPortal$1(children, container, key);
	}

	var Internals = {
	  // Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.
	  // This is an array for better minification.
	  Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, flushPassiveEffects, // TODO: This is related to `act`, not events. Move to separate key?
	  IsThisRendererActing]
	};
	var foundDevTools = injectIntoDevTools({
	  findFiberByHostInstance: getClosestInstanceFromNode,
	  bundleType:  1 ,
	  version: ReactVersion,
	  rendererPackageName: 'react-dom'
	});

	{
	  if (!foundDevTools && canUseDOM && window.top === window.self) {
	    // If we're in Chrome or Firefox, provide a download link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	      var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

	      if (/^(https?|file):$/.test(protocol)) {
	        // eslint-disable-next-line react-internal/no-production-logging
	        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://reactjs.org/link/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://reactjs.org/link/react-devtools-faq' : ''), 'font-weight:bold');
	      }
	    }
	  }
	}

	reactDom_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
	reactDom_development.createPortal = createPortal$1;
	reactDom_development.findDOMNode = findDOMNode;
	reactDom_development.flushSync = flushSync;
	reactDom_development.hydrate = hydrate;
	reactDom_development.render = render;
	reactDom_development.unmountComponentAtNode = unmountComponentAtNode;
	reactDom_development.unstable_batchedUpdates = batchedUpdates$1;
	reactDom_development.unstable_createPortal = unstable_createPortal;
	reactDom_development.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
	reactDom_development.version = ReactVersion;
	  })();
	}

	function checkDCE() {
	  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
	  if (
	    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
	    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
	  ) {
	    return;
	  }
	  if ("development" !== 'production') {
	    // This branch is unreachable because this function is only called
	    // in production, but the condition is true only in development.
	    // Therefore if the branch is still here, dead code elimination wasn't
	    // properly applied.
	    // Don't change the message. React DevTools relies on it. Also make sure
	    // this message doesn't occur elsewhere in this function, or it will cause
	    // a false positive.
	    throw new Error('^_^');
	  }
	  try {
	    // Verify that the code above has been dead code eliminated (DCE'd).
	    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
	  } catch (err) {
	    // DevTools shouldn't crash React, no matter what.
	    // We should still report in case we break this code.
	    console.error(err);
	  }
	}

	if ("development" === 'production') {
	  // DCE check should happen before ReactDOM bundle executes so that
	  // DevTools can report bad minification during injection.
	  checkDCE();
	  reactDom.exports = reactDom_production_min;
	} else {
	  reactDom.exports = reactDom_development;
	}

	var ReactDOM = reactDom.exports;

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */
	/* global Reflect, Promise */

	var extendStatics$1 = function(d, b) {
	    extendStatics$1 = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	    return extendStatics$1(d, b);
	};

	function __extends$1(d, b) {
	    if (typeof b !== "function" && b !== null)
	        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	    extendStatics$1(d, b);
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	}

	function __awaiter(thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	}

	function __generator(thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	}

	function __values$1(o) {
	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
	    if (m) return m.call(o);
	    if (o && typeof o.length === "number") return {
	        next: function () {
	            if (o && i >= o.length) o = void 0;
	            return { value: o && o[i++], done: !o };
	        }
	    };
	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
	}

	function __read(o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	}

	function __spreadArray(to, from, pack) {
	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
	        if (ar || !(i in from)) {
	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
	            ar[i] = from[i];
	        }
	    }
	    return to.concat(ar || from);
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var Deferred = /** @class */ (function () {
	    function Deferred() {
	        var _this = this;
	        this.reject = function () { };
	        this.resolve = function () { };
	        this.promise = new Promise(function (resolve, reject) {
	            _this.resolve = resolve;
	            _this.reject = reject;
	        });
	    }
	    /**
	     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
	     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
	     * and returns a node-style callback which will resolve or reject the Deferred's promise.
	     */
	    Deferred.prototype.wrapCallback = function (callback) {
	        var _this = this;
	        return function (error, value) {
	            if (error) {
	                _this.reject(error);
	            }
	            else {
	                _this.resolve(value);
	            }
	            if (typeof callback === 'function') {
	                // Attaching noop handler just in case developer wasn't expecting
	                // promises
	                _this.promise.catch(function () { });
	                // Some of our callbacks don't expect a value and our own tests
	                // assert that the parameter length is 1
	                if (callback.length === 1) {
	                    callback(error);
	                }
	                else {
	                    callback(error, value);
	                }
	            }
	        };
	    };
	    return Deferred;
	}());

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Returns navigator.userAgent string or '' if it's not defined.
	 * @return user agent string
	 */
	function getUA() {
	    if (typeof navigator !== 'undefined' &&
	        typeof navigator['userAgent'] === 'string') {
	        return navigator['userAgent'];
	    }
	    else {
	        return '';
	    }
	}
	/**
	 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
	 *
	 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
	 * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
	 * wait for a callback.
	 */
	function isMobileCordova() {
	    return (typeof window !== 'undefined' &&
	        // @ts-ignore Setting up an broadly applicable index signature for Window
	        // just to deal with this case would probably be a bad idea.
	        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
	        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));
	}
	/**
	 * Detect Node.js.
	 *
	 * @return true if Node.js environment is detected.
	 */
	// Node detection logic from: https://github.com/iliakan/detect-node/
	function isNode() {
	    try {
	        return (Object.prototype.toString.call(global.process) === '[object process]');
	    }
	    catch (e) {
	        return false;
	    }
	}
	function isBrowserExtension() {
	    var runtime = typeof chrome === 'object'
	        ? chrome.runtime
	        : typeof browser === 'object'
	            ? browser.runtime
	            : undefined;
	    return typeof runtime === 'object' && runtime.id !== undefined;
	}
	/**
	 * Detect React Native.
	 *
	 * @return true if ReactNative environment is detected.
	 */
	function isReactNative() {
	    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
	}
	/** Detects Electron apps. */
	function isElectron() {
	    return getUA().indexOf('Electron/') >= 0;
	}
	/** Detects Internet Explorer. */
	function isIE$2() {
	    var ua = getUA();
	    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
	}
	/** Detects Universal Windows Platform apps. */
	function isUWP() {
	    return getUA().indexOf('MSAppHost/') >= 0;
	}
	/** Returns true if we are running in Safari. */
	function isSafari() {
	    return (!isNode() &&
	        navigator.userAgent.includes('Safari') &&
	        !navigator.userAgent.includes('Chrome'));
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var ERROR_NAME = 'FirebaseError';
	// Based on code from:
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
	var FirebaseError = /** @class */ (function (_super) {
	    __extends$1(FirebaseError, _super);
	    function FirebaseError(code, message, customData) {
	        var _this = _super.call(this, message) || this;
	        _this.code = code;
	        _this.customData = customData;
	        _this.name = ERROR_NAME;
	        // Fix For ES5
	        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
	        Object.setPrototypeOf(_this, FirebaseError.prototype);
	        // Maintains proper stack trace for where our error was thrown.
	        // Only available on V8.
	        if (Error.captureStackTrace) {
	            Error.captureStackTrace(_this, ErrorFactory.prototype.create);
	        }
	        return _this;
	    }
	    return FirebaseError;
	}(Error));
	var ErrorFactory = /** @class */ (function () {
	    function ErrorFactory(service, serviceName, errors) {
	        this.service = service;
	        this.serviceName = serviceName;
	        this.errors = errors;
	    }
	    ErrorFactory.prototype.create = function (code) {
	        var data = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            data[_i - 1] = arguments[_i];
	        }
	        var customData = data[0] || {};
	        var fullCode = this.service + "/" + code;
	        var template = this.errors[code];
	        var message = template ? replaceTemplate(template, customData) : 'Error';
	        // Service Name: Error message (service/code).
	        var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
	        var error = new FirebaseError(fullCode, fullMessage, customData);
	        return error;
	    };
	    return ErrorFactory;
	}());
	function replaceTemplate(template, data) {
	    return template.replace(PATTERN, function (_, key) {
	        var value = data[key];
	        return value != null ? String(value) : "<" + key + "?>";
	    });
	}
	var PATTERN = /\{\$([^}]+)}/g;
	/**
	 * Deep equal two objects. Support Arrays and Objects.
	 */
	function deepEqual(a, b) {
	    if (a === b) {
	        return true;
	    }
	    var aKeys = Object.keys(a);
	    var bKeys = Object.keys(b);
	    for (var _i = 0, aKeys_1 = aKeys; _i < aKeys_1.length; _i++) {
	        var k = aKeys_1[_i];
	        if (!bKeys.includes(k)) {
	            return false;
	        }
	        var aProp = a[k];
	        var bProp = b[k];
	        if (isObject(aProp) && isObject(bProp)) {
	            if (!deepEqual(aProp, bProp)) {
	                return false;
	            }
	        }
	        else if (aProp !== bProp) {
	            return false;
	        }
	    }
	    for (var _a = 0, bKeys_1 = bKeys; _a < bKeys_1.length; _a++) {
	        var k = bKeys_1[_a];
	        if (!aKeys.includes(k)) {
	            return false;
	        }
	    }
	    return true;
	}
	function isObject(thing) {
	    return thing !== null && typeof thing === 'object';
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * The amount of milliseconds to exponentially increase.
	 */
	var DEFAULT_INTERVAL_MILLIS = 1000;
	/**
	 * The factor to backoff by.
	 * Should be a number greater than 1.
	 */
	var DEFAULT_BACKOFF_FACTOR = 2;
	/**
	 * The maximum milliseconds to increase to.
	 *
	 * <p>Visible for testing
	 */
	var MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.
	/**
	 * The percentage of backoff time to randomize by.
	 * See
	 * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic
	 * for context.
	 *
	 * <p>Visible for testing
	 */
	var RANDOM_FACTOR = 0.5;
	/**
	 * Based on the backoff method from
	 * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.
	 * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.
	 */
	function calculateBackoffMillis(backoffCount, intervalMillis, backoffFactor) {
	    if (intervalMillis === void 0) { intervalMillis = DEFAULT_INTERVAL_MILLIS; }
	    if (backoffFactor === void 0) { backoffFactor = DEFAULT_BACKOFF_FACTOR; }
	    // Calculates an exponentially increasing value.
	    // Deviation: calculates value from count and a constant interval, so we only need to save value
	    // and count to restore state.
	    var currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);
	    // A random "fuzz" to avoid waves of retries.
	    // Deviation: randomFactor is required.
	    var randomWait = Math.round(
	    // A fraction of the backoff value to add/subtract.
	    // Deviation: changes multiplication order to improve readability.
	    RANDOM_FACTOR *
	        currBaseValue *
	        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines
	        // if we add or subtract.
	        (Math.random() - 0.5) *
	        2);
	    // Limits backoff to max to avoid effectively permanent backoff.
	    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
	}

	/**
	 * @license
	 * Copyright 2021 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function getModularInstance(service) {
	    if (service && service._delegate) {
	        return service._delegate;
	    }
	    else {
	        return service;
	    }
	}

	/**
	 * Component for service name T, e.g. `auth`, `auth-internal`
	 */
	var Component = /** @class */ (function () {
	    /**
	     *
	     * @param name The public service name, e.g. app, auth, firestore, database
	     * @param instanceFactory Service factory responsible for creating the public interface
	     * @param type whether the service provided by the component is public or private
	     */
	    function Component(name, instanceFactory, type) {
	        this.name = name;
	        this.instanceFactory = instanceFactory;
	        this.type = type;
	        this.multipleInstances = false;
	        /**
	         * Properties to be added to the service namespace
	         */
	        this.serviceProps = {};
	        this.instantiationMode = "LAZY" /* LAZY */;
	        this.onInstanceCreated = null;
	    }
	    Component.prototype.setInstantiationMode = function (mode) {
	        this.instantiationMode = mode;
	        return this;
	    };
	    Component.prototype.setMultipleInstances = function (multipleInstances) {
	        this.multipleInstances = multipleInstances;
	        return this;
	    };
	    Component.prototype.setServiceProps = function (props) {
	        this.serviceProps = props;
	        return this;
	    };
	    Component.prototype.setInstanceCreatedCallback = function (callback) {
	        this.onInstanceCreated = callback;
	        return this;
	    };
	    return Component;
	}());

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var DEFAULT_ENTRY_NAME$1 = '[DEFAULT]';

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
	 * NameServiceMapping[T] is an alias for the type of the instance
	 */
	var Provider = /** @class */ (function () {
	    function Provider(name, container) {
	        this.name = name;
	        this.container = container;
	        this.component = null;
	        this.instances = new Map();
	        this.instancesDeferred = new Map();
	        this.onInitCallbacks = new Map();
	    }
	    /**
	     * @param identifier A provider can provide mulitple instances of a service
	     * if this.component.multipleInstances is true.
	     */
	    Provider.prototype.get = function (identifier) {
	        // if multipleInstances is not supported, use the default name
	        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
	        if (!this.instancesDeferred.has(normalizedIdentifier)) {
	            var deferred = new Deferred();
	            this.instancesDeferred.set(normalizedIdentifier, deferred);
	            if (this.isInitialized(normalizedIdentifier) ||
	                this.shouldAutoInitialize()) {
	                // initialize the service if it can be auto-initialized
	                try {
	                    var instance = this.getOrInitializeService({
	                        instanceIdentifier: normalizedIdentifier
	                    });
	                    if (instance) {
	                        deferred.resolve(instance);
	                    }
	                }
	                catch (e) {
	                    // when the instance factory throws an exception during get(), it should not cause
	                    // a fatal error. We just return the unresolved promise in this case.
	                }
	            }
	        }
	        return this.instancesDeferred.get(normalizedIdentifier).promise;
	    };
	    Provider.prototype.getImmediate = function (options) {
	        var _a;
	        // if multipleInstances is not supported, use the default name
	        var normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);
	        var optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;
	        if (this.isInitialized(normalizedIdentifier) ||
	            this.shouldAutoInitialize()) {
	            try {
	                return this.getOrInitializeService({
	                    instanceIdentifier: normalizedIdentifier
	                });
	            }
	            catch (e) {
	                if (optional) {
	                    return null;
	                }
	                else {
	                    throw e;
	                }
	            }
	        }
	        else {
	            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw
	            if (optional) {
	                return null;
	            }
	            else {
	                throw Error("Service " + this.name + " is not available");
	            }
	        }
	    };
	    Provider.prototype.getComponent = function () {
	        return this.component;
	    };
	    Provider.prototype.setComponent = function (component) {
	        var e_1, _a;
	        if (component.name !== this.name) {
	            throw Error("Mismatching Component " + component.name + " for Provider " + this.name + ".");
	        }
	        if (this.component) {
	            throw Error("Component for " + this.name + " has already been provided");
	        }
	        this.component = component;
	        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)
	        if (!this.shouldAutoInitialize()) {
	            return;
	        }
	        // if the service is eager, initialize the default instance
	        if (isComponentEager(component)) {
	            try {
	                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME$1 });
	            }
	            catch (e) {
	                // when the instance factory for an eager Component throws an exception during the eager
	                // initialization, it should not cause a fatal error.
	                // TODO: Investigate if we need to make it configurable, because some component may want to cause
	                // a fatal error in this case?
	            }
	        }
	        try {
	            // Create service instances for the pending promises and resolve them
	            // NOTE: if this.multipleInstances is false, only the default instance will be created
	            // and all promises with resolve with it regardless of the identifier.
	            for (var _b = __values$1(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var _d = __read(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];
	                var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
	                try {
	                    // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
	                    var instance = this.getOrInitializeService({
	                        instanceIdentifier: normalizedIdentifier
	                    });
	                    instanceDeferred.resolve(instance);
	                }
	                catch (e) {
	                    // when the instance factory throws an exception, it should not cause
	                    // a fatal error. We just leave the promise unresolved.
	                }
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	    };
	    Provider.prototype.clearInstance = function (identifier) {
	        if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME$1; }
	        this.instancesDeferred.delete(identifier);
	        this.instances.delete(identifier);
	    };
	    // app.delete() will call this method on every provider to delete the services
	    // TODO: should we mark the provider as deleted?
	    Provider.prototype.delete = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var services;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        services = Array.from(this.instances.values());
	                        return [4 /*yield*/, Promise.all(__spreadArray(__spreadArray([], __read(services
	                                .filter(function (service) { return 'INTERNAL' in service; }) // legacy services
	                                // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                                .map(function (service) { return service.INTERNAL.delete(); }))), __read(services
	                                .filter(function (service) { return '_delete' in service; }) // modularized services
	                                // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                                .map(function (service) { return service._delete(); }))))];
	                    case 1:
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Provider.prototype.isComponentSet = function () {
	        return this.component != null;
	    };
	    Provider.prototype.isInitialized = function (identifier) {
	        if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME$1; }
	        return this.instances.has(identifier);
	    };
	    Provider.prototype.initialize = function (opts) {
	        var e_2, _a;
	        if (opts === void 0) { opts = {}; }
	        var _b = opts.options, options = _b === void 0 ? {} : _b;
	        var normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
	        if (this.isInitialized(normalizedIdentifier)) {
	            throw Error(this.name + "(" + normalizedIdentifier + ") has already been initialized");
	        }
	        if (!this.isComponentSet()) {
	            throw Error("Component " + this.name + " has not been registered yet");
	        }
	        var instance = this.getOrInitializeService({
	            instanceIdentifier: normalizedIdentifier,
	            options: options
	        });
	        try {
	            // resolve any pending promise waiting for the service instance
	            for (var _c = __values$1(this.instancesDeferred.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {
	                var _e = __read(_d.value, 2), instanceIdentifier = _e[0], instanceDeferred = _e[1];
	                var normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
	                if (normalizedIdentifier === normalizedDeferredIdentifier) {
	                    instanceDeferred.resolve(instance);
	                }
	            }
	        }
	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
	        finally {
	            try {
	                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
	            }
	            finally { if (e_2) throw e_2.error; }
	        }
	        return instance;
	    };
	    /**
	     *
	     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
	     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
	     *
	     * @param identifier An optional instance identifier
	     * @returns a function to unregister the callback
	     */
	    Provider.prototype.onInit = function (callback, identifier) {
	        var _a;
	        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
	        var existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();
	        existingCallbacks.add(callback);
	        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
	        var existingInstance = this.instances.get(normalizedIdentifier);
	        if (existingInstance) {
	            callback(existingInstance, normalizedIdentifier);
	        }
	        return function () {
	            existingCallbacks.delete(callback);
	        };
	    };
	    /**
	     * Invoke onInit callbacks synchronously
	     * @param instance the service instance`
	     */
	    Provider.prototype.invokeOnInitCallbacks = function (instance, identifier) {
	        var e_3, _a;
	        var callbacks = this.onInitCallbacks.get(identifier);
	        if (!callbacks) {
	            return;
	        }
	        try {
	            for (var callbacks_1 = __values$1(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {
	                var callback = callbacks_1_1.value;
	                try {
	                    callback(instance, identifier);
	                }
	                catch (_b) {
	                    // ignore errors in the onInit callback
	                }
	            }
	        }
	        catch (e_3_1) { e_3 = { error: e_3_1 }; }
	        finally {
	            try {
	                if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return)) _a.call(callbacks_1);
	            }
	            finally { if (e_3) throw e_3.error; }
	        }
	    };
	    Provider.prototype.getOrInitializeService = function (_a) {
	        var instanceIdentifier = _a.instanceIdentifier, _b = _a.options, options = _b === void 0 ? {} : _b;
	        var instance = this.instances.get(instanceIdentifier);
	        if (!instance && this.component) {
	            instance = this.component.instanceFactory(this.container, {
	                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
	                options: options
	            });
	            this.instances.set(instanceIdentifier, instance);
	            /**
	             * Invoke onInit listeners.
	             * Note this.component.onInstanceCreated is different, which is used by the component creator,
	             * while onInit listeners are registered by consumers of the provider.
	             */
	            this.invokeOnInitCallbacks(instance, instanceIdentifier);
	            /**
	             * Order is important
	             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which
	             * makes `isInitialized()` return true.
	             */
	            if (this.component.onInstanceCreated) {
	                try {
	                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
	                }
	                catch (_c) {
	                    // ignore errors in the onInstanceCreatedCallback
	                }
	            }
	        }
	        return instance || null;
	    };
	    Provider.prototype.normalizeInstanceIdentifier = function (identifier) {
	        if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME$1; }
	        if (this.component) {
	            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME$1;
	        }
	        else {
	            return identifier; // assume multiple instances are supported before the component is provided.
	        }
	    };
	    Provider.prototype.shouldAutoInitialize = function () {
	        return (!!this.component &&
	            this.component.instantiationMode !== "EXPLICIT" /* EXPLICIT */);
	    };
	    return Provider;
	}());
	// undefined should be passed to the service factory for the default instance
	function normalizeIdentifierForFactory(identifier) {
	    return identifier === DEFAULT_ENTRY_NAME$1 ? undefined : identifier;
	}
	function isComponentEager(component) {
	    return component.instantiationMode === "EAGER" /* EAGER */;
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
	 */
	var ComponentContainer = /** @class */ (function () {
	    function ComponentContainer(name) {
	        this.name = name;
	        this.providers = new Map();
	    }
	    /**
	     *
	     * @param component Component being added
	     * @param overwrite When a component with the same name has already been registered,
	     * if overwrite is true: overwrite the existing component with the new component and create a new
	     * provider with the new component. It can be useful in tests where you want to use different mocks
	     * for different tests.
	     * if overwrite is false: throw an exception
	     */
	    ComponentContainer.prototype.addComponent = function (component) {
	        var provider = this.getProvider(component.name);
	        if (provider.isComponentSet()) {
	            throw new Error("Component " + component.name + " has already been registered with " + this.name);
	        }
	        provider.setComponent(component);
	    };
	    ComponentContainer.prototype.addOrOverwriteComponent = function (component) {
	        var provider = this.getProvider(component.name);
	        if (provider.isComponentSet()) {
	            // delete the existing provider from the container, so we can register the new component
	            this.providers.delete(component.name);
	        }
	        this.addComponent(component);
	    };
	    /**
	     * getProvider provides a type safe interface where it can only be called with a field name
	     * present in NameServiceMapping interface.
	     *
	     * Firebase SDKs providing services should extend NameServiceMapping interface to register
	     * themselves.
	     */
	    ComponentContainer.prototype.getProvider = function (name) {
	        if (this.providers.has(name)) {
	            return this.providers.get(name);
	        }
	        // create a Provider for a service that hasn't registered with Firebase
	        var provider = new Provider(name, this);
	        this.providers.set(name, provider);
	        return provider;
	    };
	    ComponentContainer.prototype.getProviders = function () {
	        return Array.from(this.providers.values());
	    };
	    return ComponentContainer;
	}());

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation. All rights reserved.
	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of the
	License at http://www.apache.org/licenses/LICENSE-2.0

	THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
	WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
	MERCHANTABLITY OR NON-INFRINGEMENT.

	See the Apache Version 2.0 License for specific language governing permissions
	and limitations under the License.
	***************************************************************************** */

	function __spreadArrays() {
	    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
	    for (var r = Array(s), k = 0, i = 0; i < il; i++)
	        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
	            r[k] = a[j];
	    return r;
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var _a$1;
	/**
	 * The JS SDK supports 5 log levels and also allows a user the ability to
	 * silence the logs altogether.
	 *
	 * The order is a follows:
	 * DEBUG < VERBOSE < INFO < WARN < ERROR
	 *
	 * All of the log types above the current log level will be captured (i.e. if
	 * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
	 * `VERBOSE` logs will not)
	 */
	var LogLevel;
	(function (LogLevel) {
	    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
	    LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
	    LogLevel[LogLevel["INFO"] = 2] = "INFO";
	    LogLevel[LogLevel["WARN"] = 3] = "WARN";
	    LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
	    LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
	})(LogLevel || (LogLevel = {}));
	var levelStringToEnum = {
	    'debug': LogLevel.DEBUG,
	    'verbose': LogLevel.VERBOSE,
	    'info': LogLevel.INFO,
	    'warn': LogLevel.WARN,
	    'error': LogLevel.ERROR,
	    'silent': LogLevel.SILENT
	};
	/**
	 * The default log level
	 */
	var defaultLogLevel = LogLevel.INFO;
	/**
	 * By default, `console.debug` is not displayed in the developer console (in
	 * chrome). To avoid forcing users to have to opt-in to these logs twice
	 * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
	 * logs to the `console.log` function.
	 */
	var ConsoleMethod = (_a$1 = {},
	    _a$1[LogLevel.DEBUG] = 'log',
	    _a$1[LogLevel.VERBOSE] = 'log',
	    _a$1[LogLevel.INFO] = 'info',
	    _a$1[LogLevel.WARN] = 'warn',
	    _a$1[LogLevel.ERROR] = 'error',
	    _a$1);
	/**
	 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
	 * messages on to their corresponding console counterparts (if the log method
	 * is supported by the current log level)
	 */
	var defaultLogHandler = function (instance, logType) {
	    var args = [];
	    for (var _i = 2; _i < arguments.length; _i++) {
	        args[_i - 2] = arguments[_i];
	    }
	    if (logType < instance.logLevel) {
	        return;
	    }
	    var now = new Date().toISOString();
	    var method = ConsoleMethod[logType];
	    if (method) {
	        console[method].apply(console, __spreadArrays(["[" + now + "]  " + instance.name + ":"], args));
	    }
	    else {
	        throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
	    }
	};
	var Logger = /** @class */ (function () {
	    /**
	     * Gives you an instance of a Logger to capture messages according to
	     * Firebase's logging scheme.
	     *
	     * @param name The name that the logs will be associated with
	     */
	    function Logger(name) {
	        this.name = name;
	        /**
	         * The log level of the given Logger instance.
	         */
	        this._logLevel = defaultLogLevel;
	        /**
	         * The main (internal) log handler for the Logger instance.
	         * Can be set to a new function in internal package code but not by user.
	         */
	        this._logHandler = defaultLogHandler;
	        /**
	         * The optional, additional, user-defined log handler for the Logger instance.
	         */
	        this._userLogHandler = null;
	    }
	    Object.defineProperty(Logger.prototype, "logLevel", {
	        get: function () {
	            return this._logLevel;
	        },
	        set: function (val) {
	            if (!(val in LogLevel)) {
	                throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
	            }
	            this._logLevel = val;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    // Workaround for setter/getter having to be the same type.
	    Logger.prototype.setLogLevel = function (val) {
	        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
	    };
	    Object.defineProperty(Logger.prototype, "logHandler", {
	        get: function () {
	            return this._logHandler;
	        },
	        set: function (val) {
	            if (typeof val !== 'function') {
	                throw new TypeError('Value assigned to `logHandler` must be a function');
	            }
	            this._logHandler = val;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Logger.prototype, "userLogHandler", {
	        get: function () {
	            return this._userLogHandler;
	        },
	        set: function (val) {
	            this._userLogHandler = val;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * The functions below are all based on the `console` interface
	     */
	    Logger.prototype.debug = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));
	        this._logHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));
	    };
	    Logger.prototype.log = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));
	        this._logHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));
	    };
	    Logger.prototype.info = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));
	        this._logHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));
	    };
	    Logger.prototype.warn = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));
	        this._logHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));
	    };
	    Logger.prototype.error = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));
	        this._logHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));
	    };
	    return Logger;
	}());

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	class PlatformLoggerServiceImpl {
	    constructor(container) {
	        this.container = container;
	    }
	    // In initial implementation, this will be called by installations on
	    // auth token refresh, and installations will send this string.
	    getPlatformInfoString() {
	        const providers = this.container.getProviders();
	        // Loop through providers and get library/version pairs from any that are
	        // version components.
	        return providers
	            .map(provider => {
	            if (isVersionServiceProvider(provider)) {
	                const service = provider.getImmediate();
	                return `${service.library}/${service.version}`;
	            }
	            else {
	                return null;
	            }
	        })
	            .filter(logString => logString)
	            .join(' ');
	    }
	}
	/**
	 *
	 * @param provider check if this provider provides a VersionService
	 *
	 * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
	 * provides VersionService. The provider is not necessarily a 'app-version'
	 * provider.
	 */
	function isVersionServiceProvider(provider) {
	    const component = provider.getComponent();
	    return (component === null || component === void 0 ? void 0 : component.type) === "VERSION" /* VERSION */;
	}

	const name$o = "@firebase/app-exp";
	const version$1$1 = "0.0.900-exp.8b4d7550f";

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const logger = new Logger('@firebase/app');

	const name$n = "@firebase/app-compat";

	const name$m = "@firebase/analytics-compat";

	const name$l = "@firebase/analytics-exp";

	const name$k = "@firebase/app-check-compat";

	const name$j = "@firebase/app-check-exp";

	const name$i = "@firebase/auth-exp";

	const name$h = "@firebase/auth-compat";

	const name$g = "@firebase/database";

	const name$f = "@firebase/database-compat";

	const name$e = "@firebase/functions-exp";

	const name$d = "@firebase/functions-compat";

	const name$c = "@firebase/installations-exp";

	const name$b = "@firebase/installations-compat";

	const name$a = "@firebase/messaging-exp";

	const name$9 = "@firebase/messaging-compat";

	const name$8 = "@firebase/performance-exp";

	const name$7 = "@firebase/performance-compat";

	const name$6 = "@firebase/remote-config-exp";

	const name$5 = "@firebase/remote-config-compat";

	const name$4 = "@firebase/storage";

	const name$3 = "@firebase/storage-compat";

	const name$2$1 = "@firebase/firestore";

	const name$1$1 = "@firebase/firestore-compat";

	const name$p = "firebase-exp";
	const version$3 = "9.0.0-beta.8";

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * The default app name
	 *
	 * @internal
	 */
	const DEFAULT_ENTRY_NAME = '[DEFAULT]';
	const PLATFORM_LOG_STRING = {
	    [name$o]: 'fire-core',
	    [name$n]: 'fire-core-compat',
	    [name$l]: 'fire-analytics',
	    [name$m]: 'fire-analytics-compat',
	    [name$j]: 'fire-app-check',
	    [name$k]: 'fire-app-check-compat',
	    [name$i]: 'fire-auth',
	    [name$h]: 'fire-auth-compat',
	    [name$g]: 'fire-rtdb',
	    [name$f]: 'fire-rtdb-compat',
	    [name$e]: 'fire-fn',
	    [name$d]: 'fire-fn-compat',
	    [name$c]: 'fire-iid',
	    [name$b]: 'fire-iid-compat',
	    [name$a]: 'fire-fcm',
	    [name$9]: 'fire-fcm-compat',
	    [name$8]: 'fire-perf',
	    [name$7]: 'fire-perf-compat',
	    [name$6]: 'fire-rc',
	    [name$5]: 'fire-rc-compat',
	    [name$4]: 'fire-gcs',
	    [name$3]: 'fire-gcs-compat',
	    [name$2$1]: 'fire-fst',
	    [name$1$1]: 'fire-fst-compat',
	    'fire-js': 'fire-js',
	    [name$p]: 'fire-js-all'
	};

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @internal
	 */
	const _apps = new Map();
	/**
	 * Registered components.
	 *
	 * @internal
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	const _components = new Map();
	/**
	 * @param component - the component being added to this app's container
	 *
	 * @internal
	 */
	function _addComponent(app, component) {
	    try {
	        app.container.addComponent(component);
	    }
	    catch (e) {
	        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);
	    }
	}
	/**
	 *
	 * @param component - the component to register
	 * @returns whether or not the component is registered successfully
	 *
	 * @internal
	 */
	function _registerComponent(component) {
	    const componentName = component.name;
	    if (_components.has(componentName)) {
	        logger.debug(`There were multiple attempts to register component ${componentName}.`);
	        return false;
	    }
	    _components.set(componentName, component);
	    // add the component to existing app instances
	    for (const app of _apps.values()) {
	        _addComponent(app, component);
	    }
	    return true;
	}
	/**
	 *
	 * @param app - FirebaseApp instance
	 * @param name - service name
	 *
	 * @returns the provider for the service with the matching name
	 *
	 * @internal
	 */
	function _getProvider(app, name) {
	    return app.container.getProvider(name);
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const ERRORS = {
	    ["no-app" /* NO_APP */]: "No Firebase App '{$appName}' has been created - " +
	        'call Firebase App.initializeApp()',
	    ["bad-app-name" /* BAD_APP_NAME */]: "Illegal App name: '{$appName}",
	    ["duplicate-app" /* DUPLICATE_APP */]: "Firebase App named '{$appName}' already exists with different options or config",
	    ["app-deleted" /* APP_DELETED */]: "Firebase App named '{$appName}' already deleted",
	    ["invalid-app-argument" /* INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +
	        'Firebase App instance.',
	    ["invalid-log-argument" /* INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.'
	};
	const ERROR_FACTORY$2 = new ErrorFactory('app', 'Firebase', ERRORS);

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	class FirebaseAppImpl {
	    constructor(options, config, container) {
	        this._isDeleted = false;
	        this._options = Object.assign({}, options);
	        this._config = Object.assign({}, config);
	        this._name = config.name;
	        this._automaticDataCollectionEnabled =
	            config.automaticDataCollectionEnabled;
	        this._container = container;
	        this.container.addComponent(new Component('app-exp', () => this, "PUBLIC" /* PUBLIC */));
	    }
	    get automaticDataCollectionEnabled() {
	        this.checkDestroyed();
	        return this._automaticDataCollectionEnabled;
	    }
	    set automaticDataCollectionEnabled(val) {
	        this.checkDestroyed();
	        this._automaticDataCollectionEnabled = val;
	    }
	    get name() {
	        this.checkDestroyed();
	        return this._name;
	    }
	    get options() {
	        this.checkDestroyed();
	        return this._options;
	    }
	    get config() {
	        this.checkDestroyed();
	        return this._config;
	    }
	    get container() {
	        return this._container;
	    }
	    get isDeleted() {
	        return this._isDeleted;
	    }
	    set isDeleted(val) {
	        this._isDeleted = val;
	    }
	    /**
	     * This function will throw an Error if the App has already been deleted -
	     * use before performing API actions on the App.
	     */
	    checkDestroyed() {
	        if (this.isDeleted) {
	            throw ERROR_FACTORY$2.create("app-deleted" /* APP_DELETED */, { appName: this._name });
	        }
	    }
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * The current SDK version.
	 *
	 * @public
	 */
	const SDK_VERSION = version$3;
	function initializeApp(options, rawConfig = {}) {
	    if (typeof rawConfig !== 'object') {
	        const name = rawConfig;
	        rawConfig = { name };
	    }
	    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);
	    const name = config.name;
	    if (typeof name !== 'string' || !name) {
	        throw ERROR_FACTORY$2.create("bad-app-name" /* BAD_APP_NAME */, {
	            appName: String(name)
	        });
	    }
	    const existingApp = _apps.get(name);
	    if (existingApp) {
	        // return the existing app if options and config deep equal the ones in the existing app.
	        if (deepEqual(options, existingApp.options) &&
	            deepEqual(config, existingApp.config)) {
	            return existingApp;
	        }
	        else {
	            throw ERROR_FACTORY$2.create("duplicate-app" /* DUPLICATE_APP */, { appName: name });
	        }
	    }
	    const container = new ComponentContainer(name);
	    for (const component of _components.values()) {
	        container.addComponent(component);
	    }
	    const newApp = new FirebaseAppImpl(options, config, container);
	    _apps.set(name, newApp);
	    return newApp;
	}
	/**
	 * Retrieves a FirebaseApp instance.
	 *
	 * When called with no arguments, the default app is returned. When an app name
	 * is provided, the app corresponding to that name is returned.
	 *
	 * An exception is thrown if the app being retrieved has not yet been
	 * initialized.
	 *
	 * @example
	 * ```javascript
	 * // Return the default app
	 * const app = getApp();
	 * ```
	 *
	 * @example
	 * ```javascript
	 * // Return a named app
	 * const otherApp = getApp("otherApp");
	 * ```
	 *
	 * @param name - Optional name of the app to return. If no name is
	 *   provided, the default is `"[DEFAULT]"`.
	 *
	 * @returns The app corresponding to the provided app name.
	 *   If no app name is provided, the default app is returned.
	 *
	 * @public
	 */
	function getApp(name = DEFAULT_ENTRY_NAME) {
	    const app = _apps.get(name);
	    if (!app) {
	        throw ERROR_FACTORY$2.create("no-app" /* NO_APP */, { appName: name });
	    }
	    return app;
	}
	/**
	 * Registers a library's name and version for platform logging purposes.
	 * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)
	 * @param version - Current version of that library.
	 * @param variant - Bundle variant, e.g., node, rn, etc.
	 *
	 * @public
	 */
	function registerVersion(libraryKeyOrName, version, variant) {
	    var _a;
	    // TODO: We can use this check to whitelist strings when/if we set up
	    // a good whitelist system.
	    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
	    if (variant) {
	        library += `-${variant}`;
	    }
	    const libraryMismatch = library.match(/\s|\//);
	    const versionMismatch = version.match(/\s|\//);
	    if (libraryMismatch || versionMismatch) {
	        const warning = [
	            `Unable to register library "${library}" with version "${version}":`
	        ];
	        if (libraryMismatch) {
	            warning.push(`library name "${library}" contains illegal characters (whitespace or "/")`);
	        }
	        if (libraryMismatch && versionMismatch) {
	            warning.push('and');
	        }
	        if (versionMismatch) {
	            warning.push(`version name "${version}" contains illegal characters (whitespace or "/")`);
	        }
	        logger.warn(warning.join(' '));
	        return;
	    }
	    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), "VERSION" /* VERSION */));
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function registerCoreComponents(variant) {
	    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), "PRIVATE" /* PRIVATE */));
	    // Register `app` package.
	    registerVersion(name$o, version$1$1, variant);
	    // Register platform SDK identifier (no version).
	    registerVersion('fire-js', '');
	}

	/**
	 * Firebase App
	 *
	 * @remarks This package coordinates the communication between the different Firebase components
	 * @packageDocumentation
	 */
	registerCoreComponents();

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */
	/* global Reflect, Promise */

	var extendStatics = function(d, b) {
	    extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	    return extendStatics(d, b);
	};

	function __extends(d, b) {
	    if (typeof b !== "function" && b !== null)
	        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	    extendStatics(d, b);
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	}

	function __values(o) {
	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
	    if (m) return m.call(o);
	    if (o && typeof o.length === "number") return {
	        next: function () {
	            if (o && i >= o.length) o = void 0;
	            return { value: o && o[i++], done: !o };
	        }
	    };
	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
	}

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	var k$1, goog = goog || {}, l$1 = commonjsGlobal || self;
	function aa() { }
	function ba$1(a) { var b = typeof a; b = "object" != b ? b : a ? Array.isArray(a) ? "array" : b : "null"; return "array" == b || "object" == b && "number" == typeof a.length; }
	function p$1(a) { var b = typeof a; return "object" == b && null != a || "function" == b; }
	function da$1(a) { return Object.prototype.hasOwnProperty.call(a, ea$1) && a[ea$1] || (a[ea$1] = ++fa); }
	var ea$1 = "closure_uid_" + (1E9 * Math.random() >>> 0), fa = 0;
	function ha$1(a, b, c) { return a.call.apply(a.bind, arguments); }
	function ia$1(a, b, c) { if (!a)
	    throw Error(); if (2 < arguments.length) {
	    var d = Array.prototype.slice.call(arguments, 2);
	    return function () { var e = Array.prototype.slice.call(arguments); Array.prototype.unshift.apply(e, d); return a.apply(b, e); };
	} return function () { return a.apply(b, arguments); }; }
	function q$2(a, b, c) { Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? q$2 = ha$1 : q$2 = ia$1; return q$2.apply(null, arguments); }
	function ja(a, b) { var c = Array.prototype.slice.call(arguments, 1); return function () { var d = c.slice(); d.push.apply(d, arguments); return a.apply(this, d); }; }
	function t$1(a, b) { function c() { } c.prototype = b.prototype; a.Z = b.prototype; a.prototype = new c; a.prototype.constructor = a; a.Vb = function (d, e, f) { for (var h = Array(arguments.length - 2), n = 2; n < arguments.length; n++)
	    h[n - 2] = arguments[n]; return b.prototype[e].apply(d, h); }; }
	function v$1() { this.s = this.s; this.o = this.o; }
	var ka = 0, la$1 = {};
	v$1.prototype.s = !1;
	v$1.prototype.na = function () { if (!this.s && (this.s = !0, this.M(), 0 != ka)) {
	    var a = da$1(this);
	    delete la$1[a];
	} };
	v$1.prototype.M = function () { if (this.o)
	    for (; this.o.length;)
	        this.o.shift()(); };
	var ma$1 = Array.prototype.indexOf ? function (a, b) { return Array.prototype.indexOf.call(a, b, void 0); } : function (a, b) { if ("string" === typeof a)
	    return "string" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0); for (var c = 0; c < a.length; c++)
	    if (c in a && a[c] === b)
	        return c; return -1; }, na$1 = Array.prototype.forEach ? function (a, b, c) { Array.prototype.forEach.call(a, b, c); } : function (a, b, c) { var d = a.length, e = "string" === typeof a ? a.split("") : a; for (var f = 0; f < d; f++)
	    f in e && b.call(c, e[f], f, a); };
	function oa(a) { a: {
	    var b = pa$1;
	    var c = a.length, d = "string" === typeof a ? a.split("") : a;
	    for (var e = 0; e < c; e++)
	        if (e in d && b.call(void 0, d[e], e, a)) {
	            b = e;
	            break a;
	        }
	    b = -1;
	} return 0 > b ? null : "string" === typeof a ? a.charAt(b) : a[b]; }
	function qa(a) { return Array.prototype.concat.apply([], arguments); }
	function ra(a) { var b = a.length; if (0 < b) {
	    var c = Array(b);
	    for (var d = 0; d < b; d++)
	        c[d] = a[d];
	    return c;
	} return []; }
	function sa$1(a) { return /^[\s\xa0]*$/.test(a); }
	var ta$1 = String.prototype.trim ? function (a) { return a.trim(); } : function (a) { return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]; };
	function w$1(a, b) { return -1 != a.indexOf(b); }
	function ua(a, b) { return a < b ? -1 : a > b ? 1 : 0; }
	var x$2;
	a: {
	    var va$1 = l$1.navigator;
	    if (va$1) {
	        var wa$1 = va$1.userAgent;
	        if (wa$1) {
	            x$2 = wa$1;
	            break a;
	        }
	    }
	    x$2 = "";
	}
	function xa(a, b, c) { for (var d in a)
	    b.call(c, a[d], d, a); }
	function ya$1(a) { var b = {}; for (var c in a)
	    b[c] = a[c]; return b; }
	var za = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
	function Aa$1(a, b) { var c, d; for (var e = 1; e < arguments.length; e++) {
	    d = arguments[e];
	    for (c in d)
	        a[c] = d[c];
	    for (var f = 0; f < za.length; f++)
	        c = za[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
	} }
	function Ca$1(a) { Ca$1[" "](a); return a; }
	Ca$1[" "] = aa;
	function Fa(a) { var b = Ga; return Object.prototype.hasOwnProperty.call(b, 9) ? b[9] : b[9] = a(9); }
	var Ha = w$1(x$2, "Opera"), y$1 = w$1(x$2, "Trident") || w$1(x$2, "MSIE"), Ia$1 = w$1(x$2, "Edge"), Ja = Ia$1 || y$1, Ka = w$1(x$2, "Gecko") && !(w$1(x$2.toLowerCase(), "webkit") && !w$1(x$2, "Edge")) && !(w$1(x$2, "Trident") || w$1(x$2, "MSIE")) && !w$1(x$2, "Edge"), La = w$1(x$2.toLowerCase(), "webkit") && !w$1(x$2, "Edge");
	function Ma() { var a = l$1.document; return a ? a.documentMode : void 0; }
	var Na;
	a: {
	    var Oa = "", Pa$1 = function () { var a = x$2; if (Ka)
	        return /rv:([^\);]+)(\)|;)/.exec(a); if (Ia$1)
	        return /Edge\/([\d\.]+)/.exec(a); if (y$1)
	        return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a); if (La)
	        return /WebKit\/(\S+)/.exec(a); if (Ha)
	        return /(?:Version)[ \/]?(\S+)/.exec(a); }();
	    Pa$1 && (Oa = Pa$1 ? Pa$1[1] : "");
	    if (y$1) {
	        var Qa = Ma();
	        if (null != Qa && Qa > parseFloat(Oa)) {
	            Na = String(Qa);
	            break a;
	        }
	    }
	    Na = Oa;
	}
	var Ga = {};
	function Ra$1() { return Fa(function () { var a = 0; var b = ta$1(String(Na)).split("."), c = ta$1("9").split("."), d = Math.max(b.length, c.length); for (var h = 0; 0 == a && h < d; h++) {
	    var e = b[h] || "", f = c[h] || "";
	    do {
	        e = /(\d*)(\D*)(.*)/.exec(e) || ["", "", "", ""];
	        f = /(\d*)(\D*)(.*)/.exec(f) || ["", "", "", ""];
	        if (0 == e[0].length && 0 == f[0].length)
	            break;
	        a = ua(0 == e[1].length ? 0 : parseInt(e[1], 10), 0 == f[1].length ? 0 : parseInt(f[1], 10)) || ua(0 == e[2].length, 0 == f[2].length) || ua(e[2], f[2]);
	        e = e[3];
	        f = f[3];
	    } while (0 == a);
	} return 0 <= a; }); }
	var Sa$1;
	if (l$1.document && y$1) {
	    var Ta$1 = Ma();
	    Sa$1 = Ta$1 ? Ta$1 : parseInt(Na, 10) || void 0;
	}
	else
	    Sa$1 = void 0;
	var Ua = Sa$1;
	var Va$1 = function () { if (!l$1.addEventListener || !Object.defineProperty)
	    return !1; var a = !1, b = Object.defineProperty({}, "passive", { get: function () { a = !0; } }); try {
	    l$1.addEventListener("test", aa, b), l$1.removeEventListener("test", aa, b);
	}
	catch (c) { } return a; }();
	function z$2(a, b) { this.type = a; this.g = this.target = b; this.defaultPrevented = !1; }
	z$2.prototype.h = function () { this.defaultPrevented = !0; };
	function A$1(a, b) {
	    z$2.call(this, a ? a.type : "");
	    this.relatedTarget = this.g = this.target = null;
	    this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
	    this.key = "";
	    this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
	    this.state = null;
	    this.pointerId = 0;
	    this.pointerType = "";
	    this.i = null;
	    if (a) {
	        var c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
	        this.target = a.target || a.srcElement;
	        this.g = b;
	        if (b = a.relatedTarget) {
	            if (Ka) {
	                a: {
	                    try {
	                        Ca$1(b.nodeName);
	                        var e = !0;
	                        break a;
	                    }
	                    catch (f) { }
	                    e =
	                        !1;
	                }
	                e || (b = null);
	            }
	        }
	        else
	            "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);
	        this.relatedTarget = b;
	        d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
	        this.button = a.button;
	        this.key = a.key || "";
	        this.ctrlKey = a.ctrlKey;
	        this.altKey = a.altKey;
	        this.shiftKey =
	            a.shiftKey;
	        this.metaKey = a.metaKey;
	        this.pointerId = a.pointerId || 0;
	        this.pointerType = "string" === typeof a.pointerType ? a.pointerType : Wa[a.pointerType] || "";
	        this.state = a.state;
	        this.i = a;
	        a.defaultPrevented && A$1.Z.h.call(this);
	    }
	}
	t$1(A$1, z$2);
	var Wa = { 2: "touch", 3: "pen", 4: "mouse" };
	A$1.prototype.h = function () { A$1.Z.h.call(this); var a = this.i; a.preventDefault ? a.preventDefault() : a.returnValue = !1; };
	var B$1 = "closure_listenable_" + (1E6 * Math.random() | 0);
	var Xa$1 = 0;
	function Ya$1(a, b, c, d, e) { this.listener = a; this.proxy = null; this.src = b; this.type = c; this.capture = !!d; this.ia = e; this.key = ++Xa$1; this.ca = this.fa = !1; }
	function Za(a) { a.ca = !0; a.listener = null; a.proxy = null; a.src = null; a.ia = null; }
	function $a(a) { this.src = a; this.g = {}; this.h = 0; }
	$a.prototype.add = function (a, b, c, d, e) { var f = a.toString(); a = this.g[f]; a || (a = this.g[f] = [], this.h++); var h = ab(a, b, d, e); -1 < h ? (b = a[h], c || (b.fa = !1)) : (b = new Ya$1(b, this.src, f, !!d, e), b.fa = c, a.push(b)); return b; };
	function bb(a, b) { var c = b.type; if (c in a.g) {
	    var d = a.g[c], e = ma$1(d, b), f;
	    (f = 0 <= e) && Array.prototype.splice.call(d, e, 1);
	    f && (Za(b), 0 == a.g[c].length && (delete a.g[c], a.h--));
	} }
	function ab(a, b, c, d) { for (var e = 0; e < a.length; ++e) {
	    var f = a[e];
	    if (!f.ca && f.listener == b && f.capture == !!c && f.ia == d)
	        return e;
	} return -1; }
	var cb = "closure_lm_" + (1E6 * Math.random() | 0), db = {};
	function fb(a, b, c, d, e) { if (d && d.once)
	    return gb(a, b, c, d, e); if (Array.isArray(b)) {
	    for (var f = 0; f < b.length; f++)
	        fb(a, b[f], c, d, e);
	    return null;
	} c = hb(c); return a && a[B$1] ? a.N(b, c, p$1(d) ? !!d.capture : !!d, e) : ib(a, b, c, !1, d, e); }
	function ib(a, b, c, d, e, f) { if (!b)
	    throw Error("Invalid event type"); var h = p$1(e) ? !!e.capture : !!e, n = jb(a); n || (a[cb] = n = new $a(a)); c = n.add(b, c, d, h, f); if (c.proxy)
	    return c; d = kb(); c.proxy = d; d.src = a; d.listener = c; if (a.addEventListener)
	    Va$1 || (e = h), void 0 === e && (e = !1), a.addEventListener(b.toString(), d, e);
	else if (a.attachEvent)
	    a.attachEvent(lb(b.toString()), d);
	else if (a.addListener && a.removeListener)
	    a.addListener(d);
	else
	    throw Error("addEventListener and attachEvent are unavailable."); return c; }
	function kb() { function a(c) { return b.call(a.src, a.listener, c); } var b = mb; return a; }
	function gb(a, b, c, d, e) { if (Array.isArray(b)) {
	    for (var f = 0; f < b.length; f++)
	        gb(a, b[f], c, d, e);
	    return null;
	} c = hb(c); return a && a[B$1] ? a.O(b, c, p$1(d) ? !!d.capture : !!d, e) : ib(a, b, c, !0, d, e); }
	function nb(a, b, c, d, e) { if (Array.isArray(b))
	    for (var f = 0; f < b.length; f++)
	        nb(a, b[f], c, d, e);
	else
	    (d = p$1(d) ? !!d.capture : !!d, c = hb(c), a && a[B$1]) ? (a = a.i, b = String(b).toString(), b in a.g && (f = a.g[b], c = ab(f, c, d, e), -1 < c && (Za(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.g[b], a.h--)))) : a && (a = jb(a)) && (b = a.g[b.toString()], a = -1, b && (a = ab(b, c, d, e)), (c = -1 < a ? b[a] : null) && ob(c)); }
	function ob(a) { if ("number" !== typeof a && a && !a.ca) {
	    var b = a.src;
	    if (b && b[B$1])
	        bb(b.i, a);
	    else {
	        var c = a.type, d = a.proxy;
	        b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(lb(c), d) : b.addListener && b.removeListener && b.removeListener(d);
	        (c = jb(b)) ? (bb(c, a), 0 == c.h && (c.src = null, b[cb] = null)) : Za(a);
	    }
	} }
	function lb(a) { return a in db ? db[a] : db[a] = "on" + a; }
	function mb(a, b) { if (a.ca)
	    a = !0;
	else {
	    b = new A$1(b, this);
	    var c = a.listener, d = a.ia || a.src;
	    a.fa && ob(a);
	    a = c.call(d, b);
	} return a; }
	function jb(a) { a = a[cb]; return a instanceof $a ? a : null; }
	var pb = "__closure_events_fn_" + (1E9 * Math.random() >>> 0);
	function hb(a) { if ("function" === typeof a)
	    return a; a[pb] || (a[pb] = function (b) { return a.handleEvent(b); }); return a[pb]; }
	function C$1() { v$1.call(this); this.i = new $a(this); this.P = this; this.I = null; }
	t$1(C$1, v$1);
	C$1.prototype[B$1] = !0;
	C$1.prototype.removeEventListener = function (a, b, c, d) { nb(this, a, b, c, d); };
	function D$1(a, b) { var c, d = a.I; if (d)
	    for (c = []; d; d = d.I)
	        c.push(d); a = a.P; d = b.type || b; if ("string" === typeof b)
	    b = new z$2(b, a);
	else if (b instanceof z$2)
	    b.target = b.target || a;
	else {
	    var e = b;
	    b = new z$2(d, a);
	    Aa$1(b, e);
	} e = !0; if (c)
	    for (var f = c.length - 1; 0 <= f; f--) {
	        var h = b.g = c[f];
	        e = qb(h, d, !0, b) && e;
	    } h = b.g = a; e = qb(h, d, !0, b) && e; e = qb(h, d, !1, b) && e; if (c)
	    for (f = 0; f < c.length; f++)
	        h = b.g = c[f], e = qb(h, d, !1, b) && e; }
	C$1.prototype.M = function () { C$1.Z.M.call(this); if (this.i) {
	    var a = this.i, c;
	    for (c in a.g) {
	        for (var d = a.g[c], e = 0; e < d.length; e++)
	            Za(d[e]);
	        delete a.g[c];
	        a.h--;
	    }
	} this.I = null; };
	C$1.prototype.N = function (a, b, c, d) { return this.i.add(String(a), b, !1, c, d); };
	C$1.prototype.O = function (a, b, c, d) { return this.i.add(String(a), b, !0, c, d); };
	function qb(a, b, c, d) { b = a.i.g[String(b)]; if (!b)
	    return !0; b = b.concat(); for (var e = !0, f = 0; f < b.length; ++f) {
	    var h = b[f];
	    if (h && !h.ca && h.capture == c) {
	        var n = h.listener, u = h.ia || h.src;
	        h.fa && bb(a.i, h);
	        e = !1 !== n.call(u, d) && e;
	    }
	} return e && !d.defaultPrevented; }
	var rb = l$1.JSON.stringify;
	function sb() { var a = tb; var b = null; a.g && (b = a.g, a.g = a.g.next, a.g || (a.h = null), b.next = null); return b; }
	var ub = /** @class */ (function () {
	    function ub() {
	        this.h = this.g = null;
	    }
	    ub.prototype.add = function (a, b) { var c = vb.get(); c.set(a, b); this.h ? this.h.next = c : this.g = c; this.h = c; };
	    return ub;
	}());
	var vb = new /** @class */ (function () {
	    function class_2(a, b) {
	        this.i = a;
	        this.j = b;
	        this.h = 0;
	        this.g = null;
	    }
	    class_2.prototype.get = function () { var a; 0 < this.h ? (this.h--, a = this.g, this.g = a.next, a.next = null) : a = this.i(); return a; };
	    return class_2;
	}())(function () { return new wb; }, function (a) { return a.reset(); });
	var wb = /** @class */ (function () {
	    function wb() {
	        this.next = this.g = this.h = null;
	    }
	    wb.prototype.set = function (a, b) { this.h = a; this.g = b; this.next = null; };
	    wb.prototype.reset = function () { this.next = this.g = this.h = null; };
	    return wb;
	}());
	function yb(a) { l$1.setTimeout(function () { throw a; }, 0); }
	function zb(a, b) { Ab || Bb(); Cb || (Ab(), Cb = !0); tb.add(a, b); }
	var Ab;
	function Bb() { var a = l$1.Promise.resolve(void 0); Ab = function () { a.then(Db); }; }
	var Cb = !1, tb = new ub;
	function Db() { for (var a; a = sb();) {
	    try {
	        a.h.call(a.g);
	    }
	    catch (c) {
	        yb(c);
	    }
	    var b = vb;
	    b.j(a);
	    100 > b.h && (b.h++, a.next = b.g, b.g = a);
	} Cb = !1; }
	function Eb(a, b) { C$1.call(this); this.h = a || 1; this.g = b || l$1; this.j = q$2(this.kb, this); this.l = Date.now(); }
	t$1(Eb, C$1);
	k$1 = Eb.prototype;
	k$1.da = !1;
	k$1.S = null;
	k$1.kb = function () { if (this.da) {
	    var a = Date.now() - this.l;
	    0 < a && a < .8 * this.h ? this.S = this.g.setTimeout(this.j, this.h - a) : (this.S && (this.g.clearTimeout(this.S), this.S = null), D$1(this, "tick"), this.da && (Fb(this), this.start()));
	} };
	k$1.start = function () { this.da = !0; this.S || (this.S = this.g.setTimeout(this.j, this.h), this.l = Date.now()); };
	function Fb(a) { a.da = !1; a.S && (a.g.clearTimeout(a.S), a.S = null); }
	k$1.M = function () { Eb.Z.M.call(this); Fb(this); delete this.g; };
	function Gb(a, b, c) { if ("function" === typeof a)
	    c && (a = q$2(a, c));
	else if (a && "function" == typeof a.handleEvent)
	    a = q$2(a.handleEvent, a);
	else
	    throw Error("Invalid listener argument"); return 2147483647 < Number(b) ? -1 : l$1.setTimeout(a, b || 0); }
	function Hb(a) { a.g = Gb(function () { a.g = null; a.i && (a.i = !1, Hb(a)); }, a.j); var b = a.h; a.h = null; a.m.apply(null, b); }
	var Ib = /** @class */ (function (_super) {
	    __extends(Ib, _super);
	    function Ib(a, b) {
	        var _this = _super.call(this) || this;
	        _this.m = a;
	        _this.j = b;
	        _this.h = null;
	        _this.i = !1;
	        _this.g = null;
	        return _this;
	    }
	    Ib.prototype.l = function (a) { this.h = arguments; this.g ? this.i = !0 : Hb(this); };
	    Ib.prototype.M = function () { _super.prototype.M.call(this); this.g && (l$1.clearTimeout(this.g), this.g = null, this.i = !1, this.h = null); };
	    return Ib;
	}(v$1));
	function E(a) { v$1.call(this); this.h = a; this.g = {}; }
	t$1(E, v$1);
	var Jb = [];
	function Kb(a, b, c, d) { Array.isArray(c) || (c && (Jb[0] = c.toString()), c = Jb); for (var e = 0; e < c.length; e++) {
	    var f = fb(b, c[e], d || a.handleEvent, !1, a.h || a);
	    if (!f)
	        break;
	    a.g[f.key] = f;
	} }
	function Lb(a) { xa(a.g, function (b, c) { this.g.hasOwnProperty(c) && ob(b); }, a); a.g = {}; }
	E.prototype.M = function () { E.Z.M.call(this); Lb(this); };
	E.prototype.handleEvent = function () { throw Error("EventHandler.handleEvent not implemented"); };
	function Mb() { this.g = !0; }
	Mb.prototype.Aa = function () { this.g = !1; };
	function Nb(a, b, c, d, e, f) { a.info(function () { if (a.g)
	    if (f) {
	        var h = "";
	        for (var n = f.split("&"), u = 0; u < n.length; u++) {
	            var m = n[u].split("=");
	            if (1 < m.length) {
	                var r = m[0];
	                m = m[1];
	                var G = r.split("_");
	                h = 2 <= G.length && "type" == G[1] ? h + (r + "=" + m + "&") : h + (r + "=redacted&");
	            }
	        }
	    }
	    else
	        h = null;
	else
	    h = f; return "XMLHTTP REQ (" + d + ") [attempt " + e + "]: " + b + "\n" + c + "\n" + h; }); }
	function Ob(a, b, c, d, e, f, h) { a.info(function () { return "XMLHTTP RESP (" + d + ") [ attempt " + e + "]: " + b + "\n" + c + "\n" + f + " " + h; }); }
	function F$1(a, b, c, d) { a.info(function () { return "XMLHTTP TEXT (" + b + "): " + Pb(a, c) + (d ? " " + d : ""); }); }
	function Qb(a, b) { a.info(function () { return "TIMEOUT: " + b; }); }
	Mb.prototype.info = function () { };
	function Pb(a, b) { if (!a.g)
	    return b; if (!b)
	    return null; try {
	    var c = JSON.parse(b);
	    if (c)
	        for (a = 0; a < c.length; a++)
	            if (Array.isArray(c[a])) {
	                var d = c[a];
	                if (!(2 > d.length)) {
	                    var e = d[1];
	                    if (Array.isArray(e) && !(1 > e.length)) {
	                        var f = e[0];
	                        if ("noop" != f && "stop" != f && "close" != f)
	                            for (var h = 1; h < e.length; h++)
	                                e[h] = "";
	                    }
	                }
	            }
	    return rb(c);
	}
	catch (n) {
	    return b;
	} }
	var H$1 = {}, Rb = null;
	function Sb() { return Rb = Rb || new C$1; }
	H$1.Ma = "serverreachability";
	function Tb(a) { z$2.call(this, H$1.Ma, a); }
	t$1(Tb, z$2);
	function I(a) { var b = Sb(); D$1(b, new Tb(b, a)); }
	H$1.STAT_EVENT = "statevent";
	function Ub(a, b) { z$2.call(this, H$1.STAT_EVENT, a); this.stat = b; }
	t$1(Ub, z$2);
	function J$1(a) { var b = Sb(); D$1(b, new Ub(b, a)); }
	H$1.Na = "timingevent";
	function Vb(a, b) { z$2.call(this, H$1.Na, a); this.size = b; }
	t$1(Vb, z$2);
	function K$1(a, b) { if ("function" !== typeof a)
	    throw Error("Fn must not be null and must be a function"); return l$1.setTimeout(function () { a(); }, b); }
	var Wb = { NO_ERROR: 0, lb: 1, yb: 2, xb: 3, sb: 4, wb: 5, zb: 6, Ja: 7, TIMEOUT: 8, Cb: 9 };
	var Xb = { qb: "complete", Mb: "success", Ka: "error", Ja: "abort", Eb: "ready", Fb: "readystatechange", TIMEOUT: "timeout", Ab: "incrementaldata", Db: "progress", tb: "downloadprogress", Ub: "uploadprogress" };
	function Yb() { }
	Yb.prototype.h = null;
	function Zb(a) { return a.h || (a.h = a.i()); }
	function $b() { }
	var L$1 = { OPEN: "a", pb: "b", Ka: "c", Bb: "d" };
	function ac$1() { z$2.call(this, "d"); }
	t$1(ac$1, z$2);
	function bc() { z$2.call(this, "c"); }
	t$1(bc, z$2);
	var cc$1;
	function dc() { }
	t$1(dc, Yb);
	dc.prototype.g = function () { return new XMLHttpRequest; };
	dc.prototype.i = function () { return {}; };
	cc$1 = new dc;
	function M$1(a, b, c, d) { this.l = a; this.j = b; this.m = c; this.X = d || 1; this.V = new E(this); this.P = ec; a = Ja ? 125 : void 0; this.W = new Eb(a); this.H = null; this.i = !1; this.s = this.A = this.v = this.K = this.F = this.Y = this.B = null; this.D = []; this.g = null; this.C = 0; this.o = this.u = null; this.N = -1; this.I = !1; this.O = 0; this.L = null; this.aa = this.J = this.$ = this.U = !1; this.h = new fc; }
	function fc() { this.i = null; this.g = ""; this.h = !1; }
	var ec = 45E3, gc = {}, hc$1 = {};
	k$1 = M$1.prototype;
	k$1.setTimeout = function (a) { this.P = a; };
	function ic$1(a, b, c) { a.K = 1; a.v = jc(N$1(b)); a.s = c; a.U = !0; kc$1(a, null); }
	function kc$1(a, b) { a.F = Date.now(); lc$1(a); a.A = N$1(a.v); var c = a.A, d = a.X; Array.isArray(d) || (d = [String(d)]); mc(c.h, "t", d); a.C = 0; c = a.l.H; a.h = new fc; a.g = nc$1(a.l, c ? b : null, !a.s); 0 < a.O && (a.L = new Ib(q$2(a.Ia, a, a.g), a.O)); Kb(a.V, a.g, "readystatechange", a.gb); b = a.H ? ya$1(a.H) : {}; a.s ? (a.u || (a.u = "POST"), b["Content-Type"] = "application/x-www-form-urlencoded", a.g.ea(a.A, a.u, a.s, b)) : (a.u = "GET", a.g.ea(a.A, a.u, null, b)); I(1); Nb(a.j, a.u, a.A, a.m, a.X, a.s); }
	k$1.gb = function (a) { a = a.target; var b = this.L; b && 3 == O$1(a) ? b.l() : this.Ia(a); };
	k$1.Ia = function (a) {
	    try {
	        if (a == this.g)
	            a: {
	                var r = O$1(this.g);
	                var b = this.g.Da();
	                var G = this.g.ba();
	                if (!(3 > r) && (3 != r || Ja || this.g && (this.h.h || this.g.ga() || oc$1(this.g)))) {
	                    this.I || 4 != r || 7 == b || (8 == b || 0 >= G ? I(3) : I(2));
	                    pc(this);
	                    var c = this.g.ba();
	                    this.N = c;
	                    b: if (qc$1(this)) {
	                        var d = oc$1(this.g);
	                        a = "";
	                        var e = d.length, f = 4 == O$1(this.g);
	                        if (!this.h.i) {
	                            if ("undefined" === typeof TextDecoder) {
	                                P(this);
	                                rc$1(this);
	                                var h = "";
	                                break b;
	                            }
	                            this.h.i = new l$1.TextDecoder;
	                        }
	                        for (b = 0; b < e; b++)
	                            this.h.h = !0, a += this.h.i.decode(d[b], { stream: f && b == e - 1 });
	                        d.splice(0, e);
	                        this.h.g += a;
	                        this.C = 0;
	                        h = this.h.g;
	                    }
	                    else
	                        h = this.g.ga();
	                    this.i = 200 == c;
	                    Ob(this.j, this.u, this.A, this.m, this.X, r, c);
	                    if (this.i) {
	                        if (this.$ && !this.J) {
	                            b: {
	                                if (this.g) {
	                                    var n, u = this.g;
	                                    if ((n = u.g ? u.g.getResponseHeader("X-HTTP-Initial-Response") : null) && !sa$1(n)) {
	                                        var m = n;
	                                        break b;
	                                    }
	                                }
	                                m = null;
	                            }
	                            if (c = m)
	                                F$1(this.j, this.m, c, "Initial handshake response via X-HTTP-Initial-Response"), this.J = !0, sc$1(this, c);
	                            else {
	                                this.i = !1;
	                                this.o = 3;
	                                J$1(12);
	                                P(this);
	                                rc$1(this);
	                                break a;
	                            }
	                        }
	                        this.U ? (tc$1(this, r, h), Ja && this.i && 3 == r && (Kb(this.V, this.W, "tick", this.fb),
	                            this.W.start())) : (F$1(this.j, this.m, h, null), sc$1(this, h));
	                        4 == r && P(this);
	                        this.i && !this.I && (4 == r ? uc$1(this.l, this) : (this.i = !1, lc$1(this)));
	                    }
	                    else
	                        400 == c && 0 < h.indexOf("Unknown SID") ? (this.o = 3, J$1(12)) : (this.o = 0, J$1(13)), P(this), rc$1(this);
	                }
	            }
	    }
	    catch (r) { }
	    finally { }
	};
	function qc$1(a) { return a.g ? "GET" == a.u && 2 != a.K && a.l.Ba : !1; }
	function tc$1(a, b, c) {
	    var d = !0, e;
	    for (; !a.I && a.C < c.length;)
	        if (e = vc$1(a, c), e == hc$1) {
	            4 == b && (a.o = 4, J$1(14), d = !1);
	            F$1(a.j, a.m, null, "[Incomplete Response]");
	            break;
	        }
	        else if (e == gc) {
	            a.o = 4;
	            J$1(15);
	            F$1(a.j, a.m, c, "[Invalid Chunk]");
	            d = !1;
	            break;
	        }
	        else
	            F$1(a.j, a.m, e, null), sc$1(a, e);
	    qc$1(a) && e != hc$1 && e != gc && (a.h.g = "", a.C = 0);
	    4 != b || 0 != c.length || a.h.h || (a.o = 1, J$1(16), d = !1);
	    a.i = a.i && d;
	    d ? 0 < c.length && !a.aa && (a.aa = !0, b = a.l, b.g == a && b.$ && !b.L && (b.h.info("Great, no buffering proxy detected. Bytes received: " + c.length), wc(b), b.L = !0, J$1(11))) : (F$1(a.j, a.m, c, "[Invalid Chunked Response]"), P(a), rc$1(a));
	}
	k$1.fb = function () { if (this.g) {
	    var a = O$1(this.g), b = this.g.ga();
	    this.C < b.length && (pc(this), tc$1(this, a, b), this.i && 4 != a && lc$1(this));
	} };
	function vc$1(a, b) { var c = a.C, d = b.indexOf("\n", c); if (-1 == d)
	    return hc$1; c = Number(b.substring(c, d)); if (isNaN(c))
	    return gc; d += 1; if (d + c > b.length)
	    return hc$1; b = b.substr(d, c); a.C = d + c; return b; }
	k$1.cancel = function () { this.I = !0; P(this); };
	function lc$1(a) { a.Y = Date.now() + a.P; xc$1(a, a.P); }
	function xc$1(a, b) { if (null != a.B)
	    throw Error("WatchDog timer not null"); a.B = K$1(q$2(a.eb, a), b); }
	function pc(a) { a.B && (l$1.clearTimeout(a.B), a.B = null); }
	k$1.eb = function () { this.B = null; var a = Date.now(); 0 <= a - this.Y ? (Qb(this.j, this.A), 2 != this.K && (I(3), J$1(17)), P(this), this.o = 2, rc$1(this)) : xc$1(this, this.Y - a); };
	function rc$1(a) { 0 == a.l.G || a.I || uc$1(a.l, a); }
	function P(a) { pc(a); var b = a.L; b && "function" == typeof b.na && b.na(); a.L = null; Fb(a.W); Lb(a.V); a.g && (b = a.g, a.g = null, b.abort(), b.na()); }
	function sc$1(a, b) {
	    try {
	        var c = a.l;
	        if (0 != c.G && (c.g == a || yc(c.i, a)))
	            if (c.I = a.N, !a.J && yc(c.i, a) && 3 == c.G) {
	                try {
	                    var d = c.Ca.g.parse(b);
	                }
	                catch (m) {
	                    d = null;
	                }
	                if (Array.isArray(d) && 3 == d.length) {
	                    var e = d;
	                    if (0 == e[0])
	                        a: {
	                            if (!c.u) {
	                                if (c.g)
	                                    if (c.g.F + 3E3 < a.F)
	                                        zc(c), Ac(c);
	                                    else
	                                        break a;
	                                Bc(c);
	                                J$1(18);
	                            }
	                        }
	                    else
	                        c.ta = e[1], 0 < c.ta - c.U && 37500 > e[2] && c.N && 0 == c.A && !c.v && (c.v = K$1(q$2(c.ab, c), 6E3));
	                    if (1 >= Cc(c.i) && c.ka) {
	                        try {
	                            c.ka();
	                        }
	                        catch (m) { }
	                        c.ka = void 0;
	                    }
	                }
	                else
	                    Q$1(c, 11);
	            }
	            else if ((a.J || c.g == a) && zc(c), !sa$1(b))
	                for (e = c.Ca.g.parse(b), b = 0; b < e.length; b++) {
	                    var m = e[b];
	                    c.U = m[0];
	                    m = m[1];
	                    if (2 == c.G)
	                        if ("c" == m[0]) {
	                            c.J = m[1];
	                            c.la = m[2];
	                            var r = m[3];
	                            null != r && (c.ma = r, c.h.info("VER=" + c.ma));
	                            var G = m[4];
	                            null != G && (c.za = G, c.h.info("SVER=" + c.za));
	                            var Da = m[5];
	                            null != Da && "number" === typeof Da && 0 < Da && (d = 1.5 * Da, c.K = d, c.h.info("backChannelRequestTimeoutMs_=" + d));
	                            d = c;
	                            var ca = a.g;
	                            if (ca) {
	                                var Ea = ca.g ? ca.g.getResponseHeader("X-Client-Wire-Protocol") : null;
	                                if (Ea) {
	                                    var f = d.i;
	                                    !f.g && (w$1(Ea, "spdy") || w$1(Ea, "quic") || w$1(Ea, "h2")) && (f.j = f.l, f.g = new Set, f.h && (Dc(f, f.h), f.h = null));
	                                }
	                                if (d.D) {
	                                    var xb = ca.g ? ca.g.getResponseHeader("X-HTTP-Session-Id") : null;
	                                    xb && (d.sa = xb, R(d.F, d.D, xb));
	                                }
	                            }
	                            c.G = 3;
	                            c.j && c.j.xa();
	                            c.$ && (c.O = Date.now() - a.F, c.h.info("Handshake RTT: " + c.O + "ms"));
	                            d = c;
	                            var h = a;
	                            d.oa = Ec(d, d.H ? d.la : null, d.W);
	                            if (h.J) {
	                                Fc$1(d.i, h);
	                                var n = h, u = d.K;
	                                u && n.setTimeout(u);
	                                n.B && (pc(n), lc$1(n));
	                                d.g = h;
	                            }
	                            else
	                                Gc(d);
	                            0 < c.l.length && Hc(c);
	                        }
	                        else
	                            "stop" != m[0] && "close" != m[0] || Q$1(c, 7);
	                    else
	                        3 == c.G && ("stop" == m[0] || "close" == m[0] ? "stop" == m[0] ? Q$1(c, 7) : Ic$1(c) : "noop" != m[0] && c.j && c.j.wa(m), c.A = 0);
	                }
	        I(4);
	    }
	    catch (m) { }
	}
	function Jc(a) { if (a.R && "function" == typeof a.R)
	    return a.R(); if ("string" === typeof a)
	    return a.split(""); if (ba$1(a)) {
	    for (var b = [], c = a.length, d = 0; d < c; d++)
	        b.push(a[d]);
	    return b;
	} b = []; c = 0; for (d in a)
	    b[c++] = a[d]; return b; }
	function Kc(a, b) { if (a.forEach && "function" == typeof a.forEach)
	    a.forEach(b, void 0);
	else if (ba$1(a) || "string" === typeof a)
	    na$1(a, b, void 0);
	else {
	    if (a.T && "function" == typeof a.T)
	        var c = a.T();
	    else if (a.R && "function" == typeof a.R)
	        c = void 0;
	    else if (ba$1(a) || "string" === typeof a) {
	        c = [];
	        for (var d = a.length, e = 0; e < d; e++)
	            c.push(e);
	    }
	    else
	        for (e in c = [], d = 0, a)
	            c[d++] = e;
	    d = Jc(a);
	    e = d.length;
	    for (var f = 0; f < e; f++)
	        b.call(void 0, d[f], c && c[f], a);
	} }
	function S$1(a, b) { this.h = {}; this.g = []; this.i = 0; var c = arguments.length; if (1 < c) {
	    if (c % 2)
	        throw Error("Uneven number of arguments");
	    for (var d = 0; d < c; d += 2)
	        this.set(arguments[d], arguments[d + 1]);
	}
	else if (a)
	    if (a instanceof S$1)
	        for (c = a.T(), d = 0; d < c.length; d++)
	            this.set(c[d], a.get(c[d]));
	    else
	        for (d in a)
	            this.set(d, a[d]); }
	k$1 = S$1.prototype;
	k$1.R = function () { Lc(this); for (var a = [], b = 0; b < this.g.length; b++)
	    a.push(this.h[this.g[b]]); return a; };
	k$1.T = function () { Lc(this); return this.g.concat(); };
	function Lc(a) { if (a.i != a.g.length) {
	    for (var b = 0, c = 0; b < a.g.length;) {
	        var d = a.g[b];
	        T(a.h, d) && (a.g[c++] = d);
	        b++;
	    }
	    a.g.length = c;
	} if (a.i != a.g.length) {
	    var e = {};
	    for (c = b = 0; b < a.g.length;)
	        d = a.g[b], T(e, d) || (a.g[c++] = d, e[d] = 1), b++;
	    a.g.length = c;
	} }
	k$1.get = function (a, b) { return T(this.h, a) ? this.h[a] : b; };
	k$1.set = function (a, b) { T(this.h, a) || (this.i++, this.g.push(a)); this.h[a] = b; };
	k$1.forEach = function (a, b) { for (var c = this.T(), d = 0; d < c.length; d++) {
	    var e = c[d], f = this.get(e);
	    a.call(b, f, e, this);
	} };
	function T(a, b) { return Object.prototype.hasOwnProperty.call(a, b); }
	var Mc = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;
	function Nc(a, b) { if (a) {
	    a = a.split("&");
	    for (var c = 0; c < a.length; c++) {
	        var d = a[c].indexOf("="), e = null;
	        if (0 <= d) {
	            var f = a[c].substring(0, d);
	            e = a[c].substring(d + 1);
	        }
	        else
	            f = a[c];
	        b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
	    }
	} }
	function U$1(a, b) { this.i = this.s = this.j = ""; this.m = null; this.o = this.l = ""; this.g = !1; if (a instanceof U$1) {
	    this.g = void 0 !== b ? b : a.g;
	    Oc$1(this, a.j);
	    this.s = a.s;
	    Pc$1(this, a.i);
	    Qc(this, a.m);
	    this.l = a.l;
	    b = a.h;
	    var c = new Rc$1;
	    c.i = b.i;
	    b.g && (c.g = new S$1(b.g), c.h = b.h);
	    Sc$1(this, c);
	    this.o = a.o;
	}
	else
	    a && (c = String(a).match(Mc)) ? (this.g = !!b, Oc$1(this, c[1] || "", !0), this.s = Tc$1(c[2] || ""), Pc$1(this, c[3] || "", !0), Qc(this, c[4]), this.l = Tc$1(c[5] || "", !0), Sc$1(this, c[6] || "", !0), this.o = Tc$1(c[7] || "")) : (this.g = !!b, this.h = new Rc$1(null, this.g)); }
	U$1.prototype.toString = function () { var a = [], b = this.j; b && a.push(Uc$1(b, Vc, !0), ":"); var c = this.i; if (c || "file" == b)
	    a.push("//"), (b = this.s) && a.push(Uc$1(b, Vc, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.m, null != c && a.push(":", String(c)); if (c = this.l)
	    this.i && "/" != c.charAt(0) && a.push("/"), a.push(Uc$1(c, "/" == c.charAt(0) ? Wc : Xc, !0)); (c = this.h.toString()) && a.push("?", c); (c = this.o) && a.push("#", Uc$1(c, Yc)); return a.join(""); };
	function N$1(a) { return new U$1(a); }
	function Oc$1(a, b, c) { a.j = c ? Tc$1(b, !0) : b; a.j && (a.j = a.j.replace(/:$/, "")); }
	function Pc$1(a, b, c) { a.i = c ? Tc$1(b, !0) : b; }
	function Qc(a, b) { if (b) {
	    b = Number(b);
	    if (isNaN(b) || 0 > b)
	        throw Error("Bad port number " + b);
	    a.m = b;
	}
	else
	    a.m = null; }
	function Sc$1(a, b, c) { b instanceof Rc$1 ? (a.h = b, Zc$1(a.h, a.g)) : (c || (b = Uc$1(b, $c$1)), a.h = new Rc$1(b, a.g)); }
	function R(a, b, c) { a.h.set(b, c); }
	function jc(a) { R(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ Date.now()).toString(36)); return a; }
	function ad(a) { return a instanceof U$1 ? N$1(a) : new U$1(a, void 0); }
	function bd(a, b, c, d) { var e = new U$1(null, void 0); a && Oc$1(e, a); b && Pc$1(e, b); c && Qc(e, c); d && (e.l = d); return e; }
	function Tc$1(a, b) { return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : ""; }
	function Uc$1(a, b, c) { return "string" === typeof a ? (a = encodeURI(a).replace(b, cd), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null; }
	function cd(a) { a = a.charCodeAt(0); return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16); }
	var Vc = /[#\/\?@]/g, Xc = /[#\?:]/g, Wc = /[#\?]/g, $c$1 = /[#\?@]/g, Yc = /#/g;
	function Rc$1(a, b) { this.h = this.g = null; this.i = a || null; this.j = !!b; }
	function V$1(a) { a.g || (a.g = new S$1, a.h = 0, a.i && Nc(a.i, function (b, c) { a.add(decodeURIComponent(b.replace(/\+/g, " ")), c); })); }
	k$1 = Rc$1.prototype;
	k$1.add = function (a, b) { V$1(this); this.i = null; a = W$1(this, a); var c = this.g.get(a); c || this.g.set(a, c = []); c.push(b); this.h += 1; return this; };
	function dd(a, b) { V$1(a); b = W$1(a, b); T(a.g.h, b) && (a.i = null, a.h -= a.g.get(b).length, a = a.g, T(a.h, b) && (delete a.h[b], a.i--, a.g.length > 2 * a.i && Lc(a))); }
	function ed(a, b) { V$1(a); b = W$1(a, b); return T(a.g.h, b); }
	k$1.forEach = function (a, b) { V$1(this); this.g.forEach(function (c, d) { na$1(c, function (e) { a.call(b, e, d, this); }, this); }, this); };
	k$1.T = function () { V$1(this); for (var a = this.g.R(), b = this.g.T(), c = [], d = 0; d < b.length; d++)
	    for (var e = a[d], f = 0; f < e.length; f++)
	        c.push(b[d]); return c; };
	k$1.R = function (a) { V$1(this); var b = []; if ("string" === typeof a)
	    ed(this, a) && (b = qa(b, this.g.get(W$1(this, a))));
	else {
	    a = this.g.R();
	    for (var c = 0; c < a.length; c++)
	        b = qa(b, a[c]);
	} return b; };
	k$1.set = function (a, b) { V$1(this); this.i = null; a = W$1(this, a); ed(this, a) && (this.h -= this.g.get(a).length); this.g.set(a, [b]); this.h += 1; return this; };
	k$1.get = function (a, b) { if (!a)
	    return b; a = this.R(a); return 0 < a.length ? String(a[0]) : b; };
	function mc(a, b, c) { dd(a, b); 0 < c.length && (a.i = null, a.g.set(W$1(a, b), ra(c)), a.h += c.length); }
	k$1.toString = function () { if (this.i)
	    return this.i; if (!this.g)
	    return ""; for (var a = [], b = this.g.T(), c = 0; c < b.length; c++) {
	    var d = b[c], e = encodeURIComponent(String(d));
	    d = this.R(d);
	    for (var f = 0; f < d.length; f++) {
	        var h = e;
	        "" !== d[f] && (h += "=" + encodeURIComponent(String(d[f])));
	        a.push(h);
	    }
	} return this.i = a.join("&"); };
	function W$1(a, b) { b = String(b); a.j && (b = b.toLowerCase()); return b; }
	function Zc$1(a, b) { b && !a.j && (V$1(a), a.i = null, a.g.forEach(function (c, d) { var e = d.toLowerCase(); d != e && (dd(this, d), mc(this, e, c)); }, a)); a.j = b; }
	var fd = /** @class */ (function () {
	    function fd(a, b) {
	        this.h = a;
	        this.g = b;
	    }
	    return fd;
	}());
	function gd(a) { this.l = a || hd; l$1.PerformanceNavigationTiming ? (a = l$1.performance.getEntriesByType("navigation"), a = 0 < a.length && ("hq" == a[0].nextHopProtocol || "h2" == a[0].nextHopProtocol)) : a = !!(l$1.g && l$1.g.Ea && l$1.g.Ea() && l$1.g.Ea().Zb); this.j = a ? this.l : 1; this.g = null; 1 < this.j && (this.g = new Set); this.h = null; this.i = []; }
	var hd = 10;
	function id$1(a) { return a.h ? !0 : a.g ? a.g.size >= a.j : !1; }
	function Cc(a) { return a.h ? 1 : a.g ? a.g.size : 0; }
	function yc(a, b) { return a.h ? a.h == b : a.g ? a.g.has(b) : !1; }
	function Dc(a, b) { a.g ? a.g.add(b) : a.h = b; }
	function Fc$1(a, b) { a.h && a.h == b ? a.h = null : a.g && a.g.has(b) && a.g.delete(b); }
	gd.prototype.cancel = function () {
	    var e_1, _a;
	    this.i = jd(this);
	    if (this.h)
	        this.h.cancel(), this.h = null;
	    else if (this.g && 0 !== this.g.size) {
	        try {
	            for (var _b = __values(this.g.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var a = _c.value;
	                a.cancel();
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        this.g.clear();
	    }
	};
	function jd(a) {
	    var e_2, _a;
	    if (null != a.h)
	        return a.i.concat(a.h.D);
	    if (null != a.g && 0 !== a.g.size) {
	        var b = a.i;
	        try {
	            for (var _b = __values(a.g.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var c = _c.value;
	                b = b.concat(c.D);
	            }
	        }
	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_2) throw e_2.error; }
	        }
	        return b;
	    }
	    return ra(a.i);
	}
	function kd() { }
	kd.prototype.stringify = function (a) { return l$1.JSON.stringify(a, void 0); };
	kd.prototype.parse = function (a) { return l$1.JSON.parse(a, void 0); };
	function ld() { this.g = new kd; }
	function md(a, b, c) { var d = c || ""; try {
	    Kc(a, function (e, f) { var h = e; p$1(e) && (h = rb(e)); b.push(d + f + "=" + encodeURIComponent(h)); });
	}
	catch (e) {
	    throw b.push(d + "type=" + encodeURIComponent("_badmap")), e;
	} }
	function nd(a, b) { var c = new Mb; if (l$1.Image) {
	    var d_1 = new Image;
	    d_1.onload = ja(od, c, d_1, "TestLoadImage: loaded", !0, b);
	    d_1.onerror = ja(od, c, d_1, "TestLoadImage: error", !1, b);
	    d_1.onabort = ja(od, c, d_1, "TestLoadImage: abort", !1, b);
	    d_1.ontimeout = ja(od, c, d_1, "TestLoadImage: timeout", !1, b);
	    l$1.setTimeout(function () { if (d_1.ontimeout)
	        d_1.ontimeout(); }, 1E4);
	    d_1.src = a;
	}
	else
	    b(!1); }
	function od(a, b, c, d, e) { try {
	    b.onload = null, b.onerror = null, b.onabort = null, b.ontimeout = null, e(d);
	}
	catch (f) { } }
	function pd(a) { this.l = a.$b || null; this.j = a.ib || !1; }
	t$1(pd, Yb);
	pd.prototype.g = function () { return new qd(this.l, this.j); };
	pd.prototype.i = function (a) { return function () { return a; }; }({});
	function qd(a, b) { C$1.call(this); this.D = a; this.u = b; this.m = void 0; this.readyState = rd; this.status = 0; this.responseType = this.responseText = this.response = this.statusText = ""; this.onreadystatechange = null; this.v = new Headers; this.h = null; this.C = "GET"; this.B = ""; this.g = !1; this.A = this.j = this.l = null; }
	t$1(qd, C$1);
	var rd = 0;
	k$1 = qd.prototype;
	k$1.open = function (a, b) { if (this.readyState != rd)
	    throw this.abort(), Error("Error reopening a connection"); this.C = a; this.B = b; this.readyState = 1; sd(this); };
	k$1.send = function (a) { if (1 != this.readyState)
	    throw this.abort(), Error("need to call open() first. "); this.g = !0; var b = { headers: this.v, method: this.C, credentials: this.m, cache: void 0 }; a && (b.body = a); (this.D || l$1).fetch(new Request(this.B, b)).then(this.Va.bind(this), this.ha.bind(this)); };
	k$1.abort = function () { this.response = this.responseText = ""; this.v = new Headers; this.status = 0; this.j && this.j.cancel("Request was aborted."); 1 <= this.readyState && this.g && 4 != this.readyState && (this.g = !1, td(this)); this.readyState = rd; };
	k$1.Va = function (a) {
	    if (this.g && (this.l = a, this.h || (this.status = this.l.status, this.statusText = this.l.statusText, this.h = a.headers, this.readyState = 2, sd(this)), this.g && (this.readyState = 3, sd(this), this.g)))
	        if ("arraybuffer" === this.responseType)
	            a.arrayBuffer().then(this.Ta.bind(this), this.ha.bind(this));
	        else if ("undefined" !== typeof l$1.ReadableStream && "body" in a) {
	            this.j = a.body.getReader();
	            if (this.u) {
	                if (this.responseType)
	                    throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');
	                this.response =
	                    [];
	            }
	            else
	                this.response = this.responseText = "", this.A = new TextDecoder;
	            ud(this);
	        }
	        else
	            a.text().then(this.Ua.bind(this), this.ha.bind(this));
	};
	function ud(a) { a.j.read().then(a.Sa.bind(a)).catch(a.ha.bind(a)); }
	k$1.Sa = function (a) { if (this.g) {
	    if (this.u && a.value)
	        this.response.push(a.value);
	    else if (!this.u) {
	        var b = a.value ? a.value : new Uint8Array(0);
	        if (b = this.A.decode(b, { stream: !a.done }))
	            this.response = this.responseText += b;
	    }
	    a.done ? td(this) : sd(this);
	    3 == this.readyState && ud(this);
	} };
	k$1.Ua = function (a) { this.g && (this.response = this.responseText = a, td(this)); };
	k$1.Ta = function (a) { this.g && (this.response = a, td(this)); };
	k$1.ha = function () { this.g && td(this); };
	function td(a) { a.readyState = 4; a.l = null; a.j = null; a.A = null; sd(a); }
	k$1.setRequestHeader = function (a, b) { this.v.append(a, b); };
	k$1.getResponseHeader = function (a) { return this.h ? this.h.get(a.toLowerCase()) || "" : ""; };
	k$1.getAllResponseHeaders = function () { if (!this.h)
	    return ""; var a = [], b = this.h.entries(); for (var c = b.next(); !c.done;)
	    c = c.value, a.push(c[0] + ": " + c[1]), c = b.next(); return a.join("\r\n"); };
	function sd(a) { a.onreadystatechange && a.onreadystatechange.call(a); }
	Object.defineProperty(qd.prototype, "withCredentials", { get: function () { return "include" === this.m; }, set: function (a) { this.m = a ? "include" : "same-origin"; } });
	var vd = l$1.JSON.parse;
	function X$1(a) { C$1.call(this); this.headers = new S$1; this.u = a || null; this.h = !1; this.C = this.g = null; this.H = ""; this.m = 0; this.j = ""; this.l = this.F = this.v = this.D = !1; this.B = 0; this.A = null; this.J = wd; this.K = this.L = !1; }
	t$1(X$1, C$1);
	var wd = "", xd = /^https?$/i, yd = ["POST", "PUT"];
	k$1 = X$1.prototype;
	k$1.ea = function (a, b, c, d) {
	    if (this.g)
	        throw Error("[goog.net.XhrIo] Object is active with another request=" + this.H + "; newUri=" + a);
	    b = b ? b.toUpperCase() : "GET";
	    this.H = a;
	    this.j = "";
	    this.m = 0;
	    this.D = !1;
	    this.h = !0;
	    this.g = this.u ? this.u.g() : cc$1.g();
	    this.C = this.u ? Zb(this.u) : Zb(cc$1);
	    this.g.onreadystatechange = q$2(this.Fa, this);
	    try {
	        this.F = !0, this.g.open(b, String(a), !0), this.F = !1;
	    }
	    catch (f) {
	        zd(this, f);
	        return;
	    }
	    a = c || "";
	    var e = new S$1(this.headers);
	    d && Kc(d, function (f, h) { e.set(h, f); });
	    d = oa(e.T());
	    c = l$1.FormData && a instanceof l$1.FormData;
	    !(0 <= ma$1(yd, b)) || d || c || e.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
	    e.forEach(function (f, h) { this.g.setRequestHeader(h, f); }, this);
	    this.J && (this.g.responseType = this.J);
	    "withCredentials" in this.g && this.g.withCredentials !== this.L && (this.g.withCredentials = this.L);
	    try {
	        Ad(this), 0 < this.B && ((this.K = Bd(this.g)) ? (this.g.timeout = this.B, this.g.ontimeout = q$2(this.pa, this)) : this.A = Gb(this.pa, this.B, this)), this.v = !0, this.g.send(a), this.v = !1;
	    }
	    catch (f) {
	        zd(this, f);
	    }
	};
	function Bd(a) { return y$1 && Ra$1() && "number" === typeof a.timeout && void 0 !== a.ontimeout; }
	function pa$1(a) { return "content-type" == a.toLowerCase(); }
	k$1.pa = function () { "undefined" != typeof goog && this.g && (this.j = "Timed out after " + this.B + "ms, aborting", this.m = 8, D$1(this, "timeout"), this.abort(8)); };
	function zd(a, b) { a.h = !1; a.g && (a.l = !0, a.g.abort(), a.l = !1); a.j = b; a.m = 5; Cd(a); Dd(a); }
	function Cd(a) { a.D || (a.D = !0, D$1(a, "complete"), D$1(a, "error")); }
	k$1.abort = function (a) { this.g && this.h && (this.h = !1, this.l = !0, this.g.abort(), this.l = !1, this.m = a || 7, D$1(this, "complete"), D$1(this, "abort"), Dd(this)); };
	k$1.M = function () { this.g && (this.h && (this.h = !1, this.l = !0, this.g.abort(), this.l = !1), Dd(this, !0)); X$1.Z.M.call(this); };
	k$1.Fa = function () { this.s || (this.F || this.v || this.l ? Ed(this) : this.cb()); };
	k$1.cb = function () { Ed(this); };
	function Ed(a) {
	    if (a.h && "undefined" != typeof goog && (!a.C[1] || 4 != O$1(a) || 2 != a.ba()))
	        if (a.v && 4 == O$1(a))
	            Gb(a.Fa, 0, a);
	        else if (D$1(a, "readystatechange"), 4 == O$1(a)) {
	            a.h = !1;
	            try {
	                var n = a.ba();
	                a: switch (n) {
	                    case 200:
	                    case 201:
	                    case 202:
	                    case 204:
	                    case 206:
	                    case 304:
	                    case 1223:
	                        var b = !0;
	                        break a;
	                    default: b = !1;
	                }
	                var c;
	                if (!(c = b)) {
	                    var d;
	                    if (d = 0 === n) {
	                        var e = String(a.H).match(Mc)[1] || null;
	                        if (!e && l$1.self && l$1.self.location) {
	                            var f = l$1.self.location.protocol;
	                            e = f.substr(0, f.length - 1);
	                        }
	                        d = !xd.test(e ? e.toLowerCase() : "");
	                    }
	                    c = d;
	                }
	                if (c)
	                    D$1(a, "complete"), D$1(a, "success");
	                else {
	                    a.m = 6;
	                    try {
	                        var h = 2 < O$1(a) ? a.g.statusText : "";
	                    }
	                    catch (u) {
	                        h = "";
	                    }
	                    a.j = h + " [" + a.ba() + "]";
	                    Cd(a);
	                }
	            }
	            finally {
	                Dd(a);
	            }
	        }
	}
	function Dd(a, b) { if (a.g) {
	    Ad(a);
	    var c = a.g, d = a.C[0] ? aa : null;
	    a.g = null;
	    a.C = null;
	    b || D$1(a, "ready");
	    try {
	        c.onreadystatechange = d;
	    }
	    catch (e) { }
	} }
	function Ad(a) { a.g && a.K && (a.g.ontimeout = null); a.A && (l$1.clearTimeout(a.A), a.A = null); }
	function O$1(a) { return a.g ? a.g.readyState : 0; }
	k$1.ba = function () { try {
	    return 2 < O$1(this) ? this.g.status : -1;
	}
	catch (a) {
	    return -1;
	} };
	k$1.ga = function () { try {
	    return this.g ? this.g.responseText : "";
	}
	catch (a) {
	    return "";
	} };
	k$1.Qa = function (a) { if (this.g) {
	    var b = this.g.responseText;
	    a && 0 == b.indexOf(a) && (b = b.substring(a.length));
	    return vd(b);
	} };
	function oc$1(a) { try {
	    if (!a.g)
	        return null;
	    if ("response" in a.g)
	        return a.g.response;
	    switch (a.J) {
	        case wd:
	        case "text": return a.g.responseText;
	        case "arraybuffer": if ("mozResponseArrayBuffer" in a.g)
	            return a.g.mozResponseArrayBuffer;
	    }
	    return null;
	}
	catch (b) {
	    return null;
	} }
	k$1.Da = function () { return this.m; };
	k$1.La = function () { return "string" === typeof this.j ? this.j : String(this.j); };
	function Fd(a) { var b = ""; xa(a, function (c, d) { b += d; b += ":"; b += c; b += "\r\n"; }); return b; }
	function Gd(a, b, c) { a: {
	    for (d in c) {
	        var d = !1;
	        break a;
	    }
	    d = !0;
	} d || (c = Fd(c), "string" === typeof a ? (null != c && encodeURIComponent(String(c))) : R(a, b, c)); }
	function Hd(a, b, c) { return c && c.internalChannelParams ? c.internalChannelParams[a] || b : b; }
	function Id(a) {
	    this.za = 0;
	    this.l = [];
	    this.h = new Mb;
	    this.la = this.oa = this.F = this.W = this.g = this.sa = this.D = this.aa = this.o = this.P = this.s = null;
	    this.Za = this.V = 0;
	    this.Xa = Hd("failFast", !1, a);
	    this.N = this.v = this.u = this.m = this.j = null;
	    this.X = !0;
	    this.I = this.ta = this.U = -1;
	    this.Y = this.A = this.C = 0;
	    this.Pa = Hd("baseRetryDelayMs", 5E3, a);
	    this.$a = Hd("retryDelaySeedMs", 1E4, a);
	    this.Ya = Hd("forwardChannelMaxRetries", 2, a);
	    this.ra = Hd("forwardChannelRequestTimeoutMs", 2E4, a);
	    this.qa = a && a.xmlHttpFactory || void 0;
	    this.Ba = a && a.Yb || !1;
	    this.K = void 0;
	    this.H = a && a.supportsCrossDomainXhr || !1;
	    this.J = "";
	    this.i = new gd(a && a.concurrentRequestLimit);
	    this.Ca = new ld;
	    this.ja = a && a.fastHandshake || !1;
	    this.Ra = a && a.Wb || !1;
	    a && a.Aa && this.h.Aa();
	    a && a.forceLongPolling && (this.X = !1);
	    this.$ = !this.ja && this.X && a && a.detectBufferingProxy || !1;
	    this.ka = void 0;
	    this.O = 0;
	    this.L = !1;
	    this.B = null;
	    this.Wa = !a || !1 !== a.Xb;
	}
	k$1 = Id.prototype;
	k$1.ma = 8;
	k$1.G = 1;
	function Ic$1(a) { Jd(a); if (3 == a.G) {
	    var b = a.V++, c = N$1(a.F);
	    R(c, "SID", a.J);
	    R(c, "RID", b);
	    R(c, "TYPE", "terminate");
	    Kd(a, c);
	    b = new M$1(a, a.h, b, void 0);
	    b.K = 2;
	    b.v = jc(N$1(c));
	    c = !1;
	    l$1.navigator && l$1.navigator.sendBeacon && (c = l$1.navigator.sendBeacon(b.v.toString(), ""));
	    !c && l$1.Image && ((new Image).src = b.v, c = !0);
	    c || (b.g = nc$1(b.l, null), b.g.ea(b.v));
	    b.F = Date.now();
	    lc$1(b);
	} Ld(a); }
	k$1.hb = function (a) { try {
	    this.h.info("Origin Trials invoked: " + a);
	}
	catch (b) { } };
	function Ac(a) { a.g && (wc(a), a.g.cancel(), a.g = null); }
	function Jd(a) { Ac(a); a.u && (l$1.clearTimeout(a.u), a.u = null); zc(a); a.i.cancel(); a.m && ("number" === typeof a.m && l$1.clearTimeout(a.m), a.m = null); }
	function Md(a, b) { a.l.push(new fd(a.Za++, b)); 3 == a.G && Hc(a); }
	function Hc(a) { id$1(a.i) || a.m || (a.m = !0, zb(a.Ha, a), a.C = 0); }
	function Nd(a, b) { if (Cc(a.i) >= a.i.j - (a.m ? 1 : 0))
	    return !1; if (a.m)
	    return a.l = b.D.concat(a.l), !0; if (1 == a.G || 2 == a.G || a.C >= (a.Xa ? 0 : a.Ya))
	    return !1; a.m = K$1(q$2(a.Ha, a, b), Od(a, a.C)); a.C++; return !0; }
	k$1.Ha = function (a) {
	    if (this.m)
	        if (this.m = null, 1 == this.G) {
	            if (!a) {
	                this.V = Math.floor(1E5 * Math.random());
	                a = this.V++;
	                var e = new M$1(this, this.h, a, void 0);
	                var f = this.s;
	                this.P && (f ? (f = ya$1(f), Aa$1(f, this.P)) : f = this.P);
	                null === this.o && (e.H = f);
	                if (this.ja)
	                    a: {
	                        var b = 0;
	                        for (var c = 0; c < this.l.length; c++) {
	                            b: {
	                                var d = this.l[c];
	                                if ("__data__" in d.g && (d = d.g.__data__, "string" === typeof d)) {
	                                    d = d.length;
	                                    break b;
	                                }
	                                d = void 0;
	                            }
	                            if (void 0 === d)
	                                break;
	                            b += d;
	                            if (4096 < b) {
	                                b = c;
	                                break a;
	                            }
	                            if (4096 === b || c === this.l.length - 1) {
	                                b = c + 1;
	                                break a;
	                            }
	                        }
	                        b = 1E3;
	                    }
	                else
	                    b = 1E3;
	                b =
	                    Pd(this, e, b);
	                c = N$1(this.F);
	                R(c, "RID", a);
	                R(c, "CVER", 22);
	                this.D && R(c, "X-HTTP-Session-Id", this.D);
	                Kd(this, c);
	                this.o && f && Gd(c, this.o, f);
	                Dc(this.i, e);
	                this.Ra && R(c, "TYPE", "init");
	                this.ja ? (R(c, "$req", b), R(c, "SID", "null"), e.$ = !0, ic$1(e, c, null)) : ic$1(e, c, b);
	                this.G = 2;
	            }
	        }
	        else
	            3 == this.G && (a ? Qd(this, a) : 0 == this.l.length || id$1(this.i) || Qd(this));
	};
	function Qd(a, b) { var c; b ? c = b.m : c = a.V++; var d = N$1(a.F); R(d, "SID", a.J); R(d, "RID", c); R(d, "AID", a.U); Kd(a, d); a.o && a.s && Gd(d, a.o, a.s); c = new M$1(a, a.h, c, a.C + 1); null === a.o && (c.H = a.s); b && (a.l = b.D.concat(a.l)); b = Pd(a, c, 1E3); c.setTimeout(Math.round(.5 * a.ra) + Math.round(.5 * a.ra * Math.random())); Dc(a.i, c); ic$1(c, d, b); }
	function Kd(a, b) { a.j && Kc({}, function (c, d) { R(b, d, c); }); }
	function Pd(a, b, c) { c = Math.min(a.l.length, c); var d = a.j ? q$2(a.j.Oa, a.j, a) : null; a: {
	    var e = a.l;
	    var f = -1;
	    for (;;) {
	        var h = ["count=" + c];
	        -1 == f ? 0 < c ? (f = e[0].h, h.push("ofs=" + f)) : f = 0 : h.push("ofs=" + f);
	        var n = !0;
	        for (var u = 0; u < c; u++) {
	            var m = e[u].h;
	            var r = e[u].g;
	            m -= f;
	            if (0 > m)
	                f = Math.max(0, e[u].h - 100), n = !1;
	            else
	                try {
	                    md(r, h, "req" + m + "_");
	                }
	                catch (G) {
	                    d && d(r);
	                }
	        }
	        if (n) {
	            d = h.join("&");
	            break a;
	        }
	    }
	} a = a.l.splice(0, c); b.D = a; return d; }
	function Gc(a) { a.g || a.u || (a.Y = 1, zb(a.Ga, a), a.A = 0); }
	function Bc(a) { if (a.g || a.u || 3 <= a.A)
	    return !1; a.Y++; a.u = K$1(q$2(a.Ga, a), Od(a, a.A)); a.A++; return !0; }
	k$1.Ga = function () { this.u = null; Rd(this); if (this.$ && !(this.L || null == this.g || 0 >= this.O)) {
	    var a = 2 * this.O;
	    this.h.info("BP detection timer enabled: " + a);
	    this.B = K$1(q$2(this.bb, this), a);
	} };
	k$1.bb = function () { this.B && (this.B = null, this.h.info("BP detection timeout reached."), this.h.info("Buffering proxy detected and switch to long-polling!"), this.N = !1, this.L = !0, J$1(10), Ac(this), Rd(this)); };
	function wc(a) { null != a.B && (l$1.clearTimeout(a.B), a.B = null); }
	function Rd(a) { a.g = new M$1(a, a.h, "rpc", a.Y); null === a.o && (a.g.H = a.s); a.g.O = 0; var b = N$1(a.oa); R(b, "RID", "rpc"); R(b, "SID", a.J); R(b, "CI", a.N ? "0" : "1"); R(b, "AID", a.U); Kd(a, b); R(b, "TYPE", "xmlhttp"); a.o && a.s && Gd(b, a.o, a.s); a.K && a.g.setTimeout(a.K); var c = a.g; a = a.la; c.K = 1; c.v = jc(N$1(b)); c.s = null; c.U = !0; kc$1(c, a); }
	k$1.ab = function () { null != this.v && (this.v = null, Ac(this), Bc(this), J$1(19)); };
	function zc(a) { null != a.v && (l$1.clearTimeout(a.v), a.v = null); }
	function uc$1(a, b) { var c = null; if (a.g == b) {
	    zc(a);
	    wc(a);
	    a.g = null;
	    var d = 2;
	}
	else if (yc(a.i, b))
	    c = b.D, Fc$1(a.i, b), d = 1;
	else
	    return; a.I = b.N; if (0 != a.G)
	    if (b.i)
	        if (1 == d) {
	            c = b.s ? b.s.length : 0;
	            b = Date.now() - b.F;
	            var e = a.C;
	            d = Sb();
	            D$1(d, new Vb(d, c, b, e));
	            Hc(a);
	        }
	        else
	            Gc(a);
	    else if (e = b.o, 3 == e || 0 == e && 0 < a.I || !(1 == d && Nd(a, b) || 2 == d && Bc(a)))
	        switch (c && 0 < c.length && (b = a.i, b.i = b.i.concat(c)), e) {
	            case 1:
	                Q$1(a, 5);
	                break;
	            case 4:
	                Q$1(a, 10);
	                break;
	            case 3:
	                Q$1(a, 6);
	                break;
	            default: Q$1(a, 2);
	        } }
	function Od(a, b) { var c = a.Pa + Math.floor(Math.random() * a.$a); a.j || (c *= 2); return c * b; }
	function Q$1(a, b) { a.h.info("Error code " + b); if (2 == b) {
	    var c = null;
	    a.j && (c = null);
	    var d = q$2(a.jb, a);
	    c || (c = new U$1("//www.google.com/images/cleardot.gif"), l$1.location && "http" == l$1.location.protocol || Oc$1(c, "https"), jc(c));
	    nd(c.toString(), d);
	}
	else
	    J$1(2); a.G = 0; a.j && a.j.va(b); Ld(a); Jd(a); }
	k$1.jb = function (a) { a ? (this.h.info("Successfully pinged google.com"), J$1(2)) : (this.h.info("Failed to ping google.com"), J$1(1)); };
	function Ld(a) { a.G = 0; a.I = -1; if (a.j) {
	    if (0 != jd(a.i).length || 0 != a.l.length)
	        a.i.i.length = 0, ra(a.l), a.l.length = 0;
	    a.j.ua();
	} }
	function Ec(a, b, c) { var d = ad(c); if ("" != d.i)
	    b && Pc$1(d, b + "." + d.i), Qc(d, d.m);
	else {
	    var e = l$1.location;
	    d = bd(e.protocol, b ? b + "." + e.hostname : e.hostname, +e.port, c);
	} a.aa && xa(a.aa, function (e, f) { R(d, f, e); }); b = a.D; c = a.sa; b && c && R(d, b, c); R(d, "VER", a.ma); Kd(a, d); return d; }
	function nc$1(a, b, c) { if (b && !a.H)
	    throw Error("Can't create secondary domain capable XhrIo object."); b = c && a.Ba && !a.qa ? new X$1(new pd({ ib: !0 })) : new X$1(a.qa); b.L = a.H; return b; }
	function Sd() { }
	k$1 = Sd.prototype;
	k$1.xa = function () { };
	k$1.wa = function () { };
	k$1.va = function () { };
	k$1.ua = function () { };
	k$1.Oa = function () { };
	function Td() { if (y$1 && !(10 <= Number(Ua)))
	    throw Error("Environmental error: no available transport."); }
	Td.prototype.g = function (a, b) { return new Y$1(a, b); };
	function Y$1(a, b) {
	    C$1.call(this);
	    this.g = new Id(b);
	    this.l = a;
	    this.h = b && b.messageUrlParams || null;
	    a = b && b.messageHeaders || null;
	    b && b.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = { "X-Client-Protocol": "webchannel" });
	    this.g.s = a;
	    a = b && b.initMessageHeaders || null;
	    b && b.messageContentType && (a ? a["X-WebChannel-Content-Type"] = b.messageContentType : a = { "X-WebChannel-Content-Type": b.messageContentType });
	    b && b.ya && (a ? a["X-WebChannel-Client-Profile"] = b.ya : a = { "X-WebChannel-Client-Profile": b.ya });
	    this.g.P =
	        a;
	    (a = b && b.httpHeadersOverwriteParam) && !sa$1(a) && (this.g.o = a);
	    this.A = b && b.supportsCrossDomainXhr || !1;
	    this.v = b && b.sendRawJson || !1;
	    (b = b && b.httpSessionIdParam) && !sa$1(b) && (this.g.D = b, a = this.h, null !== a && b in a && (a = this.h, b in a && delete a[b]));
	    this.j = new Z$1(this);
	}
	t$1(Y$1, C$1);
	Y$1.prototype.m = function () { this.g.j = this.j; this.A && (this.g.H = !0); var a = this.g, b = this.l, c = this.h || void 0; a.Wa && (a.h.info("Origin Trials enabled."), zb(q$2(a.hb, a, b))); J$1(0); a.W = b; a.aa = c || {}; a.N = a.X; a.F = Ec(a, null, a.W); Hc(a); };
	Y$1.prototype.close = function () { Ic$1(this.g); };
	Y$1.prototype.u = function (a) { if ("string" === typeof a) {
	    var b = {};
	    b.__data__ = a;
	    Md(this.g, b);
	}
	else
	    this.v ? (b = {}, b.__data__ = rb(a), Md(this.g, b)) : Md(this.g, a); };
	Y$1.prototype.M = function () { this.g.j = null; delete this.j; Ic$1(this.g); delete this.g; Y$1.Z.M.call(this); };
	function Ud(a) { ac$1.call(this); var b = a.__sm__; if (b) {
	    a: {
	        for (var c in b) {
	            a = c;
	            break a;
	        }
	        a = void 0;
	    }
	    if (this.i = a)
	        a = this.i, b = null !== b && a in b ? b[a] : void 0;
	    this.data = b;
	}
	else
	    this.data = a; }
	t$1(Ud, ac$1);
	function Vd() { bc.call(this); this.status = 1; }
	t$1(Vd, bc);
	function Z$1(a) { this.g = a; }
	t$1(Z$1, Sd);
	Z$1.prototype.xa = function () { D$1(this.g, "a"); };
	Z$1.prototype.wa = function (a) { D$1(this.g, new Ud(a)); };
	Z$1.prototype.va = function (a) { D$1(this.g, new Vd(a)); };
	Z$1.prototype.ua = function () { D$1(this.g, "b"); }; /*

	 Copyright 2017 Google LLC

	 Licensed under the Apache License, Version 2.0 (the "License");
	 you may not use this file except in compliance with the License.
	 You may obtain a copy of the License at

	   http://www.apache.org/licenses/LICENSE-2.0

	 Unless required by applicable law or agreed to in writing, software
	 distributed under the License is distributed on an "AS IS" BASIS,
	 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 See the License for the specific language governing permissions and
	 limitations under the License.
	*/
	Td.prototype.createWebChannel = Td.prototype.g;
	Y$1.prototype.send = Y$1.prototype.u;
	Y$1.prototype.open = Y$1.prototype.m;
	Y$1.prototype.close = Y$1.prototype.close;
	Wb.NO_ERROR = 0;
	Wb.TIMEOUT = 8;
	Wb.HTTP_ERROR = 6;
	Xb.COMPLETE = "complete";
	$b.EventType = L$1;
	L$1.OPEN = "a";
	L$1.CLOSE = "b";
	L$1.ERROR = "c";
	L$1.MESSAGE = "d";
	C$1.prototype.listen = C$1.prototype.N;
	X$1.prototype.listenOnce = X$1.prototype.O;
	X$1.prototype.getLastError = X$1.prototype.La;
	X$1.prototype.getLastErrorCode = X$1.prototype.Da;
	X$1.prototype.getStatus = X$1.prototype.ba;
	X$1.prototype.getResponseJson = X$1.prototype.Qa;
	X$1.prototype.getResponseText = X$1.prototype.ga;
	X$1.prototype.send = X$1.prototype.ea;
	var createWebChannelTransport = function () { return new Td; };
	var getStatEventTarget = function () { return Sb(); };
	var ErrorCode = Wb;
	var EventType = Xb;
	var Event = H$1;
	var Stat = { rb: 0, ub: 1, vb: 2, Ob: 3, Tb: 4, Qb: 5, Rb: 6, Pb: 7, Nb: 8, Sb: 9, PROXY: 10, NOPROXY: 11, Lb: 12, Hb: 13, Ib: 14, Gb: 15, Jb: 16, Kb: 17, nb: 18, mb: 19, ob: 20 };
	var FetchXmlHttpFactory = pd;
	var WebChannel = $b;
	var XhrIo = X$1;

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	let V = "8.8.1";

	/**
	 * @license
	 * Copyright 2018 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to
	 * exceed. All subsequent calls to next will return increasing values. If provided with a
	 * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as
	 * well as write out sequence numbers that it produces via `next()`.
	 */
	class S {
	    constructor(t, e) {
	        this.previousValue = t, e && (e.sequenceNumberHandler = t => this.t(t), this.i = t => e.writeSequenceNumber(t));
	    }
	    t(t) {
	        return this.previousValue = Math.max(t, this.previousValue), this.previousValue;
	    }
	    next() {
	        const t = ++this.previousValue;
	        return this.i && this.i(t), t;
	    }
	}

	S.o = -1;

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const D = {
	    // Causes are copied from:
	    // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
	    /** Not an error; returned on success. */
	    OK: "ok",
	    /** The operation was cancelled (typically by the caller). */
	    CANCELLED: "cancelled",
	    /** Unknown error or an error from a different error domain. */
	    UNKNOWN: "unknown",
	    /**
	     * Client specified an invalid argument. Note that this differs from
	     * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
	     * problematic regardless of the state of the system (e.g., a malformed file
	     * name).
	     */
	    INVALID_ARGUMENT: "invalid-argument",
	    /**
	     * Deadline expired before operation could complete. For operations that
	     * change the state of the system, this error may be returned even if the
	     * operation has completed successfully. For example, a successful response
	     * from a server could have been delayed long enough for the deadline to
	     * expire.
	     */
	    DEADLINE_EXCEEDED: "deadline-exceeded",
	    /** Some requested entity (e.g., file or directory) was not found. */
	    NOT_FOUND: "not-found",
	    /**
	     * Some entity that we attempted to create (e.g., file or directory) already
	     * exists.
	     */
	    ALREADY_EXISTS: "already-exists",
	    /**
	     * The caller does not have permission to execute the specified operation.
	     * PERMISSION_DENIED must not be used for rejections caused by exhausting
	     * some resource (use RESOURCE_EXHAUSTED instead for those errors).
	     * PERMISSION_DENIED must not be used if the caller can not be identified
	     * (use UNAUTHENTICATED instead for those errors).
	     */
	    PERMISSION_DENIED: "permission-denied",
	    /**
	     * The request does not have valid authentication credentials for the
	     * operation.
	     */
	    UNAUTHENTICATED: "unauthenticated",
	    /**
	     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
	     * entire file system is out of space.
	     */
	    RESOURCE_EXHAUSTED: "resource-exhausted",
	    /**
	     * Operation was rejected because the system is not in a state required for
	     * the operation's execution. For example, directory to be deleted may be
	     * non-empty, an rmdir operation is applied to a non-directory, etc.
	     *
	     * A litmus test that may help a service implementor in deciding
	     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
	     *  (a) Use UNAVAILABLE if the client can retry just the failing call.
	     *  (b) Use ABORTED if the client should retry at a higher-level
	     *      (e.g., restarting a read-modify-write sequence).
	     *  (c) Use FAILED_PRECONDITION if the client should not retry until
	     *      the system state has been explicitly fixed. E.g., if an "rmdir"
	     *      fails because the directory is non-empty, FAILED_PRECONDITION
	     *      should be returned since the client should not retry unless
	     *      they have first fixed up the directory by deleting files from it.
	     *  (d) Use FAILED_PRECONDITION if the client performs conditional
	     *      REST Get/Update/Delete on a resource and the resource on the
	     *      server does not match the condition. E.g., conflicting
	     *      read-modify-write on the same resource.
	     */
	    FAILED_PRECONDITION: "failed-precondition",
	    /**
	     * The operation was aborted, typically due to a concurrency issue like
	     * sequencer check failures, transaction aborts, etc.
	     *
	     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
	     * and UNAVAILABLE.
	     */
	    ABORTED: "aborted",
	    /**
	     * Operation was attempted past the valid range. E.g., seeking or reading
	     * past end of file.
	     *
	     * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
	     * if the system state changes. For example, a 32-bit file system will
	     * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
	     * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
	     * an offset past the current file size.
	     *
	     * There is a fair bit of overlap between FAILED_PRECONDITION and
	     * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
	     * when it applies so that callers who are iterating through a space can
	     * easily look for an OUT_OF_RANGE error to detect when they are done.
	     */
	    OUT_OF_RANGE: "out-of-range",
	    /** Operation is not implemented or not supported/enabled in this service. */
	    UNIMPLEMENTED: "unimplemented",
	    /**
	     * Internal errors. Means some invariants expected by underlying System has
	     * been broken. If you see one of these errors, Something is very broken.
	     */
	    INTERNAL: "internal",
	    /**
	     * The service is currently unavailable. This is a most likely a transient
	     * condition and may be corrected by retrying with a backoff.
	     *
	     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
	     * and UNAVAILABLE.
	     */
	    UNAVAILABLE: "unavailable",
	    /** Unrecoverable data loss or corruption. */
	    DATA_LOSS: "data-loss"
	};

	/** An error returned by a Firestore operation. */ class C extends Error {
	    /** @hideconstructor */
	    constructor(
	    /**
	     * The backend error code associated with this error.
	     */
	    t, 
	    /**
	     * A custom error description.
	     */
	    e) {
	        super(e), this.code = t, this.message = e, 
	        /** The custom name for all FirestoreErrors. */
	        this.name = "FirebaseError", 
	        // HACK: We write a toString property directly because Error is not a real
	        // class and so inheritance does not work correctly. We could alternatively
	        // do the same "back-door inheritance" trick that FirebaseError does.
	        this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** Formats an object as a JSON string, suitable for logging. */
	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const N = new Logger("@firebase/firestore");

	// Helper methods are needed because variables can't be exported as read/write
	function x$1() {
	    return N.logLevel;
	}

	function $(t, ...e) {
	    if (N.logLevel <= LogLevel.DEBUG) {
	        const n = e.map(M);
	        N.debug(`Firestore (${V}): ${t}`, ...n);
	    }
	}

	function O(t, ...e) {
	    if (N.logLevel <= LogLevel.ERROR) {
	        const n = e.map(M);
	        N.error(`Firestore (${V}): ${t}`, ...n);
	    }
	}

	function F(t, ...e) {
	    if (N.logLevel <= LogLevel.WARN) {
	        const n = e.map(M);
	        N.warn(`Firestore (${V}): ${t}`, ...n);
	    }
	}

	/**
	 * Converts an additional log parameter to a string representation.
	 */ function M(t) {
	    if ("string" == typeof t) return t;
	    try {
	        return e = t, JSON.stringify(e);
	    } catch (e) {
	        // Converting to JSON failed, just log the object directly
	        return t;
	    }
	    var e;
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Unconditionally fails, throwing an Error with the given message.
	 * Messages are stripped in production builds.
	 *
	 * Returns `never` and can be used in expressions:
	 * @example
	 * let futureVar = fail('not implemented yet');
	 */ function L(t = "Unexpected state") {
	    // Log the failure in addition to throw an exception, just in case the
	    // exception is swallowed.
	    const e = `FIRESTORE (${V}) INTERNAL ASSERTION FAILED: ` + t;
	    // NOTE: We don't use FirestoreError here because these are internal failures
	    // that cannot be handled by the user. (Also it would create a circular
	    // dependency between the error and assert modules which doesn't work.)
	    throw O(e), new Error(e);
	}

	/**
	 * Fails if the given assertion condition is false, throwing an Error with the
	 * given message if it did.
	 *
	 * Messages are stripped in production builds.
	 */ function B(t, e) {
	    t || L();
	}

	/**
	 * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an
	 * instance of `T` before casting.
	 */ function U(t, 
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	e) {
	    return t;
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Generates `nBytes` of random bytes.
	 *
	 * If `nBytes < 0` , an error will be thrown.
	 */ function q$1(t) {
	    // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.
	    const e = 
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    "undefined" != typeof self && (self.crypto || self.msCrypto), n = new Uint8Array(t);
	    if (e && "function" == typeof e.getRandomValues) e.getRandomValues(n); else 
	    // Falls back to Math.random
	    for (let e = 0; e < t; e++) n[e] = Math.floor(256 * Math.random());
	    return n;
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class K {
	    static u() {
	        // Alphanumeric characters
	        const t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", e = Math.floor(256 / t.length) * t.length;
	        // The largest byte value that is a multiple of `char.length`.
	                let n = "";
	        for (;n.length < 20; ) {
	            const s = q$1(40);
	            for (let i = 0; i < s.length; ++i) 
	            // Only accept values that are [0, maxMultiple), this ensures they can
	            // be evenly mapped to indices of `chars` via a modulo operation.
	            n.length < 20 && s[i] < e && (n += t.charAt(s[i] % t.length));
	        }
	        return n;
	    }
	}

	function j(t, e) {
	    return t < e ? -1 : t > e ? 1 : 0;
	}

	/** Helper to compare arrays using isEqual(). */ function Q(t, e, n) {
	    return t.length === e.length && t.every(((t, s) => n(t, e[s])));
	}

	/**
	 * Returns the immediate lexicographically-following string. This is useful to
	 * construct an inclusive range for indexeddb iterators.
	 */ function W(t) {
	    // Return the input string, with an additional NUL byte appended.
	    return t + "\0";
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).
	/**
	 * A `Timestamp` represents a point in time independent of any time zone or
	 * calendar, represented as seconds and fractions of seconds at nanosecond
	 * resolution in UTC Epoch time.
	 *
	 * It is encoded using the Proleptic Gregorian Calendar which extends the
	 * Gregorian calendar backwards to year one. It is encoded assuming all minutes
	 * are 60 seconds long, i.e. leap seconds are "smeared" so that no leap second
	 * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to
	 * 9999-12-31T23:59:59.999999999Z.
	 *
	 * For examples and further specifications, refer to the
	 * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.
	 */
	class G {
	    /**
	     * Creates a new timestamp.
	     *
	     * @param seconds - The number of seconds of UTC time since Unix epoch
	     *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
	     *     9999-12-31T23:59:59Z inclusive.
	     * @param nanoseconds - The non-negative fractions of a second at nanosecond
	     *     resolution. Negative second values with fractions must still have
	     *     non-negative nanoseconds values that count forward in time. Must be
	     *     from 0 to 999,999,999 inclusive.
	     */
	    constructor(
	    /**
	     * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.
	     */
	    t, 
	    /**
	     * The fractions of a second at nanosecond resolution.*
	     */
	    e) {
	        if (this.seconds = t, this.nanoseconds = e, e < 0) throw new C(D.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
	        if (e >= 1e9) throw new C(D.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
	        if (t < -62135596800) throw new C(D.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
	        // This will break in the year 10,000.
	                if (t >= 253402300800) throw new C(D.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
	    }
	    /**
	     * Creates a new timestamp with the current date, with millisecond precision.
	     *
	     * @returns a new timestamp representing the current date.
	     */    static now() {
	        return G.fromMillis(Date.now());
	    }
	    /**
	     * Creates a new timestamp from the given date.
	     *
	     * @param date - The date to initialize the `Timestamp` from.
	     * @returns A new `Timestamp` representing the same point in time as the given
	     *     date.
	     */    static fromDate(t) {
	        return G.fromMillis(t.getTime());
	    }
	    /**
	     * Creates a new timestamp from the given number of milliseconds.
	     *
	     * @param milliseconds - Number of milliseconds since Unix epoch
	     *     1970-01-01T00:00:00Z.
	     * @returns A new `Timestamp` representing the same point in time as the given
	     *     number of milliseconds.
	     */    static fromMillis(t) {
	        const e = Math.floor(t / 1e3), n = Math.floor(1e6 * (t - 1e3 * e));
	        return new G(e, n);
	    }
	    /**
	     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion
	     * causes a loss of precision since `Date` objects only support millisecond
	     * precision.
	     *
	     * @returns JavaScript `Date` object representing the same point in time as
	     *     this `Timestamp`, with millisecond precision.
	     */    toDate() {
	        return new Date(this.toMillis());
	    }
	    /**
	     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
	     * epoch). This operation causes a loss of precision.
	     *
	     * @returns The point in time corresponding to this timestamp, represented as
	     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
	     */    toMillis() {
	        return 1e3 * this.seconds + this.nanoseconds / 1e6;
	    }
	    _compareTo(t) {
	        return this.seconds === t.seconds ? j(this.nanoseconds, t.nanoseconds) : j(this.seconds, t.seconds);
	    }
	    /**
	     * Returns true if this `Timestamp` is equal to the provided one.
	     *
	     * @param other - The `Timestamp` to compare against.
	     * @returns true if this `Timestamp` is equal to the provided one.
	     */    isEqual(t) {
	        return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;
	    }
	    /** Returns a textual representation of this Timestamp. */    toString() {
	        return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
	    }
	    /** Returns a JSON-serializable representation of this Timestamp. */    toJSON() {
	        return {
	            seconds: this.seconds,
	            nanoseconds: this.nanoseconds
	        };
	    }
	    /**
	     * Converts this object to a primitive string, which allows Timestamp objects
	     * to be compared using the `>`, `<=`, `>=` and `>` operators.
	     */    valueOf() {
	        // This method returns a string of the form <seconds>.<nanoseconds> where
	        // <seconds> is translated to have a non-negative value and both <seconds>
	        // and <nanoseconds> are left-padded with zeroes to be a consistent length.
	        // Strings with this format then have a lexiographical ordering that matches
	        // the expected ordering. The <seconds> translation is done to avoid having
	        // a leading negative sign (i.e. a leading '-' character) in its string
	        // representation, which would affect its lexiographical ordering.
	        const t = this.seconds - -62135596800;
	        // Note: Up to 12 decimal digits are required to represent all valid
	        // 'seconds' values.
	                return String(t).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A version of a document in Firestore. This corresponds to the version
	 * timestamp, such as update_time or read_time.
	 */ class z$1 {
	    constructor(t) {
	        this.timestamp = t;
	    }
	    static fromTimestamp(t) {
	        return new z$1(t);
	    }
	    static min() {
	        return new z$1(new G(0, 0));
	    }
	    compareTo(t) {
	        return this.timestamp._compareTo(t.timestamp);
	    }
	    isEqual(t) {
	        return this.timestamp.isEqual(t.timestamp);
	    }
	    /** Returns a number representation of the version for use in spec tests. */    toMicroseconds() {
	        // Convert to microseconds.
	        return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
	    }
	    toString() {
	        return "SnapshotVersion(" + this.timestamp.toString() + ")";
	    }
	    toTimestamp() {
	        return this.timestamp;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ function H(t) {
	    let e = 0;
	    for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e++;
	    return e;
	}

	function J(t, e) {
	    for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);
	}

	function Y(t) {
	    for (const e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;
	    return !0;
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Path represents an ordered sequence of string segments.
	 */
	class X {
	    constructor(t, e, n) {
	        void 0 === e ? e = 0 : e > t.length && L(), void 0 === n ? n = t.length - e : n > t.length - e && L(), 
	        this.segments = t, this.offset = e, this.len = n;
	    }
	    get length() {
	        return this.len;
	    }
	    isEqual(t) {
	        return 0 === X.comparator(this, t);
	    }
	    child(t) {
	        const e = this.segments.slice(this.offset, this.limit());
	        return t instanceof X ? t.forEach((t => {
	            e.push(t);
	        })) : e.push(t), this.construct(e);
	    }
	    /** The index of one past the last segment of the path. */    limit() {
	        return this.offset + this.length;
	    }
	    popFirst(t) {
	        return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);
	    }
	    popLast() {
	        return this.construct(this.segments, this.offset, this.length - 1);
	    }
	    firstSegment() {
	        return this.segments[this.offset];
	    }
	    lastSegment() {
	        return this.get(this.length - 1);
	    }
	    get(t) {
	        return this.segments[this.offset + t];
	    }
	    isEmpty() {
	        return 0 === this.length;
	    }
	    isPrefixOf(t) {
	        if (t.length < this.length) return !1;
	        for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;
	        return !0;
	    }
	    isImmediateParentOf(t) {
	        if (this.length + 1 !== t.length) return !1;
	        for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;
	        return !0;
	    }
	    forEach(t) {
	        for (let e = this.offset, n = this.limit(); e < n; e++) t(this.segments[e]);
	    }
	    toArray() {
	        return this.segments.slice(this.offset, this.limit());
	    }
	    static comparator(t, e) {
	        const n = Math.min(t.length, e.length);
	        for (let s = 0; s < n; s++) {
	            const n = t.get(s), i = e.get(s);
	            if (n < i) return -1;
	            if (n > i) return 1;
	        }
	        return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;
	    }
	}

	/**
	 * A slash-separated path for navigating resources (documents and collections)
	 * within Firestore.
	 */ class Z extends X {
	    construct(t, e, n) {
	        return new Z(t, e, n);
	    }
	    canonicalString() {
	        // NOTE: The client is ignorant of any path segments containing escape
	        // sequences (e.g. __id123__) and just passes them through raw (they exist
	        // for legacy reasons and should not be used frequently).
	        return this.toArray().join("/");
	    }
	    toString() {
	        return this.canonicalString();
	    }
	    /**
	     * Creates a resource path from the given slash-delimited string. If multiple
	     * arguments are provided, all components are combined. Leading and trailing
	     * slashes from all components are ignored.
	     */    static fromString(...t) {
	        // NOTE: The client is ignorant of any path segments containing escape
	        // sequences (e.g. __id123__) and just passes them through raw (they exist
	        // for legacy reasons and should not be used frequently).
	        const e = [];
	        for (const n of t) {
	            if (n.indexOf("//") >= 0) throw new C(D.INVALID_ARGUMENT, `Invalid segment (${n}). Paths must not contain // in them.`);
	            // Strip leading and traling slashed.
	                        e.push(...n.split("/").filter((t => t.length > 0)));
	        }
	        return new Z(e);
	    }
	    static emptyPath() {
	        return new Z([]);
	    }
	}

	const tt = /^[_a-zA-Z][_a-zA-Z0-9]*$/;

	/** A dot-separated path for navigating sub-objects within a document. */ class et extends X {
	    construct(t, e, n) {
	        return new et(t, e, n);
	    }
	    /**
	     * Returns true if the string could be used as a segment in a field path
	     * without escaping.
	     */    static isValidIdentifier(t) {
	        return tt.test(t);
	    }
	    canonicalString() {
	        return this.toArray().map((t => (t = t.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), 
	        et.isValidIdentifier(t) || (t = "`" + t + "`"), t))).join(".");
	    }
	    toString() {
	        return this.canonicalString();
	    }
	    /**
	     * Returns true if this field references the key of a document.
	     */    isKeyField() {
	        return 1 === this.length && "__name__" === this.get(0);
	    }
	    /**
	     * The field designating the key of a document.
	     */    static keyField() {
	        return new et([ "__name__" ]);
	    }
	    /**
	     * Parses a field string from the given server-formatted string.
	     *
	     * - Splitting the empty string is not allowed (for now at least).
	     * - Empty segments within the string (e.g. if there are two consecutive
	     *   separators) are not allowed.
	     *
	     * TODO(b/37244157): we should make this more strict. Right now, it allows
	     * non-identifier path components, even if they aren't escaped.
	     */    static fromServerFormat(t) {
	        const e = [];
	        let n = "", s = 0;
	        const i = () => {
	            if (0 === n.length) throw new C(D.INVALID_ARGUMENT, `Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);
	            e.push(n), n = "";
	        };
	        let r = !1;
	        for (;s < t.length; ) {
	            const e = t[s];
	            if ("\\" === e) {
	                if (s + 1 === t.length) throw new C(D.INVALID_ARGUMENT, "Path has trailing escape character: " + t);
	                const e = t[s + 1];
	                if ("\\" !== e && "." !== e && "`" !== e) throw new C(D.INVALID_ARGUMENT, "Path has invalid escape sequence: " + t);
	                n += e, s += 2;
	            } else "`" === e ? (r = !r, s++) : "." !== e || r ? (n += e, s++) : (i(), s++);
	        }
	        if (i(), r) throw new C(D.INVALID_ARGUMENT, "Unterminated ` in path: " + t);
	        return new et(e);
	    }
	    static emptyPath() {
	        return new et([]);
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Provides a set of fields that can be used to partially patch a document.
	 * FieldMask is used in conjunction with ObjectValue.
	 * Examples:
	 *   foo - Overwrites foo entirely with the provided value. If foo is not
	 *         present in the companion ObjectValue, the field is deleted.
	 *   foo.bar - Overwrites only the field bar of the object foo.
	 *             If foo is not an object, foo is replaced with an object
	 *             containing foo
	 */ class nt {
	    constructor(t) {
	        this.fields = t, 
	        // TODO(dimond): validation of FieldMask
	        // Sort the field mask to support `FieldMask.isEqual()` and assert below.
	        t.sort(et.comparator);
	    }
	    /**
	     * Verifies that `fieldPath` is included by at least one field in this field
	     * mask.
	     *
	     * This is an O(n) operation, where `n` is the size of the field mask.
	     */    covers(t) {
	        for (const e of this.fields) if (e.isPrefixOf(t)) return !0;
	        return !1;
	    }
	    isEqual(t) {
	        return Q(this.fields, t.fields, ((t, e) => t.isEqual(e)));
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** Converts a Base64 encoded string to a binary string. */
	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Immutable class that represents a "proto" byte string.
	 *
	 * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when
	 * sent on the wire. This class abstracts away this differentiation by holding
	 * the proto byte string in a common class that must be converted into a string
	 * before being sent as a proto.
	 */
	class st {
	    constructor(t) {
	        this.binaryString = t;
	    }
	    static fromBase64String(t) {
	        const e = atob(t);
	        return new st(e);
	    }
	    static fromUint8Array(t) {
	        const e = 
	        /**
	 * Helper function to convert an Uint8array to a binary string.
	 */
	        function(t) {
	            let e = "";
	            for (let n = 0; n < t.length; ++n) e += String.fromCharCode(t[n]);
	            return e;
	        }
	        /**
	 * Helper function to convert a binary string to an Uint8Array.
	 */ (t);
	        return new st(e);
	    }
	    toBase64() {
	        return t = this.binaryString, btoa(t);
	        /** Converts a binary string to a Base64 encoded string. */
	        var t;
	    }
	    toUint8Array() {
	        return function(t) {
	            const e = new Uint8Array(t.length);
	            for (let n = 0; n < t.length; n++) e[n] = t.charCodeAt(n);
	            return e;
	        }
	        /**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	        // A RegExp matching ISO 8601 UTC timestamps with optional fraction.
	        (this.binaryString);
	    }
	    approximateByteSize() {
	        return 2 * this.binaryString.length;
	    }
	    compareTo(t) {
	        return j(this.binaryString, t.binaryString);
	    }
	    isEqual(t) {
	        return this.binaryString === t.binaryString;
	    }
	}

	st.EMPTY_BYTE_STRING = new st("");

	const it = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);

	/**
	 * Converts the possible Proto values for a timestamp value into a "seconds and
	 * nanos" representation.
	 */ function rt(t) {
	    // The json interface (for the browser) will return an iso timestamp string,
	    // while the proto js library (for node) will return a
	    // google.protobuf.Timestamp instance.
	    if (B(!!t), "string" == typeof t) {
	        // The date string can have higher precision (nanos) than the Date class
	        // (millis), so we do some custom parsing here.
	        // Parse the nanos right out of the string.
	        let e = 0;
	        const n = it.exec(t);
	        if (B(!!n), n[1]) {
	            // Pad the fraction out to 9 digits (nanos).
	            let t = n[1];
	            t = (t + "000000000").substr(0, 9), e = Number(t);
	        }
	        // Parse the date to get the seconds.
	                const s = new Date(t);
	        return {
	            seconds: Math.floor(s.getTime() / 1e3),
	            nanos: e
	        };
	    }
	    return {
	        seconds: ot(t.seconds),
	        nanos: ot(t.nanos)
	    };
	}

	/**
	 * Converts the possible Proto types for numbers into a JavaScript number.
	 * Returns 0 if the value is not numeric.
	 */ function ot(t) {
	    // TODO(bjornick): Handle int64 greater than 53 bits.
	    return "number" == typeof t ? t : "string" == typeof t ? Number(t) : 0;
	}

	/** Converts the possible Proto types for Blobs into a ByteString. */ function ct(t) {
	    return "string" == typeof t ? st.fromBase64String(t) : st.fromUint8Array(t);
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Represents a locally-applied ServerTimestamp.
	 *
	 * Server Timestamps are backed by MapValues that contain an internal field
	 * `__type__` with a value of `server_timestamp`. The previous value and local
	 * write time are stored in its `__previous_value__` and `__local_write_time__`
	 * fields respectively.
	 *
	 * Notes:
	 * - ServerTimestampValue instances are created as the result of applying a
	 *   transform. They can only exist in the local view of a document. Therefore
	 *   they do not need to be parsed or serialized.
	 * - When evaluated locally (e.g. for snapshot.data()), they by default
	 *   evaluate to `null`. This behavior can be configured by passing custom
	 *   FieldValueOptions to value().
	 * - With respect to other ServerTimestampValues, they sort by their
	 *   localWriteTime.
	 */ function ut(t) {
	    var e, n;
	    return "server_timestamp" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);
	}

	/**
	 * Creates a new ServerTimestamp proto value (using the internal format).
	 */
	/**
	 * Returns the value of the field before this ServerTimestamp was set.
	 *
	 * Preserving the previous values allows the user to display the last resoled
	 * value until the backend responds with the timestamp.
	 */
	function at(t) {
	    const e = t.mapValue.fields.__previous_value__;
	    return ut(e) ? at(e) : e;
	}

	/**
	 * Returns the local time at which this timestamp was first set.
	 */ function ht(t) {
	    const e = rt(t.mapValue.fields.__local_write_time__.timestampValue);
	    return new G(e.seconds, e.nanos);
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** Sentinel value that sorts before any Mutation Batch ID. */
	/**
	 * Returns whether a variable is either undefined or null.
	 */
	function lt(t) {
	    return null == t;
	}

	/** Returns whether the value represents -0. */ function ft(t) {
	    // Detect if the value is -0.0. Based on polyfill from
	    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	    return 0 === t && 1 / t == -1 / 0;
	}

	/**
	 * Returns whether a value is an integer and in the safe integer range
	 * @param value - The value to test for being an integer and in the safe range
	 */ function dt(t) {
	    return "number" == typeof t && Number.isInteger(t) && !ft(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class wt {
	    constructor(t) {
	        this.path = t;
	    }
	    static fromPath(t) {
	        return new wt(Z.fromString(t));
	    }
	    static fromName(t) {
	        return new wt(Z.fromString(t).popFirst(5));
	    }
	    /** Returns true if the document is in the specified collectionId. */    hasCollectionId(t) {
	        return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;
	    }
	    isEqual(t) {
	        return null !== t && 0 === Z.comparator(this.path, t.path);
	    }
	    toString() {
	        return this.path.toString();
	    }
	    static comparator(t, e) {
	        return Z.comparator(t.path, e.path);
	    }
	    static isDocumentKey(t) {
	        return t.length % 2 == 0;
	    }
	    /**
	     * Creates and returns a new document key with the given segments.
	     *
	     * @param segments - The segments of the path to the document
	     * @returns A new instance of DocumentKey
	     */    static fromSegments(t) {
	        return new wt(new Z(t.slice()));
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** Extracts the backend's type order for the provided value. */ function _t(t) {
	    return "nullValue" in t ? 0 /* NullValue */ : "booleanValue" in t ? 1 /* BooleanValue */ : "integerValue" in t || "doubleValue" in t ? 2 /* NumberValue */ : "timestampValue" in t ? 3 /* TimestampValue */ : "stringValue" in t ? 5 /* StringValue */ : "bytesValue" in t ? 6 /* BlobValue */ : "referenceValue" in t ? 7 /* RefValue */ : "geoPointValue" in t ? 8 /* GeoPointValue */ : "arrayValue" in t ? 9 /* ArrayValue */ : "mapValue" in t ? ut(t) ? 4 /* ServerTimestampValue */ : 10 /* ObjectValue */ : L();
	}

	/** Tests `left` and `right` for equality based on the backend semantics. */ function mt(t, e) {
	    const n = _t(t);
	    if (n !== _t(e)) return !1;
	    switch (n) {
	      case 0 /* NullValue */ :
	        return !0;

	      case 1 /* BooleanValue */ :
	        return t.booleanValue === e.booleanValue;

	      case 4 /* ServerTimestampValue */ :
	        return ht(t).isEqual(ht(e));

	      case 3 /* TimestampValue */ :
	        return function(t, e) {
	            if ("string" == typeof t.timestampValue && "string" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) 
	            // Use string equality for ISO 8601 timestamps
	            return t.timestampValue === e.timestampValue;
	            const n = rt(t.timestampValue), s = rt(e.timestampValue);
	            return n.seconds === s.seconds && n.nanos === s.nanos;
	        }(t, e);

	      case 5 /* StringValue */ :
	        return t.stringValue === e.stringValue;

	      case 6 /* BlobValue */ :
	        return function(t, e) {
	            return ct(t.bytesValue).isEqual(ct(e.bytesValue));
	        }(t, e);

	      case 7 /* RefValue */ :
	        return t.referenceValue === e.referenceValue;

	      case 8 /* GeoPointValue */ :
	        return function(t, e) {
	            return ot(t.geoPointValue.latitude) === ot(e.geoPointValue.latitude) && ot(t.geoPointValue.longitude) === ot(e.geoPointValue.longitude);
	        }(t, e);

	      case 2 /* NumberValue */ :
	        return function(t, e) {
	            if ("integerValue" in t && "integerValue" in e) return ot(t.integerValue) === ot(e.integerValue);
	            if ("doubleValue" in t && "doubleValue" in e) {
	                const n = ot(t.doubleValue), s = ot(e.doubleValue);
	                return n === s ? ft(n) === ft(s) : isNaN(n) && isNaN(s);
	            }
	            return !1;
	        }(t, e);

	      case 9 /* ArrayValue */ :
	        return Q(t.arrayValue.values || [], e.arrayValue.values || [], mt);

	      case 10 /* ObjectValue */ :
	        return function(t, e) {
	            const n = t.mapValue.fields || {}, s = e.mapValue.fields || {};
	            if (H(n) !== H(s)) return !1;
	            for (const t in n) if (n.hasOwnProperty(t) && (void 0 === s[t] || !mt(n[t], s[t]))) return !1;
	            return !0;
	        }
	        /** Returns true if the ArrayValue contains the specified element. */ (t, e);

	      default:
	        return L();
	    }
	}

	function gt(t, e) {
	    return void 0 !== (t.values || []).find((t => mt(t, e)));
	}

	function yt(t, e) {
	    const n = _t(t), s = _t(e);
	    if (n !== s) return j(n, s);
	    switch (n) {
	      case 0 /* NullValue */ :
	        return 0;

	      case 1 /* BooleanValue */ :
	        return j(t.booleanValue, e.booleanValue);

	      case 2 /* NumberValue */ :
	        return function(t, e) {
	            const n = ot(t.integerValue || t.doubleValue), s = ot(e.integerValue || e.doubleValue);
	            return n < s ? -1 : n > s ? 1 : n === s ? 0 : 
	            // one or both are NaN.
	            isNaN(n) ? isNaN(s) ? 0 : -1 : 1;
	        }(t, e);

	      case 3 /* TimestampValue */ :
	        return pt(t.timestampValue, e.timestampValue);

	      case 4 /* ServerTimestampValue */ :
	        return pt(ht(t), ht(e));

	      case 5 /* StringValue */ :
	        return j(t.stringValue, e.stringValue);

	      case 6 /* BlobValue */ :
	        return function(t, e) {
	            const n = ct(t), s = ct(e);
	            return n.compareTo(s);
	        }(t.bytesValue, e.bytesValue);

	      case 7 /* RefValue */ :
	        return function(t, e) {
	            const n = t.split("/"), s = e.split("/");
	            for (let t = 0; t < n.length && t < s.length; t++) {
	                const e = j(n[t], s[t]);
	                if (0 !== e) return e;
	            }
	            return j(n.length, s.length);
	        }(t.referenceValue, e.referenceValue);

	      case 8 /* GeoPointValue */ :
	        return function(t, e) {
	            const n = j(ot(t.latitude), ot(e.latitude));
	            if (0 !== n) return n;
	            return j(ot(t.longitude), ot(e.longitude));
	        }(t.geoPointValue, e.geoPointValue);

	      case 9 /* ArrayValue */ :
	        return function(t, e) {
	            const n = t.values || [], s = e.values || [];
	            for (let t = 0; t < n.length && t < s.length; ++t) {
	                const e = yt(n[t], s[t]);
	                if (e) return e;
	            }
	            return j(n.length, s.length);
	        }(t.arrayValue, e.arrayValue);

	      case 10 /* ObjectValue */ :
	        return function(t, e) {
	            const n = t.fields || {}, s = Object.keys(n), i = e.fields || {}, r = Object.keys(i);
	            // Even though MapValues are likely sorted correctly based on their insertion
	            // order (e.g. when received from the backend), local modifications can bring
	            // elements out of order. We need to re-sort the elements to ensure that
	            // canonical IDs are independent of insertion order.
	            s.sort(), r.sort();
	            for (let t = 0; t < s.length && t < r.length; ++t) {
	                const e = j(s[t], r[t]);
	                if (0 !== e) return e;
	                const o = yt(n[s[t]], i[r[t]]);
	                if (0 !== o) return o;
	            }
	            return j(s.length, r.length);
	        }
	        /**
	 * Generates the canonical ID for the provided field value (as used in Target
	 * serialization).
	 */ (t.mapValue, e.mapValue);

	      default:
	        throw L();
	    }
	}

	function pt(t, e) {
	    if ("string" == typeof t && "string" == typeof e && t.length === e.length) return j(t, e);
	    const n = rt(t), s = rt(e), i = j(n.seconds, s.seconds);
	    return 0 !== i ? i : j(n.nanos, s.nanos);
	}

	function Et(t) {
	    return Tt(t);
	}

	function Tt(t) {
	    return "nullValue" in t ? "null" : "booleanValue" in t ? "" + t.booleanValue : "integerValue" in t ? "" + t.integerValue : "doubleValue" in t ? "" + t.doubleValue : "timestampValue" in t ? function(t) {
	        const e = rt(t);
	        return `time(${e.seconds},${e.nanos})`;
	    }(t.timestampValue) : "stringValue" in t ? t.stringValue : "bytesValue" in t ? ct(t.bytesValue).toBase64() : "referenceValue" in t ? (n = t.referenceValue, 
	    wt.fromName(n).toString()) : "geoPointValue" in t ? `geo(${(e = t.geoPointValue).latitude},${e.longitude})` : "arrayValue" in t ? function(t) {
	        let e = "[", n = !0;
	        for (const s of t.values || []) n ? n = !1 : e += ",", e += Tt(s);
	        return e + "]";
	    }
	    /** Returns a reference value for the provided database and key. */ (t.arrayValue) : "mapValue" in t ? function(t) {
	        // Iteration order in JavaScript is not guaranteed. To ensure that we generate
	        // matching canonical IDs for identical maps, we need to sort the keys.
	        const e = Object.keys(t.fields || {}).sort();
	        let n = "{", s = !0;
	        for (const i of e) s ? s = !1 : n += ",", n += `${i}:${Tt(t.fields[i])}`;
	        return n + "}";
	    }(t.mapValue) : L();
	    var e, n;
	}

	/** Returns true if `value` is an IntegerValue . */ function At(t) {
	    return !!t && "integerValue" in t;
	}

	/** Returns true if `value` is a DoubleValue. */
	/** Returns true if `value` is an ArrayValue. */
	function Rt(t) {
	    return !!t && "arrayValue" in t;
	}

	/** Returns true if `value` is a NullValue. */ function Pt(t) {
	    return !!t && "nullValue" in t;
	}

	/** Returns true if `value` is NaN. */ function bt(t) {
	    return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
	}

	/** Returns true if `value` is a MapValue. */ function vt(t) {
	    return !!t && "mapValue" in t;
	}

	/** Creates a deep copy of `source`. */ function Vt(t) {
	    if (t.geoPointValue) return {
	        geoPointValue: Object.assign({}, t.geoPointValue)
	    };
	    if (t.timestampValue && "object" == typeof t.timestampValue) return {
	        timestampValue: Object.assign({}, t.timestampValue)
	    };
	    if (t.mapValue) {
	        const e = {
	            mapValue: {
	                fields: {}
	            }
	        };
	        return J(t.mapValue.fields, ((t, n) => e.mapValue.fields[t] = Vt(n))), e;
	    }
	    if (t.arrayValue) {
	        const e = {
	            arrayValue: {
	                values: []
	            }
	        };
	        for (let n = 0; n < (t.arrayValue.values || []).length; ++n) e.arrayValue.values[n] = Vt(t.arrayValue.values[n]);
	        return e;
	    }
	    return Object.assign({}, t);
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An ObjectValue represents a MapValue in the Firestore Proto and offers the
	 * ability to add and remove fields (via the ObjectValueBuilder).
	 */ class St {
	    constructor(t) {
	        this.value = t;
	    }
	    static empty() {
	        return new St({
	            mapValue: {}
	        });
	    }
	    /**
	     * Returns the value at the given path or null.
	     *
	     * @param path - the path to search
	     * @returns The value at the path or null if the path is not set.
	     */    field(t) {
	        if (t.isEmpty()) return this.value;
	        {
	            let e = this.value;
	            for (let n = 0; n < t.length - 1; ++n) if (e = (e.mapValue.fields || {})[t.get(n)], 
	            !vt(e)) return null;
	            return e = (e.mapValue.fields || {})[t.lastSegment()], e || null;
	        }
	    }
	    /**
	     * Sets the field to the provided value.
	     *
	     * @param path - The field path to set.
	     * @param value - The value to set.
	     */    set(t, e) {
	        this.getFieldsMap(t.popLast())[t.lastSegment()] = Vt(e);
	    }
	    /**
	     * Sets the provided fields to the provided values.
	     *
	     * @param data - A map of fields to values (or null for deletes).
	     */    setAll(t) {
	        let e = et.emptyPath(), n = {}, s = [];
	        t.forEach(((t, i) => {
	            if (!e.isImmediateParentOf(i)) {
	                // Insert the accumulated changes at this parent location
	                const t = this.getFieldsMap(e);
	                this.applyChanges(t, n, s), n = {}, s = [], e = i.popLast();
	            }
	            t ? n[i.lastSegment()] = Vt(t) : s.push(i.lastSegment());
	        }));
	        const i = this.getFieldsMap(e);
	        this.applyChanges(i, n, s);
	    }
	    /**
	     * Removes the field at the specified path. If there is no field at the
	     * specified path, nothing is changed.
	     *
	     * @param path - The field path to remove.
	     */    delete(t) {
	        const e = this.field(t.popLast());
	        vt(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];
	    }
	    isEqual(t) {
	        return mt(this.value, t.value);
	    }
	    /**
	     * Returns the map that contains the leaf element of `path`. If the parent
	     * entry does not yet exist, or if it is not a map, a new map will be created.
	     */    getFieldsMap(t) {
	        let e = this.value;
	        e.mapValue.fields || (e.mapValue = {
	            fields: {}
	        });
	        for (let n = 0; n < t.length; ++n) {
	            let s = e.mapValue.fields[t.get(n)];
	            vt(s) && s.mapValue.fields || (s = {
	                mapValue: {
	                    fields: {}
	                }
	            }, e.mapValue.fields[t.get(n)] = s), e = s;
	        }
	        return e.mapValue.fields;
	    }
	    /**
	     * Modifies `fieldsMap` by adding, replacing or deleting the specified
	     * entries.
	     */    applyChanges(t, e, n) {
	        J(e, ((e, n) => t[e] = n));
	        for (const e of n) delete t[e];
	    }
	    clone() {
	        return new St(Vt(this.value));
	    }
	}

	/**
	 * Returns a FieldMask built from all fields in a MapValue.
	 */ function Dt(t) {
	    const e = [];
	    return J(t.fields, ((t, n) => {
	        const s = new et([ t ]);
	        if (vt(n)) {
	            const t = Dt(n.mapValue).fields;
	            if (0 === t.length) 
	            // Preserve the empty map by adding it to the FieldMask.
	            e.push(s); else 
	            // For nested and non-empty ObjectValues, add the FieldPath of the
	            // leaf nodes.
	            for (const n of t) e.push(s.child(n));
	        } else 
	        // For nested and non-empty ObjectValues, add the FieldPath of the leaf
	        // nodes.
	        e.push(s);
	    })), new nt(e);
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Represents a document in Firestore with a key, version, data and whether it
	 * has local mutations applied to it.
	 *
	 * Documents can transition between states via `convertToFoundDocument()`,
	 * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does
	 * not transition to one of these states even after all mutations have been
	 * applied, `isValidDocument()` returns false and the document should be removed
	 * from all views.
	 */ class Ct {
	    constructor(t, e, n, s, i) {
	        this.key = t, this.documentType = e, this.version = n, this.data = s, this.documentState = i;
	    }
	    /**
	     * Creates a document with no known version or data, but which can serve as
	     * base document for mutations.
	     */    static newInvalidDocument(t) {
	        return new Ct(t, 0 /* INVALID */ , z$1.min(), St.empty(), 0 /* SYNCED */);
	    }
	    /**
	     * Creates a new document that is known to exist with the given data at the
	     * given version.
	     */    static newFoundDocument(t, e, n) {
	        return new Ct(t, 1 /* FOUND_DOCUMENT */ , e, n, 0 /* SYNCED */);
	    }
	    /** Creates a new document that is known to not exist at the given version. */    static newNoDocument(t, e) {
	        return new Ct(t, 2 /* NO_DOCUMENT */ , e, St.empty(), 0 /* SYNCED */);
	    }
	    /**
	     * Creates a new document that is known to exist at the given version but
	     * whose data is not known (e.g. a document that was updated without a known
	     * base document).
	     */    static newUnknownDocument(t, e) {
	        return new Ct(t, 3 /* UNKNOWN_DOCUMENT */ , e, St.empty(), 2 /* HAS_COMMITTED_MUTATIONS */);
	    }
	    /**
	     * Changes the document type to indicate that it exists and that its version
	     * and data are known.
	     */    convertToFoundDocument(t, e) {
	        return this.version = t, this.documentType = 1 /* FOUND_DOCUMENT */ , this.data = e, 
	        this.documentState = 0 /* SYNCED */ , this;
	    }
	    /**
	     * Changes the document type to indicate that it doesn't exist at the given
	     * version.
	     */    convertToNoDocument(t) {
	        return this.version = t, this.documentType = 2 /* NO_DOCUMENT */ , this.data = St.empty(), 
	        this.documentState = 0 /* SYNCED */ , this;
	    }
	    /**
	     * Changes the document type to indicate that it exists at a given version but
	     * that its data is not known (e.g. a document that was updated without a known
	     * base document).
	     */    convertToUnknownDocument(t) {
	        return this.version = t, this.documentType = 3 /* UNKNOWN_DOCUMENT */ , this.data = St.empty(), 
	        this.documentState = 2 /* HAS_COMMITTED_MUTATIONS */ , this;
	    }
	    setHasCommittedMutations() {
	        return this.documentState = 2 /* HAS_COMMITTED_MUTATIONS */ , this;
	    }
	    setHasLocalMutations() {
	        return this.documentState = 1 /* HAS_LOCAL_MUTATIONS */ , this;
	    }
	    get hasLocalMutations() {
	        return 1 /* HAS_LOCAL_MUTATIONS */ === this.documentState;
	    }
	    get hasCommittedMutations() {
	        return 2 /* HAS_COMMITTED_MUTATIONS */ === this.documentState;
	    }
	    get hasPendingWrites() {
	        return this.hasLocalMutations || this.hasCommittedMutations;
	    }
	    isValidDocument() {
	        return 0 /* INVALID */ !== this.documentType;
	    }
	    isFoundDocument() {
	        return 1 /* FOUND_DOCUMENT */ === this.documentType;
	    }
	    isNoDocument() {
	        return 2 /* NO_DOCUMENT */ === this.documentType;
	    }
	    isUnknownDocument() {
	        return 3 /* UNKNOWN_DOCUMENT */ === this.documentType;
	    }
	    isEqual(t) {
	        return t instanceof Ct && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);
	    }
	    clone() {
	        return new Ct(this.key, this.documentType, this.version, this.data.clone(), this.documentState);
	    }
	    toString() {
	        return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;
	    }
	}

	/**
	 * Compares the value for field `field` in the provided documents. Throws if
	 * the field does not exist in both documents.
	 */
	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// Visible for testing
	class Nt {
	    constructor(t, e = null, n = [], s = [], i = null, r = null, o = null) {
	        this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = s, this.limit = i, 
	        this.startAt = r, this.endAt = o, this.h = null;
	    }
	}

	/**
	 * Initializes a Target with a path and optional additional query constraints.
	 * Path must currently be empty if this is a collection group query.
	 *
	 * NOTE: you should always construct `Target` from `Query.toTarget` instead of
	 * using this factory method, because `Query` provides an implicit `orderBy`
	 * property.
	 */ function xt(t, e = null, n = [], s = [], i = null, r = null, o = null) {
	    return new Nt(t, e, n, s, i, r, o);
	}

	function kt(t) {
	    const e = U(t);
	    if (null === e.h) {
	        let t = e.path.canonicalString();
	        null !== e.collectionGroup && (t += "|cg:" + e.collectionGroup), t += "|f:", t += e.filters.map((t => Lt(t))).join(","), 
	        t += "|ob:", t += e.orderBy.map((t => function(t) {
	            // TODO(b/29183165): Make this collision robust.
	            return t.field.canonicalString() + t.dir;
	        }(t))).join(","), lt(e.limit) || (t += "|l:", t += e.limit), e.startAt && (t += "|lb:", 
	        t += Ht(e.startAt)), e.endAt && (t += "|ub:", t += Ht(e.endAt)), e.h = t;
	    }
	    return e.h;
	}

	function $t(t) {
	    let e = t.path.canonicalString();
	    return null !== t.collectionGroup && (e += " collectionGroup=" + t.collectionGroup), 
	    t.filters.length > 0 && (e += `, filters: [${t.filters.map((t => {
        return `${(e = t).field.canonicalString()} ${e.op} ${Et(e.value)}`;
        /** Returns a debug description for `filter`. */
        var e;
        /** Filter that matches on key fields (i.e. '__name__'). */    })).join(", ")}]`), 
	    lt(t.limit) || (e += ", limit: " + t.limit), t.orderBy.length > 0 && (e += `, orderBy: [${t.orderBy.map((t => function(t) {
        return `${t.field.canonicalString()} (${t.dir})`;
    }(t))).join(", ")}]`), t.startAt && (e += ", startAt: " + Ht(t.startAt)), t.endAt && (e += ", endAt: " + Ht(t.endAt)), 
	    `Target(${e})`;
	}

	function Ot(t, e) {
	    if (t.limit !== e.limit) return !1;
	    if (t.orderBy.length !== e.orderBy.length) return !1;
	    for (let n = 0; n < t.orderBy.length; n++) if (!Yt(t.orderBy[n], e.orderBy[n])) return !1;
	    if (t.filters.length !== e.filters.length) return !1;
	    for (let i = 0; i < t.filters.length; i++) if (n = t.filters[i], s = e.filters[i], 
	    n.op !== s.op || !n.field.isEqual(s.field) || !mt(n.value, s.value)) return !1;
	    var n, s;
	    return t.collectionGroup === e.collectionGroup && (!!t.path.isEqual(e.path) && (!!Zt(t.startAt, e.startAt) && Zt(t.endAt, e.endAt)));
	}

	function Ft(t) {
	    return wt.isDocumentKey(t.path) && null === t.collectionGroup && 0 === t.filters.length;
	}

	class Mt extends class {} {
	    constructor(t, e, n) {
	        super(), this.field = t, this.op = e, this.value = n;
	    }
	    /**
	     * Creates a filter based on the provided arguments.
	     */    static create(t, e, n) {
	        return t.isKeyField() ? "in" /* IN */ === e || "not-in" /* NOT_IN */ === e ? this.l(t, e, n) : new Bt(t, e, n) : "array-contains" /* ARRAY_CONTAINS */ === e ? new jt(t, n) : "in" /* IN */ === e ? new Qt(t, n) : "not-in" /* NOT_IN */ === e ? new Wt(t, n) : "array-contains-any" /* ARRAY_CONTAINS_ANY */ === e ? new Gt(t, n) : new Mt(t, e, n);
	    }
	    static l(t, e, n) {
	        return "in" /* IN */ === e ? new Ut(t, n) : new qt(t, n);
	    }
	    matches(t) {
	        const e = t.data.field(this.field);
	        // Types do not have to match in NOT_EQUAL filters.
	                return "!=" /* NOT_EQUAL */ === this.op ? null !== e && this.m(yt(e, this.value)) : null !== e && _t(this.value) === _t(e) && this.m(yt(e, this.value));
	        // Only compare types with matching backend order (such as double and int).
	        }
	    m(t) {
	        switch (this.op) {
	          case "<" /* LESS_THAN */ :
	            return t < 0;

	          case "<=" /* LESS_THAN_OR_EQUAL */ :
	            return t <= 0;

	          case "==" /* EQUAL */ :
	            return 0 === t;

	          case "!=" /* NOT_EQUAL */ :
	            return 0 !== t;

	          case ">" /* GREATER_THAN */ :
	            return t > 0;

	          case ">=" /* GREATER_THAN_OR_EQUAL */ :
	            return t >= 0;

	          default:
	            return L();
	        }
	    }
	    g() {
	        return [ "<" /* LESS_THAN */ , "<=" /* LESS_THAN_OR_EQUAL */ , ">" /* GREATER_THAN */ , ">=" /* GREATER_THAN_OR_EQUAL */ , "!=" /* NOT_EQUAL */ , "not-in" /* NOT_IN */ ].indexOf(this.op) >= 0;
	    }
	}

	function Lt(t) {
	    // TODO(b/29183165): Technically, this won't be unique if two values have
	    // the same description, such as the int 3 and the string "3". So we should
	    // add the types in here somehow, too.
	    return t.field.canonicalString() + t.op.toString() + Et(t.value);
	}

	class Bt extends Mt {
	    constructor(t, e, n) {
	        super(t, e, n), this.key = wt.fromName(n.referenceValue);
	    }
	    matches(t) {
	        const e = wt.comparator(t.key, this.key);
	        return this.m(e);
	    }
	}

	/** Filter that matches on key fields within an array. */ class Ut extends Mt {
	    constructor(t, e) {
	        super(t, "in" /* IN */ , e), this.keys = Kt("in" /* IN */ , e);
	    }
	    matches(t) {
	        return this.keys.some((e => e.isEqual(t.key)));
	    }
	}

	/** Filter that matches on key fields not present within an array. */ class qt extends Mt {
	    constructor(t, e) {
	        super(t, "not-in" /* NOT_IN */ , e), this.keys = Kt("not-in" /* NOT_IN */ , e);
	    }
	    matches(t) {
	        return !this.keys.some((e => e.isEqual(t.key)));
	    }
	}

	function Kt(t, e) {
	    var n;
	    return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map((t => wt.fromName(t.referenceValue)));
	}

	/** A Filter that implements the array-contains operator. */ class jt extends Mt {
	    constructor(t, e) {
	        super(t, "array-contains" /* ARRAY_CONTAINS */ , e);
	    }
	    matches(t) {
	        const e = t.data.field(this.field);
	        return Rt(e) && gt(e.arrayValue, this.value);
	    }
	}

	/** A Filter that implements the IN operator. */ class Qt extends Mt {
	    constructor(t, e) {
	        super(t, "in" /* IN */ , e);
	    }
	    matches(t) {
	        const e = t.data.field(this.field);
	        return null !== e && gt(this.value.arrayValue, e);
	    }
	}

	/** A Filter that implements the not-in operator. */ class Wt extends Mt {
	    constructor(t, e) {
	        super(t, "not-in" /* NOT_IN */ , e);
	    }
	    matches(t) {
	        if (gt(this.value.arrayValue, {
	            nullValue: "NULL_VALUE"
	        })) return !1;
	        const e = t.data.field(this.field);
	        return null !== e && !gt(this.value.arrayValue, e);
	    }
	}

	/** A Filter that implements the array-contains-any operator. */ class Gt extends Mt {
	    constructor(t, e) {
	        super(t, "array-contains-any" /* ARRAY_CONTAINS_ANY */ , e);
	    }
	    matches(t) {
	        const e = t.data.field(this.field);
	        return !(!Rt(e) || !e.arrayValue.values) && e.arrayValue.values.some((t => gt(this.value.arrayValue, t)));
	    }
	}

	/**
	 * Represents a bound of a query.
	 *
	 * The bound is specified with the given components representing a position and
	 * whether it's just before or just after the position (relative to whatever the
	 * query order is).
	 *
	 * The position represents a logical index position for a query. It's a prefix
	 * of values for the (potentially implicit) order by clauses of a query.
	 *
	 * Bound provides a function to determine whether a document comes before or
	 * after a bound. This is influenced by whether the position is just before or
	 * just after the provided values.
	 */ class zt {
	    constructor(t, e) {
	        this.position = t, this.before = e;
	    }
	}

	function Ht(t) {
	    // TODO(b/29183165): Make this collision robust.
	    return `${t.before ? "b" : "a"}:${t.position.map((t => Et(t))).join(",")}`;
	}

	/**
	 * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
	 */ class Jt {
	    constructor(t, e = "asc" /* ASCENDING */) {
	        this.field = t, this.dir = e;
	    }
	}

	function Yt(t, e) {
	    return t.dir === e.dir && t.field.isEqual(e.field);
	}

	/**
	 * Returns true if a document sorts before a bound using the provided sort
	 * order.
	 */ function Xt(t, e, n) {
	    let s = 0;
	    for (let i = 0; i < t.position.length; i++) {
	        const r = e[i], o = t.position[i];
	        if (r.field.isKeyField()) s = wt.comparator(wt.fromName(o.referenceValue), n.key); else {
	            s = yt(o, n.data.field(r.field));
	        }
	        if ("desc" /* DESCENDING */ === r.dir && (s *= -1), 0 !== s) break;
	    }
	    return t.before ? s <= 0 : s < 0;
	}

	function Zt(t, e) {
	    if (null === t) return null === e;
	    if (null === e) return !1;
	    if (t.before !== e.before || t.position.length !== e.position.length) return !1;
	    for (let n = 0; n < t.position.length; n++) {
	        if (!mt(t.position[n], e.position[n])) return !1;
	    }
	    return !0;
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Query encapsulates all the query attributes we support in the SDK. It can
	 * be run against the LocalStore, as well as be converted to a `Target` to
	 * query the RemoteStore results.
	 *
	 * Visible for testing.
	 */ class te {
	    /**
	     * Initializes a Query with a path and optional additional query constraints.
	     * Path must currently be empty if this is a collection group query.
	     */
	    constructor(t, e = null, n = [], s = [], i = null, r = "F" /* First */ , o = null, c = null) {
	        this.path = t, this.collectionGroup = e, this.explicitOrderBy = n, this.filters = s, 
	        this.limit = i, this.limitType = r, this.startAt = o, this.endAt = c, this.p = null, 
	        // The corresponding `Target` of this `Query` instance.
	        this.T = null, this.startAt, this.endAt;
	    }
	}

	/** Creates a new Query instance with the options provided. */ function ee(t, e, n, s, i, r, o, c) {
	    return new te(t, e, n, s, i, r, o, c);
	}

	/** Creates a new Query for a query that matches all documents at `path` */ function ne(t) {
	    return new te(t);
	}

	/**
	 * Helper to convert a collection group query into a collection query at a
	 * specific path. This is used when executing collection group queries, since
	 * we have to split the query into a set of collection queries at multiple
	 * paths.
	 */ function se(t) {
	    return !lt(t.limit) && "F" /* First */ === t.limitType;
	}

	function ie(t) {
	    return !lt(t.limit) && "L" /* Last */ === t.limitType;
	}

	function re(t) {
	    return t.explicitOrderBy.length > 0 ? t.explicitOrderBy[0].field : null;
	}

	function oe(t) {
	    for (const e of t.filters) if (e.g()) return e.field;
	    return null;
	}

	/**
	 * Checks if any of the provided Operators are included in the query and
	 * returns the first one that is, or null if none are.
	 */
	/**
	 * Returns whether the query matches a collection group rather than a specific
	 * collection.
	 */
	function ce(t) {
	    return null !== t.collectionGroup;
	}

	/**
	 * Returns the implicit order by constraint that is used to execute the Query,
	 * which can be different from the order by constraints the user provided (e.g.
	 * the SDK and backend always orders by `__name__`).
	 */ function ue(t) {
	    const e = U(t);
	    if (null === e.p) {
	        e.p = [];
	        const t = oe(e), n = re(e);
	        if (null !== t && null === n) 
	        // In order to implicitly add key ordering, we must also add the
	        // inequality filter field for it to be a valid query.
	        // Note that the default inequality field and key ordering is ascending.
	        t.isKeyField() || e.p.push(new Jt(t)), e.p.push(new Jt(et.keyField(), "asc" /* ASCENDING */)); else {
	            let t = !1;
	            for (const n of e.explicitOrderBy) e.p.push(n), n.field.isKeyField() && (t = !0);
	            if (!t) {
	                // The order of the implicit key ordering always matches the last
	                // explicit order by
	                const t = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : "asc" /* ASCENDING */;
	                e.p.push(new Jt(et.keyField(), t));
	            }
	        }
	    }
	    return e.p;
	}

	/**
	 * Converts this `Query` instance to it's corresponding `Target` representation.
	 */ function ae(t) {
	    const e = U(t);
	    if (!e.T) if ("F" /* First */ === e.limitType) e.T = xt(e.path, e.collectionGroup, ue(e), e.filters, e.limit, e.startAt, e.endAt); else {
	        // Flip the orderBy directions since we want the last results
	        const t = [];
	        for (const n of ue(e)) {
	            const e = "desc" /* DESCENDING */ === n.dir ? "asc" /* ASCENDING */ : "desc" /* DESCENDING */;
	            t.push(new Jt(n.field, e));
	        }
	        // We need to swap the cursors to match the now-flipped query ordering.
	                const n = e.endAt ? new zt(e.endAt.position, !e.endAt.before) : null, s = e.startAt ? new zt(e.startAt.position, !e.startAt.before) : null;
	        // Now return as a LimitType.First query.
	        e.T = xt(e.path, e.collectionGroup, t, e.filters, e.limit, n, s);
	    }
	    return e.T;
	}

	function he(t, e, n) {
	    return new te(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);
	}

	function le(t, e) {
	    return Ot(ae(t), ae(e)) && t.limitType === e.limitType;
	}

	// TODO(b/29183165): This is used to get a unique string from a query to, for
	// example, use as a dictionary key, but the implementation is subject to
	// collisions. Make it collision-free.
	function fe(t) {
	    return `${kt(ae(t))}|lt:${t.limitType}`;
	}

	function de(t) {
	    return `Query(target=${$t(ae(t))}; limitType=${t.limitType})`;
	}

	/** Returns whether `doc` matches the constraints of `query`. */ function we(t, e) {
	    return e.isFoundDocument() && function(t, e) {
	        const n = e.key.path;
	        return null !== t.collectionGroup ? e.key.hasCollectionId(t.collectionGroup) && t.path.isPrefixOf(n) : wt.isDocumentKey(t.path) ? t.path.isEqual(n) : t.path.isImmediateParentOf(n);
	    }
	    /**
	 * A document must have a value for every ordering clause in order to show up
	 * in the results.
	 */ (t, e) && function(t, e) {
	        for (const n of t.explicitOrderBy) 
	        // order by key always matches
	        if (!n.field.isKeyField() && null === e.data.field(n.field)) return !1;
	        return !0;
	    }(t, e) && function(t, e) {
	        for (const n of t.filters) if (!n.matches(e)) return !1;
	        return !0;
	    }
	    /** Makes sure a document is within the bounds, if provided. */ (t, e) && function(t, e) {
	        if (t.startAt && !Xt(t.startAt, ue(t), e)) return !1;
	        if (t.endAt && Xt(t.endAt, ue(t), e)) return !1;
	        return !0;
	    }
	    /**
	 * Returns a new comparator function that can be used to compare two documents
	 * based on the Query's ordering constraint.
	 */ (t, e);
	}

	function _e(t) {
	    return (e, n) => {
	        let s = !1;
	        for (const i of ue(t)) {
	            const t = me(i, e, n);
	            if (0 !== t) return t;
	            s = s || i.field.isKeyField();
	        }
	        return 0;
	    };
	}

	function me(t, e, n) {
	    const s = t.field.isKeyField() ? wt.comparator(e.key, n.key) : function(t, e, n) {
	        const s = e.data.field(t), i = n.data.field(t);
	        return null !== s && null !== i ? yt(s, i) : L();
	    }(t.field, e, n);
	    switch (t.dir) {
	      case "asc" /* ASCENDING */ :
	        return s;

	      case "desc" /* DESCENDING */ :
	        return -1 * s;

	      default:
	        return L();
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Returns an DoubleValue for `value` that is encoded based the serializer's
	 * `useProto3Json` setting.
	 */ function ge(t, e) {
	    if (t.I) {
	        if (isNaN(e)) return {
	            doubleValue: "NaN"
	        };
	        if (e === 1 / 0) return {
	            doubleValue: "Infinity"
	        };
	        if (e === -1 / 0) return {
	            doubleValue: "-Infinity"
	        };
	    }
	    return {
	        doubleValue: ft(e) ? "-0" : e
	    };
	}

	/**
	 * Returns an IntegerValue for `value`.
	 */ function ye(t) {
	    return {
	        integerValue: "" + t
	    };
	}

	/**
	 * Returns a value for a number that's appropriate to put into a proto.
	 * The return value is an IntegerValue if it can safely represent the value,
	 * otherwise a DoubleValue is returned.
	 */ function pe(t, e) {
	    return dt(e) ? ye(e) : ge(t, e);
	}

	/**
	 * @license
	 * Copyright 2018 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** Used to represent a field transform on a mutation. */ class Ee {
	    constructor() {
	        // Make sure that the structural type of `TransformOperation` is unique.
	        // See https://github.com/microsoft/TypeScript/issues/5451
	        this._ = void 0;
	    }
	}

	/**
	 * Computes the local transform result against the provided `previousValue`,
	 * optionally using the provided localWriteTime.
	 */ function Te(t, e, n) {
	    return t instanceof Re ? function(t, e) {
	        const n = {
	            fields: {
	                __type__: {
	                    stringValue: "server_timestamp"
	                },
	                __local_write_time__: {
	                    timestampValue: {
	                        seconds: t.seconds,
	                        nanos: t.nanoseconds
	                    }
	                }
	            }
	        };
	        return e && (n.fields.__previous_value__ = e), {
	            mapValue: n
	        };
	    }(n, e) : t instanceof Pe ? be(t, e) : t instanceof ve ? Ve(t, e) : function(t, e) {
	        // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit
	        // precision and resolves overflows by reducing precision, we do not
	        // manually cap overflows at 2^63.
	        const n = Ae(t, e), s = De(n) + De(t.A);
	        return At(n) && At(t.A) ? ye(s) : ge(t.R, s);
	    }(t, e);
	}

	/**
	 * Computes a final transform result after the transform has been acknowledged
	 * by the server, potentially using the server-provided transformResult.
	 */ function Ie(t, e, n) {
	    // The server just sends null as the transform result for array operations,
	    // so we have to calculate a result the same as we do for local
	    // applications.
	    return t instanceof Pe ? be(t, e) : t instanceof ve ? Ve(t, e) : n;
	}

	/**
	 * If this transform operation is not idempotent, returns the base value to
	 * persist for this transform. If a base value is returned, the transform
	 * operation is always applied to this base value, even if document has
	 * already been updated.
	 *
	 * Base values provide consistent behavior for non-idempotent transforms and
	 * allow us to return the same latency-compensated value even if the backend
	 * has already applied the transform operation. The base value is null for
	 * idempotent transforms, as they can be re-played even if the backend has
	 * already applied them.
	 *
	 * @returns a base value to store along with the mutation, or null for
	 * idempotent transforms.
	 */ function Ae(t, e) {
	    return t instanceof Se ? At(n = e) || function(t) {
	        return !!t && "doubleValue" in t;
	    }
	    /** Returns true if `value` is either an IntegerValue or a DoubleValue. */ (n) ? e : {
	        integerValue: 0
	    } : null;
	    var n;
	}

	/** Transforms a value into a server-generated timestamp. */
	class Re extends Ee {}

	/** Transforms an array value via a union operation. */ class Pe extends Ee {
	    constructor(t) {
	        super(), this.elements = t;
	    }
	}

	function be(t, e) {
	    const n = Ce(e);
	    for (const e of t.elements) n.some((t => mt(t, e))) || n.push(e);
	    return {
	        arrayValue: {
	            values: n
	        }
	    };
	}

	/** Transforms an array value via a remove operation. */ class ve extends Ee {
	    constructor(t) {
	        super(), this.elements = t;
	    }
	}

	function Ve(t, e) {
	    let n = Ce(e);
	    for (const e of t.elements) n = n.filter((t => !mt(t, e)));
	    return {
	        arrayValue: {
	            values: n
	        }
	    };
	}

	/**
	 * Implements the backend semantics for locally computed NUMERIC_ADD (increment)
	 * transforms. Converts all field values to integers or doubles, but unlike the
	 * backend does not cap integer values at 2^63. Instead, JavaScript number
	 * arithmetic is used and precision loss can occur for values greater than 2^53.
	 */ class Se extends Ee {
	    constructor(t, e) {
	        super(), this.R = t, this.A = e;
	    }
	}

	function De(t) {
	    return ot(t.integerValue || t.doubleValue);
	}

	function Ce(t) {
	    return Rt(t) && t.arrayValue.values ? t.arrayValue.values.slice() : [];
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** A field path and the TransformOperation to perform upon it. */ class Ne {
	    constructor(t, e) {
	        this.field = t, this.transform = e;
	    }
	}

	function xe(t, e) {
	    return t.field.isEqual(e.field) && function(t, e) {
	        return t instanceof Pe && e instanceof Pe || t instanceof ve && e instanceof ve ? Q(t.elements, e.elements, mt) : t instanceof Se && e instanceof Se ? mt(t.A, e.A) : t instanceof Re && e instanceof Re;
	    }(t.transform, e.transform);
	}

	/** The result of successfully applying a mutation to the backend. */
	class ke {
	    constructor(
	    /**
	     * The version at which the mutation was committed:
	     *
	     * - For most operations, this is the updateTime in the WriteResult.
	     * - For deletes, the commitTime of the WriteResponse (because deletes are
	     *   not stored and have no updateTime).
	     *
	     * Note that these versions can be different: No-op writes will not change
	     * the updateTime even though the commitTime advances.
	     */
	    t, 
	    /**
	     * The resulting fields returned from the backend after a mutation
	     * containing field transforms has been committed. Contains one FieldValue
	     * for each FieldTransform that was in the mutation.
	     *
	     * Will be empty if the mutation did not contain any field transforms.
	     */
	    e) {
	        this.version = t, this.transformResults = e;
	    }
	}

	/**
	 * Encodes a precondition for a mutation. This follows the model that the
	 * backend accepts with the special case of an explicit "empty" precondition
	 * (meaning no precondition).
	 */ class $e {
	    constructor(t, e) {
	        this.updateTime = t, this.exists = e;
	    }
	    /** Creates a new empty Precondition. */    static none() {
	        return new $e;
	    }
	    /** Creates a new Precondition with an exists flag. */    static exists(t) {
	        return new $e(void 0, t);
	    }
	    /** Creates a new Precondition based on a version a document exists at. */    static updateTime(t) {
	        return new $e(t);
	    }
	    /** Returns whether this Precondition is empty. */    get isNone() {
	        return void 0 === this.updateTime && void 0 === this.exists;
	    }
	    isEqual(t) {
	        return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);
	    }
	}

	/** Returns true if the preconditions is valid for the given document. */ function Oe(t, e) {
	    return void 0 !== t.updateTime ? e.isFoundDocument() && e.version.isEqual(t.updateTime) : void 0 === t.exists || t.exists === e.isFoundDocument();
	}

	/**
	 * A mutation describes a self-contained change to a document. Mutations can
	 * create, replace, delete, and update subsets of documents.
	 *
	 * Mutations not only act on the value of the document but also its version.
	 *
	 * For local mutations (mutations that haven't been committed yet), we preserve
	 * the existing version for Set and Patch mutations. For Delete mutations, we
	 * reset the version to 0.
	 *
	 * Here's the expected transition table.
	 *
	 * MUTATION           APPLIED TO            RESULTS IN
	 *
	 * SetMutation        Document(v3)          Document(v3)
	 * SetMutation        NoDocument(v3)        Document(v0)
	 * SetMutation        InvalidDocument(v0)   Document(v0)
	 * PatchMutation      Document(v3)          Document(v3)
	 * PatchMutation      NoDocument(v3)        NoDocument(v3)
	 * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)
	 * DeleteMutation     Document(v3)          NoDocument(v0)
	 * DeleteMutation     NoDocument(v3)        NoDocument(v0)
	 * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)
	 *
	 * For acknowledged mutations, we use the updateTime of the WriteResponse as
	 * the resulting version for Set and Patch mutations. As deletes have no
	 * explicit update time, we use the commitTime of the WriteResponse for
	 * Delete mutations.
	 *
	 * If a mutation is acknowledged by the backend but fails the precondition check
	 * locally, we transition to an `UnknownDocument` and rely on Watch to send us
	 * the updated version.
	 *
	 * Field transforms are used only with Patch and Set Mutations. We use the
	 * `updateTransforms` message to store transforms, rather than the `transforms`s
	 * messages.
	 *
	 * ## Subclassing Notes
	 *
	 * Every type of mutation needs to implement its own applyToRemoteDocument() and
	 * applyToLocalView() to implement the actual behavior of applying the mutation
	 * to some source document (see `applySetMutationToRemoteDocument()` for an
	 * example).
	 */ class Fe {}

	/**
	 * Applies this mutation to the given document for the purposes of computing a
	 * new remote document. If the input document doesn't match the expected state
	 * (e.g. it is invalid or outdated), the document type may transition to
	 * unknown.
	 *
	 * @param mutation - The mutation to apply.
	 * @param document - The document to mutate. The input document can be an
	 *     invalid document if the client has no knowledge of the pre-mutation state
	 *     of the document.
	 * @param mutationResult - The result of applying the mutation from the backend.
	 */ function Me(t, e, n) {
	    t instanceof Ke ? function(t, e, n) {
	        // Unlike applySetMutationToLocalView, if we're applying a mutation to a
	        // remote document the server has accepted the mutation so the precondition
	        // must have held.
	        const s = t.value.clone(), i = We(t.fieldTransforms, e, n.transformResults);
	        s.setAll(i), e.convertToFoundDocument(n.version, s).setHasCommittedMutations();
	    }(t, e, n) : t instanceof je ? function(t, e, n) {
	        if (!Oe(t.precondition, e)) 
	        // Since the mutation was not rejected, we know that the precondition
	        // matched on the backend. We therefore must not have the expected version
	        // of the document in our cache and convert to an UnknownDocument with a
	        // known updateTime.
	        return void e.convertToUnknownDocument(n.version);
	        const s = We(t.fieldTransforms, e, n.transformResults), i = e.data;
	        i.setAll(Qe(t)), i.setAll(s), e.convertToFoundDocument(n.version, i).setHasCommittedMutations();
	    }(t, e, n) : function(t, e, n) {
	        // Unlike applyToLocalView, if we're applying a mutation to a remote
	        // document the server has accepted the mutation so the precondition must
	        // have held.
	        e.convertToNoDocument(n.version).setHasCommittedMutations();
	    }(0, e, n);
	}

	/**
	 * Applies this mutation to the given document for the purposes of computing
	 * the new local view of a document. If the input document doesn't match the
	 * expected state, the document is not modified.
	 *
	 * @param mutation - The mutation to apply.
	 * @param document - The document to mutate. The input document can be an
	 *     invalid document if the client has no knowledge of the pre-mutation state
	 *     of the document.
	 * @param localWriteTime - A timestamp indicating the local write time of the
	 *     batch this mutation is a part of.
	 */ function Le(t, e, n) {
	    t instanceof Ke ? function(t, e, n) {
	        if (!Oe(t.precondition, e)) 
	        // The mutation failed to apply (e.g. a document ID created with add()
	        // caused a name collision).
	        return;
	        const s = t.value.clone(), i = Ge(t.fieldTransforms, n, e);
	        s.setAll(i), e.convertToFoundDocument(qe(e), s).setHasLocalMutations();
	    }
	    /**
	 * A mutation that modifies fields of the document at the given key with the
	 * given values. The values are applied through a field mask:
	 *
	 *  * When a field is in both the mask and the values, the corresponding field
	 *    is updated.
	 *  * When a field is in neither the mask nor the values, the corresponding
	 *    field is unmodified.
	 *  * When a field is in the mask but not in the values, the corresponding field
	 *    is deleted.
	 *  * When a field is not in the mask but is in the values, the values map is
	 *    ignored.
	 */ (t, e, n) : t instanceof je ? function(t, e, n) {
	        if (!Oe(t.precondition, e)) return;
	        const s = Ge(t.fieldTransforms, n, e), i = e.data;
	        i.setAll(Qe(t)), i.setAll(s), e.convertToFoundDocument(qe(e), i).setHasLocalMutations();
	    }
	    /**
	 * Returns a FieldPath/Value map with the content of the PatchMutation.
	 */ (t, e, n) : function(t, e) {
	        Oe(t.precondition, e) && 
	        // We don't call `setHasLocalMutations()` since we want to be backwards
	        // compatible with the existing SDK behavior.
	        e.convertToNoDocument(z$1.min());
	    }
	    /**
	 * A mutation that verifies the existence of the document at the given key with
	 * the provided precondition.
	 *
	 * The `verify` operation is only used in Transactions, and this class serves
	 * primarily to facilitate serialization into protos.
	 */ (t, e);
	}

	/**
	 * If this mutation is not idempotent, returns the base value to persist with
	 * this mutation. If a base value is returned, the mutation is always applied
	 * to this base value, even if document has already been updated.
	 *
	 * The base value is a sparse object that consists of only the document
	 * fields for which this mutation contains a non-idempotent transformation
	 * (e.g. a numeric increment). The provided value guarantees consistent
	 * behavior for non-idempotent transforms and allow us to return the same
	 * latency-compensated value even if the backend has already applied the
	 * mutation. The base value is null for idempotent mutations, as they can be
	 * re-played even if the backend has already applied them.
	 *
	 * @returns a base value to store along with the mutation, or null for
	 * idempotent mutations.
	 */ function Be(t, e) {
	    let n = null;
	    for (const s of t.fieldTransforms) {
	        const t = e.data.field(s.field), i = Ae(s.transform, t || null);
	        null != i && (null == n && (n = St.empty()), n.set(s.field, i));
	    }
	    return n || null;
	}

	function Ue(t, e) {
	    return t.type === e.type && (!!t.key.isEqual(e.key) && (!!t.precondition.isEqual(e.precondition) && (!!function(t, e) {
	        return void 0 === t && void 0 === e || !(!t || !e) && Q(t, e, ((t, e) => xe(t, e)));
	    }(t.fieldTransforms, e.fieldTransforms) && (0 /* Set */ === t.type ? t.value.isEqual(e.value) : 1 /* Patch */ !== t.type || t.data.isEqual(e.data) && t.fieldMask.isEqual(e.fieldMask)))));
	}

	/**
	 * Returns the version from the given document for use as the result of a
	 * mutation. Mutations are defined to return the version of the base document
	 * only if it is an existing document. Deleted and unknown documents have a
	 * post-mutation version of SnapshotVersion.min().
	 */ function qe(t) {
	    return t.isFoundDocument() ? t.version : z$1.min();
	}

	/**
	 * A mutation that creates or replaces the document at the given key with the
	 * object value contents.
	 */ class Ke extends Fe {
	    constructor(t, e, n, s = []) {
	        super(), this.key = t, this.value = e, this.precondition = n, this.fieldTransforms = s, 
	        this.type = 0 /* Set */;
	    }
	}

	class je extends Fe {
	    constructor(t, e, n, s, i = []) {
	        super(), this.key = t, this.data = e, this.fieldMask = n, this.precondition = s, 
	        this.fieldTransforms = i, this.type = 1 /* Patch */;
	    }
	}

	function Qe(t) {
	    const e = new Map;
	    return t.fieldMask.fields.forEach((n => {
	        if (!n.isEmpty()) {
	            const s = t.data.field(n);
	            e.set(n, s);
	        }
	    })), e;
	}

	/**
	 * Creates a list of "transform results" (a transform result is a field value
	 * representing the result of applying a transform) for use after a mutation
	 * containing transforms has been acknowledged by the server.
	 *
	 * @param fieldTransforms - The field transforms to apply the result to.
	 * @param mutableDocument - The current state of the document after applying all
	 * previous mutations.
	 * @param serverTransformResults - The transform results received by the server.
	 * @returns The transform results list.
	 */ function We(t, e, n) {
	    const s = new Map;
	    B(t.length === n.length);
	    for (let i = 0; i < n.length; i++) {
	        const r = t[i], o = r.transform, c = e.data.field(r.field);
	        s.set(r.field, Ie(o, c, n[i]));
	    }
	    return s;
	}

	/**
	 * Creates a list of "transform results" (a transform result is a field value
	 * representing the result of applying a transform) for use when applying a
	 * transform locally.
	 *
	 * @param fieldTransforms - The field transforms to apply the result to.
	 * @param localWriteTime - The local time of the mutation (used to
	 *     generate ServerTimestampValues).
	 * @param mutableDocument - The current state of the document after applying all
	 *     previous mutations.
	 * @returns The transform results list.
	 */ function Ge(t, e, n) {
	    const s = new Map;
	    for (const i of t) {
	        const t = i.transform, r = n.data.field(i.field);
	        s.set(i.field, Te(t, r, e));
	    }
	    return s;
	}

	/** A mutation that deletes the document at the given key. */ class ze extends Fe {
	    constructor(t, e) {
	        super(), this.key = t, this.precondition = e, this.type = 2 /* Delete */ , this.fieldTransforms = [];
	    }
	}

	class He extends Fe {
	    constructor(t, e) {
	        super(), this.key = t, this.precondition = e, this.type = 3 /* Verify */ , this.fieldTransforms = [];
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class Je {
	    // TODO(b/33078163): just use simplest form of existence filter for now
	    constructor(t) {
	        this.count = t;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Error Codes describing the different ways GRPC can fail. These are copied
	 * directly from GRPC's sources here:
	 *
	 * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
	 *
	 * Important! The names of these identifiers matter because the string forms
	 * are used for reverse lookups from the webchannel stream. Do NOT change the
	 * names of these identifiers or change this into a const enum.
	 */ var Ye, Xe;

	/**
	 * Determines whether an error code represents a permanent error when received
	 * in response to a non-write operation.
	 *
	 * See isPermanentWriteError for classifying write errors.
	 */
	function Ze(t) {
	    switch (t) {
	      case D.OK:
	        return L();

	      case D.CANCELLED:
	      case D.UNKNOWN:
	      case D.DEADLINE_EXCEEDED:
	      case D.RESOURCE_EXHAUSTED:
	      case D.INTERNAL:
	      case D.UNAVAILABLE:
	 // Unauthenticated means something went wrong with our token and we need
	        // to retry with new credentials which will happen automatically.
	              case D.UNAUTHENTICATED:
	        return !1;

	      case D.INVALID_ARGUMENT:
	      case D.NOT_FOUND:
	      case D.ALREADY_EXISTS:
	      case D.PERMISSION_DENIED:
	      case D.FAILED_PRECONDITION:
	 // Aborted might be retried in some scenarios, but that is dependant on
	        // the context and should handled individually by the calling code.
	        // See https://cloud.google.com/apis/design/errors.
	              case D.ABORTED:
	      case D.OUT_OF_RANGE:
	      case D.UNIMPLEMENTED:
	      case D.DATA_LOSS:
	        return !0;

	      default:
	        return L();
	    }
	}

	/**
	 * Determines whether an error code represents a permanent error when received
	 * in response to a write operation.
	 *
	 * Write operations must be handled specially because as of b/119437764, ABORTED
	 * errors on the write stream should be retried too (even though ABORTED errors
	 * are not generally retryable).
	 *
	 * Note that during the initial handshake on the write stream an ABORTED error
	 * signals that we should discard our stream token (i.e. it is permanent). This
	 * means a handshake error should be classified with isPermanentError, above.
	 */
	/**
	 * Maps an error Code from GRPC status code number, like 0, 1, or 14. These
	 * are not the same as HTTP status codes.
	 *
	 * @returns The Code equivalent to the given GRPC status code. Fails if there
	 *     is no match.
	 */
	function tn(t) {
	    if (void 0 === t) 
	    // This shouldn't normally happen, but in certain error cases (like trying
	    // to send invalid proto messages) we may get an error with no GRPC code.
	    return O("GRPC error has no .code"), D.UNKNOWN;
	    switch (t) {
	      case Ye.OK:
	        return D.OK;

	      case Ye.CANCELLED:
	        return D.CANCELLED;

	      case Ye.UNKNOWN:
	        return D.UNKNOWN;

	      case Ye.DEADLINE_EXCEEDED:
	        return D.DEADLINE_EXCEEDED;

	      case Ye.RESOURCE_EXHAUSTED:
	        return D.RESOURCE_EXHAUSTED;

	      case Ye.INTERNAL:
	        return D.INTERNAL;

	      case Ye.UNAVAILABLE:
	        return D.UNAVAILABLE;

	      case Ye.UNAUTHENTICATED:
	        return D.UNAUTHENTICATED;

	      case Ye.INVALID_ARGUMENT:
	        return D.INVALID_ARGUMENT;

	      case Ye.NOT_FOUND:
	        return D.NOT_FOUND;

	      case Ye.ALREADY_EXISTS:
	        return D.ALREADY_EXISTS;

	      case Ye.PERMISSION_DENIED:
	        return D.PERMISSION_DENIED;

	      case Ye.FAILED_PRECONDITION:
	        return D.FAILED_PRECONDITION;

	      case Ye.ABORTED:
	        return D.ABORTED;

	      case Ye.OUT_OF_RANGE:
	        return D.OUT_OF_RANGE;

	      case Ye.UNIMPLEMENTED:
	        return D.UNIMPLEMENTED;

	      case Ye.DATA_LOSS:
	        return D.DATA_LOSS;

	      default:
	        return L();
	    }
	}

	/**
	 * Converts an HTTP response's error status to the equivalent error code.
	 *
	 * @param status - An HTTP error response status ("FAILED_PRECONDITION",
	 * "UNKNOWN", etc.)
	 * @returns The equivalent Code. Non-matching responses are mapped to
	 *     Code.UNKNOWN.
	 */ (Xe = Ye || (Ye = {}))[Xe.OK = 0] = "OK", Xe[Xe.CANCELLED = 1] = "CANCELLED", 
	Xe[Xe.UNKNOWN = 2] = "UNKNOWN", Xe[Xe.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", 
	Xe[Xe.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", Xe[Xe.NOT_FOUND = 5] = "NOT_FOUND", 
	Xe[Xe.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", Xe[Xe.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", 
	Xe[Xe.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", Xe[Xe.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", 
	Xe[Xe.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", Xe[Xe.ABORTED = 10] = "ABORTED", 
	Xe[Xe.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", Xe[Xe.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", 
	Xe[Xe.INTERNAL = 13] = "INTERNAL", Xe[Xe.UNAVAILABLE = 14] = "UNAVAILABLE", Xe[Xe.DATA_LOSS = 15] = "DATA_LOSS";

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// An immutable sorted map implementation, based on a Left-leaning Red-Black
	// tree.
	class en {
	    constructor(t, e) {
	        this.comparator = t, this.root = e || sn.EMPTY;
	    }
	    // Returns a copy of the map, with the specified key/value added or replaced.
	    insert(t, e) {
	        return new en(this.comparator, this.root.insert(t, e, this.comparator).copy(null, null, sn.BLACK, null, null));
	    }
	    // Returns a copy of the map, with the specified key removed.
	    remove(t) {
	        return new en(this.comparator, this.root.remove(t, this.comparator).copy(null, null, sn.BLACK, null, null));
	    }
	    // Returns the value of the node with the given key, or null.
	    get(t) {
	        let e = this.root;
	        for (;!e.isEmpty(); ) {
	            const n = this.comparator(t, e.key);
	            if (0 === n) return e.value;
	            n < 0 ? e = e.left : n > 0 && (e = e.right);
	        }
	        return null;
	    }
	    // Returns the index of the element in this sorted map, or -1 if it doesn't
	    // exist.
	    indexOf(t) {
	        // Number of nodes that were pruned when descending right
	        let e = 0, n = this.root;
	        for (;!n.isEmpty(); ) {
	            const s = this.comparator(t, n.key);
	            if (0 === s) return e + n.left.size;
	            s < 0 ? n = n.left : (
	            // Count all nodes left of the node plus the node itself
	            e += n.left.size + 1, n = n.right);
	        }
	        // Node not found
	                return -1;
	    }
	    isEmpty() {
	        return this.root.isEmpty();
	    }
	    // Returns the total number of nodes in the map.
	    get size() {
	        return this.root.size;
	    }
	    // Returns the minimum key in the map.
	    minKey() {
	        return this.root.minKey();
	    }
	    // Returns the maximum key in the map.
	    maxKey() {
	        return this.root.maxKey();
	    }
	    // Traverses the map in key order and calls the specified action function
	    // for each key/value pair. If action returns true, traversal is aborted.
	    // Returns the first truthy value returned by action, or the last falsey
	    // value returned by action.
	    inorderTraversal(t) {
	        return this.root.inorderTraversal(t);
	    }
	    forEach(t) {
	        this.inorderTraversal(((e, n) => (t(e, n), !1)));
	    }
	    toString() {
	        const t = [];
	        return this.inorderTraversal(((e, n) => (t.push(`${e}:${n}`), !1))), `{${t.join(", ")}}`;
	    }
	    // Traverses the map in reverse key order and calls the specified action
	    // function for each key/value pair. If action returns true, traversal is
	    // aborted.
	    // Returns the first truthy value returned by action, or the last falsey
	    // value returned by action.
	    reverseTraversal(t) {
	        return this.root.reverseTraversal(t);
	    }
	    // Returns an iterator over the SortedMap.
	    getIterator() {
	        return new nn(this.root, null, this.comparator, !1);
	    }
	    getIteratorFrom(t) {
	        return new nn(this.root, t, this.comparator, !1);
	    }
	    getReverseIterator() {
	        return new nn(this.root, null, this.comparator, !0);
	    }
	    getReverseIteratorFrom(t) {
	        return new nn(this.root, t, this.comparator, !0);
	    }
	}

	 // end SortedMap
	// An iterator over an LLRBNode.
	class nn {
	    constructor(t, e, n, s) {
	        this.isReverse = s, this.nodeStack = [];
	        let i = 1;
	        for (;!t.isEmpty(); ) if (i = e ? n(t.key, e) : 1, 
	        // flip the comparison if we're going in reverse
	        s && (i *= -1), i < 0) 
	        // This node is less than our start key. ignore it
	        t = this.isReverse ? t.left : t.right; else {
	            if (0 === i) {
	                // This node is exactly equal to our start key. Push it on the stack,
	                // but stop iterating;
	                this.nodeStack.push(t);
	                break;
	            }
	            // This node is greater than our start key, add it to the stack and move
	            // to the next one
	            this.nodeStack.push(t), t = this.isReverse ? t.right : t.left;
	        }
	    }
	    getNext() {
	        let t = this.nodeStack.pop();
	        const e = {
	            key: t.key,
	            value: t.value
	        };
	        if (this.isReverse) for (t = t.left; !t.isEmpty(); ) this.nodeStack.push(t), t = t.right; else for (t = t.right; !t.isEmpty(); ) this.nodeStack.push(t), 
	        t = t.left;
	        return e;
	    }
	    hasNext() {
	        return this.nodeStack.length > 0;
	    }
	    peek() {
	        if (0 === this.nodeStack.length) return null;
	        const t = this.nodeStack[this.nodeStack.length - 1];
	        return {
	            key: t.key,
	            value: t.value
	        };
	    }
	}

	 // end SortedMapIterator
	// Represents a node in a Left-leaning Red-Black tree.
	class sn {
	    constructor(t, e, n, s, i) {
	        this.key = t, this.value = e, this.color = null != n ? n : sn.RED, this.left = null != s ? s : sn.EMPTY, 
	        this.right = null != i ? i : sn.EMPTY, this.size = this.left.size + 1 + this.right.size;
	    }
	    // Returns a copy of the current node, optionally replacing pieces of it.
	    copy(t, e, n, s, i) {
	        return new sn(null != t ? t : this.key, null != e ? e : this.value, null != n ? n : this.color, null != s ? s : this.left, null != i ? i : this.right);
	    }
	    isEmpty() {
	        return !1;
	    }
	    // Traverses the tree in key order and calls the specified action function
	    // for each node. If action returns true, traversal is aborted.
	    // Returns the first truthy value returned by action, or the last falsey
	    // value returned by action.
	    inorderTraversal(t) {
	        return this.left.inorderTraversal(t) || t(this.key, this.value) || this.right.inorderTraversal(t);
	    }
	    // Traverses the tree in reverse key order and calls the specified action
	    // function for each node. If action returns true, traversal is aborted.
	    // Returns the first truthy value returned by action, or the last falsey
	    // value returned by action.
	    reverseTraversal(t) {
	        return this.right.reverseTraversal(t) || t(this.key, this.value) || this.left.reverseTraversal(t);
	    }
	    // Returns the minimum node in the tree.
	    min() {
	        return this.left.isEmpty() ? this : this.left.min();
	    }
	    // Returns the maximum key in the tree.
	    minKey() {
	        return this.min().key;
	    }
	    // Returns the maximum key in the tree.
	    maxKey() {
	        return this.right.isEmpty() ? this.key : this.right.maxKey();
	    }
	    // Returns new tree, with the key/value added.
	    insert(t, e, n) {
	        let s = this;
	        const i = n(t, s.key);
	        return s = i < 0 ? s.copy(null, null, null, s.left.insert(t, e, n), null) : 0 === i ? s.copy(null, e, null, null, null) : s.copy(null, null, null, null, s.right.insert(t, e, n)), 
	        s.fixUp();
	    }
	    removeMin() {
	        if (this.left.isEmpty()) return sn.EMPTY;
	        let t = this;
	        return t.left.isRed() || t.left.left.isRed() || (t = t.moveRedLeft()), t = t.copy(null, null, null, t.left.removeMin(), null), 
	        t.fixUp();
	    }
	    // Returns new tree, with the specified item removed.
	    remove(t, e) {
	        let n, s = this;
	        if (e(t, s.key) < 0) s.left.isEmpty() || s.left.isRed() || s.left.left.isRed() || (s = s.moveRedLeft()), 
	        s = s.copy(null, null, null, s.left.remove(t, e), null); else {
	            if (s.left.isRed() && (s = s.rotateRight()), s.right.isEmpty() || s.right.isRed() || s.right.left.isRed() || (s = s.moveRedRight()), 
	            0 === e(t, s.key)) {
	                if (s.right.isEmpty()) return sn.EMPTY;
	                n = s.right.min(), s = s.copy(n.key, n.value, null, null, s.right.removeMin());
	            }
	            s = s.copy(null, null, null, null, s.right.remove(t, e));
	        }
	        return s.fixUp();
	    }
	    isRed() {
	        return this.color;
	    }
	    // Returns new tree after performing any needed rotations.
	    fixUp() {
	        let t = this;
	        return t.right.isRed() && !t.left.isRed() && (t = t.rotateLeft()), t.left.isRed() && t.left.left.isRed() && (t = t.rotateRight()), 
	        t.left.isRed() && t.right.isRed() && (t = t.colorFlip()), t;
	    }
	    moveRedLeft() {
	        let t = this.colorFlip();
	        return t.right.left.isRed() && (t = t.copy(null, null, null, null, t.right.rotateRight()), 
	        t = t.rotateLeft(), t = t.colorFlip()), t;
	    }
	    moveRedRight() {
	        let t = this.colorFlip();
	        return t.left.left.isRed() && (t = t.rotateRight(), t = t.colorFlip()), t;
	    }
	    rotateLeft() {
	        const t = this.copy(null, null, sn.RED, null, this.right.left);
	        return this.right.copy(null, null, this.color, t, null);
	    }
	    rotateRight() {
	        const t = this.copy(null, null, sn.RED, this.left.right, null);
	        return this.left.copy(null, null, this.color, null, t);
	    }
	    colorFlip() {
	        const t = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);
	        return this.copy(null, null, !this.color, t, e);
	    }
	    // For testing.
	    checkMaxDepth() {
	        const t = this.check();
	        return Math.pow(2, t) <= this.size + 1;
	    }
	    // In a balanced RB tree, the black-depth (number of black nodes) from root to
	    // leaves is equal on both sides.  This function verifies that or asserts.
	    check() {
	        if (this.isRed() && this.left.isRed()) throw L();
	        if (this.right.isRed()) throw L();
	        const t = this.left.check();
	        if (t !== this.right.check()) throw L();
	        return t + (this.isRed() ? 0 : 1);
	    }
	}

	 // end LLRBNode
	// Empty node is shared between all LLRB trees.
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	sn.EMPTY = null, sn.RED = !0, sn.BLACK = !1;

	// end LLRBEmptyNode
	sn.EMPTY = new 
	// Represents an empty node (a leaf node in the Red-Black Tree).
	class {
	    constructor() {
	        this.size = 0;
	    }
	    get key() {
	        throw L();
	    }
	    get value() {
	        throw L();
	    }
	    get color() {
	        throw L();
	    }
	    get left() {
	        throw L();
	    }
	    get right() {
	        throw L();
	    }
	    // Returns a copy of the current node.
	    copy(t, e, n, s, i) {
	        return this;
	    }
	    // Returns a copy of the tree, with the specified key/value added.
	    insert(t, e, n) {
	        return new sn(t, e);
	    }
	    // Returns a copy of the tree, with the specified key removed.
	    remove(t, e) {
	        return this;
	    }
	    isEmpty() {
	        return !0;
	    }
	    inorderTraversal(t) {
	        return !1;
	    }
	    reverseTraversal(t) {
	        return !1;
	    }
	    minKey() {
	        return null;
	    }
	    maxKey() {
	        return null;
	    }
	    isRed() {
	        return !1;
	    }
	    // For testing.
	    checkMaxDepth() {
	        return !0;
	    }
	    check() {
	        return 0;
	    }
	};

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * SortedSet is an immutable (copy-on-write) collection that holds elements
	 * in order specified by the provided comparator.
	 *
	 * NOTE: if provided comparator returns 0 for two elements, we consider them to
	 * be equal!
	 */
	class rn {
	    constructor(t) {
	        this.comparator = t, this.data = new en(this.comparator);
	    }
	    has(t) {
	        return null !== this.data.get(t);
	    }
	    first() {
	        return this.data.minKey();
	    }
	    last() {
	        return this.data.maxKey();
	    }
	    get size() {
	        return this.data.size;
	    }
	    indexOf(t) {
	        return this.data.indexOf(t);
	    }
	    /** Iterates elements in order defined by "comparator" */    forEach(t) {
	        this.data.inorderTraversal(((e, n) => (t(e), !1)));
	    }
	    /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */    forEachInRange(t, e) {
	        const n = this.data.getIteratorFrom(t[0]);
	        for (;n.hasNext(); ) {
	            const s = n.getNext();
	            if (this.comparator(s.key, t[1]) >= 0) return;
	            e(s.key);
	        }
	    }
	    /**
	     * Iterates over `elem`s such that: start &lt;= elem until false is returned.
	     */    forEachWhile(t, e) {
	        let n;
	        for (n = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); n.hasNext(); ) {
	            if (!t(n.getNext().key)) return;
	        }
	    }
	    /** Finds the least element greater than or equal to `elem`. */    firstAfterOrEqual(t) {
	        const e = this.data.getIteratorFrom(t);
	        return e.hasNext() ? e.getNext().key : null;
	    }
	    getIterator() {
	        return new on(this.data.getIterator());
	    }
	    getIteratorFrom(t) {
	        return new on(this.data.getIteratorFrom(t));
	    }
	    /** Inserts or updates an element */    add(t) {
	        return this.copy(this.data.remove(t).insert(t, !0));
	    }
	    /** Deletes an element */    delete(t) {
	        return this.has(t) ? this.copy(this.data.remove(t)) : this;
	    }
	    isEmpty() {
	        return this.data.isEmpty();
	    }
	    unionWith(t) {
	        let e = this;
	        // Make sure `result` always refers to the larger one of the two sets.
	                return e.size < t.size && (e = t, t = this), t.forEach((t => {
	            e = e.add(t);
	        })), e;
	    }
	    isEqual(t) {
	        if (!(t instanceof rn)) return !1;
	        if (this.size !== t.size) return !1;
	        const e = this.data.getIterator(), n = t.data.getIterator();
	        for (;e.hasNext(); ) {
	            const t = e.getNext().key, s = n.getNext().key;
	            if (0 !== this.comparator(t, s)) return !1;
	        }
	        return !0;
	    }
	    toArray() {
	        const t = [];
	        return this.forEach((e => {
	            t.push(e);
	        })), t;
	    }
	    toString() {
	        const t = [];
	        return this.forEach((e => t.push(e))), "SortedSet(" + t.toString() + ")";
	    }
	    copy(t) {
	        const e = new rn(this.comparator);
	        return e.data = t, e;
	    }
	}

	class on {
	    constructor(t) {
	        this.iter = t;
	    }
	    getNext() {
	        return this.iter.getNext().key;
	    }
	    hasNext() {
	        return this.iter.hasNext();
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const cn = new en(wt.comparator);

	function un() {
	    return cn;
	}

	const an = new en(wt.comparator);

	function hn() {
	    return an;
	}

	const ln = new en(wt.comparator);

	function fn() {
	    return ln;
	}

	const dn = new rn(wt.comparator);

	function wn(...t) {
	    let e = dn;
	    for (const n of t) e = e.add(n);
	    return e;
	}

	const _n = new rn(j);

	function mn() {
	    return _n;
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An event from the RemoteStore. It is split into targetChanges (changes to the
	 * state or the set of documents in our watched targets) and documentUpdates
	 * (changes to the actual documents).
	 */ class gn {
	    constructor(
	    /**
	     * The snapshot version this event brings us up to, or MIN if not set.
	     */
	    t, 
	    /**
	     * A map from target to changes to the target. See TargetChange.
	     */
	    e, 
	    /**
	     * A set of targets that is known to be inconsistent. Listens for these
	     * targets should be re-established without resume tokens.
	     */
	    n, 
	    /**
	     * A set of which documents have changed or been deleted, along with the
	     * doc's new values (if not deleted).
	     */
	    s, 
	    /**
	     * A set of which document updates are due only to limbo resolution targets.
	     */
	    i) {
	        this.snapshotVersion = t, this.targetChanges = e, this.targetMismatches = n, this.documentUpdates = s, 
	        this.resolvedLimboDocuments = i;
	    }
	    /**
	     * HACK: Views require RemoteEvents in order to determine whether the view is
	     * CURRENT, but secondary tabs don't receive remote events. So this method is
	     * used to create a synthesized RemoteEvent that can be used to apply a
	     * CURRENT status change to a View, for queries executed in a different tab.
	     */
	    // PORTING NOTE: Multi-tab only
	    static createSynthesizedRemoteEventForCurrentChange(t, e) {
	        const n = new Map;
	        return n.set(t, yn.createSynthesizedTargetChangeForCurrentChange(t, e)), new gn(z$1.min(), n, mn(), un(), wn());
	    }
	}

	/**
	 * A TargetChange specifies the set of changes for a specific target as part of
	 * a RemoteEvent. These changes track which documents are added, modified or
	 * removed, as well as the target's resume token and whether the target is
	 * marked CURRENT.
	 * The actual changes *to* documents are not part of the TargetChange since
	 * documents may be part of multiple targets.
	 */ class yn {
	    constructor(
	    /**
	     * An opaque, server-assigned token that allows watching a query to be resumed
	     * after disconnecting without retransmitting all the data that matches the
	     * query. The resume token essentially identifies a point in time from which
	     * the server should resume sending results.
	     */
	    t, 
	    /**
	     * The "current" (synced) status of this target. Note that "current"
	     * has special meaning in the RPC protocol that implies that a target is
	     * both up-to-date and consistent with the rest of the watch stream.
	     */
	    e, 
	    /**
	     * The set of documents that were newly assigned to this target as part of
	     * this remote event.
	     */
	    n, 
	    /**
	     * The set of documents that were already assigned to this target but received
	     * an update during this remote event.
	     */
	    s, 
	    /**
	     * The set of documents that were removed from this target as part of this
	     * remote event.
	     */
	    i) {
	        this.resumeToken = t, this.current = e, this.addedDocuments = n, this.modifiedDocuments = s, 
	        this.removedDocuments = i;
	    }
	    /**
	     * This method is used to create a synthesized TargetChanges that can be used to
	     * apply a CURRENT status change to a View (for queries executed in a different
	     * tab) or for new queries (to raise snapshots with correct CURRENT status).
	     */    static createSynthesizedTargetChangeForCurrentChange(t, e) {
	        return new yn(st.EMPTY_BYTE_STRING, e, wn(), wn(), wn());
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Represents a changed document and a list of target ids to which this change
	 * applies.
	 *
	 * If document has been deleted NoDocument will be provided.
	 */ class pn {
	    constructor(
	    /** The new document applies to all of these targets. */
	    t, 
	    /** The new document is removed from all of these targets. */
	    e, 
	    /** The key of the document for this change. */
	    n, 
	    /**
	     * The new document or NoDocument if it was deleted. Is null if the
	     * document went out of view without the server sending a new document.
	     */
	    s) {
	        this.P = t, this.removedTargetIds = e, this.key = n, this.v = s;
	    }
	}

	class En {
	    constructor(t, e) {
	        this.targetId = t, this.V = e;
	    }
	}

	class Tn {
	    constructor(
	    /** What kind of change occurred to the watch target. */
	    t, 
	    /** The target IDs that were added/removed/set. */
	    e, 
	    /**
	     * An opaque, server-assigned token that allows watching a target to be
	     * resumed after disconnecting without retransmitting all the data that
	     * matches the target. The resume token essentially identifies a point in
	     * time from which the server should resume sending results.
	     */
	    n = st.EMPTY_BYTE_STRING
	    /** An RPC error indicating why the watch failed. */ , s = null) {
	        this.state = t, this.targetIds = e, this.resumeToken = n, this.cause = s;
	    }
	}

	/** Tracks the internal state of a Watch target. */ class In {
	    constructor() {
	        /**
	         * The number of pending responses (adds or removes) that we are waiting on.
	         * We only consider targets active that have no pending responses.
	         */
	        this.S = 0, 
	        /**
	         * Keeps track of the document changes since the last raised snapshot.
	         *
	         * These changes are continuously updated as we receive document updates and
	         * always reflect the current set of changes against the last issued snapshot.
	         */
	        this.D = Pn(), 
	        /** See public getters for explanations of these fields. */
	        this.C = st.EMPTY_BYTE_STRING, this.N = !1, 
	        /**
	         * Whether this target state should be included in the next snapshot. We
	         * initialize to true so that newly-added targets are included in the next
	         * RemoteEvent.
	         */
	        this.k = !0;
	    }
	    /**
	     * Whether this target has been marked 'current'.
	     *
	     * 'Current' has special meaning in the RPC protocol: It implies that the
	     * Watch backend has sent us all changes up to the point at which the target
	     * was added and that the target is consistent with the rest of the watch
	     * stream.
	     */    get current() {
	        return this.N;
	    }
	    /** The last resume token sent to us for this target. */    get resumeToken() {
	        return this.C;
	    }
	    /** Whether this target has pending target adds or target removes. */    get $() {
	        return 0 !== this.S;
	    }
	    /** Whether we have modified any state that should trigger a snapshot. */    get O() {
	        return this.k;
	    }
	    /**
	     * Applies the resume token to the TargetChange, but only when it has a new
	     * value. Empty resumeTokens are discarded.
	     */    F(t) {
	        t.approximateByteSize() > 0 && (this.k = !0, this.C = t);
	    }
	    /**
	     * Creates a target change from the current set of changes.
	     *
	     * To reset the document changes after raising this snapshot, call
	     * `clearPendingChanges()`.
	     */    M() {
	        let t = wn(), e = wn(), n = wn();
	        return this.D.forEach(((s, i) => {
	            switch (i) {
	              case 0 /* Added */ :
	                t = t.add(s);
	                break;

	              case 2 /* Modified */ :
	                e = e.add(s);
	                break;

	              case 1 /* Removed */ :
	                n = n.add(s);
	                break;

	              default:
	                L();
	            }
	        })), new yn(this.C, this.N, t, e, n);
	    }
	    /**
	     * Resets the document changes and sets `hasPendingChanges` to false.
	     */    L() {
	        this.k = !1, this.D = Pn();
	    }
	    B(t, e) {
	        this.k = !0, this.D = this.D.insert(t, e);
	    }
	    U(t) {
	        this.k = !0, this.D = this.D.remove(t);
	    }
	    q() {
	        this.S += 1;
	    }
	    K() {
	        this.S -= 1;
	    }
	    j() {
	        this.k = !0, this.N = !0;
	    }
	}

	/**
	 * A helper class to accumulate watch changes into a RemoteEvent.
	 */
	class An {
	    constructor(t) {
	        this.W = t, 
	        /** The internal state of all tracked targets. */
	        this.G = new Map, 
	        /** Keeps track of the documents to update since the last raised snapshot. */
	        this.H = un(), 
	        /** A mapping of document keys to their set of target IDs. */
	        this.J = Rn(), 
	        /**
	         * A list of targets with existence filter mismatches. These targets are
	         * known to be inconsistent and their listens needs to be re-established by
	         * RemoteStore.
	         */
	        this.Y = new rn(j);
	    }
	    /**
	     * Processes and adds the DocumentWatchChange to the current set of changes.
	     */    X(t) {
	        for (const e of t.P) t.v && t.v.isFoundDocument() ? this.Z(e, t.v) : this.tt(e, t.key, t.v);
	        for (const e of t.removedTargetIds) this.tt(e, t.key, t.v);
	    }
	    /** Processes and adds the WatchTargetChange to the current set of changes. */    et(t) {
	        this.forEachTarget(t, (e => {
	            const n = this.nt(e);
	            switch (t.state) {
	              case 0 /* NoChange */ :
	                this.st(e) && n.F(t.resumeToken);
	                break;

	              case 1 /* Added */ :
	                // We need to decrement the number of pending acks needed from watch
	                // for this targetId.
	                n.K(), n.$ || 
	                // We have a freshly added target, so we need to reset any state
	                // that we had previously. This can happen e.g. when remove and add
	                // back a target for existence filter mismatches.
	                n.L(), n.F(t.resumeToken);
	                break;

	              case 2 /* Removed */ :
	                // We need to keep track of removed targets to we can post-filter and
	                // remove any target changes.
	                // We need to decrement the number of pending acks needed from watch
	                // for this targetId.
	                n.K(), n.$ || this.removeTarget(e);
	                break;

	              case 3 /* Current */ :
	                this.st(e) && (n.j(), n.F(t.resumeToken));
	                break;

	              case 4 /* Reset */ :
	                this.st(e) && (
	                // Reset the target and synthesizes removes for all existing
	                // documents. The backend will re-add any documents that still
	                // match the target before it sends the next global snapshot.
	                this.it(e), n.F(t.resumeToken));
	                break;

	              default:
	                L();
	            }
	        }));
	    }
	    /**
	     * Iterates over all targetIds that the watch change applies to: either the
	     * targetIds explicitly listed in the change or the targetIds of all currently
	     * active targets.
	     */    forEachTarget(t, e) {
	        t.targetIds.length > 0 ? t.targetIds.forEach(e) : this.G.forEach(((t, n) => {
	            this.st(n) && e(n);
	        }));
	    }
	    /**
	     * Handles existence filters and synthesizes deletes for filter mismatches.
	     * Targets that are invalidated by filter mismatches are added to
	     * `pendingTargetResets`.
	     */    rt(t) {
	        const e = t.targetId, n = t.V.count, s = this.ot(e);
	        if (s) {
	            const t = s.target;
	            if (Ft(t)) if (0 === n) {
	                // The existence filter told us the document does not exist. We deduce
	                // that this document does not exist and apply a deleted document to
	                // our updates. Without applying this deleted document there might be
	                // another query that will raise this document as part of a snapshot
	                // until it is resolved, essentially exposing inconsistency between
	                // queries.
	                const n = new wt(t.path);
	                this.tt(e, n, Ct.newNoDocument(n, z$1.min()));
	            } else B(1 === n); else {
	                this.ct(e) !== n && (
	                // Existence filter mismatch: We reset the mapping and raise a new
	                // snapshot with `isFromCache:true`.
	                this.it(e), this.Y = this.Y.add(e));
	            }
	        }
	    }
	    /**
	     * Converts the currently accumulated state into a remote event at the
	     * provided snapshot version. Resets the accumulated changes before returning.
	     */    ut(t) {
	        const e = new Map;
	        this.G.forEach(((n, s) => {
	            const i = this.ot(s);
	            if (i) {
	                if (n.current && Ft(i.target)) {
	                    // Document queries for document that don't exist can produce an empty
	                    // result set. To update our local cache, we synthesize a document
	                    // delete if we have not previously received the document. This
	                    // resolves the limbo state of the document, removing it from
	                    // limboDocumentRefs.
	                    // TODO(dimond): Ideally we would have an explicit lookup target
	                    // instead resulting in an explicit delete message and we could
	                    // remove this special logic.
	                    const e = new wt(i.target.path);
	                    null !== this.H.get(e) || this.at(s, e) || this.tt(s, e, Ct.newNoDocument(e, t));
	                }
	                n.O && (e.set(s, n.M()), n.L());
	            }
	        }));
	        let n = wn();
	        // We extract the set of limbo-only document updates as the GC logic
	        // special-cases documents that do not appear in the target cache.
	        
	        // TODO(gsoltis): Expand on this comment once GC is available in the JS
	        // client.
	                this.J.forEach(((t, e) => {
	            let s = !0;
	            e.forEachWhile((t => {
	                const e = this.ot(t);
	                return !e || 2 /* LimboResolution */ === e.purpose || (s = !1, !1);
	            })), s && (n = n.add(t));
	        }));
	        const s = new gn(t, e, this.Y, this.H, n);
	        return this.H = un(), this.J = Rn(), this.Y = new rn(j), s;
	    }
	    /**
	     * Adds the provided document to the internal list of document updates and
	     * its document key to the given target's mapping.
	     */
	    // Visible for testing.
	    Z(t, e) {
	        if (!this.st(t)) return;
	        const n = this.at(t, e.key) ? 2 /* Modified */ : 0 /* Added */;
	        this.nt(t).B(e.key, n), this.H = this.H.insert(e.key, e), this.J = this.J.insert(e.key, this.ht(e.key).add(t));
	    }
	    /**
	     * Removes the provided document from the target mapping. If the
	     * document no longer matches the target, but the document's state is still
	     * known (e.g. we know that the document was deleted or we received the change
	     * that caused the filter mismatch), the new document can be provided
	     * to update the remote document cache.
	     */
	    // Visible for testing.
	    tt(t, e, n) {
	        if (!this.st(t)) return;
	        const s = this.nt(t);
	        this.at(t, e) ? s.B(e, 1 /* Removed */) : 
	        // The document may have entered and left the target before we raised a
	        // snapshot, so we can just ignore the change.
	        s.U(e), this.J = this.J.insert(e, this.ht(e).delete(t)), n && (this.H = this.H.insert(e, n));
	    }
	    removeTarget(t) {
	        this.G.delete(t);
	    }
	    /**
	     * Returns the current count of documents in the target. This includes both
	     * the number of documents that the LocalStore considers to be part of the
	     * target as well as any accumulated changes.
	     */    ct(t) {
	        const e = this.nt(t).M();
	        return this.W.getRemoteKeysForTarget(t).size + e.addedDocuments.size - e.removedDocuments.size;
	    }
	    /**
	     * Increment the number of acks needed from watch before we can consider the
	     * server to be 'in-sync' with the client's active targets.
	     */    q(t) {
	        this.nt(t).q();
	    }
	    nt(t) {
	        let e = this.G.get(t);
	        return e || (e = new In, this.G.set(t, e)), e;
	    }
	    ht(t) {
	        let e = this.J.get(t);
	        return e || (e = new rn(j), this.J = this.J.insert(t, e)), e;
	    }
	    /**
	     * Verifies that the user is still interested in this target (by calling
	     * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
	     * from watch.
	     */    st(t) {
	        const e = null !== this.ot(t);
	        return e || $("WatchChangeAggregator", "Detected inactive target", t), e;
	    }
	    /**
	     * Returns the TargetData for an active target (i.e. a target that the user
	     * is still interested in that has no outstanding target change requests).
	     */    ot(t) {
	        const e = this.G.get(t);
	        return e && e.$ ? null : this.W.lt(t);
	    }
	    /**
	     * Resets the state of a Watch target to its initial state (e.g. sets
	     * 'current' to false, clears the resume token and removes its target mapping
	     * from all documents).
	     */    it(t) {
	        this.G.set(t, new In);
	        this.W.getRemoteKeysForTarget(t).forEach((e => {
	            this.tt(t, e, /*updatedDocument=*/ null);
	        }));
	    }
	    /**
	     * Returns whether the LocalStore considers the document to be part of the
	     * specified target.
	     */    at(t, e) {
	        return this.W.getRemoteKeysForTarget(t).has(e);
	    }
	}

	function Rn() {
	    return new en(wt.comparator);
	}

	function Pn() {
	    return new en(wt.comparator);
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const bn = (() => {
	    const t = {
	        asc: "ASCENDING",
	        desc: "DESCENDING"
	    };
	    return t;
	})(), vn = (() => {
	    const t = {
	        "<": "LESS_THAN",
	        "<=": "LESS_THAN_OR_EQUAL",
	        ">": "GREATER_THAN",
	        ">=": "GREATER_THAN_OR_EQUAL",
	        "==": "EQUAL",
	        "!=": "NOT_EQUAL",
	        "array-contains": "ARRAY_CONTAINS",
	        in: "IN",
	        "not-in": "NOT_IN",
	        "array-contains-any": "ARRAY_CONTAINS_ANY"
	    };
	    return t;
	})();

	/**
	 * This class generates JsonObject values for the Datastore API suitable for
	 * sending to either GRPC stub methods or via the JSON/HTTP REST API.
	 *
	 * The serializer supports both Protobuf.js and Proto3 JSON formats. By
	 * setting `useProto3Json` to true, the serializer will use the Proto3 JSON
	 * format.
	 *
	 * For a description of the Proto3 JSON format check
	 * https://developers.google.com/protocol-buffers/docs/proto3#json
	 *
	 * TODO(klimt): We can remove the databaseId argument if we keep the full
	 * resource name in documents.
	 */
	class Vn {
	    constructor(t, e) {
	        this.databaseId = t, this.I = e;
	    }
	}

	/**
	 * Returns a value for a Date that's appropriate to put into a proto.
	 */
	function Sn(t, e) {
	    if (t.I) {
	        return `${new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "")}.${("000000000" + e.nanoseconds).slice(-9)}Z`;
	    }
	    return {
	        seconds: "" + e.seconds,
	        nanos: e.nanoseconds
	    };
	}

	/**
	 * Returns a value for bytes that's appropriate to put in a proto.
	 *
	 * Visible for testing.
	 */
	function Dn(t, e) {
	    return t.I ? e.toBase64() : e.toUint8Array();
	}

	/**
	 * Returns a ByteString based on the proto string value.
	 */ function Cn(t, e) {
	    return Sn(t, e.toTimestamp());
	}

	function Nn(t) {
	    return B(!!t), z$1.fromTimestamp(function(t) {
	        const e = rt(t);
	        return new G(e.seconds, e.nanos);
	    }(t));
	}

	function xn(t, e) {
	    return function(t) {
	        return new Z([ "projects", t.projectId, "databases", t.database ]);
	    }(t).child("documents").child(e).canonicalString();
	}

	function kn(t) {
	    const e = Z.fromString(t);
	    return B(us(e)), e;
	}

	function $n(t, e) {
	    return xn(t.databaseId, e.path);
	}

	function On(t, e) {
	    const n = kn(e);
	    if (n.get(1) !== t.databaseId.projectId) throw new C(D.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n.get(1) + " vs " + t.databaseId.projectId);
	    if (n.get(3) !== t.databaseId.database) throw new C(D.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n.get(3) + " vs " + t.databaseId.database);
	    return new wt(Bn(n));
	}

	function Fn(t, e) {
	    return xn(t.databaseId, e);
	}

	function Mn(t) {
	    const e = kn(t);
	    // In v1beta1 queries for collections at the root did not have a trailing
	    // "/documents". In v1 all resource paths contain "/documents". Preserve the
	    // ability to read the v1beta1 form for compatibility with queries persisted
	    // in the local target cache.
	        return 4 === e.length ? Z.emptyPath() : Bn(e);
	}

	function Ln(t) {
	    return new Z([ "projects", t.databaseId.projectId, "databases", t.databaseId.database ]).canonicalString();
	}

	function Bn(t) {
	    return B(t.length > 4 && "documents" === t.get(4)), t.popFirst(5);
	}

	/** Creates a Document proto from key and fields (but no create/update time) */ function Un(t, e, n) {
	    return {
	        name: $n(t, e),
	        fields: n.value.mapValue.fields
	    };
	}

	function qn(t, e, n) {
	    const s = On(t, e.name), i = Nn(e.updateTime), r = new St({
	        mapValue: {
	            fields: e.fields
	        }
	    }), o = Ct.newFoundDocument(s, i, r);
	    return n && o.setHasCommittedMutations(), n ? o.setHasCommittedMutations() : o;
	}

	function jn(t, e) {
	    let n;
	    if ("targetChange" in e) {
	        e.targetChange;
	        // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'
	        // if unset
	        const s = function(t) {
	            return "NO_CHANGE" === t ? 0 /* NoChange */ : "ADD" === t ? 1 /* Added */ : "REMOVE" === t ? 2 /* Removed */ : "CURRENT" === t ? 3 /* Current */ : "RESET" === t ? 4 /* Reset */ : L();
	        }(e.targetChange.targetChangeType || "NO_CHANGE"), i = e.targetChange.targetIds || [], r = function(t, e) {
	            return t.I ? (B(void 0 === e || "string" == typeof e), st.fromBase64String(e || "")) : (B(void 0 === e || e instanceof Uint8Array), 
	            st.fromUint8Array(e || new Uint8Array));
	        }(t, e.targetChange.resumeToken), o = e.targetChange.cause, c = o && function(t) {
	            const e = void 0 === t.code ? D.UNKNOWN : tn(t.code);
	            return new C(e, t.message || "");
	        }
	        /**
	 * Returns a value for a number (or null) that's appropriate to put into
	 * a google.protobuf.Int32Value proto.
	 * DO NOT USE THIS FOR ANYTHING ELSE.
	 * This method cheats. It's typed as returning "number" because that's what
	 * our generated proto interfaces say Int32Value must be. But GRPC actually
	 * expects a { value: <number> } struct.
	 */ (o);
	        n = new Tn(s, i, r, c || null);
	    } else if ("documentChange" in e) {
	        e.documentChange;
	        const s = e.documentChange;
	        s.document, s.document.name, s.document.updateTime;
	        const i = On(t, s.document.name), r = Nn(s.document.updateTime), o = new St({
	            mapValue: {
	                fields: s.document.fields
	            }
	        }), c = Ct.newFoundDocument(i, r, o), u = s.targetIds || [], a = s.removedTargetIds || [];
	        n = new pn(u, a, c.key, c);
	    } else if ("documentDelete" in e) {
	        e.documentDelete;
	        const s = e.documentDelete;
	        s.document;
	        const i = On(t, s.document), r = s.readTime ? Nn(s.readTime) : z$1.min(), o = Ct.newNoDocument(i, r), c = s.removedTargetIds || [];
	        n = new pn([], c, o.key, o);
	    } else if ("documentRemove" in e) {
	        e.documentRemove;
	        const s = e.documentRemove;
	        s.document;
	        const i = On(t, s.document), r = s.removedTargetIds || [];
	        n = new pn([], r, i, null);
	    } else {
	        if (!("filter" in e)) return L();
	        {
	            e.filter;
	            const t = e.filter;
	            t.targetId;
	            const s = t.count || 0, i = new Je(s), r = t.targetId;
	            n = new En(r, i);
	        }
	    }
	    return n;
	}

	function Qn(t, e) {
	    let n;
	    if (e instanceof Ke) n = {
	        update: Un(t, e.key, e.value)
	    }; else if (e instanceof ze) n = {
	        delete: $n(t, e.key)
	    }; else if (e instanceof je) n = {
	        update: Un(t, e.key, e.data),
	        updateMask: cs(e.fieldMask)
	    }; else {
	        if (!(e instanceof He)) return L();
	        n = {
	            verify: $n(t, e.key)
	        };
	    }
	    return e.fieldTransforms.length > 0 && (n.updateTransforms = e.fieldTransforms.map((t => function(t, e) {
	        const n = e.transform;
	        if (n instanceof Re) return {
	            fieldPath: e.field.canonicalString(),
	            setToServerValue: "REQUEST_TIME"
	        };
	        if (n instanceof Pe) return {
	            fieldPath: e.field.canonicalString(),
	            appendMissingElements: {
	                values: n.elements
	            }
	        };
	        if (n instanceof ve) return {
	            fieldPath: e.field.canonicalString(),
	            removeAllFromArray: {
	                values: n.elements
	            }
	        };
	        if (n instanceof Se) return {
	            fieldPath: e.field.canonicalString(),
	            increment: n.A
	        };
	        throw L();
	    }(0, t)))), e.precondition.isNone || (n.currentDocument = function(t, e) {
	        return void 0 !== e.updateTime ? {
	            updateTime: Cn(t, e.updateTime)
	        } : void 0 !== e.exists ? {
	            exists: e.exists
	        } : L();
	    }(t, e.precondition)), n;
	}

	function Wn(t, e) {
	    const n = e.currentDocument ? function(t) {
	        return void 0 !== t.updateTime ? $e.updateTime(Nn(t.updateTime)) : void 0 !== t.exists ? $e.exists(t.exists) : $e.none();
	    }(e.currentDocument) : $e.none(), s = e.updateTransforms ? e.updateTransforms.map((e => function(t, e) {
	        let n = null;
	        if ("setToServerValue" in e) B("REQUEST_TIME" === e.setToServerValue), n = new Re; else if ("appendMissingElements" in e) {
	            const t = e.appendMissingElements.values || [];
	            n = new Pe(t);
	        } else if ("removeAllFromArray" in e) {
	            const t = e.removeAllFromArray.values || [];
	            n = new ve(t);
	        } else "increment" in e ? n = new Se(t, e.increment) : L();
	        const s = et.fromServerFormat(e.fieldPath);
	        return new Ne(s, n);
	    }(t, e))) : [];
	    if (e.update) {
	        e.update.name;
	        const i = On(t, e.update.name), r = new St({
	            mapValue: {
	                fields: e.update.fields
	            }
	        });
	        if (e.updateMask) {
	            const t = function(t) {
	                const e = t.fieldPaths || [];
	                return new nt(e.map((t => et.fromServerFormat(t))));
	            }(e.updateMask);
	            return new je(i, r, t, n, s);
	        }
	        return new Ke(i, r, n, s);
	    }
	    if (e.delete) {
	        const s = On(t, e.delete);
	        return new ze(s, n);
	    }
	    if (e.verify) {
	        const s = On(t, e.verify);
	        return new He(s, n);
	    }
	    return L();
	}

	function Gn(t, e) {
	    return t && t.length > 0 ? (B(void 0 !== e), t.map((t => function(t, e) {
	        // NOTE: Deletes don't have an updateTime.
	        let n = t.updateTime ? Nn(t.updateTime) : Nn(e);
	        return n.isEqual(z$1.min()) && (
	        // The Firestore Emulator currently returns an update time of 0 for
	        // deletes of non-existing documents (rather than null). This breaks the
	        // test "get deleted doc while offline with source=cache" as NoDocuments
	        // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
	        // TODO(#2149): Remove this when Emulator is fixed
	        n = Nn(e)), new ke(n, t.transformResults || []);
	    }(t, e)))) : [];
	}

	function zn(t, e) {
	    return {
	        documents: [ Fn(t, e.path) ]
	    };
	}

	function Hn(t, e) {
	    // Dissect the path into parent, collectionId, and optional key filter.
	    const n = {
	        structuredQuery: {}
	    }, s = e.path;
	    null !== e.collectionGroup ? (n.parent = Fn(t, s), n.structuredQuery.from = [ {
	        collectionId: e.collectionGroup,
	        allDescendants: !0
	    } ]) : (n.parent = Fn(t, s.popLast()), n.structuredQuery.from = [ {
	        collectionId: s.lastSegment()
	    } ]);
	    const i = function(t) {
	        if (0 === t.length) return;
	        const e = t.map((t => 
	        // visible for testing
	        function(t) {
	            if ("==" /* EQUAL */ === t.op) {
	                if (bt(t.value)) return {
	                    unaryFilter: {
	                        field: ss(t.field),
	                        op: "IS_NAN"
	                    }
	                };
	                if (Pt(t.value)) return {
	                    unaryFilter: {
	                        field: ss(t.field),
	                        op: "IS_NULL"
	                    }
	                };
	            } else if ("!=" /* NOT_EQUAL */ === t.op) {
	                if (bt(t.value)) return {
	                    unaryFilter: {
	                        field: ss(t.field),
	                        op: "IS_NOT_NAN"
	                    }
	                };
	                if (Pt(t.value)) return {
	                    unaryFilter: {
	                        field: ss(t.field),
	                        op: "IS_NOT_NULL"
	                    }
	                };
	            }
	            return {
	                fieldFilter: {
	                    field: ss(t.field),
	                    op: ns(t.op),
	                    value: t.value
	                }
	            };
	        }(t)));
	        if (1 === e.length) return e[0];
	        return {
	            compositeFilter: {
	                op: "AND",
	                filters: e
	            }
	        };
	    }(e.filters);
	    i && (n.structuredQuery.where = i);
	    const r = function(t) {
	        if (0 === t.length) return;
	        return t.map((t => 
	        // visible for testing
	        function(t) {
	            return {
	                field: ss(t.field),
	                direction: es(t.dir)
	            };
	        }(t)));
	    }(e.orderBy);
	    r && (n.structuredQuery.orderBy = r);
	    const o = function(t, e) {
	        return t.I || lt(e) ? e : {
	            value: e
	        };
	    }
	    /**
	 * Returns a number (or null) from a google.protobuf.Int32Value proto.
	 */ (t, e.limit);
	    return null !== o && (n.structuredQuery.limit = o), e.startAt && (n.structuredQuery.startAt = Zn(e.startAt)), 
	    e.endAt && (n.structuredQuery.endAt = Zn(e.endAt)), n;
	}

	function Jn(t) {
	    let e = Mn(t.parent);
	    const n = t.structuredQuery, s = n.from ? n.from.length : 0;
	    let i = null;
	    if (s > 0) {
	        B(1 === s);
	        const t = n.from[0];
	        t.allDescendants ? i = t.collectionId : e = e.child(t.collectionId);
	    }
	    let r = [];
	    n.where && (r = Xn(n.where));
	    let o = [];
	    n.orderBy && (o = n.orderBy.map((t => function(t) {
	        return new Jt(is(t.field), 
	        // visible for testing
	        function(t) {
	            switch (t) {
	              case "ASCENDING":
	                return "asc" /* ASCENDING */;

	              case "DESCENDING":
	                return "desc" /* DESCENDING */;

	              default:
	                return;
	            }
	        }
	        // visible for testing
	        (t.direction));
	    }(t))));
	    let c = null;
	    n.limit && (c = function(t) {
	        let e;
	        return e = "object" == typeof t ? t.value : t, lt(e) ? null : e;
	    }(n.limit));
	    let u = null;
	    n.startAt && (u = ts(n.startAt));
	    let a = null;
	    return n.endAt && (a = ts(n.endAt)), ee(e, i, o, r, c, "F" /* First */ , u, a);
	}

	function Yn(t, e) {
	    const n = function(t, e) {
	        switch (e) {
	          case 0 /* Listen */ :
	            return null;

	          case 1 /* ExistenceFilterMismatch */ :
	            return "existence-filter-mismatch";

	          case 2 /* LimboResolution */ :
	            return "limbo-document";

	          default:
	            return L();
	        }
	    }(0, e.purpose);
	    return null == n ? null : {
	        "goog-listen-tags": n
	    };
	}

	function Xn(t) {
	    return t ? void 0 !== t.unaryFilter ? [ os(t) ] : void 0 !== t.fieldFilter ? [ rs(t) ] : void 0 !== t.compositeFilter ? t.compositeFilter.filters.map((t => Xn(t))).reduce(((t, e) => t.concat(e))) : L() : [];
	}

	function Zn(t) {
	    return {
	        before: t.before,
	        values: t.position
	    };
	}

	function ts(t) {
	    const e = !!t.before, n = t.values || [];
	    return new zt(n, e);
	}

	// visible for testing
	function es(t) {
	    return bn[t];
	}

	function ns(t) {
	    return vn[t];
	}

	function ss(t) {
	    return {
	        fieldPath: t.canonicalString()
	    };
	}

	function is(t) {
	    return et.fromServerFormat(t.fieldPath);
	}

	function rs(t) {
	    return Mt.create(is(t.fieldFilter.field), function(t) {
	        switch (t) {
	          case "EQUAL":
	            return "==" /* EQUAL */;

	          case "NOT_EQUAL":
	            return "!=" /* NOT_EQUAL */;

	          case "GREATER_THAN":
	            return ">" /* GREATER_THAN */;

	          case "GREATER_THAN_OR_EQUAL":
	            return ">=" /* GREATER_THAN_OR_EQUAL */;

	          case "LESS_THAN":
	            return "<" /* LESS_THAN */;

	          case "LESS_THAN_OR_EQUAL":
	            return "<=" /* LESS_THAN_OR_EQUAL */;

	          case "ARRAY_CONTAINS":
	            return "array-contains" /* ARRAY_CONTAINS */;

	          case "IN":
	            return "in" /* IN */;

	          case "NOT_IN":
	            return "not-in" /* NOT_IN */;

	          case "ARRAY_CONTAINS_ANY":
	            return "array-contains-any" /* ARRAY_CONTAINS_ANY */;

	          case "OPERATOR_UNSPECIFIED":
	          default:
	            return L();
	        }
	    }(t.fieldFilter.op), t.fieldFilter.value);
	}

	function os(t) {
	    switch (t.unaryFilter.op) {
	      case "IS_NAN":
	        const e = is(t.unaryFilter.field);
	        return Mt.create(e, "==" /* EQUAL */ , {
	            doubleValue: NaN
	        });

	      case "IS_NULL":
	        const n = is(t.unaryFilter.field);
	        return Mt.create(n, "==" /* EQUAL */ , {
	            nullValue: "NULL_VALUE"
	        });

	      case "IS_NOT_NAN":
	        const s = is(t.unaryFilter.field);
	        return Mt.create(s, "!=" /* NOT_EQUAL */ , {
	            doubleValue: NaN
	        });

	      case "IS_NOT_NULL":
	        const i = is(t.unaryFilter.field);
	        return Mt.create(i, "!=" /* NOT_EQUAL */ , {
	            nullValue: "NULL_VALUE"
	        });

	      case "OPERATOR_UNSPECIFIED":
	      default:
	        return L();
	    }
	}

	function cs(t) {
	    const e = [];
	    return t.fields.forEach((t => e.push(t.canonicalString()))), {
	        fieldPaths: e
	    };
	}

	function us(t) {
	    // Resource names have at least 4 components (project ID, database ID)
	    return t.length >= 4 && "projects" === t.get(0) && "databases" === t.get(2);
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Encodes a resource path into a IndexedDb-compatible string form.
	 */
	function as(t) {
	    let e = "";
	    for (let n = 0; n < t.length; n++) e.length > 0 && (e = ls(e)), e = hs(t.get(n), e);
	    return ls(e);
	}

	/** Encodes a single segment of a resource path into the given result */ function hs(t, e) {
	    let n = e;
	    const s = t.length;
	    for (let e = 0; e < s; e++) {
	        const s = t.charAt(e);
	        switch (s) {
	          case "\0":
	            n += "";
	            break;

	          case "":
	            n += "";
	            break;

	          default:
	            n += s;
	        }
	    }
	    return n;
	}

	/** Encodes a path separator into the given result */ function ls(t) {
	    return t + "";
	}

	/**
	 * Decodes the given IndexedDb-compatible string form of a resource path into
	 * a ResourcePath instance. Note that this method is not suitable for use with
	 * decoding resource names from the server; those are One Platform format
	 * strings.
	 */ function fs(t) {
	    // Event the empty path must encode as a path of at least length 2. A path
	    // with exactly 2 must be the empty path.
	    const e = t.length;
	    if (B(e >= 2), 2 === e) return B("" === t.charAt(0) && "" === t.charAt(1)), Z.emptyPath();
	    // Escape characters cannot exist past the second-to-last position in the
	    // source value.
	        const n = e - 2, s = [];
	    let i = "";
	    for (let r = 0; r < e; ) {
	        // The last two characters of a valid encoded path must be a separator, so
	        // there must be an end to this segment.
	        const e = t.indexOf("", r);
	        (e < 0 || e > n) && L();
	        switch (t.charAt(e + 1)) {
	          case "":
	            const n = t.substring(r, e);
	            let o;
	            0 === i.length ? 
	            // Avoid copying for the common case of a segment that excludes \0
	            // and \001
	            o = n : (i += n, o = i, i = ""), s.push(o);
	            break;

	          case "":
	            i += t.substring(r, e), i += "\0";
	            break;

	          case "":
	            // The escape character can be used in the output to encode itself.
	            i += t.substring(r, e + 1);
	            break;

	          default:
	            L();
	        }
	        r = e + 2;
	    }
	    return new Z(s);
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Schema Version for the Web client:
	 * 1.  Initial version including Mutation Queue, Query Cache, and Remote
	 *     Document Cache
	 * 2.  Used to ensure a targetGlobal object exists and add targetCount to it. No
	 *     longer required because migration 3 unconditionally clears it.
	 * 3.  Dropped and re-created Query Cache to deal with cache corruption related
	 *     to limbo resolution. Addresses
	 *     https://github.com/firebase/firebase-ios-sdk/issues/1548
	 * 4.  Multi-Tab Support.
	 * 5.  Removal of held write acks.
	 * 6.  Create document global for tracking document cache size.
	 * 7.  Ensure every cached document has a sentinel row with a sequence number.
	 * 8.  Add collection-parent index for Collection Group queries.
	 * 9.  Change RemoteDocumentChanges store to be keyed by readTime rather than
	 *     an auto-incrementing ID. This is required for Index-Free queries.
	 * 10. Rewrite the canonical IDs to the explicit Protobuf-based format.
	 * 11. Add bundles and named_queries for bundle support.
	 */
	/**
	 * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.
	 */
	class ds {
	    constructor(t, e) {
	        this.seconds = t, this.nanoseconds = e;
	    }
	}

	/**
	 * A singleton object to be stored in the 'owner' store in IndexedDb.
	 *
	 * A given database can have a single primary tab assigned at a given time. That
	 * tab must validate that it is still holding the primary lease before every
	 * operation that requires locked access. The primary tab should regularly
	 * write an updated timestamp to this lease to prevent other tabs from
	 * "stealing" the primary lease
	 */ class ws {
	    constructor(t, 
	    /** Whether to allow shared access from multiple tabs. */
	    e, n) {
	        this.ownerId = t, this.allowTabSynchronization = e, this.leaseTimestampMs = n;
	    }
	}

	/**
	 * Name of the IndexedDb object store.
	 *
	 * Note that the name 'owner' is chosen to ensure backwards compatibility with
	 * older clients that only supported single locked access to the persistence
	 * layer.
	 */ ws.store = "owner", 
	/**
	 * The key string used for the single object that exists in the
	 * DbPrimaryClient store.
	 */
	ws.key = "owner";

	/**
	 * An object to be stored in the 'mutationQueues' store in IndexedDb.
	 *
	 * Each user gets a single queue of MutationBatches to apply to the server.
	 * DbMutationQueue tracks the metadata about the queue.
	 */
	class _s {
	    constructor(
	    /**
	     * The normalized user ID to which this queue belongs.
	     */
	    t, 
	    /**
	     * An identifier for the highest numbered batch that has been acknowledged
	     * by the server. All MutationBatches in this queue with batchIds less
	     * than or equal to this value are considered to have been acknowledged by
	     * the server.
	     *
	     * NOTE: this is deprecated and no longer used by the code.
	     */
	    e, 
	    /**
	     * A stream token that was previously sent by the server.
	     *
	     * See StreamingWriteRequest in datastore.proto for more details about
	     * usage.
	     *
	     * After sending this token, earlier tokens may not be used anymore so
	     * only a single stream token is retained.
	     *
	     * NOTE: this is deprecated and no longer used by the code.
	     */
	    n) {
	        this.userId = t, this.lastAcknowledgedBatchId = e, this.lastStreamToken = n;
	    }
	}

	/** Name of the IndexedDb object store.  */ _s.store = "mutationQueues", 
	/** Keys are automatically assigned via the userId property. */
	_s.keyPath = "userId";

	/**
	 * An object to be stored in the 'mutations' store in IndexedDb.
	 *
	 * Represents a batch of user-level mutations intended to be sent to the server
	 * in a single write. Each user-level batch gets a separate DbMutationBatch
	 * with a new batchId.
	 */
	class ms {
	    constructor(
	    /**
	     * The normalized user ID to which this batch belongs.
	     */
	    t, 
	    /**
	     * An identifier for this batch, allocated using an auto-generated key.
	     */
	    e, 
	    /**
	     * The local write time of the batch, stored as milliseconds since the
	     * epoch.
	     */
	    n, 
	    /**
	     * A list of "mutations" that represent a partial base state from when this
	     * write batch was initially created. During local application of the write
	     * batch, these baseMutations are applied prior to the real writes in order
	     * to override certain document fields from the remote document cache. This
	     * is necessary in the case of non-idempotent writes (e.g. `increment()`
	     * transforms) to make sure that the local view of the modified documents
	     * doesn't flicker if the remote document cache receives the result of the
	     * non-idempotent write before the write is removed from the queue.
	     *
	     * These mutations are never sent to the backend.
	     */
	    s, 
	    /**
	     * A list of mutations to apply. All mutations will be applied atomically.
	     *
	     * Mutations are serialized via toMutation().
	     */
	    i) {
	        this.userId = t, this.batchId = e, this.localWriteTimeMs = n, this.baseMutations = s, 
	        this.mutations = i;
	    }
	}

	/** Name of the IndexedDb object store.  */ ms.store = "mutations", 
	/** Keys are automatically assigned via the userId, batchId properties. */
	ms.keyPath = "batchId", 
	/** The index name for lookup of mutations by user. */
	ms.userMutationsIndex = "userMutationsIndex", 
	/** The user mutations index is keyed by [userId, batchId] pairs. */
	ms.userMutationsKeyPath = [ "userId", "batchId" ];

	/**
	 * An object to be stored in the 'documentMutations' store in IndexedDb.
	 *
	 * A manually maintained index of all the mutation batches that affect a given
	 * document key. The rows in this table are references based on the contents of
	 * DbMutationBatch.mutations.
	 */
	class gs {
	    constructor() {}
	    /**
	     * Creates a [userId] key for use in the DbDocumentMutations index to iterate
	     * over all of a user's document mutations.
	     */    static prefixForUser(t) {
	        return [ t ];
	    }
	    /**
	     * Creates a [userId, encodedPath] key for use in the DbDocumentMutations
	     * index to iterate over all at document mutations for a given path or lower.
	     */    static prefixForPath(t, e) {
	        return [ t, as(e) ];
	    }
	    /**
	     * Creates a full index key of [userId, encodedPath, batchId] for inserting
	     * and deleting into the DbDocumentMutations index.
	     */    static key(t, e, n) {
	        return [ t, as(e), n ];
	    }
	}

	gs.store = "documentMutations", 
	/**
	 * Because we store all the useful information for this store in the key,
	 * there is no useful information to store as the value. The raw (unencoded)
	 * path cannot be stored because IndexedDb doesn't store prototype
	 * information.
	 */
	gs.PLACEHOLDER = new gs;

	/**
	 * Represents the known absence of a document at a particular version.
	 * Stored in IndexedDb as part of a DbRemoteDocument object.
	 */
	class ys {
	    constructor(t, e) {
	        this.path = t, this.readTime = e;
	    }
	}

	/**
	 * Represents a document that is known to exist but whose data is unknown.
	 * Stored in IndexedDb as part of a DbRemoteDocument object.
	 */ class ps {
	    constructor(t, e) {
	        this.path = t, this.version = e;
	    }
	}

	/**
	 * An object to be stored in the 'remoteDocuments' store in IndexedDb.
	 * It represents either:
	 *
	 * - A complete document.
	 * - A "no document" representing a document that is known not to exist (at
	 * some version).
	 * - An "unknown document" representing a document that is known to exist (at
	 * some version) but whose contents are unknown.
	 *
	 * Note: This is the persisted equivalent of a MaybeDocument and could perhaps
	 * be made more general if necessary.
	 */ class Es {
	    // TODO: We are currently storing full document keys almost three times
	    // (once as part of the primary key, once - partly - as `parentPath` and once
	    // inside the encoded documents). During our next migration, we should
	    // rewrite the primary key as parentPath + document ID which would allow us
	    // to drop one value.
	    constructor(
	    /**
	     * Set to an instance of DbUnknownDocument if the data for a document is
	     * not known, but it is known that a document exists at the specified
	     * version (e.g. it had a successful update applied to it)
	     */
	    t, 
	    /**
	     * Set to an instance of a DbNoDocument if it is known that no document
	     * exists.
	     */
	    e, 
	    /**
	     * Set to an instance of a Document if there's a cached version of the
	     * document.
	     */
	    n, 
	    /**
	     * Documents that were written to the remote document store based on
	     * a write acknowledgment are marked with `hasCommittedMutations`. These
	     * documents are potentially inconsistent with the backend's copy and use
	     * the write's commit version as their document version.
	     */
	    s, 
	    /**
	     * When the document was read from the backend. Undefined for data written
	     * prior to schema version 9.
	     */
	    i, 
	    /**
	     * The path of the collection this document is part of. Undefined for data
	     * written prior to schema version 9.
	     */
	    r) {
	        this.unknownDocument = t, this.noDocument = e, this.document = n, this.hasCommittedMutations = s, 
	        this.readTime = i, this.parentPath = r;
	    }
	}

	Es.store = "remoteDocuments", 
	/**
	 * An index that provides access to all entries sorted by read time (which
	 * corresponds to the last modification time of each row).
	 *
	 * This index is used to provide a changelog for Multi-Tab.
	 */
	Es.readTimeIndex = "readTimeIndex", Es.readTimeIndexPath = "readTime", 
	/**
	 * An index that provides access to documents in a collection sorted by read
	 * time.
	 *
	 * This index is used to allow the RemoteDocumentCache to fetch newly changed
	 * documents in a collection.
	 */
	Es.collectionReadTimeIndex = "collectionReadTimeIndex", Es.collectionReadTimeIndexPath = [ "parentPath", "readTime" ];

	/**
	 * Contains a single entry that has metadata about the remote document cache.
	 */
	class Ts {
	    /**
	     * @param byteSize - Approximately the total size in bytes of all the
	     * documents in the document cache.
	     */
	    constructor(t) {
	        this.byteSize = t;
	    }
	}

	Ts.store = "remoteDocumentGlobal", Ts.key = "remoteDocumentGlobalKey";

	/**
	 * An object to be stored in the 'targets' store in IndexedDb.
	 *
	 * This is based on and should be kept in sync with the proto used in the iOS
	 * client.
	 *
	 * Each query the client listens to against the server is tracked on disk so
	 * that the query can be efficiently resumed on restart.
	 */
	class Is {
	    constructor(
	    /**
	     * An auto-generated sequential numeric identifier for the query.
	     *
	     * Queries are stored using their canonicalId as the key, but these
	     * canonicalIds can be quite long so we additionally assign a unique
	     * queryId which can be used by referenced data structures (e.g.
	     * indexes) to minimize the on-disk cost.
	     */
	    t, 
	    /**
	     * The canonical string representing this query. This is not unique.
	     */
	    e, 
	    /**
	     * The last readTime received from the Watch Service for this query.
	     *
	     * This is the same value as TargetChange.read_time in the protos.
	     */
	    n, 
	    /**
	     * An opaque, server-assigned token that allows watching a query to be
	     * resumed after disconnecting without retransmitting all the data
	     * that matches the query. The resume token essentially identifies a
	     * point in time from which the server should resume sending results.
	     *
	     * This is related to the snapshotVersion in that the resumeToken
	     * effectively also encodes that value, but the resumeToken is opaque
	     * and sometimes encodes additional information.
	     *
	     * A consequence of this is that the resumeToken should be used when
	     * asking the server to reason about where this client is in the watch
	     * stream, but the client should use the snapshotVersion for its own
	     * purposes.
	     *
	     * This is the same value as TargetChange.resume_token in the protos.
	     */
	    s, 
	    /**
	     * A sequence number representing the last time this query was
	     * listened to, used for garbage collection purposes.
	     *
	     * Conventionally this would be a timestamp value, but device-local
	     * clocks are unreliable and they must be able to create new listens
	     * even while disconnected. Instead this should be a monotonically
	     * increasing number that's incremented on each listen call.
	     *
	     * This is different from the queryId since the queryId is an
	     * immutable identifier assigned to the Query on first use while
	     * lastListenSequenceNumber is updated every time the query is
	     * listened to.
	     */
	    i, 
	    /**
	     * Denotes the maximum snapshot version at which the associated query view
	     * contained no limbo documents.  Undefined for data written prior to
	     * schema version 9.
	     */
	    r, 
	    /**
	     * The query for this target.
	     *
	     * Because canonical ids are not unique we must store the actual query. We
	     * use the proto to have an object we can persist without having to
	     * duplicate translation logic to and from a `Query` object.
	     */
	    o) {
	        this.targetId = t, this.canonicalId = e, this.readTime = n, this.resumeToken = s, 
	        this.lastListenSequenceNumber = i, this.lastLimboFreeSnapshotVersion = r, this.query = o;
	    }
	}

	Is.store = "targets", 
	/** Keys are automatically assigned via the targetId property. */
	Is.keyPath = "targetId", 
	/** The name of the queryTargets index. */
	Is.queryTargetsIndexName = "queryTargetsIndex", 
	/**
	 * The index of all canonicalIds to the targets that they match. This is not
	 * a unique mapping because canonicalId does not promise a unique name for all
	 * possible queries, so we append the targetId to make the mapping unique.
	 */
	Is.queryTargetsKeyPath = [ "canonicalId", "targetId" ];

	/**
	 * An object representing an association between a target and a document, or a
	 * sentinel row marking the last sequence number at which a document was used.
	 * Each document cached must have a corresponding sentinel row before lru
	 * garbage collection is enabled.
	 *
	 * The target associations and sentinel rows are co-located so that orphaned
	 * documents and their sequence numbers can be identified efficiently via a scan
	 * of this store.
	 */
	class As {
	    constructor(
	    /**
	     * The targetId identifying a target or 0 for a sentinel row.
	     */
	    t, 
	    /**
	     * The path to the document, as encoded in the key.
	     */
	    e, 
	    /**
	     * If this is a sentinel row, this should be the sequence number of the last
	     * time the document specified by `path` was used. Otherwise, it should be
	     * `undefined`.
	     */
	    n) {
	        this.targetId = t, this.path = e, this.sequenceNumber = n;
	    }
	}

	/** Name of the IndexedDb object store.  */ As.store = "targetDocuments", 
	/** Keys are automatically assigned via the targetId, path properties. */
	As.keyPath = [ "targetId", "path" ], 
	/** The index name for the reverse index. */
	As.documentTargetsIndex = "documentTargetsIndex", 
	/** We also need to create the reverse index for these properties. */
	As.documentTargetsKeyPath = [ "path", "targetId" ];

	/**
	 * A record of global state tracked across all Targets, tracked separately
	 * to avoid the need for extra indexes.
	 *
	 * This should be kept in-sync with the proto used in the iOS client.
	 */
	class Rs {
	    constructor(
	    /**
	     * The highest numbered target id across all targets.
	     *
	     * See DbTarget.targetId.
	     */
	    t, 
	    /**
	     * The highest numbered lastListenSequenceNumber across all targets.
	     *
	     * See DbTarget.lastListenSequenceNumber.
	     */
	    e, 
	    /**
	     * A global snapshot version representing the last consistent snapshot we
	     * received from the backend. This is monotonically increasing and any
	     * snapshots received from the backend prior to this version (e.g. for
	     * targets resumed with a resumeToken) should be suppressed (buffered)
	     * until the backend has caught up to this snapshot version again. This
	     * prevents our cache from ever going backwards in time.
	     */
	    n, 
	    /**
	     * The number of targets persisted.
	     */
	    s) {
	        this.highestTargetId = t, this.highestListenSequenceNumber = e, this.lastRemoteSnapshotVersion = n, 
	        this.targetCount = s;
	    }
	}

	/**
	 * The key string used for the single object that exists in the
	 * DbTargetGlobal store.
	 */ Rs.key = "targetGlobalKey", Rs.store = "targetGlobal";

	/**
	 * An object representing an association between a Collection id (e.g. 'messages')
	 * to a parent path (e.g. '/chats/123') that contains it as a (sub)collection.
	 * This is used to efficiently find all collections to query when performing
	 * a Collection Group query.
	 */
	class Ps {
	    constructor(
	    /**
	     * The collectionId (e.g. 'messages')
	     */
	    t, 
	    /**
	     * The path to the parent (either a document location or an empty path for
	     * a root-level collection).
	     */
	    e) {
	        this.collectionId = t, this.parent = e;
	    }
	}

	/** Name of the IndexedDb object store. */ Ps.store = "collectionParents", 
	/** Keys are automatically assigned via the collectionId, parent properties. */
	Ps.keyPath = [ "collectionId", "parent" ];

	/**
	 * A record of the metadata state of each client.
	 *
	 * PORTING NOTE: This is used to synchronize multi-tab state and does not need
	 * to be ported to iOS or Android.
	 */
	class bs {
	    constructor(
	    // Note: Previous schema versions included a field
	    // "lastProcessedDocumentChangeId". Don't use anymore.
	    /** The auto-generated client id assigned at client startup. */
	    t, 
	    /** The last time this state was updated. */
	    e, 
	    /** Whether the client's network connection is enabled. */
	    n, 
	    /** Whether this client is running in a foreground tab. */
	    s) {
	        this.clientId = t, this.updateTimeMs = e, this.networkEnabled = n, this.inForeground = s;
	    }
	}

	/** Name of the IndexedDb object store. */ bs.store = "clientMetadata", 
	/** Keys are automatically assigned via the clientId properties. */
	bs.keyPath = "clientId";

	/**
	 * A object representing a bundle loaded by the SDK.
	 */
	class vs {
	    constructor(
	    /** The ID of the loaded bundle. */
	    t, 
	    /** The create time of the loaded bundle. */
	    e, 
	    /** The schema version of the loaded bundle. */
	    n) {
	        this.bundleId = t, this.createTime = e, this.version = n;
	    }
	}

	/** Name of the IndexedDb object store. */ vs.store = "bundles", vs.keyPath = "bundleId";

	/**
	 * A object representing a named query loaded by the SDK via a bundle.
	 */
	class Vs {
	    constructor(
	    /** The name of the query. */
	    t, 
	    /** The read time of the results saved in the bundle from the named query. */
	    e, 
	    /** The query saved in the bundle. */
	    n) {
	        this.name = t, this.readTime = e, this.bundledQuery = n;
	    }
	}

	/** Name of the IndexedDb object store. */ Vs.store = "namedQueries", Vs.keyPath = "name";

	// Visible for testing
	const Ss = [ ...[ ...[ ...[ ...[ _s.store, ms.store, gs.store, Es.store, Is.store, ws.store, Rs.store, As.store ], bs.store ], Ts.store ], Ps.store ], vs.store, Vs.store ], Ds = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";

	// V2 is no longer usable (see comment at top of file)
	// Visible for testing
	/**
	 * A base class representing a persistence transaction, encapsulating both the
	 * transaction's sequence numbers as well as a list of onCommitted listeners.
	 *
	 * When you call Persistence.runTransaction(), it will create a transaction and
	 * pass it to your callback. You then pass it to any method that operates
	 * on persistence.
	 */
	class Cs {
	    constructor() {
	        this.onCommittedListeners = [];
	    }
	    addOnCommittedListener(t) {
	        this.onCommittedListeners.push(t);
	    }
	    raiseOnCommittedEvent() {
	        this.onCommittedListeners.forEach((t => t()));
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class Ns {
	    constructor() {
	        this.promise = new Promise(((t, e) => {
	            this.resolve = t, this.reject = e;
	        }));
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * PersistencePromise is essentially a re-implementation of Promise except
	 * it has a .next() method instead of .then() and .next() and .catch() callbacks
	 * are executed synchronously when a PersistencePromise resolves rather than
	 * asynchronously (Promise implementations use setImmediate() or similar).
	 *
	 * This is necessary to interoperate with IndexedDB which will automatically
	 * commit transactions if control is returned to the event loop without
	 * synchronously initiating another operation on the transaction.
	 *
	 * NOTE: .then() and .catch() only allow a single consumer, unlike normal
	 * Promises.
	 */ class xs {
	    constructor(t) {
	        // NOTE: next/catchCallback will always point to our own wrapper functions,
	        // not the user's raw next() or catch() callbacks.
	        this.nextCallback = null, this.catchCallback = null, 
	        // When the operation resolves, we'll set result or error and mark isDone.
	        this.result = void 0, this.error = void 0, this.isDone = !1, 
	        // Set to true when .then() or .catch() are called and prevents additional
	        // chaining.
	        this.callbackAttached = !1, t((t => {
	            this.isDone = !0, this.result = t, this.nextCallback && 
	            // value should be defined unless T is Void, but we can't express
	            // that in the type system.
	            this.nextCallback(t);
	        }), (t => {
	            this.isDone = !0, this.error = t, this.catchCallback && this.catchCallback(t);
	        }));
	    }
	    catch(t) {
	        return this.next(void 0, t);
	    }
	    next(t, e) {
	        return this.callbackAttached && L(), this.callbackAttached = !0, this.isDone ? this.error ? this.wrapFailure(e, this.error) : this.wrapSuccess(t, this.result) : new xs(((n, s) => {
	            this.nextCallback = e => {
	                this.wrapSuccess(t, e).next(n, s);
	            }, this.catchCallback = t => {
	                this.wrapFailure(e, t).next(n, s);
	            };
	        }));
	    }
	    toPromise() {
	        return new Promise(((t, e) => {
	            this.next(t, e);
	        }));
	    }
	    wrapUserFunction(t) {
	        try {
	            const e = t();
	            return e instanceof xs ? e : xs.resolve(e);
	        } catch (t) {
	            return xs.reject(t);
	        }
	    }
	    wrapSuccess(t, e) {
	        return t ? this.wrapUserFunction((() => t(e))) : xs.resolve(e);
	    }
	    wrapFailure(t, e) {
	        return t ? this.wrapUserFunction((() => t(e))) : xs.reject(e);
	    }
	    static resolve(t) {
	        return new xs(((e, n) => {
	            e(t);
	        }));
	    }
	    static reject(t) {
	        return new xs(((e, n) => {
	            n(t);
	        }));
	    }
	    static waitFor(
	    // Accept all Promise types in waitFor().
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    t) {
	        return new xs(((e, n) => {
	            let s = 0, i = 0, r = !1;
	            t.forEach((t => {
	                ++s, t.next((() => {
	                    ++i, r && i === s && e();
	                }), (t => n(t)));
	            })), r = !0, i === s && e();
	        }));
	    }
	    /**
	     * Given an array of predicate functions that asynchronously evaluate to a
	     * boolean, implements a short-circuiting `or` between the results. Predicates
	     * will be evaluated until one of them returns `true`, then stop. The final
	     * result will be whether any of them returned `true`.
	     */    static or(t) {
	        let e = xs.resolve(!1);
	        for (const n of t) e = e.next((t => t ? xs.resolve(t) : n()));
	        return e;
	    }
	    static forEach(t, e) {
	        const n = [];
	        return t.forEach(((t, s) => {
	            n.push(e.call(this, t, s));
	        })), this.waitFor(n);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// References to `window` are guarded by SimpleDb.isAvailable()
	/* eslint-disable no-restricted-globals */
	/**
	 * Wraps an IDBTransaction and exposes a store() method to get a handle to a
	 * specific object store.
	 */
	class ks {
	    constructor(t, e) {
	        this.action = t, this.transaction = e, this.aborted = !1, 
	        /**
	         * A promise that resolves with the result of the IndexedDb transaction.
	         */
	        this.ft = new Ns, this.transaction.oncomplete = () => {
	            this.ft.resolve();
	        }, this.transaction.onabort = () => {
	            e.error ? this.ft.reject(new Fs(t, e.error)) : this.ft.resolve();
	        }, this.transaction.onerror = e => {
	            const n = qs(e.target.error);
	            this.ft.reject(new Fs(t, n));
	        };
	    }
	    static open(t, e, n, s) {
	        try {
	            return new ks(e, t.transaction(s, n));
	        } catch (t) {
	            throw new Fs(e, t);
	        }
	    }
	    get dt() {
	        return this.ft.promise;
	    }
	    abort(t) {
	        t && this.ft.reject(t), this.aborted || ($("SimpleDb", "Aborting transaction:", t ? t.message : "Client-initiated abort"), 
	        this.aborted = !0, this.transaction.abort());
	    }
	    /**
	     * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
	     * operations performed on the SimpleDbStore happen within the context of this
	     * transaction and it cannot be used anymore once the transaction is
	     * completed.
	     *
	     * Note that we can't actually enforce that the KeyType and ValueType are
	     * correct, but they allow type safety through the rest of the consuming code.
	     */    store(t) {
	        const e = this.transaction.objectStore(t);
	        return new Ls(e);
	    }
	}

	/**
	 * Provides a wrapper around IndexedDb with a simplified interface that uses
	 * Promise-like return values to chain operations. Real promises cannot be used
	 * since .then() continuations are executed asynchronously (e.g. via
	 * .setImmediate), which would cause IndexedDB to end the transaction.
	 * See PersistencePromise for more details.
	 */ class $s {
	    /*
	     * Creates a new SimpleDb wrapper for IndexedDb database `name`.
	     *
	     * Note that `version` must not be a downgrade. IndexedDB does not support
	     * downgrading the schema version. We currently do not support any way to do
	     * versioning outside of IndexedDB's versioning mechanism, as only
	     * version-upgrade transactions are allowed to do things like create
	     * objectstores.
	     */
	    constructor(t, e, n) {
	        this.name = t, this.version = e, this.wt = n;
	        // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the
	        // bug we're checking for should exist in iOS >= 12.2 and < 13, but for
	        // whatever reason it's much harder to hit after 12.2 so we only proactively
	        // log on 12.2.
	        12.2 === $s._t(getUA()) && O("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
	    }
	    /** Deletes the specified database. */    static delete(t) {
	        return $("SimpleDb", "Removing database:", t), Bs(window.indexedDB.deleteDatabase(t)).toPromise();
	    }
	    /** Returns true if IndexedDB is available in the current environment. */    static gt() {
	        if ("undefined" == typeof indexedDB) return !1;
	        if ($s.yt()) return !0;
	        // We extensively use indexed array values and compound keys,
	        // which IE and Edge do not support. However, they still have indexedDB
	        // defined on the window, so we need to check for them here and make sure
	        // to return that persistence is not enabled for those browsers.
	        // For tracking support of this feature, see here:
	        // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/
	        // Check the UA string to find out the browser.
	                const t = getUA(), e = $s._t(t), n = 0 < e && e < 10, s = $s.Et(t), i = 0 < s && s < 4.5;
	        // IE 10
	        // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
	        // IE 11
	        // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
	        // Edge
	        // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,
	        // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
	        // iOS Safari: Disable for users running iOS version < 10.
	                return !(t.indexOf("MSIE ") > 0 || t.indexOf("Trident/") > 0 || t.indexOf("Edge/") > 0 || n || i);
	    }
	    /**
	     * Returns true if the backing IndexedDB store is the Node IndexedDBShim
	     * (see https://github.com/axemclion/IndexedDBShim).
	     */    static yt() {
	        var t;
	        return "undefined" != typeof process && "YES" === (null === (t = process.env) || void 0 === t ? void 0 : t.Tt);
	    }
	    /** Helper to get a typed SimpleDbStore from a transaction. */    static It(t, e) {
	        return t.store(e);
	    }
	    // visible for testing
	    /** Parse User Agent to determine iOS version. Returns -1 if not found. */
	    static _t(t) {
	        const e = t.match(/i(?:phone|pad|pod) os ([\d_]+)/i), n = e ? e[1].split("_").slice(0, 2).join(".") : "-1";
	        return Number(n);
	    }
	    // visible for testing
	    /** Parse User Agent to determine Android version. Returns -1 if not found. */
	    static Et(t) {
	        const e = t.match(/Android ([\d.]+)/i), n = e ? e[1].split(".").slice(0, 2).join(".") : "-1";
	        return Number(n);
	    }
	    /**
	     * Opens the specified database, creating or upgrading it if necessary.
	     */    async At(t) {
	        return this.db || ($("SimpleDb", "Opening database:", this.name), this.db = await new Promise(((e, n) => {
	            // TODO(mikelehen): Investigate browser compatibility.
	            // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
	            // suggests IE9 and older WebKit browsers handle upgrade
	            // differently. They expect setVersion, as described here:
	            // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion
	            const s = indexedDB.open(this.name, this.version);
	            s.onsuccess = t => {
	                const n = t.target.result;
	                e(n);
	            }, s.onblocked = () => {
	                n(new Fs(t, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
	            }, s.onerror = e => {
	                const s = e.target.error;
	                "VersionError" === s.name ? n(new C(D.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")) : n(new Fs(t, s));
	            }, s.onupgradeneeded = t => {
	                $("SimpleDb", 'Database "' + this.name + '" requires upgrade from version:', t.oldVersion);
	                const e = t.target.result;
	                this.wt.Rt(e, s.transaction, t.oldVersion, this.version).next((() => {
	                    $("SimpleDb", "Database upgrade to version " + this.version + " complete");
	                }));
	            };
	        }))), this.Pt && (this.db.onversionchange = t => this.Pt(t)), this.db;
	    }
	    bt(t) {
	        this.Pt = t, this.db && (this.db.onversionchange = e => t(e));
	    }
	    async runTransaction(t, e, n, s) {
	        const i = "readonly" === e;
	        let r = 0;
	        for (;;) {
	            ++r;
	            try {
	                this.db = await this.At(t);
	                const e = ks.open(this.db, t, i ? "readonly" : "readwrite", n), r = s(e).catch((t => (
	                // Abort the transaction if there was an error.
	                e.abort(t), xs.reject(t)))).toPromise();
	                // As noted above, errors are propagated by aborting the transaction. So
	                // we swallow any error here to avoid the browser logging it as unhandled.
	                return r.catch((() => {})), 
	                // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
	                // fire), but still return the original transactionFnResult back to the
	                // caller.
	                await e.dt, r;
	            } catch (t) {
	                // TODO(schmidt-sebastian): We could probably be smarter about this and
	                // not retry exceptions that are likely unrecoverable (such as quota
	                // exceeded errors).
	                // Note: We cannot use an instanceof check for FirestoreException, since the
	                // exception is wrapped in a generic error by our async/await handling.
	                const e = "FirebaseError" !== t.name && r < 3;
	                if ($("SimpleDb", "Transaction failed with error:", t.message, "Retrying:", e), 
	                this.close(), !e) return Promise.reject(t);
	            }
	        }
	    }
	    close() {
	        this.db && this.db.close(), this.db = void 0;
	    }
	}

	/**
	 * A controller for iterating over a key range or index. It allows an iterate
	 * callback to delete the currently-referenced object, or jump to a new key
	 * within the key range or index.
	 */ class Os {
	    constructor(t) {
	        this.vt = t, this.Vt = !1, this.St = null;
	    }
	    get isDone() {
	        return this.Vt;
	    }
	    get Dt() {
	        return this.St;
	    }
	    set cursor(t) {
	        this.vt = t;
	    }
	    /**
	     * This function can be called to stop iteration at any point.
	     */    done() {
	        this.Vt = !0;
	    }
	    /**
	     * This function can be called to skip to that next key, which could be
	     * an index or a primary key.
	     */    Ct(t) {
	        this.St = t;
	    }
	    /**
	     * Delete the current cursor value from the object store.
	     *
	     * NOTE: You CANNOT do this with a keysOnly query.
	     */    delete() {
	        return Bs(this.vt.delete());
	    }
	}

	/** An error that wraps exceptions that thrown during IndexedDB execution. */ class Fs extends C {
	    constructor(t, e) {
	        super(D.UNAVAILABLE, `IndexedDB transaction '${t}' failed: ${e}`), this.name = "IndexedDbTransactionError";
	    }
	}

	/** Verifies whether `e` is an IndexedDbTransactionError. */ function Ms(t) {
	    // Use name equality, as instanceof checks on errors don't work with errors
	    // that wrap other errors.
	    return "IndexedDbTransactionError" === t.name;
	}

	/**
	 * A wrapper around an IDBObjectStore providing an API that:
	 *
	 * 1) Has generic KeyType / ValueType parameters to provide strongly-typed
	 * methods for acting against the object store.
	 * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every
	 * method return a PersistencePromise instead.
	 * 3) Provides a higher-level API to avoid needing to do excessive wrapping of
	 * intermediate IndexedDB types (IDBCursorWithValue, etc.)
	 */ class Ls {
	    constructor(t) {
	        this.store = t;
	    }
	    put(t, e) {
	        let n;
	        return void 0 !== e ? ($("SimpleDb", "PUT", this.store.name, t, e), n = this.store.put(e, t)) : ($("SimpleDb", "PUT", this.store.name, "<auto-key>", t), 
	        n = this.store.put(t)), Bs(n);
	    }
	    /**
	     * Adds a new value into an Object Store and returns the new key. Similar to
	     * IndexedDb's `add()`, this method will fail on primary key collisions.
	     *
	     * @param value - The object to write.
	     * @returns The key of the value to add.
	     */    add(t) {
	        $("SimpleDb", "ADD", this.store.name, t, t);
	        return Bs(this.store.add(t));
	    }
	    /**
	     * Gets the object with the specified key from the specified store, or null
	     * if no object exists with the specified key.
	     *
	     * @key The key of the object to get.
	     * @returns The object with the specified key or null if no object exists.
	     */    get(t) {
	        // We're doing an unsafe cast to ValueType.
	        // eslint-disable-next-line @typescript-eslint/no-explicit-any
	        return Bs(this.store.get(t)).next((e => (
	        // Normalize nonexistence to null.
	        void 0 === e && (e = null), $("SimpleDb", "GET", this.store.name, t, e), e)));
	    }
	    delete(t) {
	        $("SimpleDb", "DELETE", this.store.name, t);
	        return Bs(this.store.delete(t));
	    }
	    /**
	     * If we ever need more of the count variants, we can add overloads. For now,
	     * all we need is to count everything in a store.
	     *
	     * Returns the number of rows in the store.
	     */    count() {
	        $("SimpleDb", "COUNT", this.store.name);
	        return Bs(this.store.count());
	    }
	    Nt(t, e) {
	        const n = this.cursor(this.options(t, e)), s = [];
	        return this.xt(n, ((t, e) => {
	            s.push(e);
	        })).next((() => s));
	    }
	    kt(t, e) {
	        $("SimpleDb", "DELETE ALL", this.store.name);
	        const n = this.options(t, e);
	        n.$t = !1;
	        const s = this.cursor(n);
	        return this.xt(s, ((t, e, n) => n.delete()));
	    }
	    Ot(t, e) {
	        let n;
	        e ? n = t : (n = {}, e = t);
	        const s = this.cursor(n);
	        return this.xt(s, e);
	    }
	    /**
	     * Iterates over a store, but waits for the given callback to complete for
	     * each entry before iterating the next entry. This allows the callback to do
	     * asynchronous work to determine if this iteration should continue.
	     *
	     * The provided callback should return `true` to continue iteration, and
	     * `false` otherwise.
	     */    Ft(t) {
	        const e = this.cursor({});
	        return new xs(((n, s) => {
	            e.onerror = t => {
	                const e = qs(t.target.error);
	                s(e);
	            }, e.onsuccess = e => {
	                const s = e.target.result;
	                s ? t(s.primaryKey, s.value).next((t => {
	                    t ? s.continue() : n();
	                })) : n();
	            };
	        }));
	    }
	    xt(t, e) {
	        const n = [];
	        return new xs(((s, i) => {
	            t.onerror = t => {
	                i(t.target.error);
	            }, t.onsuccess = t => {
	                const i = t.target.result;
	                if (!i) return void s();
	                const r = new Os(i), o = e(i.primaryKey, i.value, r);
	                if (o instanceof xs) {
	                    const t = o.catch((t => (r.done(), xs.reject(t))));
	                    n.push(t);
	                }
	                r.isDone ? s() : null === r.Dt ? i.continue() : i.continue(r.Dt);
	            };
	        })).next((() => xs.waitFor(n)));
	    }
	    options(t, e) {
	        let n;
	        return void 0 !== t && ("string" == typeof t ? n = t : e = t), {
	            index: n,
	            range: e
	        };
	    }
	    cursor(t) {
	        let e = "next";
	        if (t.reverse && (e = "prev"), t.index) {
	            const n = this.store.index(t.index);
	            return t.$t ? n.openKeyCursor(t.range, e) : n.openCursor(t.range, e);
	        }
	        return this.store.openCursor(t.range, e);
	    }
	}

	/**
	 * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror
	 * handlers to resolve / reject the PersistencePromise as appropriate.
	 */ function Bs(t) {
	    return new xs(((e, n) => {
	        t.onsuccess = t => {
	            const n = t.target.result;
	            e(n);
	        }, t.onerror = t => {
	            const e = qs(t.target.error);
	            n(e);
	        };
	    }));
	}

	// Guard so we only report the error once.
	let Us = !1;

	function qs(t) {
	    const e = $s._t(getUA());
	    if (e >= 12.2 && e < 13) {
	        const e = "An internal error was encountered in the Indexed Database server";
	        if (t.message.indexOf(e) >= 0) {
	            // Wrap error in a more descriptive one.
	            const t = new C("internal", `IOS_INDEXEDDB_BUG1: IndexedDb has thrown '${e}'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.`);
	            return Us || (Us = !0, 
	            // Throw a global exception outside of this promise chain, for the user to
	            // potentially catch.
	            setTimeout((() => {
	                throw t;
	            }), 0)), t;
	        }
	    }
	    return t;
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class Ks extends Cs {
	    constructor(t, e) {
	        super(), this.Mt = t, this.currentSequenceNumber = e;
	    }
	}

	function js(t, e) {
	    const n = U(t);
	    return $s.It(n.Mt, e);
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A batch of mutations that will be sent as one unit to the backend.
	 */ class Qs {
	    /**
	     * @param batchId - The unique ID of this mutation batch.
	     * @param localWriteTime - The original write time of this mutation.
	     * @param baseMutations - Mutations that are used to populate the base
	     * values when this mutation is applied locally. This can be used to locally
	     * overwrite values that are persisted in the remote document cache. Base
	     * mutations are never sent to the backend.
	     * @param mutations - The user-provided mutations in this mutation batch.
	     * User-provided mutations are applied both locally and remotely on the
	     * backend.
	     */
	    constructor(t, e, n, s) {
	        this.batchId = t, this.localWriteTime = e, this.baseMutations = n, this.mutations = s;
	    }
	    /**
	     * Applies all the mutations in this MutationBatch to the specified document
	     * to compute the state of the remote document
	     *
	     * @param document - The document to apply mutations to.
	     * @param batchResult - The result of applying the MutationBatch to the
	     * backend.
	     */    applyToRemoteDocument(t, e) {
	        const n = e.mutationResults;
	        for (let e = 0; e < this.mutations.length; e++) {
	            const s = this.mutations[e];
	            if (s.key.isEqual(t.key)) {
	                Me(s, t, n[e]);
	            }
	        }
	    }
	    /**
	     * Computes the local view of a document given all the mutations in this
	     * batch.
	     *
	     * @param document - The document to apply mutations to.
	     */    applyToLocalView(t) {
	        // First, apply the base state. This allows us to apply non-idempotent
	        // transform against a consistent set of values.
	        for (const e of this.baseMutations) e.key.isEqual(t.key) && Le(e, t, this.localWriteTime);
	        // Second, apply all user-provided mutations.
	                for (const e of this.mutations) e.key.isEqual(t.key) && Le(e, t, this.localWriteTime);
	    }
	    /**
	     * Computes the local view for all provided documents given the mutations in
	     * this batch.
	     */    applyToLocalDocumentSet(t) {
	        // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations
	        // directly (as done in `applyToLocalView()`), we can reduce the complexity
	        // to O(n).
	        this.mutations.forEach((e => {
	            const n = t.get(e.key), s = n;
	            // TODO(mutabledocuments): This method should take a MutableDocumentMap
	            // and we should remove this cast.
	                        this.applyToLocalView(s), n.isValidDocument() || s.convertToNoDocument(z$1.min());
	        }));
	    }
	    keys() {
	        return this.mutations.reduce(((t, e) => t.add(e.key)), wn());
	    }
	    isEqual(t) {
	        return this.batchId === t.batchId && Q(this.mutations, t.mutations, ((t, e) => Ue(t, e))) && Q(this.baseMutations, t.baseMutations, ((t, e) => Ue(t, e)));
	    }
	}

	/** The result of applying a mutation batch to the backend. */ class Ws {
	    constructor(t, e, n, 
	    /**
	     * A pre-computed mapping from each mutated document to the resulting
	     * version.
	     */
	    s) {
	        this.batch = t, this.commitVersion = e, this.mutationResults = n, this.docVersions = s;
	    }
	    /**
	     * Creates a new MutationBatchResult for the given batch and results. There
	     * must be one result for each mutation in the batch. This static factory
	     * caches a document=&gt;version mapping (docVersions).
	     */    static from(t, e, n) {
	        B(t.mutations.length === n.length);
	        let s = fn();
	        const i = t.mutations;
	        for (let t = 0; t < i.length; t++) s = s.insert(i[t].key, n[t].version);
	        return new Ws(t, e, n, s);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An immutable set of metadata that the local store tracks for each target.
	 */ class Gs {
	    constructor(
	    /** The target being listened to. */
	    t, 
	    /**
	     * The target ID to which the target corresponds; Assigned by the
	     * LocalStore for user listens and by the SyncEngine for limbo watches.
	     */
	    e, 
	    /** The purpose of the target. */
	    n, 
	    /**
	     * The sequence number of the last transaction during which this target data
	     * was modified.
	     */
	    s, 
	    /** The latest snapshot version seen for this target. */
	    i = z$1.min()
	    /**
	     * The maximum snapshot version at which the associated view
	     * contained no limbo documents.
	     */ , r = z$1.min()
	    /**
	     * An opaque, server-assigned token that allows watching a target to be
	     * resumed after disconnecting without retransmitting all the data that
	     * matches the target. The resume token essentially identifies a point in
	     * time from which the server should resume sending results.
	     */ , o = st.EMPTY_BYTE_STRING) {
	        this.target = t, this.targetId = e, this.purpose = n, this.sequenceNumber = s, this.snapshotVersion = i, 
	        this.lastLimboFreeSnapshotVersion = r, this.resumeToken = o;
	    }
	    /** Creates a new target data instance with an updated sequence number. */    withSequenceNumber(t) {
	        return new Gs(this.target, this.targetId, this.purpose, t, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken);
	    }
	    /**
	     * Creates a new target data instance with an updated resume token and
	     * snapshot version.
	     */    withResumeToken(t, e) {
	        return new Gs(this.target, this.targetId, this.purpose, this.sequenceNumber, e, this.lastLimboFreeSnapshotVersion, t);
	    }
	    /**
	     * Creates a new target data instance with an updated last limbo free
	     * snapshot version number.
	     */    withLastLimboFreeSnapshotVersion(t) {
	        return new Gs(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, t, this.resumeToken);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** Serializer for values stored in the LocalStore. */ class zs {
	    constructor(t) {
	        this.Lt = t;
	    }
	}

	/** Decodes a remote document from storage locally to a Document. */ function Hs(t, e) {
	    if (e.document) return qn(t.Lt, e.document, !!e.hasCommittedMutations);
	    if (e.noDocument) {
	        const t = wt.fromSegments(e.noDocument.path), n = ti(e.noDocument.readTime), s = Ct.newNoDocument(t, n);
	        return e.hasCommittedMutations ? s.setHasCommittedMutations() : s;
	    }
	    if (e.unknownDocument) {
	        const t = wt.fromSegments(e.unknownDocument.path), n = ti(e.unknownDocument.version);
	        return Ct.newUnknownDocument(t, n);
	    }
	    return L();
	}

	/** Encodes a document for storage locally. */ function Js(t, e, n) {
	    const s = Ys(n), i = e.key.path.popLast().toArray();
	    if (e.isFoundDocument()) {
	        const n = function(t, e) {
	            return {
	                name: $n(t, e.key),
	                fields: e.data.value.mapValue.fields,
	                updateTime: Sn(t, e.version.toTimestamp())
	            };
	        }(t.Lt, e), r = e.hasCommittedMutations;
	        return new Es(
	        /* unknownDocument= */ null, 
	        /* noDocument= */ null, n, r, s, i);
	    }
	    if (e.isNoDocument()) {
	        const t = e.key.path.toArray(), n = Zs(e.version), r = e.hasCommittedMutations;
	        return new Es(
	        /* unknownDocument= */ null, new ys(t, n), 
	        /* document= */ null, r, s, i);
	    }
	    if (e.isUnknownDocument()) {
	        const t = e.key.path.toArray(), n = Zs(e.version);
	        return new Es(new ps(t, n), 
	        /* noDocument= */ null, 
	        /* document= */ null, 
	        /* hasCommittedMutations= */ !0, s, i);
	    }
	    return L();
	}

	function Ys(t) {
	    const e = t.toTimestamp();
	    return [ e.seconds, e.nanoseconds ];
	}

	function Xs(t) {
	    const e = new G(t[0], t[1]);
	    return z$1.fromTimestamp(e);
	}

	function Zs(t) {
	    const e = t.toTimestamp();
	    return new ds(e.seconds, e.nanoseconds);
	}

	function ti(t) {
	    const e = new G(t.seconds, t.nanoseconds);
	    return z$1.fromTimestamp(e);
	}

	/** Encodes a batch of mutations into a DbMutationBatch for local storage. */
	/** Decodes a DbMutationBatch into a MutationBatch */
	function ei(t, e) {
	    const n = (e.baseMutations || []).map((e => Wn(t.Lt, e)));
	    // Squash old transform mutations into existing patch or set mutations.
	    // The replacement of representing `transforms` with `update_transforms`
	    // on the SDK means that old `transform` mutations stored in IndexedDB need
	    // to be updated to `update_transforms`.
	    // TODO(b/174608374): Remove this code once we perform a schema migration.
	        for (let t = 0; t < e.mutations.length - 1; ++t) {
	        const n = e.mutations[t];
	        if (t + 1 < e.mutations.length && void 0 !== e.mutations[t + 1].transform) {
	            const s = e.mutations[t + 1];
	            n.updateTransforms = s.transform.fieldTransforms, e.mutations.splice(t + 1, 1), 
	            ++t;
	        }
	    }
	    const s = e.mutations.map((e => Wn(t.Lt, e))), i = G.fromMillis(e.localWriteTimeMs);
	    return new Qs(e.batchId, i, n, s);
	}

	/** Decodes a DbTarget into TargetData */ function ni(t) {
	    const e = ti(t.readTime), n = void 0 !== t.lastLimboFreeSnapshotVersion ? ti(t.lastLimboFreeSnapshotVersion) : z$1.min();
	    let s;
	    var i;
	    return void 0 !== t.query.documents ? (B(1 === (i = t.query).documents.length), 
	    s = ae(ne(Mn(i.documents[0])))) : s = function(t) {
	        return ae(Jn(t));
	    }(t.query), new Gs(s, t.targetId, 0 /* Listen */ , t.lastListenSequenceNumber, e, n, st.fromBase64String(t.resumeToken));
	}

	/** Encodes TargetData into a DbTarget for storage locally. */ function si(t, e) {
	    const n = Zs(e.snapshotVersion), s = Zs(e.lastLimboFreeSnapshotVersion);
	    let i;
	    i = Ft(e.target) ? zn(t.Lt, e.target) : Hn(t.Lt, e.target);
	    // We can't store the resumeToken as a ByteString in IndexedDb, so we
	    // convert it to a base64 string for storage.
	        const r = e.resumeToken.toBase64();
	    // lastListenSequenceNumber is always 0 until we do real GC.
	        return new Is(e.targetId, kt(e.target), n, r, e.sequenceNumber, s, i);
	}

	/**
	 * A helper function for figuring out what kind of query has been stored.
	 */
	/**
	 * Encodes a `BundledQuery` from bundle proto to a Query object.
	 *
	 * This reconstructs the original query used to build the bundle being loaded,
	 * including features exists only in SDKs (for example: limit-to-last).
	 */
	function ii(t) {
	    const e = Jn({
	        parent: t.parent,
	        structuredQuery: t.structuredQuery
	    });
	    return "LAST" === t.limitType ? he(e, e.limit, "L" /* Last */) : e;
	}

	/** Encodes a NamedQuery proto object to a NamedQuery model object. */
	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	class ri {
	    getBundleMetadata(t, e) {
	        return oi(t).get(e).next((t => {
	            if (t) return {
	                id: (e = t).bundleId,
	                createTime: ti(e.createTime),
	                version: e.version
	            };
	            /** Encodes a DbBundle to a BundleMetadata object. */
	            var e;
	            /** Encodes a BundleMetadata to a DbBundle. */        }));
	    }
	    saveBundleMetadata(t, e) {
	        return oi(t).put({
	            bundleId: (n = e).id,
	            createTime: Zs(Nn(n.createTime)),
	            version: n.version
	        });
	        var n;
	        /** Encodes a DbNamedQuery to a NamedQuery. */    }
	    getNamedQuery(t, e) {
	        return ci(t).get(e).next((t => {
	            if (t) return {
	                name: (e = t).name,
	                query: ii(e.bundledQuery),
	                readTime: ti(e.readTime)
	            };
	            var e;
	            /** Encodes a NamedQuery from a bundle proto to a DbNamedQuery. */        }));
	    }
	    saveNamedQuery(t, e) {
	        return ci(t).put(function(t) {
	            return {
	                name: t.name,
	                readTime: Zs(Nn(t.readTime)),
	                bundledQuery: t.bundledQuery
	            };
	        }(e));
	    }
	}

	/**
	 * Helper to get a typed SimpleDbStore for the bundles object store.
	 */ function oi(t) {
	    return js(t, vs.store);
	}

	/**
	 * Helper to get a typed SimpleDbStore for the namedQueries object store.
	 */ function ci(t) {
	    return js(t, Vs.store);
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An in-memory implementation of IndexManager.
	 */ class ui {
	    constructor() {
	        this.Bt = new ai;
	    }
	    addToCollectionParentIndex(t, e) {
	        return this.Bt.add(e), xs.resolve();
	    }
	    getCollectionParents(t, e) {
	        return xs.resolve(this.Bt.getEntries(e));
	    }
	}

	/**
	 * Internal implementation of the collection-parent index exposed by MemoryIndexManager.
	 * Also used for in-memory caching by IndexedDbIndexManager and initial index population
	 * in indexeddb_schema.ts
	 */ class ai {
	    constructor() {
	        this.index = {};
	    }
	    // Returns false if the entry already existed.
	    add(t) {
	        const e = t.lastSegment(), n = t.popLast(), s = this.index[e] || new rn(Z.comparator), i = !s.has(n);
	        return this.index[e] = s.add(n), i;
	    }
	    has(t) {
	        const e = t.lastSegment(), n = t.popLast(), s = this.index[e];
	        return s && s.has(n);
	    }
	    getEntries(t) {
	        return (this.index[t] || new rn(Z.comparator)).toArray();
	    }
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A persisted implementation of IndexManager.
	 */ class hi {
	    constructor() {
	        /**
	         * An in-memory copy of the index entries we've already written since the SDK
	         * launched. Used to avoid re-writing the same entry repeatedly.
	         *
	         * This is *NOT* a complete cache of what's in persistence and so can never be used to
	         * satisfy reads.
	         */
	        this.Ut = new ai;
	    }
	    /**
	     * Adds a new entry to the collection parent index.
	     *
	     * Repeated calls for the same collectionPath should be avoided within a
	     * transaction as IndexedDbIndexManager only caches writes once a transaction
	     * has been committed.
	     */    addToCollectionParentIndex(t, e) {
	        if (!this.Ut.has(e)) {
	            const n = e.lastSegment(), s = e.popLast();
	            t.addOnCommittedListener((() => {
	                // Add the collection to the in memory cache only if the transaction was
	                // successfully committed.
	                this.Ut.add(e);
	            }));
	            const i = {
	                collectionId: n,
	                parent: as(s)
	            };
	            return li(t).put(i);
	        }
	        return xs.resolve();
	    }
	    getCollectionParents(t, e) {
	        const n = [], s = IDBKeyRange.bound([ e, "" ], [ W(e), "" ], 
	        /*lowerOpen=*/ !1, 
	        /*upperOpen=*/ !0);
	        return li(t).Nt(s).next((t => {
	            for (const s of t) {
	                // This collectionId guard shouldn't be necessary (and isn't as long
	                // as we're running in a real browser), but there's a bug in
	                // indexeddbshim that breaks our range in our tests running in node:
	                // https://github.com/axemclion/IndexedDBShim/issues/334
	                if (s.collectionId !== e) break;
	                n.push(fs(s.parent));
	            }
	            return n;
	        }));
	    }
	}

	/**
	 * Helper to get a typed SimpleDbStore for the collectionParents
	 * document store.
	 */ function li(t) {
	    return js(t, Ps.store);
	}

	/**
	 * @license
	 * Copyright 2018 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const fi = {
	    didRun: !1,
	    sequenceNumbersCollected: 0,
	    targetsRemoved: 0,
	    documentsRemoved: 0
	};

	class di {
	    constructor(
	    // When we attempt to collect, we will only do so if the cache size is greater than this
	    // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.
	    t, 
	    // The percentage of sequence numbers that we will attempt to collect
	    e, 
	    // A cap on the total number of sequence numbers that will be collected. This prevents
	    // us from collecting a huge number of sequence numbers if the cache has grown very large.
	    n) {
	        this.cacheSizeCollectionThreshold = t, this.percentileToCollect = e, this.maximumSequenceNumbersToCollect = n;
	    }
	    static withCacheSize(t) {
	        return new di(t, di.DEFAULT_COLLECTION_PERCENTILE, di.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Delete a mutation batch and the associated document mutations.
	 * @returns A PersistencePromise of the document mutations that were removed.
	 */
	function wi(t, e, n) {
	    const s = t.store(ms.store), i = t.store(gs.store), r = [], o = IDBKeyRange.only(n.batchId);
	    let c = 0;
	    const u = s.Ot({
	        range: o
	    }, ((t, e, n) => (c++, n.delete())));
	    r.push(u.next((() => {
	        B(1 === c);
	    })));
	    const a = [];
	    for (const t of n.mutations) {
	        const s = gs.key(e, t.key.path, n.batchId);
	        r.push(i.delete(s)), a.push(t.key);
	    }
	    return xs.waitFor(r).next((() => a));
	}

	/**
	 * Returns an approximate size for the given document.
	 */ function _i(t) {
	    if (!t) return 0;
	    let e;
	    if (t.document) e = t.document; else if (t.unknownDocument) e = t.unknownDocument; else {
	        if (!t.noDocument) throw L();
	        e = t.noDocument;
	    }
	    return JSON.stringify(e).length;
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** A mutation queue for a specific user, backed by IndexedDB. */ di.DEFAULT_COLLECTION_PERCENTILE = 10, 
	di.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1e3, di.DEFAULT = new di(41943040, di.DEFAULT_COLLECTION_PERCENTILE, di.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT), 
	di.DISABLED = new di(-1, 0, 0);

	class mi {
	    constructor(
	    /**
	     * The normalized userId (e.g. null UID => "" userId) used to store /
	     * retrieve mutations.
	     */
	    t, e, n, s) {
	        this.userId = t, this.R = e, this.qt = n, this.referenceDelegate = s, 
	        /**
	         * Caches the document keys for pending mutation batches. If the mutation
	         * has been removed from IndexedDb, the cached value may continue to
	         * be used to retrieve the batch's document keys. To remove a cached value
	         * locally, `removeCachedMutationKeys()` should be invoked either directly
	         * or through `removeMutationBatches()`.
	         *
	         * With multi-tab, when the primary client acknowledges or rejects a mutation,
	         * this cache is used by secondary clients to invalidate the local
	         * view of the documents that were previously affected by the mutation.
	         */
	        // PORTING NOTE: Multi-tab only.
	        this.Kt = {};
	    }
	    /**
	     * Creates a new mutation queue for the given user.
	     * @param user - The user for which to create a mutation queue.
	     * @param serializer - The serializer to use when persisting to IndexedDb.
	     */    static jt(t, e, n, s) {
	        // TODO(mcg): Figure out what constraints there are on userIDs
	        // In particular, are there any reserved characters? are empty ids allowed?
	        // For the moment store these together in the same mutations table assuming
	        // that empty userIDs aren't allowed.
	        B("" !== t.uid);
	        const i = t.isAuthenticated() ? t.uid : "";
	        return new mi(i, e, n, s);
	    }
	    checkEmpty(t) {
	        let e = !0;
	        const n = IDBKeyRange.bound([ this.userId, Number.NEGATIVE_INFINITY ], [ this.userId, Number.POSITIVE_INFINITY ]);
	        return yi(t).Ot({
	            index: ms.userMutationsIndex,
	            range: n
	        }, ((t, n, s) => {
	            e = !1, s.done();
	        })).next((() => e));
	    }
	    addMutationBatch(t, e, n, s) {
	        const i = pi(t), r = yi(t);
	        // The IndexedDb implementation in Chrome (and Firefox) does not handle
	        // compound indices that include auto-generated keys correctly. To ensure
	        // that the index entry is added correctly in all browsers, we perform two
	        // writes: The first write is used to retrieve the next auto-generated Batch
	        // ID, and the second write populates the index and stores the actual
	        // mutation batch.
	        // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972
	        // We write an empty object to obtain key
	        // eslint-disable-next-line @typescript-eslint/no-explicit-any
	        return r.add({}).next((o => {
	            B("number" == typeof o);
	            const c = new Qs(o, e, n, s), u = function(t, e, n) {
	                const s = n.baseMutations.map((e => Qn(t.Lt, e))), i = n.mutations.map((e => Qn(t.Lt, e)));
	                return new ms(e, n.batchId, n.localWriteTime.toMillis(), s, i);
	            }(this.R, this.userId, c), a = [];
	            let h = new rn(((t, e) => j(t.canonicalString(), e.canonicalString())));
	            for (const t of s) {
	                const e = gs.key(this.userId, t.key.path, o);
	                h = h.add(t.key.path.popLast()), a.push(r.put(u)), a.push(i.put(e, gs.PLACEHOLDER));
	            }
	            return h.forEach((e => {
	                a.push(this.qt.addToCollectionParentIndex(t, e));
	            })), t.addOnCommittedListener((() => {
	                this.Kt[o] = c.keys();
	            })), xs.waitFor(a).next((() => c));
	        }));
	    }
	    lookupMutationBatch(t, e) {
	        return yi(t).get(e).next((t => t ? (B(t.userId === this.userId), ei(this.R, t)) : null));
	    }
	    /**
	     * Returns the document keys for the mutation batch with the given batchId.
	     * For primary clients, this method returns `null` after
	     * `removeMutationBatches()` has been called. Secondary clients return a
	     * cached result until `removeCachedMutationKeys()` is invoked.
	     */
	    // PORTING NOTE: Multi-tab only.
	    Qt(t, e) {
	        return this.Kt[e] ? xs.resolve(this.Kt[e]) : this.lookupMutationBatch(t, e).next((t => {
	            if (t) {
	                const n = t.keys();
	                return this.Kt[e] = n, n;
	            }
	            return null;
	        }));
	    }
	    getNextMutationBatchAfterBatchId(t, e) {
	        const n = e + 1, s = IDBKeyRange.lowerBound([ this.userId, n ]);
	        let i = null;
	        return yi(t).Ot({
	            index: ms.userMutationsIndex,
	            range: s
	        }, ((t, e, s) => {
	            e.userId === this.userId && (B(e.batchId >= n), i = ei(this.R, e)), s.done();
	        })).next((() => i));
	    }
	    getHighestUnacknowledgedBatchId(t) {
	        const e = IDBKeyRange.upperBound([ this.userId, Number.POSITIVE_INFINITY ]);
	        let n = -1;
	        return yi(t).Ot({
	            index: ms.userMutationsIndex,
	            range: e,
	            reverse: !0
	        }, ((t, e, s) => {
	            n = e.batchId, s.done();
	        })).next((() => n));
	    }
	    getAllMutationBatches(t) {
	        const e = IDBKeyRange.bound([ this.userId, -1 ], [ this.userId, Number.POSITIVE_INFINITY ]);
	        return yi(t).Nt(ms.userMutationsIndex, e).next((t => t.map((t => ei(this.R, t)))));
	    }
	    getAllMutationBatchesAffectingDocumentKey(t, e) {
	        // Scan the document-mutation index starting with a prefix starting with
	        // the given documentKey.
	        const n = gs.prefixForPath(this.userId, e.path), s = IDBKeyRange.lowerBound(n), i = [];
	        return pi(t).Ot({
	            range: s
	        }, ((n, s, r) => {
	            const [o, c, u] = n, a = fs(c);
	            // Only consider rows matching exactly the specific key of
	            // interest. Note that because we order by path first, and we
	            // order terminators before path separators, we'll encounter all
	            // the index rows for documentKey contiguously. In particular, all
	            // the rows for documentKey will occur before any rows for
	            // documents nested in a subcollection beneath documentKey so we
	            // can stop as soon as we hit any such row.
	                        if (o === this.userId && e.path.isEqual(a)) 
	            // Look up the mutation batch in the store.
	            return yi(t).get(u).next((t => {
	                if (!t) throw L();
	                B(t.userId === this.userId), i.push(ei(this.R, t));
	            }));
	            r.done();
	        })).next((() => i));
	    }
	    getAllMutationBatchesAffectingDocumentKeys(t, e) {
	        let n = new rn(j);
	        const s = [];
	        return e.forEach((e => {
	            const i = gs.prefixForPath(this.userId, e.path), r = IDBKeyRange.lowerBound(i), o = pi(t).Ot({
	                range: r
	            }, ((t, s, i) => {
	                const [r, o, c] = t, u = fs(o);
	                // Only consider rows matching exactly the specific key of
	                // interest. Note that because we order by path first, and we
	                // order terminators before path separators, we'll encounter all
	                // the index rows for documentKey contiguously. In particular, all
	                // the rows for documentKey will occur before any rows for
	                // documents nested in a subcollection beneath documentKey so we
	                // can stop as soon as we hit any such row.
	                                r === this.userId && e.path.isEqual(u) ? n = n.add(c) : i.done();
	            }));
	            s.push(o);
	        })), xs.waitFor(s).next((() => this.Wt(t, n)));
	    }
	    getAllMutationBatchesAffectingQuery(t, e) {
	        const n = e.path, s = n.length + 1, i = gs.prefixForPath(this.userId, n), r = IDBKeyRange.lowerBound(i);
	        // Collect up unique batchIDs encountered during a scan of the index. Use a
	        // SortedSet to accumulate batch IDs so they can be traversed in order in a
	        // scan of the main table.
	        let o = new rn(j);
	        return pi(t).Ot({
	            range: r
	        }, ((t, e, i) => {
	            const [r, c, u] = t, a = fs(c);
	            r === this.userId && n.isPrefixOf(a) ? 
	            // Rows with document keys more than one segment longer than the
	            // query path can't be matches. For example, a query on 'rooms'
	            // can't match the document /rooms/abc/messages/xyx.
	            // TODO(mcg): we'll need a different scanner when we implement
	            // ancestor queries.
	            a.length === s && (o = o.add(u)) : i.done();
	        })).next((() => this.Wt(t, o)));
	    }
	    Wt(t, e) {
	        const n = [], s = [];
	        // TODO(rockwood): Implement this using iterate.
	        return e.forEach((e => {
	            s.push(yi(t).get(e).next((t => {
	                if (null === t) throw L();
	                B(t.userId === this.userId), n.push(ei(this.R, t));
	            })));
	        })), xs.waitFor(s).next((() => n));
	    }
	    removeMutationBatch(t, e) {
	        return wi(t.Mt, this.userId, e).next((n => (t.addOnCommittedListener((() => {
	            this.Gt(e.batchId);
	        })), xs.forEach(n, (e => this.referenceDelegate.markPotentiallyOrphaned(t, e))))));
	    }
	    /**
	     * Clears the cached keys for a mutation batch. This method should be
	     * called by secondary clients after they process mutation updates.
	     *
	     * Note that this method does not have to be called from primary clients as
	     * the corresponding cache entries are cleared when an acknowledged or
	     * rejected batch is removed from the mutation queue.
	     */
	    // PORTING NOTE: Multi-tab only
	    Gt(t) {
	        delete this.Kt[t];
	    }
	    performConsistencyCheck(t) {
	        return this.checkEmpty(t).next((e => {
	            if (!e) return xs.resolve();
	            // Verify that there are no entries in the documentMutations index if
	            // the queue is empty.
	                        const n = IDBKeyRange.lowerBound(gs.prefixForUser(this.userId)), s = [];
	            return pi(t).Ot({
	                range: n
	            }, ((t, e, n) => {
	                if (t[0] === this.userId) {
	                    const e = fs(t[1]);
	                    s.push(e);
	                } else n.done();
	            })).next((() => {
	                B(0 === s.length);
	            }));
	        }));
	    }
	    containsKey(t, e) {
	        return gi(t, this.userId, e);
	    }
	    // PORTING NOTE: Multi-tab only (state is held in memory in other clients).
	    /** Returns the mutation queue's metadata from IndexedDb. */
	    zt(t) {
	        return Ei(t).get(this.userId).next((t => t || new _s(this.userId, -1, 
	        /*lastStreamToken=*/ "")));
	    }
	}

	/**
	 * @returns true if the mutation queue for the given user contains a pending
	 *         mutation for the given key.
	 */ function gi(t, e, n) {
	    const s = gs.prefixForPath(e, n.path), i = s[1], r = IDBKeyRange.lowerBound(s);
	    let o = !1;
	    return pi(t).Ot({
	        range: r,
	        $t: !0
	    }, ((t, n, s) => {
	        const [r, c, /*batchID*/ u] = t;
	        r === e && c === i && (o = !0), s.done();
	    })).next((() => o));
	}

	/** Returns true if any mutation queue contains the given document. */
	/**
	 * Helper to get a typed SimpleDbStore for the mutations object store.
	 */
	function yi(t) {
	    return js(t, ms.store);
	}

	/**
	 * Helper to get a typed SimpleDbStore for the mutationQueues object store.
	 */ function pi(t) {
	    return js(t, gs.store);
	}

	/**
	 * Helper to get a typed SimpleDbStore for the mutationQueues object store.
	 */ function Ei(t) {
	    return js(t, _s.store);
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** Offset to ensure non-overlapping target ids. */
	/**
	 * Generates monotonically increasing target IDs for sending targets to the
	 * watch stream.
	 *
	 * The client constructs two generators, one for the target cache, and one for
	 * for the sync engine (to generate limbo documents targets). These
	 * generators produce non-overlapping IDs (by using even and odd IDs
	 * respectively).
	 *
	 * By separating the target ID space, the query cache can generate target IDs
	 * that persist across client restarts, while sync engine can independently
	 * generate in-memory target IDs that are transient and can be reused after a
	 * restart.
	 */
	class Ti {
	    constructor(t) {
	        this.Ht = t;
	    }
	    next() {
	        return this.Ht += 2, this.Ht;
	    }
	    static Jt() {
	        // The target cache generator must return '2' in its first call to `next()`
	        // as there is no differentiation in the protocol layer between an unset
	        // number and the number '0'. If we were to sent a target with target ID
	        // '0', the backend would consider it unset and replace it with its own ID.
	        return new Ti(0);
	    }
	    static Yt() {
	        // Sync engine assigns target IDs for limbo document detection.
	        return new Ti(-1);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class Ii {
	    constructor(t, e) {
	        this.referenceDelegate = t, this.R = e;
	    }
	    // PORTING NOTE: We don't cache global metadata for the target cache, since
	    // some of it (in particular `highestTargetId`) can be modified by secondary
	    // tabs. We could perhaps be more granular (and e.g. still cache
	    // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go
	    // to IndexedDb whenever we need to read metadata. We can revisit if it turns
	    // out to have a meaningful performance impact.
	    allocateTargetId(t) {
	        return this.Xt(t).next((e => {
	            const n = new Ti(e.highestTargetId);
	            return e.highestTargetId = n.next(), this.Zt(t, e).next((() => e.highestTargetId));
	        }));
	    }
	    getLastRemoteSnapshotVersion(t) {
	        return this.Xt(t).next((t => z$1.fromTimestamp(new G(t.lastRemoteSnapshotVersion.seconds, t.lastRemoteSnapshotVersion.nanoseconds))));
	    }
	    getHighestSequenceNumber(t) {
	        return this.Xt(t).next((t => t.highestListenSequenceNumber));
	    }
	    setTargetsMetadata(t, e, n) {
	        return this.Xt(t).next((s => (s.highestListenSequenceNumber = e, n && (s.lastRemoteSnapshotVersion = n.toTimestamp()), 
	        e > s.highestListenSequenceNumber && (s.highestListenSequenceNumber = e), this.Zt(t, s))));
	    }
	    addTargetData(t, e) {
	        return this.te(t, e).next((() => this.Xt(t).next((n => (n.targetCount += 1, this.ee(e, n), 
	        this.Zt(t, n))))));
	    }
	    updateTargetData(t, e) {
	        return this.te(t, e);
	    }
	    removeTargetData(t, e) {
	        return this.removeMatchingKeysForTargetId(t, e.targetId).next((() => Ai(t).delete(e.targetId))).next((() => this.Xt(t))).next((e => (B(e.targetCount > 0), 
	        e.targetCount -= 1, this.Zt(t, e))));
	    }
	    /**
	     * Drops any targets with sequence number less than or equal to the upper bound, excepting those
	     * present in `activeTargetIds`. Document associations for the removed targets are also removed.
	     * Returns the number of targets removed.
	     */    removeTargets(t, e, n) {
	        let s = 0;
	        const i = [];
	        return Ai(t).Ot(((r, o) => {
	            const c = ni(o);
	            c.sequenceNumber <= e && null === n.get(c.targetId) && (s++, i.push(this.removeTargetData(t, c)));
	        })).next((() => xs.waitFor(i))).next((() => s));
	    }
	    /**
	     * Call provided function with each `TargetData` that we have cached.
	     */    forEachTarget(t, e) {
	        return Ai(t).Ot(((t, n) => {
	            const s = ni(n);
	            e(s);
	        }));
	    }
	    Xt(t) {
	        return Ri(t).get(Rs.key).next((t => (B(null !== t), t)));
	    }
	    Zt(t, e) {
	        return Ri(t).put(Rs.key, e);
	    }
	    te(t, e) {
	        return Ai(t).put(si(this.R, e));
	    }
	    /**
	     * In-place updates the provided metadata to account for values in the given
	     * TargetData. Saving is done separately. Returns true if there were any
	     * changes to the metadata.
	     */    ee(t, e) {
	        let n = !1;
	        return t.targetId > e.highestTargetId && (e.highestTargetId = t.targetId, n = !0), 
	        t.sequenceNumber > e.highestListenSequenceNumber && (e.highestListenSequenceNumber = t.sequenceNumber, 
	        n = !0), n;
	    }
	    getTargetCount(t) {
	        return this.Xt(t).next((t => t.targetCount));
	    }
	    getTargetData(t, e) {
	        // Iterating by the canonicalId may yield more than one result because
	        // canonicalId values are not required to be unique per target. This query
	        // depends on the queryTargets index to be efficient.
	        const n = kt(e), s = IDBKeyRange.bound([ n, Number.NEGATIVE_INFINITY ], [ n, Number.POSITIVE_INFINITY ]);
	        let i = null;
	        return Ai(t).Ot({
	            range: s,
	            index: Is.queryTargetsIndexName
	        }, ((t, n, s) => {
	            const r = ni(n);
	            // After finding a potential match, check that the target is
	            // actually equal to the requested target.
	                        Ot(e, r.target) && (i = r, s.done());
	        })).next((() => i));
	    }
	    addMatchingKeys(t, e, n) {
	        // PORTING NOTE: The reverse index (documentsTargets) is maintained by
	        // IndexedDb.
	        const s = [], i = Pi(t);
	        return e.forEach((e => {
	            const r = as(e.path);
	            s.push(i.put(new As(n, r))), s.push(this.referenceDelegate.addReference(t, n, e));
	        })), xs.waitFor(s);
	    }
	    removeMatchingKeys(t, e, n) {
	        // PORTING NOTE: The reverse index (documentsTargets) is maintained by
	        // IndexedDb.
	        const s = Pi(t);
	        return xs.forEach(e, (e => {
	            const i = as(e.path);
	            return xs.waitFor([ s.delete([ n, i ]), this.referenceDelegate.removeReference(t, n, e) ]);
	        }));
	    }
	    removeMatchingKeysForTargetId(t, e) {
	        const n = Pi(t), s = IDBKeyRange.bound([ e ], [ e + 1 ], 
	        /*lowerOpen=*/ !1, 
	        /*upperOpen=*/ !0);
	        return n.delete(s);
	    }
	    getMatchingKeysForTargetId(t, e) {
	        const n = IDBKeyRange.bound([ e ], [ e + 1 ], 
	        /*lowerOpen=*/ !1, 
	        /*upperOpen=*/ !0), s = Pi(t);
	        let i = wn();
	        return s.Ot({
	            range: n,
	            $t: !0
	        }, ((t, e, n) => {
	            const s = fs(t[1]), r = new wt(s);
	            i = i.add(r);
	        })).next((() => i));
	    }
	    containsKey(t, e) {
	        const n = as(e.path), s = IDBKeyRange.bound([ n ], [ W(n) ], 
	        /*lowerOpen=*/ !1, 
	        /*upperOpen=*/ !0);
	        let i = 0;
	        return Pi(t).Ot({
	            index: As.documentTargetsIndex,
	            $t: !0,
	            range: s
	        }, (([t, e], n, s) => {
	            // Having a sentinel row for a document does not count as containing that document;
	            // For the target cache, containing the document means the document is part of some
	            // target.
	            0 !== t && (i++, s.done());
	        })).next((() => i > 0));
	    }
	    /**
	     * Looks up a TargetData entry by target ID.
	     *
	     * @param targetId - The target ID of the TargetData entry to look up.
	     * @returns The cached TargetData entry, or null if the cache has no entry for
	     * the target.
	     */
	    // PORTING NOTE: Multi-tab only.
	    lt(t, e) {
	        return Ai(t).get(e).next((t => t ? ni(t) : null));
	    }
	}

	/**
	 * Helper to get a typed SimpleDbStore for the queries object store.
	 */ function Ai(t) {
	    return js(t, Is.store);
	}

	/**
	 * Helper to get a typed SimpleDbStore for the target globals object store.
	 */ function Ri(t) {
	    return js(t, Rs.store);
	}

	/**
	 * Helper to get a typed SimpleDbStore for the document target object store.
	 */ function Pi(t) {
	    return js(t, As.store);
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Verifies the error thrown by a LocalStore operation. If a LocalStore
	 * operation fails because the primary lease has been taken by another client,
	 * we ignore the error (the persistence layer will immediately call
	 * `applyPrimaryLease` to propagate the primary state change). All other errors
	 * are re-thrown.
	 *
	 * @param err - An error returned by a LocalStore operation.
	 * @returns A Promise that resolves after we recovered, or the original error.
	 */ async function bi(t) {
	    if (t.code !== D.FAILED_PRECONDITION || t.message !== Ds) throw t;
	    $("LocalStore", "Unexpectedly lost primary lease");
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ function vi([t, e], [n, s]) {
	    const i = j(t, n);
	    return 0 === i ? j(e, s) : i;
	}

	/**
	 * Used to calculate the nth sequence number. Keeps a rolling buffer of the
	 * lowest n values passed to `addElement`, and finally reports the largest of
	 * them in `maxValue`.
	 */ class Vi {
	    constructor(t) {
	        this.ne = t, this.buffer = new rn(vi), this.se = 0;
	    }
	    ie() {
	        return ++this.se;
	    }
	    re(t) {
	        const e = [ t, this.ie() ];
	        if (this.buffer.size < this.ne) this.buffer = this.buffer.add(e); else {
	            const t = this.buffer.last();
	            vi(e, t) < 0 && (this.buffer = this.buffer.delete(t).add(e));
	        }
	    }
	    get maxValue() {
	        // Guaranteed to be non-empty. If we decide we are not collecting any
	        // sequence numbers, nthSequenceNumber below short-circuits. If we have
	        // decided that we are collecting n sequence numbers, it's because n is some
	        // percentage of the existing sequence numbers. That means we should never
	        // be in a situation where we are collecting sequence numbers but don't
	        // actually have any.
	        return this.buffer.last()[0];
	    }
	}

	/**
	 * This class is responsible for the scheduling of LRU garbage collection. It handles checking
	 * whether or not GC is enabled, as well as which delay to use before the next run.
	 */ class Si {
	    constructor(t, e) {
	        this.garbageCollector = t, this.asyncQueue = e, this.oe = !1, this.ce = null;
	    }
	    start(t) {
	        -1 !== this.garbageCollector.params.cacheSizeCollectionThreshold && this.ue(t);
	    }
	    stop() {
	        this.ce && (this.ce.cancel(), this.ce = null);
	    }
	    get started() {
	        return null !== this.ce;
	    }
	    ue(t) {
	        const e = this.oe ? 3e5 : 6e4;
	        $("LruGarbageCollector", `Garbage collection scheduled in ${e}ms`), this.ce = this.asyncQueue.enqueueAfterDelay("lru_garbage_collection" /* LruGarbageCollection */ , e, (async () => {
	            this.ce = null, this.oe = !0;
	            try {
	                await t.collectGarbage(this.garbageCollector);
	            } catch (t) {
	                Ms(t) ? $("LruGarbageCollector", "Ignoring IndexedDB error during garbage collection: ", t) : await bi(t);
	            }
	            await this.ue(t);
	        }));
	    }
	}

	/** Implements the steps for LRU garbage collection. */ class Di {
	    constructor(t, e) {
	        this.ae = t, this.params = e;
	    }
	    calculateTargetCount(t, e) {
	        return this.ae.he(t).next((t => Math.floor(e / 100 * t)));
	    }
	    nthSequenceNumber(t, e) {
	        if (0 === e) return xs.resolve(S.o);
	        const n = new Vi(e);
	        return this.ae.forEachTarget(t, (t => n.re(t.sequenceNumber))).next((() => this.ae.le(t, (t => n.re(t))))).next((() => n.maxValue));
	    }
	    removeTargets(t, e, n) {
	        return this.ae.removeTargets(t, e, n);
	    }
	    removeOrphanedDocuments(t, e) {
	        return this.ae.removeOrphanedDocuments(t, e);
	    }
	    collect(t, e) {
	        return -1 === this.params.cacheSizeCollectionThreshold ? ($("LruGarbageCollector", "Garbage collection skipped; disabled"), 
	        xs.resolve(fi)) : this.getCacheSize(t).next((n => n < this.params.cacheSizeCollectionThreshold ? ($("LruGarbageCollector", `Garbage collection skipped; Cache size ${n} is lower than threshold ${this.params.cacheSizeCollectionThreshold}`), 
	        fi) : this.fe(t, e)));
	    }
	    getCacheSize(t) {
	        return this.ae.getCacheSize(t);
	    }
	    fe(t, e) {
	        let n, s, i, r, o, c, u;
	        const a = Date.now();
	        return this.calculateTargetCount(t, this.params.percentileToCollect).next((e => (
	        // Cap at the configured max
	        e > this.params.maximumSequenceNumbersToCollect ? ($("LruGarbageCollector", `Capping sequence numbers to collect down to the maximum of ${this.params.maximumSequenceNumbersToCollect} from ${e}`), 
	        s = this.params.maximumSequenceNumbersToCollect) : s = e, r = Date.now(), this.nthSequenceNumber(t, s)))).next((s => (n = s, 
	        o = Date.now(), this.removeTargets(t, n, e)))).next((e => (i = e, c = Date.now(), 
	        this.removeOrphanedDocuments(t, n)))).next((t => {
	            if (u = Date.now(), x$1() <= LogLevel.DEBUG) {
	                $("LruGarbageCollector", `LRU Garbage Collection\n\tCounted targets in ${r - a}ms\n\tDetermined least recently used ${s} in ` + (o - r) + "ms\n" + `\tRemoved ${i} targets in ` + (c - o) + "ms\n" + `\tRemoved ${t} documents in ` + (u - c) + "ms\n" + `Total Duration: ${u - a}ms`);
	            }
	            return xs.resolve({
	                didRun: !0,
	                sequenceNumbersCollected: s,
	                targetsRemoved: i,
	                documentsRemoved: t
	            });
	        }));
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** Provides LRU functionality for IndexedDB persistence. */
	class Ci {
	    constructor(t, e) {
	        this.db = t, this.garbageCollector = function(t, e) {
	            return new Di(t, e);
	        }(this, e);
	    }
	    he(t) {
	        const e = this.de(t);
	        return this.db.getTargetCache().getTargetCount(t).next((t => e.next((e => t + e))));
	    }
	    de(t) {
	        let e = 0;
	        return this.le(t, (t => {
	            e++;
	        })).next((() => e));
	    }
	    forEachTarget(t, e) {
	        return this.db.getTargetCache().forEachTarget(t, e);
	    }
	    le(t, e) {
	        return this.we(t, ((t, n) => e(n)));
	    }
	    addReference(t, e, n) {
	        return Ni(t, n);
	    }
	    removeReference(t, e, n) {
	        return Ni(t, n);
	    }
	    removeTargets(t, e, n) {
	        return this.db.getTargetCache().removeTargets(t, e, n);
	    }
	    markPotentiallyOrphaned(t, e) {
	        return Ni(t, e);
	    }
	    /**
	     * Returns true if anything would prevent this document from being garbage
	     * collected, given that the document in question is not present in any
	     * targets and has a sequence number less than or equal to the upper bound for
	     * the collection run.
	     */    _e(t, e) {
	        return function(t, e) {
	            let n = !1;
	            return Ei(t).Ft((s => gi(t, s, e).next((t => (t && (n = !0), xs.resolve(!t)))))).next((() => n));
	        }(t, e);
	    }
	    removeOrphanedDocuments(t, e) {
	        const n = this.db.getRemoteDocumentCache().newChangeBuffer(), s = [];
	        let i = 0;
	        return this.we(t, ((r, o) => {
	            if (o <= e) {
	                const e = this._e(t, r).next((e => {
	                    if (!e) 
	                    // Our size accounting requires us to read all documents before
	                    // removing them.
	                    return i++, n.getEntry(t, r).next((() => (n.removeEntry(r), Pi(t).delete([ 0, as(r.path) ]))));
	                }));
	                s.push(e);
	            }
	        })).next((() => xs.waitFor(s))).next((() => n.apply(t))).next((() => i));
	    }
	    removeTarget(t, e) {
	        const n = e.withSequenceNumber(t.currentSequenceNumber);
	        return this.db.getTargetCache().updateTargetData(t, n);
	    }
	    updateLimboDocument(t, e) {
	        return Ni(t, e);
	    }
	    /**
	     * Call provided function for each document in the cache that is 'orphaned'. Orphaned
	     * means not a part of any target, so the only entry in the target-document index for
	     * that document will be the sentinel row (targetId 0), which will also have the sequence
	     * number for the last time the document was accessed.
	     */    we(t, e) {
	        const n = Pi(t);
	        let s, i = S.o;
	        return n.Ot({
	            index: As.documentTargetsIndex
	        }, (([t, n], {path: r, sequenceNumber: o}) => {
	            0 === t ? (
	            // if nextToReport is valid, report it, this is a new key so the
	            // last one must not be a member of any targets.
	            i !== S.o && e(new wt(fs(s)), i), 
	            // set nextToReport to be this sequence number. It's the next one we
	            // might report, if we don't find any targets for this document.
	            // Note that the sequence number must be defined when the targetId
	            // is 0.
	            i = o, s = r) : 
	            // set nextToReport to be invalid, we know we don't need to report
	            // this one since we found a target for it.
	            i = S.o;
	        })).next((() => {
	            // Since we report sequence numbers after getting to the next key, we
	            // need to check if the last key we iterated over was an orphaned
	            // document and report it.
	            i !== S.o && e(new wt(fs(s)), i);
	        }));
	    }
	    getCacheSize(t) {
	        return this.db.getRemoteDocumentCache().getSize(t);
	    }
	}

	function Ni(t, e) {
	    return Pi(t).put(
	    /**
	 * @returns A value suitable for writing a sentinel row in the target-document
	 * store.
	 */
	    function(t, e) {
	        return new As(0, as(t.path), e);
	    }(e, t.currentSequenceNumber));
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A map implementation that uses objects as keys. Objects must have an
	 * associated equals function and must be immutable. Entries in the map are
	 * stored together with the key being produced from the mapKeyFn. This map
	 * automatically handles collisions of keys.
	 */ class xi {
	    constructor(t, e) {
	        this.mapKeyFn = t, this.equalsFn = e, 
	        /**
	         * The inner map for a key/value pair. Due to the possibility of collisions we
	         * keep a list of entries that we do a linear search through to find an actual
	         * match. Note that collisions should be rare, so we still expect near
	         * constant time lookups in practice.
	         */
	        this.inner = {};
	    }
	    /** Get a value for this key, or undefined if it does not exist. */    get(t) {
	        const e = this.mapKeyFn(t), n = this.inner[e];
	        if (void 0 !== n) for (const [e, s] of n) if (this.equalsFn(e, t)) return s;
	    }
	    has(t) {
	        return void 0 !== this.get(t);
	    }
	    /** Put this key and value in the map. */    set(t, e) {
	        const n = this.mapKeyFn(t), s = this.inner[n];
	        if (void 0 !== s) {
	            for (let n = 0; n < s.length; n++) if (this.equalsFn(s[n][0], t)) return void (s[n] = [ t, e ]);
	            s.push([ t, e ]);
	        } else this.inner[n] = [ [ t, e ] ];
	    }
	    /**
	     * Remove this key from the map. Returns a boolean if anything was deleted.
	     */    delete(t) {
	        const e = this.mapKeyFn(t), n = this.inner[e];
	        if (void 0 === n) return !1;
	        for (let s = 0; s < n.length; s++) if (this.equalsFn(n[s][0], t)) return 1 === n.length ? delete this.inner[e] : n.splice(s, 1), 
	        !0;
	        return !1;
	    }
	    forEach(t) {
	        J(this.inner, ((e, n) => {
	            for (const [e, s] of n) t(e, s);
	        }));
	    }
	    isEmpty() {
	        return Y(this.inner);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An in-memory buffer of entries to be written to a RemoteDocumentCache.
	 * It can be used to batch up a set of changes to be written to the cache, but
	 * additionally supports reading entries back with the `getEntry()` method,
	 * falling back to the underlying RemoteDocumentCache if no entry is
	 * buffered.
	 *
	 * Entries added to the cache *must* be read first. This is to facilitate
	 * calculating the size delta of the pending changes.
	 *
	 * PORTING NOTE: This class was implemented then removed from other platforms.
	 * If byte-counting ends up being needed on the other platforms, consider
	 * porting this class as part of that implementation work.
	 */ class ki {
	    constructor() {
	        // A mapping of document key to the new cache entry that should be written (or null if any
	        // existing cache entry should be removed).
	        this.changes = new xi((t => t.toString()), ((t, e) => t.isEqual(e))), this.changesApplied = !1;
	    }
	    getReadTime(t) {
	        const e = this.changes.get(t);
	        return e ? e.readTime : z$1.min();
	    }
	    /**
	     * Buffers a `RemoteDocumentCache.addEntry()` call.
	     *
	     * You can only modify documents that have already been retrieved via
	     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
	     */    addEntry(t, e) {
	        this.assertNotApplied(), this.changes.set(t.key, {
	            document: t,
	            readTime: e
	        });
	    }
	    /**
	     * Buffers a `RemoteDocumentCache.removeEntry()` call.
	     *
	     * You can only remove documents that have already been retrieved via
	     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
	     */    removeEntry(t, e = null) {
	        this.assertNotApplied(), this.changes.set(t, {
	            document: Ct.newInvalidDocument(t),
	            readTime: e
	        });
	    }
	    /**
	     * Looks up an entry in the cache. The buffered changes will first be checked,
	     * and if no buffered change applies, this will forward to
	     * `RemoteDocumentCache.getEntry()`.
	     *
	     * @param transaction - The transaction in which to perform any persistence
	     *     operations.
	     * @param documentKey - The key of the entry to look up.
	     * @returns The cached document or an invalid document if we have nothing
	     * cached.
	     */    getEntry(t, e) {
	        this.assertNotApplied();
	        const n = this.changes.get(e);
	        return void 0 !== n ? xs.resolve(n.document) : this.getFromCache(t, e);
	    }
	    /**
	     * Looks up several entries in the cache, forwarding to
	     * `RemoteDocumentCache.getEntry()`.
	     *
	     * @param transaction - The transaction in which to perform any persistence
	     *     operations.
	     * @param documentKeys - The keys of the entries to look up.
	     * @returns A map of cached documents, indexed by key. If an entry cannot be
	     *     found, the corresponding key will be mapped to an invalid document.
	     */    getEntries(t, e) {
	        return this.getAllFromCache(t, e);
	    }
	    /**
	     * Applies buffered changes to the underlying RemoteDocumentCache, using
	     * the provided transaction.
	     */    apply(t) {
	        return this.assertNotApplied(), this.changesApplied = !0, this.applyChanges(t);
	    }
	    /** Helper to assert this.changes is not null  */    assertNotApplied() {}
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * The RemoteDocumentCache for IndexedDb. To construct, invoke
	 * `newIndexedDbRemoteDocumentCache()`.
	 */ class $i {
	    /**
	     * @param serializer - The document serializer.
	     * @param indexManager - The query indexes that need to be maintained.
	     */
	    constructor(t, e) {
	        this.R = t, this.qt = e;
	    }
	    /**
	     * Adds the supplied entries to the cache.
	     *
	     * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer
	     * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
	     */    addEntry(t, e, n) {
	        return Mi(t).put(Li(e), n);
	    }
	    /**
	     * Removes a document from the cache.
	     *
	     * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer
	     * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
	     */    removeEntry(t, e) {
	        const n = Mi(t), s = Li(e);
	        return n.delete(s);
	    }
	    /**
	     * Updates the current cache size.
	     *
	     * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the
	     * cache's metadata.
	     */    updateMetadata(t, e) {
	        return this.getMetadata(t).next((n => (n.byteSize += e, this.me(t, n))));
	    }
	    getEntry(t, e) {
	        return Mi(t).get(Li(e)).next((t => this.ge(e, t)));
	    }
	    /**
	     * Looks up an entry in the cache.
	     *
	     * @param documentKey - The key of the entry to look up.
	     * @returns The cached document entry and its size.
	     */    ye(t, e) {
	        return Mi(t).get(Li(e)).next((t => ({
	            document: this.ge(e, t),
	            size: _i(t)
	        })));
	    }
	    getEntries(t, e) {
	        let n = un();
	        return this.pe(t, e, ((t, e) => {
	            const s = this.ge(t, e);
	            n = n.insert(t, s);
	        })).next((() => n));
	    }
	    /**
	     * Looks up several entries in the cache.
	     *
	     * @param documentKeys - The set of keys entries to look up.
	     * @returns A map of documents indexed by key and a map of sizes indexed by
	     *     key (zero if the document does not exist).
	     */    Ee(t, e) {
	        let n = un(), s = new en(wt.comparator);
	        return this.pe(t, e, ((t, e) => {
	            const i = this.ge(t, e);
	            n = n.insert(t, i), s = s.insert(t, _i(e));
	        })).next((() => ({
	            documents: n,
	            Te: s
	        })));
	    }
	    pe(t, e, n) {
	        if (e.isEmpty()) return xs.resolve();
	        const s = IDBKeyRange.bound(e.first().path.toArray(), e.last().path.toArray()), i = e.getIterator();
	        let r = i.getNext();
	        return Mi(t).Ot({
	            range: s
	        }, ((t, e, s) => {
	            const o = wt.fromSegments(t);
	            // Go through keys not found in cache.
	                        for (;r && wt.comparator(r, o) < 0; ) n(r, null), r = i.getNext();
	            r && r.isEqual(o) && (
	            // Key found in cache.
	            n(r, e), r = i.hasNext() ? i.getNext() : null), 
	            // Skip to the next key (if there is one).
	            r ? s.Ct(r.path.toArray()) : s.done();
	        })).next((() => {
	            // The rest of the keys are not in the cache. One case where `iterate`
	            // above won't go through them is when the cache is empty.
	            for (;r; ) n(r, null), r = i.hasNext() ? i.getNext() : null;
	        }));
	    }
	    getDocumentsMatchingQuery(t, e, n) {
	        let s = un();
	        const i = e.path.length + 1, r = {};
	        if (n.isEqual(z$1.min())) {
	            // Documents are ordered by key, so we can use a prefix scan to narrow
	            // down the documents we need to match the query against.
	            const t = e.path.toArray();
	            r.range = IDBKeyRange.lowerBound(t);
	        } else {
	            // Execute an index-free query and filter by read time. This is safe
	            // since all document changes to queries that have a
	            // lastLimboFreeSnapshotVersion (`sinceReadTime`) have a read time set.
	            const t = e.path.toArray(), s = Ys(n);
	            r.range = IDBKeyRange.lowerBound([ t, s ], 
	            /* open= */ !0), r.index = Es.collectionReadTimeIndex;
	        }
	        return Mi(t).Ot(r, ((t, n, r) => {
	            // The query is actually returning any path that starts with the query
	            // path prefix which may include documents in subcollections. For
	            // example, a query on 'rooms' will return rooms/abc/messages/xyx but we
	            // shouldn't match it. Fix this by discarding rows with document keys
	            // more than one segment longer than the query path.
	            if (t.length !== i) return;
	            const o = Hs(this.R, n);
	            e.path.isPrefixOf(o.key.path) ? we(e, o) && (s = s.insert(o.key, o)) : r.done();
	        })).next((() => s));
	    }
	    newChangeBuffer(t) {
	        return new Oi(this, !!t && t.trackRemovals);
	    }
	    getSize(t) {
	        return this.getMetadata(t).next((t => t.byteSize));
	    }
	    getMetadata(t) {
	        return Fi(t).get(Ts.key).next((t => (B(!!t), t)));
	    }
	    me(t, e) {
	        return Fi(t).put(Ts.key, e);
	    }
	    /**
	     * Decodes `remoteDoc` and returns the document (or null, if the document
	     * corresponds to the format used for sentinel deletes).
	     */    ge(t, e) {
	        if (e) {
	            const t = Hs(this.R, e);
	            // Whether the document is a sentinel removal and should only be used in the
	            // `getNewDocumentChanges()`
	                        if (!(t.isNoDocument() && t.version.isEqual(z$1.min()))) return t;
	        }
	        return Ct.newInvalidDocument(t);
	    }
	}

	/**
	 * Creates a new IndexedDbRemoteDocumentCache.
	 *
	 * @param serializer - The document serializer.
	 * @param indexManager - The query indexes that need to be maintained.
	 */
	/**
	 * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache.
	 *
	 * Unlike the MemoryRemoteDocumentChangeBuffer, the IndexedDb implementation computes the size
	 * delta for all submitted changes. This avoids having to re-read all documents from IndexedDb
	 * when we apply the changes.
	 */
	class Oi extends ki {
	    /**
	     * @param documentCache - The IndexedDbRemoteDocumentCache to apply the changes to.
	     * @param trackRemovals - Whether to create sentinel deletes that can be tracked by
	     * `getNewDocumentChanges()`.
	     */
	    constructor(t, e) {
	        super(), this.Ie = t, this.trackRemovals = e, 
	        // A map of document sizes prior to applying the changes in this buffer.
	        this.Ae = new xi((t => t.toString()), ((t, e) => t.isEqual(e)));
	    }
	    applyChanges(t) {
	        const e = [];
	        let n = 0, s = new rn(((t, e) => j(t.canonicalString(), e.canonicalString())));
	        return this.changes.forEach(((i, r) => {
	            const o = this.Ae.get(i);
	            if (r.document.isValidDocument()) {
	                const c = Js(this.Ie.R, r.document, this.getReadTime(i));
	                s = s.add(i.path.popLast());
	                const u = _i(c);
	                n += u - o, e.push(this.Ie.addEntry(t, i, c));
	            } else if (n -= o, this.trackRemovals) {
	                // In order to track removals, we store a "sentinel delete" in the
	                // RemoteDocumentCache. This entry is represented by a NoDocument
	                // with a version of 0 and ignored by `maybeDecodeDocument()` but
	                // preserved in `getNewDocumentChanges()`.
	                const n = Js(this.Ie.R, Ct.newNoDocument(i, z$1.min()), this.getReadTime(i));
	                e.push(this.Ie.addEntry(t, i, n));
	            } else e.push(this.Ie.removeEntry(t, i));
	        })), s.forEach((n => {
	            e.push(this.Ie.qt.addToCollectionParentIndex(t, n));
	        })), e.push(this.Ie.updateMetadata(t, n)), xs.waitFor(e);
	    }
	    getFromCache(t, e) {
	        // Record the size of everything we load from the cache so we can compute a delta later.
	        return this.Ie.ye(t, e).next((t => (this.Ae.set(e, t.size), t.document)));
	    }
	    getAllFromCache(t, e) {
	        // Record the size of everything we load from the cache so we can compute
	        // a delta later.
	        return this.Ie.Ee(t, e).next((({documents: t, Te: e}) => (
	        // Note: `getAllFromCache` returns two maps instead of a single map from
	        // keys to `DocumentSizeEntry`s. This is to allow returning the
	        // `MutableDocumentMap` directly, without a conversion.
	        e.forEach(((t, e) => {
	            this.Ae.set(t, e);
	        })), t)));
	    }
	}

	function Fi(t) {
	    return js(t, Ts.store);
	}

	/**
	 * Helper to get a typed SimpleDbStore for the remoteDocuments object store.
	 */ function Mi(t) {
	    return js(t, Es.store);
	}

	function Li(t) {
	    return t.path.toArray();
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** Performs database creation and schema upgrades. */ class Bi {
	    constructor(t) {
	        this.R = t;
	    }
	    /**
	     * Performs database creation and schema upgrades.
	     *
	     * Note that in production, this method is only ever used to upgrade the schema
	     * to SCHEMA_VERSION. Different values of toVersion are only used for testing
	     * and local feature development.
	     */    Rt(t, e, n, s) {
	        B(n < s && n >= 0 && s <= 11);
	        const i = new ks("createOrUpgrade", e);
	        n < 1 && s >= 1 && (function(t) {
	            t.createObjectStore(ws.store);
	        }(t), function(t) {
	            t.createObjectStore(_s.store, {
	                keyPath: _s.keyPath
	            });
	            t.createObjectStore(ms.store, {
	                keyPath: ms.keyPath,
	                autoIncrement: !0
	            }).createIndex(ms.userMutationsIndex, ms.userMutationsKeyPath, {
	                unique: !0
	            }), t.createObjectStore(gs.store);
	        }
	        /**
	 * Upgrade function to migrate the 'mutations' store from V1 to V3. Loads
	 * and rewrites all data.
	 */ (t), Ui(t), function(t) {
	            t.createObjectStore(Es.store);
	        }(t));
	        // Migration 2 to populate the targetGlobal object no longer needed since
	        // migration 3 unconditionally clears it.
	                let r = xs.resolve();
	        return n < 3 && s >= 3 && (
	        // Brand new clients don't need to drop and recreate--only clients that
	        // potentially have corrupt data.
	        0 !== n && (!function(t) {
	            t.deleteObjectStore(As.store), t.deleteObjectStore(Is.store), t.deleteObjectStore(Rs.store);
	        }(t), Ui(t)), r = r.next((() => 
	        /**
	 * Creates the target global singleton row.
	 *
	 * @param txn - The version upgrade transaction for indexeddb
	 */
	        function(t) {
	            const e = t.store(Rs.store), n = new Rs(
	            /*highestTargetId=*/ 0, 
	            /*lastListenSequenceNumber=*/ 0, z$1.min().toTimestamp(), 
	            /*targetCount=*/ 0);
	            return e.put(Rs.key, n);
	        }
	        /**
	 * Creates indices on the RemoteDocuments store used for both multi-tab
	 * and Index-Free queries.
	 */ (i)))), n < 4 && s >= 4 && (0 !== n && (
	        // Schema version 3 uses auto-generated keys to generate globally unique
	        // mutation batch IDs (this was previously ensured internally by the
	        // client). To migrate to the new schema, we have to read all mutations
	        // and write them back out. We preserve the existing batch IDs to guarantee
	        // consistency with other object stores. Any further mutation batch IDs will
	        // be auto-generated.
	        r = r.next((() => function(t, e) {
	            return e.store(ms.store).Nt().next((n => {
	                t.deleteObjectStore(ms.store);
	                t.createObjectStore(ms.store, {
	                    keyPath: ms.keyPath,
	                    autoIncrement: !0
	                }).createIndex(ms.userMutationsIndex, ms.userMutationsKeyPath, {
	                    unique: !0
	                });
	                const s = e.store(ms.store), i = n.map((t => s.put(t)));
	                return xs.waitFor(i);
	            }));
	        }(t, i)))), r = r.next((() => {
	            !function(t) {
	                t.createObjectStore(bs.store, {
	                    keyPath: bs.keyPath
	                });
	            }(t);
	        }))), n < 5 && s >= 5 && (r = r.next((() => this.Re(i)))), n < 6 && s >= 6 && (r = r.next((() => (function(t) {
	            t.createObjectStore(Ts.store);
	        }(t), this.Pe(i))))), n < 7 && s >= 7 && (r = r.next((() => this.be(i)))), n < 8 && s >= 8 && (r = r.next((() => this.ve(t, i)))), 
	        n < 9 && s >= 9 && (r = r.next((() => {
	            // Multi-Tab used to manage its own changelog, but this has been moved
	            // to the DbRemoteDocument object store itself. Since the previous change
	            // log only contained transient data, we can drop its object store.
	            !function(t) {
	                t.objectStoreNames.contains("remoteDocumentChanges") && t.deleteObjectStore("remoteDocumentChanges");
	            }(t), function(t) {
	                const e = t.objectStore(Es.store);
	                e.createIndex(Es.readTimeIndex, Es.readTimeIndexPath, {
	                    unique: !1
	                }), e.createIndex(Es.collectionReadTimeIndex, Es.collectionReadTimeIndexPath, {
	                    unique: !1
	                });
	            }(e);
	        }))), n < 10 && s >= 10 && (r = r.next((() => this.Ve(i)))), n < 11 && s >= 11 && (r = r.next((() => {
	            !function(t) {
	                t.createObjectStore(vs.store, {
	                    keyPath: vs.keyPath
	                });
	            }(t), function(t) {
	                t.createObjectStore(Vs.store, {
	                    keyPath: Vs.keyPath
	                });
	            }
	            /**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ (t);
	        }))), r;
	    }
	    Pe(t) {
	        let e = 0;
	        return t.store(Es.store).Ot(((t, n) => {
	            e += _i(n);
	        })).next((() => {
	            const n = new Ts(e);
	            return t.store(Ts.store).put(Ts.key, n);
	        }));
	    }
	    Re(t) {
	        const e = t.store(_s.store), n = t.store(ms.store);
	        return e.Nt().next((e => xs.forEach(e, (e => {
	            const s = IDBKeyRange.bound([ e.userId, -1 ], [ e.userId, e.lastAcknowledgedBatchId ]);
	            return n.Nt(ms.userMutationsIndex, s).next((n => xs.forEach(n, (n => {
	                B(n.userId === e.userId);
	                const s = ei(this.R, n);
	                return wi(t, e.userId, s).next((() => {}));
	            }))));
	        }))));
	    }
	    /**
	     * Ensures that every document in the remote document cache has a corresponding sentinel row
	     * with a sequence number. Missing rows are given the most recently used sequence number.
	     */    be(t) {
	        const e = t.store(As.store), n = t.store(Es.store);
	        return t.store(Rs.store).get(Rs.key).next((t => {
	            const s = [];
	            return n.Ot(((n, i) => {
	                const r = new Z(n), o = function(t) {
	                    return [ 0, as(t) ];
	                }(r);
	                s.push(e.get(o).next((n => n ? xs.resolve() : (n => e.put(new As(0, as(n), t.highestListenSequenceNumber)))(r))));
	            })).next((() => xs.waitFor(s)));
	        }));
	    }
	    ve(t, e) {
	        // Create the index.
	        t.createObjectStore(Ps.store, {
	            keyPath: Ps.keyPath
	        });
	        const n = e.store(Ps.store), s = new ai, i = t => {
	            if (s.add(t)) {
	                const e = t.lastSegment(), s = t.popLast();
	                return n.put({
	                    collectionId: e,
	                    parent: as(s)
	                });
	            }
	        };
	        // Helper to add an index entry iff we haven't already written it.
	                // Index existing remote documents.
	        return e.store(Es.store).Ot({
	            $t: !0
	        }, ((t, e) => {
	            const n = new Z(t);
	            return i(n.popLast());
	        })).next((() => e.store(gs.store).Ot({
	            $t: !0
	        }, (([t, e, n], s) => {
	            const r = fs(e);
	            return i(r.popLast());
	        }))));
	    }
	    Ve(t) {
	        const e = t.store(Is.store);
	        return e.Ot(((t, n) => {
	            const s = ni(n), i = si(this.R, s);
	            return e.put(i);
	        }));
	    }
	}

	function Ui(t) {
	    t.createObjectStore(As.store, {
	        keyPath: As.keyPath
	    }).createIndex(As.documentTargetsIndex, As.documentTargetsKeyPath, {
	        unique: !0
	    });
	    // NOTE: This is unique only because the TargetId is the suffix.
	    t.createObjectStore(Is.store, {
	        keyPath: Is.keyPath
	    }).createIndex(Is.queryTargetsIndexName, Is.queryTargetsKeyPath, {
	        unique: !0
	    }), t.createObjectStore(Rs.store);
	}

	const qi = "Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.";

	/**
	 * Oldest acceptable age in milliseconds for client metadata before the client
	 * is considered inactive and its associated data is garbage collected.
	 */
	/**
	 * An IndexedDB-backed instance of Persistence. Data is stored persistently
	 * across sessions.
	 *
	 * On Web only, the Firestore SDKs support shared access to its persistence
	 * layer. This allows multiple browser tabs to read and write to IndexedDb and
	 * to synchronize state even without network connectivity. Shared access is
	 * currently optional and not enabled unless all clients invoke
	 * `enablePersistence()` with `{synchronizeTabs:true}`.
	 *
	 * In multi-tab mode, if multiple clients are active at the same time, the SDK
	 * will designate one client as the “primary client”. An effort is made to pick
	 * a visible, network-connected and active client, and this client is
	 * responsible for letting other clients know about its presence. The primary
	 * client writes a unique client-generated identifier (the client ID) to
	 * IndexedDb’s “owner” store every 4 seconds. If the primary client fails to
	 * update this entry, another client can acquire the lease and take over as
	 * primary.
	 *
	 * Some persistence operations in the SDK are designated as primary-client only
	 * operations. This includes the acknowledgment of mutations and all updates of
	 * remote documents. The effects of these operations are written to persistence
	 * and then broadcast to other tabs via LocalStorage (see
	 * `WebStorageSharedClientState`), which then refresh their state from
	 * persistence.
	 *
	 * Similarly, the primary client listens to notifications sent by secondary
	 * clients to discover persistence changes written by secondary clients, such as
	 * the addition of new mutations and query targets.
	 *
	 * If multi-tab is not enabled and another tab already obtained the primary
	 * lease, IndexedDbPersistence enters a failed state and all subsequent
	 * operations will automatically fail.
	 *
	 * Additionally, there is an optimization so that when a tab is closed, the
	 * primary lease is released immediately (this is especially important to make
	 * sure that a refreshed tab is able to immediately re-acquire the primary
	 * lease). Unfortunately, IndexedDB cannot be reliably used in window.unload
	 * since it is an asynchronous API. So in addition to attempting to give up the
	 * lease, the leaseholder writes its client ID to a "zombiedClient" entry in
	 * LocalStorage which acts as an indicator that another tab should go ahead and
	 * take the primary lease immediately regardless of the current lease timestamp.
	 *
	 * TODO(b/114226234): Remove `synchronizeTabs` section when multi-tab is no
	 * longer optional.
	 */
	class Ki {
	    constructor(
	    /**
	     * Whether to synchronize the in-memory state of multiple tabs and share
	     * access to local persistence.
	     */
	    t, e, n, s, i, r, o, c, u, 
	    /**
	     * If set to true, forcefully obtains database access. Existing tabs will
	     * no longer be able to access IndexedDB.
	     */
	    a) {
	        if (this.allowTabSynchronization = t, this.persistenceKey = e, this.clientId = n, 
	        this.Se = i, this.window = r, this.document = o, this.De = u, this.Ce = a, this.Ne = null, 
	        this.xe = !1, this.isPrimary = !1, this.networkEnabled = !0, 
	        /** Our window.unload handler, if registered. */
	        this.ke = null, this.inForeground = !1, 
	        /** Our 'visibilitychange' listener if registered. */
	        this.$e = null, 
	        /** The client metadata refresh task. */
	        this.Oe = null, 
	        /** The last time we garbage collected the client metadata object store. */
	        this.Fe = Number.NEGATIVE_INFINITY, 
	        /** A listener to notify on primary state changes. */
	        this.Me = t => Promise.resolve(), !Ki.gt()) throw new C(D.UNIMPLEMENTED, "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");
	        this.referenceDelegate = new Ci(this, s), this.Le = e + "main", this.R = new zs(c), 
	        this.Be = new $s(this.Le, 11, new Bi(this.R)), this.Ue = new Ii(this.referenceDelegate, this.R), 
	        this.qt = new hi, this.qe = function(t, e) {
	            return new $i(t, e);
	        }
	        /**
	 * Returns the set of documents that have changed since the specified read
	 * time.
	 */
	        // PORTING NOTE: This is only used for multi-tab synchronization.
	        (this.R, this.qt), this.Ke = new ri, this.window && this.window.localStorage ? this.je = this.window.localStorage : (this.je = null, 
	        !1 === a && O("IndexedDbPersistence", "LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."));
	    }
	    /**
	     * Attempt to start IndexedDb persistence.
	     *
	     * @returns Whether persistence was enabled.
	     */    start() {
	        // NOTE: This is expected to fail sometimes (in the case of another tab
	        // already having the persistence lock), so it's the first thing we should
	        // do.
	        return this.Qe().then((() => {
	            if (!this.isPrimary && !this.allowTabSynchronization) 
	            // Fail `start()` if `synchronizeTabs` is disabled and we cannot
	            // obtain the primary lease.
	            throw new C(D.FAILED_PRECONDITION, qi);
	            return this.We(), this.Ge(), this.ze(), this.runTransaction("getHighestListenSequenceNumber", "readonly", (t => this.Ue.getHighestSequenceNumber(t)));
	        })).then((t => {
	            this.Ne = new S(t, this.De);
	        })).then((() => {
	            this.xe = !0;
	        })).catch((t => (this.Be && this.Be.close(), Promise.reject(t))));
	    }
	    /**
	     * Registers a listener that gets called when the primary state of the
	     * instance changes. Upon registering, this listener is invoked immediately
	     * with the current primary state.
	     *
	     * PORTING NOTE: This is only used for Web multi-tab.
	     */    He(t) {
	        return this.Me = async e => {
	            if (this.started) return t(e);
	        }, t(this.isPrimary);
	    }
	    /**
	     * Registers a listener that gets called when the database receives a
	     * version change event indicating that it has deleted.
	     *
	     * PORTING NOTE: This is only used for Web multi-tab.
	     */    setDatabaseDeletedListener(t) {
	        this.Be.bt((async e => {
	            // Check if an attempt is made to delete IndexedDB.
	            null === e.newVersion && await t();
	        }));
	    }
	    /**
	     * Adjusts the current network state in the client's metadata, potentially
	     * affecting the primary lease.
	     *
	     * PORTING NOTE: This is only used for Web multi-tab.
	     */    setNetworkEnabled(t) {
	        this.networkEnabled !== t && (this.networkEnabled = t, 
	        // Schedule a primary lease refresh for immediate execution. The eventual
	        // lease update will be propagated via `primaryStateListener`.
	        this.Se.enqueueAndForget((async () => {
	            this.started && await this.Qe();
	        })));
	    }
	    /**
	     * Updates the client metadata in IndexedDb and attempts to either obtain or
	     * extend the primary lease for the local client. Asynchronously notifies the
	     * primary state listener if the client either newly obtained or released its
	     * primary lease.
	     */    Qe() {
	        return this.runTransaction("updateClientMetadataAndTryBecomePrimary", "readwrite", (t => Qi(t).put(new bs(this.clientId, Date.now(), this.networkEnabled, this.inForeground)).next((() => {
	            if (this.isPrimary) return this.Je(t).next((t => {
	                t || (this.isPrimary = !1, this.Se.enqueueRetryable((() => this.Me(!1))));
	            }));
	        })).next((() => this.Ye(t))).next((e => this.isPrimary && !e ? this.Xe(t).next((() => !1)) : !!e && this.Ze(t).next((() => !0)))))).catch((t => {
	            if (Ms(t)) 
	            // Proceed with the existing state. Any subsequent access to
	            // IndexedDB will verify the lease.
	            return $("IndexedDbPersistence", "Failed to extend owner lease: ", t), this.isPrimary;
	            if (!this.allowTabSynchronization) throw t;
	            return $("IndexedDbPersistence", "Releasing owner lease after error during lease refresh", t), 
	            /* isPrimary= */ !1;
	        })).then((t => {
	            this.isPrimary !== t && this.Se.enqueueRetryable((() => this.Me(t))), this.isPrimary = t;
	        }));
	    }
	    Je(t) {
	        return ji(t).get(ws.key).next((t => xs.resolve(this.tn(t))));
	    }
	    en(t) {
	        return Qi(t).delete(this.clientId);
	    }
	    /**
	     * If the garbage collection threshold has passed, prunes the
	     * RemoteDocumentChanges and the ClientMetadata store based on the last update
	     * time of all clients.
	     */    async nn() {
	        if (this.isPrimary && !this.sn(this.Fe, 18e5)) {
	            this.Fe = Date.now();
	            const t = await this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", (t => {
	                const e = js(t, bs.store);
	                return e.Nt().next((t => {
	                    const n = this.rn(t, 18e5), s = t.filter((t => -1 === n.indexOf(t)));
	                    // Delete metadata for clients that are no longer considered active.
	                    return xs.forEach(s, (t => e.delete(t.clientId))).next((() => s));
	                }));
	            })).catch((() => []));
	            // Delete potential leftover entries that may continue to mark the
	            // inactive clients as zombied in LocalStorage.
	            // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for
	            // the client atomically, but we can't. So we opt to delete the IndexedDb
	            // entries first to avoid potentially reviving a zombied client.
	                        if (this.je) for (const e of t) this.je.removeItem(this.on(e.clientId));
	        }
	    }
	    /**
	     * Schedules a recurring timer to update the client metadata and to either
	     * extend or acquire the primary lease if the client is eligible.
	     */    ze() {
	        this.Oe = this.Se.enqueueAfterDelay("client_metadata_refresh" /* ClientMetadataRefresh */ , 4e3, (() => this.Qe().then((() => this.nn())).then((() => this.ze()))));
	    }
	    /** Checks whether `client` is the local client. */    tn(t) {
	        return !!t && t.ownerId === this.clientId;
	    }
	    /**
	     * Evaluate the state of all active clients and determine whether the local
	     * client is or can act as the holder of the primary lease. Returns whether
	     * the client is eligible for the lease, but does not actually acquire it.
	     * May return 'false' even if there is no active leaseholder and another
	     * (foreground) client should become leaseholder instead.
	     */    Ye(t) {
	        if (this.Ce) return xs.resolve(!0);
	        return ji(t).get(ws.key).next((e => {
	            // A client is eligible for the primary lease if:
	            // - its network is enabled and the client's tab is in the foreground.
	            // - its network is enabled and no other client's tab is in the
	            //   foreground.
	            // - every clients network is disabled and the client's tab is in the
	            //   foreground.
	            // - every clients network is disabled and no other client's tab is in
	            //   the foreground.
	            // - the `forceOwningTab` setting was passed in.
	            if (null !== e && this.sn(e.leaseTimestampMs, 5e3) && !this.cn(e.ownerId)) {
	                if (this.tn(e) && this.networkEnabled) return !0;
	                if (!this.tn(e)) {
	                    if (!e.allowTabSynchronization) 
	                    // Fail the `canActAsPrimary` check if the current leaseholder has
	                    // not opted into multi-tab synchronization. If this happens at
	                    // client startup, we reject the Promise returned by
	                    // `enablePersistence()` and the user can continue to use Firestore
	                    // with in-memory persistence.
	                    // If this fails during a lease refresh, we will instead block the
	                    // AsyncQueue from executing further operations. Note that this is
	                    // acceptable since mixing & matching different `synchronizeTabs`
	                    // settings is not supported.
	                    // TODO(b/114226234): Remove this check when `synchronizeTabs` can
	                    // no longer be turned off.
	                    throw new C(D.FAILED_PRECONDITION, qi);
	                    return !1;
	                }
	            }
	            return !(!this.networkEnabled || !this.inForeground) || Qi(t).Nt().next((t => void 0 === this.rn(t, 5e3).find((t => {
	                if (this.clientId !== t.clientId) {
	                    const e = !this.networkEnabled && t.networkEnabled, n = !this.inForeground && t.inForeground, s = this.networkEnabled === t.networkEnabled;
	                    if (e || n && s) return !0;
	                }
	                return !1;
	            }))));
	        })).next((t => (this.isPrimary !== t && $("IndexedDbPersistence", `Client ${t ? "is" : "is not"} eligible for a primary lease.`), 
	        t)));
	    }
	    async shutdown() {
	        // The shutdown() operations are idempotent and can be called even when
	        // start() aborted (e.g. because it couldn't acquire the persistence lease).
	        this.xe = !1, this.un(), this.Oe && (this.Oe.cancel(), this.Oe = null), this.an(), 
	        this.hn(), 
	        // Use `SimpleDb.runTransaction` directly to avoid failing if another tab
	        // has obtained the primary lease.
	        await this.Be.runTransaction("shutdown", "readwrite", [ ws.store, bs.store ], (t => {
	            const e = new Ks(t, S.o);
	            return this.Xe(e).next((() => this.en(e)));
	        })), this.Be.close(), 
	        // Remove the entry marking the client as zombied from LocalStorage since
	        // we successfully deleted its metadata from IndexedDb.
	        this.ln();
	    }
	    /**
	     * Returns clients that are not zombied and have an updateTime within the
	     * provided threshold.
	     */    rn(t, e) {
	        return t.filter((t => this.sn(t.updateTimeMs, e) && !this.cn(t.clientId)));
	    }
	    /**
	     * Returns the IDs of the clients that are currently active. If multi-tab
	     * is not supported, returns an array that only contains the local client's
	     * ID.
	     *
	     * PORTING NOTE: This is only used for Web multi-tab.
	     */    fn() {
	        return this.runTransaction("getActiveClients", "readonly", (t => Qi(t).Nt().next((t => this.rn(t, 18e5).map((t => t.clientId))))));
	    }
	    get started() {
	        return this.xe;
	    }
	    getMutationQueue(t) {
	        return mi.jt(t, this.R, this.qt, this.referenceDelegate);
	    }
	    getTargetCache() {
	        return this.Ue;
	    }
	    getRemoteDocumentCache() {
	        return this.qe;
	    }
	    getIndexManager() {
	        return this.qt;
	    }
	    getBundleCache() {
	        return this.Ke;
	    }
	    runTransaction(t, e, n) {
	        $("IndexedDbPersistence", "Starting transaction:", t);
	        const s = "readonly" === e ? "readonly" : "readwrite";
	        let i;
	        // Do all transactions as readwrite against all object stores, since we
	        // are the only reader/writer.
	                return this.Be.runTransaction(t, s, Ss, (s => (i = new Ks(s, this.Ne ? this.Ne.next() : S.o), 
	        "readwrite-primary" === e ? this.Je(i).next((t => !!t || this.Ye(i))).next((e => {
	            if (!e) throw O(`Failed to obtain primary lease for action '${t}'.`), this.isPrimary = !1, 
	            this.Se.enqueueRetryable((() => this.Me(!1))), new C(D.FAILED_PRECONDITION, Ds);
	            return n(i);
	        })).next((t => this.Ze(i).next((() => t)))) : this.dn(i).next((() => n(i)))))).then((t => (i.raiseOnCommittedEvent(), 
	        t)));
	    }
	    /**
	     * Verifies that the current tab is the primary leaseholder or alternatively
	     * that the leaseholder has opted into multi-tab synchronization.
	     */
	    // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
	    // be turned off.
	    dn(t) {
	        return ji(t).get(ws.key).next((t => {
	            if (null !== t && this.sn(t.leaseTimestampMs, 5e3) && !this.cn(t.ownerId) && !this.tn(t) && !(this.Ce || this.allowTabSynchronization && t.allowTabSynchronization)) throw new C(D.FAILED_PRECONDITION, qi);
	        }));
	    }
	    /**
	     * Obtains or extends the new primary lease for the local client. This
	     * method does not verify that the client is eligible for this lease.
	     */    Ze(t) {
	        const e = new ws(this.clientId, this.allowTabSynchronization, Date.now());
	        return ji(t).put(ws.key, e);
	    }
	    static gt() {
	        return $s.gt();
	    }
	    /** Checks the primary lease and removes it if we are the current primary. */    Xe(t) {
	        const e = ji(t);
	        return e.get(ws.key).next((t => this.tn(t) ? ($("IndexedDbPersistence", "Releasing primary lease."), 
	        e.delete(ws.key)) : xs.resolve()));
	    }
	    /** Verifies that `updateTimeMs` is within `maxAgeMs`. */    sn(t, e) {
	        const n = Date.now();
	        return !(t < n - e) && (!(t > n) || (O(`Detected an update time that is in the future: ${t} > ${n}`), 
	        !1));
	    }
	    We() {
	        null !== this.document && "function" == typeof this.document.addEventListener && (this.$e = () => {
	            this.Se.enqueueAndForget((() => (this.inForeground = "visible" === this.document.visibilityState, 
	            this.Qe())));
	        }, this.document.addEventListener("visibilitychange", this.$e), this.inForeground = "visible" === this.document.visibilityState);
	    }
	    an() {
	        this.$e && (this.document.removeEventListener("visibilitychange", this.$e), this.$e = null);
	    }
	    /**
	     * Attaches a window.unload handler that will synchronously write our
	     * clientId to a "zombie client id" location in LocalStorage. This can be used
	     * by tabs trying to acquire the primary lease to determine that the lease
	     * is no longer valid even if the timestamp is recent. This is particularly
	     * important for the refresh case (so the tab correctly re-acquires the
	     * primary lease). LocalStorage is used for this rather than IndexedDb because
	     * it is a synchronous API and so can be used reliably from  an unload
	     * handler.
	     */    Ge() {
	        var t;
	        "function" == typeof (null === (t = this.window) || void 0 === t ? void 0 : t.addEventListener) && (this.ke = () => {
	            // Note: In theory, this should be scheduled on the AsyncQueue since it
	            // accesses internal state. We execute this code directly during shutdown
	            // to make sure it gets a chance to run.
	            this.un(), isSafari() && navigator.appVersion.match("Version/14") && 
	            // On Safari 14, we do not run any cleanup actions as it might trigger
	            // a bug that prevents Safari from re-opening IndexedDB during the
	            // next page load.
	            // See https://bugs.webkit.org/show_bug.cgi?id=226547
	            this.Se.enterRestrictedMode(/* purgeExistingTasks= */ !0), this.Se.enqueueAndForget((() => this.shutdown()));
	        }, this.window.addEventListener("pagehide", this.ke));
	    }
	    hn() {
	        this.ke && (this.window.removeEventListener("pagehide", this.ke), this.ke = null);
	    }
	    /**
	     * Returns whether a client is "zombied" based on its LocalStorage entry.
	     * Clients become zombied when their tab closes without running all of the
	     * cleanup logic in `shutdown()`.
	     */    cn(t) {
	        var e;
	        try {
	            const n = null !== (null === (e = this.je) || void 0 === e ? void 0 : e.getItem(this.on(t)));
	            return $("IndexedDbPersistence", `Client '${t}' ${n ? "is" : "is not"} zombied in LocalStorage`), 
	            n;
	        } catch (t) {
	            // Gracefully handle if LocalStorage isn't working.
	            return O("IndexedDbPersistence", "Failed to get zombied client id.", t), !1;
	        }
	    }
	    /**
	     * Record client as zombied (a client that had its tab closed). Zombied
	     * clients are ignored during primary tab selection.
	     */    un() {
	        if (this.je) try {
	            this.je.setItem(this.on(this.clientId), String(Date.now()));
	        } catch (t) {
	            // Gracefully handle if LocalStorage isn't available / working.
	            O("Failed to set zombie client id.", t);
	        }
	    }
	    /** Removes the zombied client entry if it exists. */    ln() {
	        if (this.je) try {
	            this.je.removeItem(this.on(this.clientId));
	        } catch (t) {
	            // Ignore
	        }
	    }
	    on(t) {
	        return `firestore_zombie_${this.persistenceKey}_${t}`;
	    }
	}

	/**
	 * Helper to get a typed SimpleDbStore for the primary client object store.
	 */ function ji(t) {
	    return js(t, ws.store);
	}

	/**
	 * Helper to get a typed SimpleDbStore for the client metadata object store.
	 */ function Qi(t) {
	    return js(t, bs.store);
	}

	/**
	 * Generates a string used as a prefix when storing data in IndexedDB and
	 * LocalStorage.
	 */ function Wi(t, e) {
	    // Use two different prefix formats:
	    //   * firestore / persistenceKey / projectID . databaseID / ...
	    //   * firestore / persistenceKey / projectID / ...
	    // projectIDs are DNS-compatible names and cannot contain dots
	    // so there's no danger of collisions.
	    let n = t.projectId;
	    return t.isDefaultDatabase || (n += "." + t.database), "firestore/" + e + "/" + n + "/";
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A readonly view of the local state of all documents we're tracking (i.e. we
	 * have a cached version in remoteDocumentCache or local mutations for the
	 * document). The view is computed by applying the mutations in the
	 * MutationQueue to the RemoteDocumentCache.
	 */ class zi {
	    constructor(t, e, n) {
	        this.qe = t, this._n = e, this.qt = n;
	    }
	    /**
	     * Get the local view of the document identified by `key`.
	     *
	     * @returns Local view of the document or null if we don't have any cached
	     * state for it.
	     */    mn(t, e) {
	        return this._n.getAllMutationBatchesAffectingDocumentKey(t, e).next((n => this.gn(t, e, n)));
	    }
	    /** Internal version of `getDocument` that allows reusing batches. */    gn(t, e, n) {
	        return this.qe.getEntry(t, e).next((t => {
	            for (const e of n) e.applyToLocalView(t);
	            return t;
	        }));
	    }
	    // Returns the view of the given `docs` as they would appear after applying
	    // all mutations in the given `batches`.
	    yn(t, e) {
	        t.forEach(((t, n) => {
	            for (const t of e) t.applyToLocalView(n);
	        }));
	    }
	    /**
	     * Gets the local view of the documents identified by `keys`.
	     *
	     * If we don't have cached state for a document in `keys`, a NoDocument will
	     * be stored for that key in the resulting set.
	     */    pn(t, e) {
	        return this.qe.getEntries(t, e).next((e => this.En(t, e).next((() => e))));
	    }
	    /**
	     * Applies the local view the given `baseDocs` without retrieving documents
	     * from the local store.
	     */    En(t, e) {
	        return this._n.getAllMutationBatchesAffectingDocumentKeys(t, e).next((t => this.yn(e, t)));
	    }
	    /**
	     * Performs a query against the local view of all documents.
	     *
	     * @param transaction - The persistence transaction.
	     * @param query - The query to match documents against.
	     * @param sinceReadTime - If not set to SnapshotVersion.min(), return only
	     *     documents that have been read since this snapshot version (exclusive).
	     */    getDocumentsMatchingQuery(t, e, n) {
	        /**
	 * Returns whether the query matches a single document by path (rather than a
	 * collection).
	 */
	        return function(t) {
	            return wt.isDocumentKey(t.path) && null === t.collectionGroup && 0 === t.filters.length;
	        }(e) ? this.Tn(t, e.path) : ce(e) ? this.In(t, e, n) : this.An(t, e, n);
	    }
	    Tn(t, e) {
	        // Just do a simple document lookup.
	        return this.mn(t, new wt(e)).next((t => {
	            let e = hn();
	            return t.isFoundDocument() && (e = e.insert(t.key, t)), e;
	        }));
	    }
	    In(t, e, n) {
	        const s = e.collectionGroup;
	        let i = hn();
	        return this.qt.getCollectionParents(t, s).next((r => xs.forEach(r, (r => {
	            const o = function(t, e) {
	                return new te(e, 
	                /*collectionGroup=*/ null, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
	            }
	            /**
	 * Returns true if this query does not specify any query constraints that
	 * could remove results.
	 */ (e, r.child(s));
	            return this.An(t, o, n).next((t => {
	                t.forEach(((t, e) => {
	                    i = i.insert(t, e);
	                }));
	            }));
	        })).next((() => i))));
	    }
	    An(t, e, n) {
	        // Query the remote documents and overlay mutations.
	        let s, i;
	        return this.qe.getDocumentsMatchingQuery(t, e, n).next((n => (s = n, this._n.getAllMutationBatchesAffectingQuery(t, e)))).next((e => (i = e, 
	        this.Rn(t, i, s).next((t => {
	            s = t;
	            for (const t of i) for (const e of t.mutations) {
	                const n = e.key;
	                let i = s.get(n);
	                null == i && (
	                // Create invalid document to apply mutations on top of
	                i = Ct.newInvalidDocument(n), s = s.insert(n, i)), Le(e, i, t.localWriteTime), i.isFoundDocument() || (s = s.remove(n));
	            }
	        }))))).next((() => (
	        // Finally, filter out any documents that don't actually match
	        // the query.
	        s.forEach(((t, n) => {
	            we(e, n) || (s = s.remove(t));
	        })), s)));
	    }
	    Rn(t, e, n) {
	        let s = wn();
	        for (const t of e) for (const e of t.mutations) e instanceof je && null === n.get(e.key) && (s = s.add(e.key));
	        let i = n;
	        return this.qe.getEntries(t, s).next((t => (t.forEach(((t, e) => {
	            e.isFoundDocument() && (i = i.insert(t, e));
	        })), i)));
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A set of changes to what documents are currently in view and out of view for
	 * a given query. These changes are sent to the LocalStore by the View (via
	 * the SyncEngine) and are used to pin / unpin documents as appropriate.
	 */ class Hi {
	    constructor(t, e, n, s) {
	        this.targetId = t, this.fromCache = e, this.Pn = n, this.bn = s;
	    }
	    static vn(t, e) {
	        let n = wn(), s = wn();
	        for (const t of e.docChanges) switch (t.type) {
	          case 0 /* Added */ :
	            n = n.add(t.doc.key);
	            break;

	          case 1 /* Removed */ :
	            s = s.add(t.doc.key);
	 // do nothing
	                }
	        return new Hi(t, e.fromCache, n, s);
	    }
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A query engine that takes advantage of the target document mapping in the
	 * QueryCache. Query execution is optimized by only reading the documents that
	 * previously matched a query plus any documents that were edited after the
	 * query was last listened to.
	 *
	 * There are some cases when this optimization is not guaranteed to produce
	 * the same results as full collection scans. In these cases, query
	 * processing falls back to full scans. These cases are:
	 *
	 * - Limit queries where a document that matched the query previously no longer
	 *   matches the query.
	 *
	 * - Limit queries where a document edit may cause the document to sort below
	 *   another document that is in the local cache.
	 *
	 * - Queries that have never been CURRENT or free of limbo documents.
	 */ class Ji {
	    /** Sets the document view to query against. */
	    Vn(t) {
	        this.Sn = t;
	    }
	    /** Returns all local documents matching the specified query. */    getDocumentsMatchingQuery(t, e, n, s) {
	        // Queries that match all documents don't benefit from using
	        // key-based lookups. It is more efficient to scan all documents in a
	        // collection, rather than to perform individual lookups.
	        return function(t) {
	            return 0 === t.filters.length && null === t.limit && null == t.startAt && null == t.endAt && (0 === t.explicitOrderBy.length || 1 === t.explicitOrderBy.length && t.explicitOrderBy[0].field.isKeyField());
	        }(e) || n.isEqual(z$1.min()) ? this.Dn(t, e) : this.Sn.pn(t, s).next((i => {
	            const r = this.Cn(e, i);
	            return (se(e) || ie(e)) && this.Nn(e.limitType, r, s, n) ? this.Dn(t, e) : (x$1() <= LogLevel.DEBUG && $("QueryEngine", "Re-using previous result from %s to execute query: %s", n.toString(), de(e)), 
	            this.Sn.getDocumentsMatchingQuery(t, e, n).next((t => (
	            // We merge `previousResults` into `updateResults`, since
	            // `updateResults` is already a DocumentMap. If a document is
	            // contained in both lists, then its contents are the same.
	            r.forEach((e => {
	                t = t.insert(e.key, e);
	            })), t))));
	        }));
	        // Queries that have never seen a snapshot without limbo free documents
	        // should also be run as a full collection scan.
	        }
	    /** Applies the query filter and sorting to the provided documents.  */    Cn(t, e) {
	        // Sort the documents and re-apply the query filter since previously
	        // matching documents do not necessarily still match the query.
	        let n = new rn(_e(t));
	        return e.forEach(((e, s) => {
	            we(t, s) && (n = n.add(s));
	        })), n;
	    }
	    /**
	     * Determines if a limit query needs to be refilled from cache, making it
	     * ineligible for index-free execution.
	     *
	     * @param sortedPreviousResults - The documents that matched the query when it
	     * was last synchronized, sorted by the query's comparator.
	     * @param remoteKeys - The document keys that matched the query at the last
	     * snapshot.
	     * @param limboFreeSnapshotVersion - The version of the snapshot when the
	     * query was last synchronized.
	     */    Nn(t, e, n, s) {
	        // The query needs to be refilled if a previously matching document no
	        // longer matches.
	        if (n.size !== e.size) return !0;
	        // Limit queries are not eligible for index-free query execution if there is
	        // a potential that an older document from cache now sorts before a document
	        // that was previously part of the limit. This, however, can only happen if
	        // the document at the edge of the limit goes out of limit.
	        // If a document that is not the limit boundary sorts differently,
	        // the boundary of the limit itself did not change and documents from cache
	        // will continue to be "rejected" by this boundary. Therefore, we can ignore
	        // any modifications that don't affect the last document.
	                const i = "F" /* First */ === t ? e.last() : e.first();
	        return !!i && (i.hasPendingWrites || i.version.compareTo(s) > 0);
	    }
	    Dn(t, e) {
	        return x$1() <= LogLevel.DEBUG && $("QueryEngine", "Using full collection scan to execute query:", de(e)), 
	        this.Sn.getDocumentsMatchingQuery(t, e, z$1.min());
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Implements `LocalStore` interface.
	 *
	 * Note: some field defined in this class might have public access level, but
	 * the class is not exported so they are only accessible from this module.
	 * This is useful to implement optional features (like bundles) in free
	 * functions, such that they are tree-shakeable.
	 */
	class Yi {
	    constructor(
	    /** Manages our in-memory or durable persistence. */
	    t, e, n, s) {
	        this.persistence = t, this.xn = e, this.R = s, 
	        /**
	         * Maps a targetID to data about its target.
	         *
	         * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
	         * of `applyRemoteEvent()` idempotent.
	         */
	        this.kn = new en(j), 
	        /** Maps a target to its targetID. */
	        // TODO(wuandy): Evaluate if TargetId can be part of Target.
	        this.$n = new xi((t => kt(t)), Ot), 
	        /**
	         * The read time of the last entry processed by `getNewDocumentChanges()`.
	         *
	         * PORTING NOTE: This is only used for multi-tab synchronization.
	         */
	        this.On = z$1.min(), this._n = t.getMutationQueue(n), this.Fn = t.getRemoteDocumentCache(), 
	        this.Ue = t.getTargetCache(), this.Mn = new zi(this.Fn, this._n, this.persistence.getIndexManager()), 
	        this.Ke = t.getBundleCache(), this.xn.Vn(this.Mn);
	    }
	    collectGarbage(t) {
	        return this.persistence.runTransaction("Collect garbage", "readwrite-primary", (e => t.collect(e, this.kn)));
	    }
	}

	function Xi(
	/** Manages our in-memory or durable persistence. */
	t, e, n, s) {
	    return new Yi(t, e, n, s);
	}

	/**
	 * Tells the LocalStore that the currently authenticated user has changed.
	 *
	 * In response the local store switches the mutation queue to the new user and
	 * returns any resulting document changes.
	 */
	// PORTING NOTE: Android and iOS only return the documents affected by the
	// change.
	async function Zi(t, e) {
	    const n = U(t);
	    let s = n._n, i = n.Mn;
	    const r = await n.persistence.runTransaction("Handle user change", "readonly", (t => {
	        // Swap out the mutation queue, grabbing the pending mutation batches
	        // before and after.
	        let r;
	        return n._n.getAllMutationBatches(t).next((o => (r = o, s = n.persistence.getMutationQueue(e), 
	        // Recreate our LocalDocumentsView using the new
	        // MutationQueue.
	        i = new zi(n.Fn, s, n.persistence.getIndexManager()), s.getAllMutationBatches(t)))).next((e => {
	            const n = [], s = [];
	            // Union the old/new changed keys.
	            let o = wn();
	            for (const t of r) {
	                n.push(t.batchId);
	                for (const e of t.mutations) o = o.add(e.key);
	            }
	            for (const t of e) {
	                s.push(t.batchId);
	                for (const e of t.mutations) o = o.add(e.key);
	            }
	            // Return the set of all (potentially) changed documents and the list
	            // of mutation batch IDs that were affected by change.
	                        return i.pn(t, o).next((t => ({
	                Ln: t,
	                removedBatchIds: n,
	                addedBatchIds: s
	            })));
	        }));
	    }));
	    return n._n = s, n.Mn = i, n.xn.Vn(n.Mn), r;
	}

	/* Accepts locally generated Mutations and commit them to storage. */
	/**
	 * Acknowledges the given batch.
	 *
	 * On the happy path when a batch is acknowledged, the local store will
	 *
	 *  + remove the batch from the mutation queue;
	 *  + apply the changes to the remote document cache;
	 *  + recalculate the latency compensated view implied by those changes (there
	 *    may be mutations in the queue that affect the documents but haven't been
	 *    acknowledged yet); and
	 *  + give the changed documents back the sync engine
	 *
	 * @returns The resulting (modified) documents.
	 */
	function tr(t, e) {
	    const n = U(t);
	    return n.persistence.runTransaction("Acknowledge batch", "readwrite-primary", (t => {
	        const s = e.batch.keys(), i = n.Fn.newChangeBuffer({
	            trackRemovals: !0
	        });
	        return function(t, e, n, s) {
	            const i = n.batch, r = i.keys();
	            let o = xs.resolve();
	            return r.forEach((t => {
	                o = o.next((() => s.getEntry(e, t))).next((e => {
	                    const r = n.docVersions.get(t);
	                    B(null !== r), e.version.compareTo(r) < 0 && (i.applyToRemoteDocument(e, n), e.isValidDocument() && 
	                    // We use the commitVersion as the readTime rather than the
	                    // document's updateTime since the updateTime is not advanced
	                    // for updates that do not modify the underlying document.
	                    s.addEntry(e, n.commitVersion));
	                }));
	            })), o.next((() => t._n.removeMutationBatch(e, i)));
	        }
	        /** Returns the local view of the documents affected by a mutation batch. */
	        // PORTING NOTE: Multi-Tab only.
	        (n, t, e, i).next((() => i.apply(t))).next((() => n._n.performConsistencyCheck(t))).next((() => n.Mn.pn(t, s)));
	    }));
	}

	/**
	 * Removes mutations from the MutationQueue for the specified batch;
	 * LocalDocuments will be recalculated.
	 *
	 * @returns The resulting modified documents.
	 */
	/**
	 * Returns the last consistent snapshot processed (used by the RemoteStore to
	 * determine whether to buffer incoming snapshots from the backend).
	 */
	function er(t) {
	    const e = U(t);
	    return e.persistence.runTransaction("Get last remote snapshot version", "readonly", (t => e.Ue.getLastRemoteSnapshotVersion(t)));
	}

	/**
	 * Updates the "ground-state" (remote) documents. We assume that the remote
	 * event reflects any write batches that have been acknowledged or rejected
	 * (i.e. we do not re-apply local mutations to updates from this event).
	 *
	 * LocalDocuments are re-calculated if there are remaining mutations in the
	 * queue.
	 */ function nr(t, e) {
	    const n = U(t), s = e.snapshotVersion;
	    let i = n.kn;
	    return n.persistence.runTransaction("Apply remote event", "readwrite-primary", (t => {
	        const r = n.Fn.newChangeBuffer({
	            trackRemovals: !0
	        });
	        // Reset newTargetDataByTargetMap in case this transaction gets re-run.
	                i = n.kn;
	        const o = [];
	        e.targetChanges.forEach(((e, r) => {
	            const c = i.get(r);
	            if (!c) return;
	            // Only update the remote keys if the target is still active. This
	            // ensures that we can persist the updated target data along with
	            // the updated assignment.
	                        o.push(n.Ue.removeMatchingKeys(t, e.removedDocuments, r).next((() => n.Ue.addMatchingKeys(t, e.addedDocuments, r))));
	            const u = e.resumeToken;
	            // Update the resume token if the change includes one.
	                        if (u.approximateByteSize() > 0) {
	                const a = c.withResumeToken(u, s).withSequenceNumber(t.currentSequenceNumber);
	                i = i.insert(r, a), 
	                // Update the target data if there are target changes (or if
	                // sufficient time has passed since the last update).
	                /**
	 * Returns true if the newTargetData should be persisted during an update of
	 * an active target. TargetData should always be persisted when a target is
	 * being released and should not call this function.
	 *
	 * While the target is active, TargetData updates can be omitted when nothing
	 * about the target has changed except metadata like the resume token or
	 * snapshot version. Occasionally it's worth the extra write to prevent these
	 * values from getting too stale after a crash, but this doesn't have to be
	 * too frequent.
	 */
	                function(t, e, n) {
	                    // Always persist target data if we don't already have a resume token.
	                    if (B(e.resumeToken.approximateByteSize() > 0), 0 === t.resumeToken.approximateByteSize()) return !0;
	                    // Don't allow resume token changes to be buffered indefinitely. This
	                    // allows us to be reasonably up-to-date after a crash and avoids needing
	                    // to loop over all active queries on shutdown. Especially in the browser
	                    // we may not get time to do anything interesting while the current tab is
	                    // closing.
	                                        if (e.snapshotVersion.toMicroseconds() - t.snapshotVersion.toMicroseconds() >= 3e8) return !0;
	                    // Otherwise if the only thing that has changed about a target is its resume
	                    // token it's not worth persisting. Note that the RemoteStore keeps an
	                    // in-memory view of the currently active targets which includes the current
	                    // resume token, so stream failure or user changes will still use an
	                    // up-to-date resume token regardless of what we do here.
	                                        return n.addedDocuments.size + n.modifiedDocuments.size + n.removedDocuments.size > 0;
	                }
	                /**
	 * Notifies local store of the changed views to locally pin documents.
	 */ (c, a, e) && o.push(n.Ue.updateTargetData(t, a));
	            }
	        }));
	        let c = un();
	        // HACK: The only reason we allow a null snapshot version is so that we
	        // can synthesize remote events when we get permission denied errors while
	        // trying to resolve the state of a locally cached document that is in
	        // limbo.
	        if (e.documentUpdates.forEach(((s, i) => {
	            e.resolvedLimboDocuments.has(s) && o.push(n.persistence.referenceDelegate.updateLimboDocument(t, s));
	        })), 
	        // Each loop iteration only affects its "own" doc, so it's safe to get all the remote
	        // documents in advance in a single call.
	        o.push(sr(t, r, e.documentUpdates, s, void 0).next((t => {
	            c = t;
	        }))), !s.isEqual(z$1.min())) {
	            const e = n.Ue.getLastRemoteSnapshotVersion(t).next((e => n.Ue.setTargetsMetadata(t, t.currentSequenceNumber, s)));
	            o.push(e);
	        }
	        return xs.waitFor(o).next((() => r.apply(t))).next((() => n.Mn.En(t, c))).next((() => c));
	    })).then((t => (n.kn = i, t)));
	}

	/**
	 * Populates document change buffer with documents from backend or a bundle.
	 * Returns the document changes resulting from applying those documents.
	 *
	 * @param txn - Transaction to use to read existing documents from storage.
	 * @param documentBuffer - Document buffer to collect the resulted changes to be
	 *        applied to storage.
	 * @param documents - Documents to be applied.
	 * @param globalVersion - A `SnapshotVersion` representing the read time if all
	 *        documents have the same read time.
	 * @param documentVersions - A DocumentKey-to-SnapshotVersion map if documents
	 *        have their own read time.
	 *
	 * Note: this function will use `documentVersions` if it is defined;
	 * when it is not defined, resorts to `globalVersion`.
	 */ function sr(t, e, n, s, 
	// TODO(wuandy): We could add `readTime` to MaybeDocument instead to remove
	// this parameter.
	i) {
	    let r = wn();
	    return n.forEach((t => r = r.add(t))), e.getEntries(t, r).next((t => {
	        let r = un();
	        return n.forEach(((n, o) => {
	            const c = t.get(n), u = (null == i ? void 0 : i.get(n)) || s;
	            // Note: The order of the steps below is important, since we want
	            // to ensure that rejected limbo resolutions (which fabricate
	            // NoDocuments with SnapshotVersion.min()) never add documents to
	            // cache.
	            o.isNoDocument() && o.version.isEqual(z$1.min()) ? (
	            // NoDocuments with SnapshotVersion.min() are used in manufactured
	            // events. We remove these documents from cache since we lost
	            // access.
	            e.removeEntry(n, u), r = r.insert(n, o)) : !c.isValidDocument() || o.version.compareTo(c.version) > 0 || 0 === o.version.compareTo(c.version) && c.hasPendingWrites ? (e.addEntry(o, u), 
	            r = r.insert(n, o)) : $("LocalStore", "Ignoring outdated watch update for ", n, ". Current version:", c.version, " Watch version:", o.version);
	        })), r;
	    }));
	}

	/**
	 * Gets the mutation batch after the passed in batchId in the mutation queue
	 * or null if empty.
	 * @param afterBatchId - If provided, the batch to search after.
	 * @returns The next mutation or null if there wasn't one.
	 */
	function ir(t, e) {
	    const n = U(t);
	    return n.persistence.runTransaction("Get next mutation batch", "readonly", (t => (void 0 === e && (e = -1), 
	    n._n.getNextMutationBatchAfterBatchId(t, e))));
	}

	/**
	 * Reads the current value of a Document with a given key or null if not
	 * found - used for testing.
	 */
	/**
	 * Assigns the given target an internal ID so that its results can be pinned so
	 * they don't get GC'd. A target must be allocated in the local store before
	 * the store can be used to manage its view.
	 *
	 * Allocating an already allocated `Target` will return the existing `TargetData`
	 * for that `Target`.
	 */
	function rr(t, e) {
	    const n = U(t);
	    return n.persistence.runTransaction("Allocate target", "readwrite", (t => {
	        let s;
	        return n.Ue.getTargetData(t, e).next((i => i ? (
	        // This target has been listened to previously, so reuse the
	        // previous targetID.
	        // TODO(mcg): freshen last accessed date?
	        s = i, xs.resolve(s)) : n.Ue.allocateTargetId(t).next((i => (s = new Gs(e, i, 0 /* Listen */ , t.currentSequenceNumber), 
	        n.Ue.addTargetData(t, s).next((() => s)))))));
	    })).then((t => {
	        // If Multi-Tab is enabled, the existing target data may be newer than
	        // the in-memory data
	        const s = n.kn.get(t.targetId);
	        return (null === s || t.snapshotVersion.compareTo(s.snapshotVersion) > 0) && (n.kn = n.kn.insert(t.targetId, t), 
	        n.$n.set(e, t.targetId)), t;
	    }));
	}

	/**
	 * Returns the TargetData as seen by the LocalStore, including updates that may
	 * have not yet been persisted to the TargetCache.
	 */
	// Visible for testing.
	/**
	 * Unpins all the documents associated with the given target. If
	 * `keepPersistedTargetData` is set to false and Eager GC enabled, the method
	 * directly removes the associated target data from the target cache.
	 *
	 * Releasing a non-existing `Target` is a no-op.
	 */
	// PORTING NOTE: `keepPersistedTargetData` is multi-tab only.
	async function or(t, e, n) {
	    const s = U(t), i = s.kn.get(e), r = n ? "readwrite" : "readwrite-primary";
	    try {
	        n || await s.persistence.runTransaction("Release target", r, (t => s.persistence.referenceDelegate.removeTarget(t, i)));
	    } catch (t) {
	        if (!Ms(t)) throw t;
	        // All `releaseTarget` does is record the final metadata state for the
	        // target, but we've been recording this periodically during target
	        // activity. If we lose this write this could cause a very slight
	        // difference in the order of target deletion during GC, but we
	        // don't define exact LRU semantics so this is acceptable.
	        $("LocalStore", `Failed to update sequence numbers for target ${e}: ${t}`);
	    }
	    s.kn = s.kn.remove(e), s.$n.delete(i.target);
	}

	/**
	 * Runs the specified query against the local store and returns the results,
	 * potentially taking advantage of query data from previous executions (such
	 * as the set of remote keys).
	 *
	 * @param usePreviousResults - Whether results from previous executions can
	 * be used to optimize this query execution.
	 */ function cr(t, e, n) {
	    const s = U(t);
	    let i = z$1.min(), r = wn();
	    return s.persistence.runTransaction("Execute query", "readonly", (t => function(t, e, n) {
	        const s = U(t), i = s.$n.get(n);
	        return void 0 !== i ? xs.resolve(s.kn.get(i)) : s.Ue.getTargetData(e, n);
	    }(s, t, ae(e)).next((e => {
	        if (e) return i = e.lastLimboFreeSnapshotVersion, s.Ue.getMatchingKeysForTargetId(t, e.targetId).next((t => {
	            r = t;
	        }));
	    })).next((() => s.xn.getDocumentsMatchingQuery(t, e, n ? i : z$1.min(), n ? r : wn()))).next((t => ({
	        documents: t,
	        Bn: r
	    })))));
	}

	/**
	 * Reads the newest document change from persistence and moves the internal
	 * synchronization marker forward so that calls to `getNewDocumentChanges()`
	 * only return changes that happened after client initialization.
	 */
	// PORTING NOTE: Multi-Tab only.
	async function hr(t) {
	    const e = U(t);
	    return e.persistence.runTransaction("Synchronize last document change read time", "readonly", (t => function(t) {
	        const e = Mi(t);
	        // If there are no existing entries, we return SnapshotVersion.min().
	                let n = z$1.min();
	        return e.Ot({
	            index: Es.readTimeIndex,
	            reverse: !0
	        }, ((t, e, s) => {
	            e.readTime && (n = Xs(e.readTime)), s.done();
	        })).next((() => n));
	    }(t))).then((t => {
	        e.On = t;
	    }));
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class dr {
	    constructor(t) {
	        this.R = t, this.jn = new Map, this.Qn = new Map;
	    }
	    getBundleMetadata(t, e) {
	        return xs.resolve(this.jn.get(e));
	    }
	    saveBundleMetadata(t, e) {
	        /** Decodes a BundleMetadata proto into a BundleMetadata object. */
	        var n;
	        return this.jn.set(e.id, {
	            id: (n = e).id,
	            version: n.version,
	            createTime: Nn(n.createTime)
	        }), xs.resolve();
	    }
	    getNamedQuery(t, e) {
	        return xs.resolve(this.Qn.get(e));
	    }
	    saveNamedQuery(t, e) {
	        return this.Qn.set(e.name, function(t) {
	            return {
	                name: t.name,
	                query: ii(t.bundledQuery),
	                readTime: Nn(t.readTime)
	            };
	        }(e)), xs.resolve();
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A collection of references to a document from some kind of numbered entity
	 * (either a target ID or batch ID). As references are added to or removed from
	 * the set corresponding events are emitted to a registered garbage collector.
	 *
	 * Each reference is represented by a DocumentReference object. Each of them
	 * contains enough information to uniquely identify the reference. They are all
	 * stored primarily in a set sorted by key. A document is considered garbage if
	 * there's no references in that set (this can be efficiently checked thanks to
	 * sorting by key).
	 *
	 * ReferenceSet also keeps a secondary set that contains references sorted by
	 * IDs. This one is used to efficiently implement removal of all references by
	 * some target ID.
	 */ class wr {
	    constructor() {
	        // A set of outstanding references to a document sorted by key.
	        this.Wn = new rn(_r.Gn), 
	        // A set of outstanding references to a document sorted by target id.
	        this.zn = new rn(_r.Hn);
	    }
	    /** Returns true if the reference set contains no references. */    isEmpty() {
	        return this.Wn.isEmpty();
	    }
	    /** Adds a reference to the given document key for the given ID. */    addReference(t, e) {
	        const n = new _r(t, e);
	        this.Wn = this.Wn.add(n), this.zn = this.zn.add(n);
	    }
	    /** Add references to the given document keys for the given ID. */    Jn(t, e) {
	        t.forEach((t => this.addReference(t, e)));
	    }
	    /**
	     * Removes a reference to the given document key for the given
	     * ID.
	     */    removeReference(t, e) {
	        this.Yn(new _r(t, e));
	    }
	    Xn(t, e) {
	        t.forEach((t => this.removeReference(t, e)));
	    }
	    /**
	     * Clears all references with a given ID. Calls removeRef() for each key
	     * removed.
	     */    Zn(t) {
	        const e = new wt(new Z([])), n = new _r(e, t), s = new _r(e, t + 1), i = [];
	        return this.zn.forEachInRange([ n, s ], (t => {
	            this.Yn(t), i.push(t.key);
	        })), i;
	    }
	    ts() {
	        this.Wn.forEach((t => this.Yn(t)));
	    }
	    Yn(t) {
	        this.Wn = this.Wn.delete(t), this.zn = this.zn.delete(t);
	    }
	    es(t) {
	        const e = new wt(new Z([])), n = new _r(e, t), s = new _r(e, t + 1);
	        let i = wn();
	        return this.zn.forEachInRange([ n, s ], (t => {
	            i = i.add(t.key);
	        })), i;
	    }
	    containsKey(t) {
	        const e = new _r(t, 0), n = this.Wn.firstAfterOrEqual(e);
	        return null !== n && t.isEqual(n.key);
	    }
	}

	class _r {
	    constructor(t, e) {
	        this.key = t, this.ns = e;
	    }
	    /** Compare by key then by ID */    static Gn(t, e) {
	        return wt.comparator(t.key, e.key) || j(t.ns, e.ns);
	    }
	    /** Compare by ID then by key */    static Hn(t, e) {
	        return j(t.ns, e.ns) || wt.comparator(t.key, e.key);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class mr {
	    constructor(t, e) {
	        this.qt = t, this.referenceDelegate = e, 
	        /**
	         * The set of all mutations that have been sent but not yet been applied to
	         * the backend.
	         */
	        this._n = [], 
	        /** Next value to use when assigning sequential IDs to each mutation batch. */
	        this.ss = 1, 
	        /** An ordered mapping between documents and the mutations batch IDs. */
	        this.rs = new rn(_r.Gn);
	    }
	    checkEmpty(t) {
	        return xs.resolve(0 === this._n.length);
	    }
	    addMutationBatch(t, e, n, s) {
	        const i = this.ss;
	        this.ss++, this._n.length > 0 && this._n[this._n.length - 1];
	        const r = new Qs(i, e, n, s);
	        this._n.push(r);
	        // Track references by document key and index collection parents.
	        for (const e of s) this.rs = this.rs.add(new _r(e.key, i)), this.qt.addToCollectionParentIndex(t, e.key.path.popLast());
	        return xs.resolve(r);
	    }
	    lookupMutationBatch(t, e) {
	        return xs.resolve(this.os(e));
	    }
	    getNextMutationBatchAfterBatchId(t, e) {
	        const n = e + 1, s = this.cs(n), i = s < 0 ? 0 : s;
	        // The requested batchId may still be out of range so normalize it to the
	        // start of the queue.
	                return xs.resolve(this._n.length > i ? this._n[i] : null);
	    }
	    getHighestUnacknowledgedBatchId() {
	        return xs.resolve(0 === this._n.length ? -1 : this.ss - 1);
	    }
	    getAllMutationBatches(t) {
	        return xs.resolve(this._n.slice());
	    }
	    getAllMutationBatchesAffectingDocumentKey(t, e) {
	        const n = new _r(e, 0), s = new _r(e, Number.POSITIVE_INFINITY), i = [];
	        return this.rs.forEachInRange([ n, s ], (t => {
	            const e = this.os(t.ns);
	            i.push(e);
	        })), xs.resolve(i);
	    }
	    getAllMutationBatchesAffectingDocumentKeys(t, e) {
	        let n = new rn(j);
	        return e.forEach((t => {
	            const e = new _r(t, 0), s = new _r(t, Number.POSITIVE_INFINITY);
	            this.rs.forEachInRange([ e, s ], (t => {
	                n = n.add(t.ns);
	            }));
	        })), xs.resolve(this.us(n));
	    }
	    getAllMutationBatchesAffectingQuery(t, e) {
	        // Use the query path as a prefix for testing if a document matches the
	        // query.
	        const n = e.path, s = n.length + 1;
	        // Construct a document reference for actually scanning the index. Unlike
	        // the prefix the document key in this reference must have an even number of
	        // segments. The empty segment can be used a suffix of the query path
	        // because it precedes all other segments in an ordered traversal.
	        let i = n;
	        wt.isDocumentKey(i) || (i = i.child(""));
	        const r = new _r(new wt(i), 0);
	        // Find unique batchIDs referenced by all documents potentially matching the
	        // query.
	                let o = new rn(j);
	        return this.rs.forEachWhile((t => {
	            const e = t.key.path;
	            return !!n.isPrefixOf(e) && (
	            // Rows with document keys more than one segment longer than the query
	            // path can't be matches. For example, a query on 'rooms' can't match
	            // the document /rooms/abc/messages/xyx.
	            // TODO(mcg): we'll need a different scanner when we implement
	            // ancestor queries.
	            e.length === s && (o = o.add(t.ns)), !0);
	        }), r), xs.resolve(this.us(o));
	    }
	    us(t) {
	        // Construct an array of matching batches, sorted by batchID to ensure that
	        // multiple mutations affecting the same document key are applied in order.
	        const e = [];
	        return t.forEach((t => {
	            const n = this.os(t);
	            null !== n && e.push(n);
	        })), e;
	    }
	    removeMutationBatch(t, e) {
	        B(0 === this.hs(e.batchId, "removed")), this._n.shift();
	        let n = this.rs;
	        return xs.forEach(e.mutations, (s => {
	            const i = new _r(s.key, e.batchId);
	            return n = n.delete(i), this.referenceDelegate.markPotentiallyOrphaned(t, s.key);
	        })).next((() => {
	            this.rs = n;
	        }));
	    }
	    Gt(t) {
	        // No-op since the memory mutation queue does not maintain a separate cache.
	    }
	    containsKey(t, e) {
	        const n = new _r(e, 0), s = this.rs.firstAfterOrEqual(n);
	        return xs.resolve(e.isEqual(s && s.key));
	    }
	    performConsistencyCheck(t) {
	        return this._n.length, xs.resolve();
	    }
	    /**
	     * Finds the index of the given batchId in the mutation queue and asserts that
	     * the resulting index is within the bounds of the queue.
	     *
	     * @param batchId - The batchId to search for
	     * @param action - A description of what the caller is doing, phrased in passive
	     * form (e.g. "acknowledged" in a routine that acknowledges batches).
	     */    hs(t, e) {
	        return this.cs(t);
	    }
	    /**
	     * Finds the index of the given batchId in the mutation queue. This operation
	     * is O(1).
	     *
	     * @returns The computed index of the batch with the given batchId, based on
	     * the state of the queue. Note this index can be negative if the requested
	     * batchId has already been remvoed from the queue or past the end of the
	     * queue if the batchId is larger than the last added batch.
	     */    cs(t) {
	        if (0 === this._n.length) 
	        // As an index this is past the end of the queue
	        return 0;
	        // Examine the front of the queue to figure out the difference between the
	        // batchId and indexes in the array. Note that since the queue is ordered
	        // by batchId, if the first batch has a larger batchId then the requested
	        // batchId doesn't exist in the queue.
	                return t - this._n[0].batchId;
	    }
	    /**
	     * A version of lookupMutationBatch that doesn't return a promise, this makes
	     * other functions that uses this code easier to read and more efficent.
	     */    os(t) {
	        const e = this.cs(t);
	        if (e < 0 || e >= this._n.length) return null;
	        return this._n[e];
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * The memory-only RemoteDocumentCache for IndexedDb. To construct, invoke
	 * `newMemoryRemoteDocumentCache()`.
	 */
	class gr {
	    /**
	     * @param sizer - Used to assess the size of a document. For eager GC, this is
	     * expected to just return 0 to avoid unnecessarily doing the work of
	     * calculating the size.
	     */
	    constructor(t, e) {
	        this.qt = t, this.ls = e, 
	        /** Underlying cache of documents and their read times. */
	        this.docs = new en(wt.comparator), 
	        /** Size of all cached documents. */
	        this.size = 0;
	    }
	    /**
	     * Adds the supplied entry to the cache and updates the cache size as appropriate.
	     *
	     * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
	     * returned by `newChangeBuffer()`.
	     */    addEntry(t, e, n) {
	        const s = e.key, i = this.docs.get(s), r = i ? i.size : 0, o = this.ls(e);
	        return this.docs = this.docs.insert(s, {
	            document: e.clone(),
	            size: o,
	            readTime: n
	        }), this.size += o - r, this.qt.addToCollectionParentIndex(t, s.path.popLast());
	    }
	    /**
	     * Removes the specified entry from the cache and updates the cache size as appropriate.
	     *
	     * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
	     * returned by `newChangeBuffer()`.
	     */    removeEntry(t) {
	        const e = this.docs.get(t);
	        e && (this.docs = this.docs.remove(t), this.size -= e.size);
	    }
	    getEntry(t, e) {
	        const n = this.docs.get(e);
	        return xs.resolve(n ? n.document.clone() : Ct.newInvalidDocument(e));
	    }
	    getEntries(t, e) {
	        let n = un();
	        return e.forEach((t => {
	            const e = this.docs.get(t);
	            n = n.insert(t, e ? e.document.clone() : Ct.newInvalidDocument(t));
	        })), xs.resolve(n);
	    }
	    getDocumentsMatchingQuery(t, e, n) {
	        let s = un();
	        // Documents are ordered by key, so we can use a prefix scan to narrow down
	        // the documents we need to match the query against.
	                const i = new wt(e.path.child("")), r = this.docs.getIteratorFrom(i);
	        for (;r.hasNext(); ) {
	            const {key: t, value: {document: i, readTime: o}} = r.getNext();
	            if (!e.path.isPrefixOf(t.path)) break;
	            o.compareTo(n) <= 0 || we(e, i) && (s = s.insert(i.key, i.clone()));
	        }
	        return xs.resolve(s);
	    }
	    fs(t, e) {
	        return xs.forEach(this.docs, (t => e(t)));
	    }
	    newChangeBuffer(t) {
	        // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps
	        // a separate changelog and does not need special handling for removals.
	        return new yr(this);
	    }
	    getSize(t) {
	        return xs.resolve(this.size);
	    }
	}

	/**
	 * Creates a new memory-only RemoteDocumentCache.
	 *
	 * @param indexManager - A class that manages collection group indices.
	 * @param sizer - Used to assess the size of a document. For eager GC, this is
	 * expected to just return 0 to avoid unnecessarily doing the work of
	 * calculating the size.
	 */
	/**
	 * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.
	 */
	class yr extends ki {
	    constructor(t) {
	        super(), this.Ie = t;
	    }
	    applyChanges(t) {
	        const e = [];
	        return this.changes.forEach(((n, s) => {
	            s.document.isValidDocument() ? e.push(this.Ie.addEntry(t, s.document, this.getReadTime(n))) : this.Ie.removeEntry(n);
	        })), xs.waitFor(e);
	    }
	    getFromCache(t, e) {
	        return this.Ie.getEntry(t, e);
	    }
	    getAllFromCache(t, e) {
	        return this.Ie.getEntries(t, e);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class pr {
	    constructor(t) {
	        this.persistence = t, 
	        /**
	         * Maps a target to the data about that target
	         */
	        this.ds = new xi((t => kt(t)), Ot), 
	        /** The last received snapshot version. */
	        this.lastRemoteSnapshotVersion = z$1.min(), 
	        /** The highest numbered target ID encountered. */
	        this.highestTargetId = 0, 
	        /** The highest sequence number encountered. */
	        this.ws = 0, 
	        /**
	         * A ordered bidirectional mapping between documents and the remote target
	         * IDs.
	         */
	        this._s = new wr, this.targetCount = 0, this.gs = Ti.Jt();
	    }
	    forEachTarget(t, e) {
	        return this.ds.forEach(((t, n) => e(n))), xs.resolve();
	    }
	    getLastRemoteSnapshotVersion(t) {
	        return xs.resolve(this.lastRemoteSnapshotVersion);
	    }
	    getHighestSequenceNumber(t) {
	        return xs.resolve(this.ws);
	    }
	    allocateTargetId(t) {
	        return this.highestTargetId = this.gs.next(), xs.resolve(this.highestTargetId);
	    }
	    setTargetsMetadata(t, e, n) {
	        return n && (this.lastRemoteSnapshotVersion = n), e > this.ws && (this.ws = e), 
	        xs.resolve();
	    }
	    te(t) {
	        this.ds.set(t.target, t);
	        const e = t.targetId;
	        e > this.highestTargetId && (this.gs = new Ti(e), this.highestTargetId = e), t.sequenceNumber > this.ws && (this.ws = t.sequenceNumber);
	    }
	    addTargetData(t, e) {
	        return this.te(e), this.targetCount += 1, xs.resolve();
	    }
	    updateTargetData(t, e) {
	        return this.te(e), xs.resolve();
	    }
	    removeTargetData(t, e) {
	        return this.ds.delete(e.target), this._s.Zn(e.targetId), this.targetCount -= 1, 
	        xs.resolve();
	    }
	    removeTargets(t, e, n) {
	        let s = 0;
	        const i = [];
	        return this.ds.forEach(((r, o) => {
	            o.sequenceNumber <= e && null === n.get(o.targetId) && (this.ds.delete(r), i.push(this.removeMatchingKeysForTargetId(t, o.targetId)), 
	            s++);
	        })), xs.waitFor(i).next((() => s));
	    }
	    getTargetCount(t) {
	        return xs.resolve(this.targetCount);
	    }
	    getTargetData(t, e) {
	        const n = this.ds.get(e) || null;
	        return xs.resolve(n);
	    }
	    addMatchingKeys(t, e, n) {
	        return this._s.Jn(e, n), xs.resolve();
	    }
	    removeMatchingKeys(t, e, n) {
	        this._s.Xn(e, n);
	        const s = this.persistence.referenceDelegate, i = [];
	        return s && e.forEach((e => {
	            i.push(s.markPotentiallyOrphaned(t, e));
	        })), xs.waitFor(i);
	    }
	    removeMatchingKeysForTargetId(t, e) {
	        return this._s.Zn(e), xs.resolve();
	    }
	    getMatchingKeysForTargetId(t, e) {
	        const n = this._s.es(e);
	        return xs.resolve(n);
	    }
	    containsKey(t, e) {
	        return xs.resolve(this._s.containsKey(e));
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A memory-backed instance of Persistence. Data is stored only in RAM and
	 * not persisted across sessions.
	 */
	class Er {
	    /**
	     * The constructor accepts a factory for creating a reference delegate. This
	     * allows both the delegate and this instance to have strong references to
	     * each other without having nullable fields that would then need to be
	     * checked or asserted on every access.
	     */
	    constructor(t, e) {
	        this.ys = {}, this.Ne = new S(0), this.xe = !1, this.xe = !0, this.referenceDelegate = t(this), 
	        this.Ue = new pr(this);
	        this.qt = new ui, this.qe = function(t, e) {
	            return new gr(t, e);
	        }(this.qt, (t => this.referenceDelegate.ps(t))), this.R = new zs(e), this.Ke = new dr(this.R);
	    }
	    start() {
	        return Promise.resolve();
	    }
	    shutdown() {
	        // No durable state to ensure is closed on shutdown.
	        return this.xe = !1, Promise.resolve();
	    }
	    get started() {
	        return this.xe;
	    }
	    setDatabaseDeletedListener() {
	        // No op.
	    }
	    setNetworkEnabled() {
	        // No op.
	    }
	    getIndexManager() {
	        return this.qt;
	    }
	    getMutationQueue(t) {
	        let e = this.ys[t.toKey()];
	        return e || (e = new mr(this.qt, this.referenceDelegate), this.ys[t.toKey()] = e), 
	        e;
	    }
	    getTargetCache() {
	        return this.Ue;
	    }
	    getRemoteDocumentCache() {
	        return this.qe;
	    }
	    getBundleCache() {
	        return this.Ke;
	    }
	    runTransaction(t, e, n) {
	        $("MemoryPersistence", "Starting transaction:", t);
	        const s = new Tr(this.Ne.next());
	        return this.referenceDelegate.Es(), n(s).next((t => this.referenceDelegate.Ts(s).next((() => t)))).toPromise().then((t => (s.raiseOnCommittedEvent(), 
	        t)));
	    }
	    Is(t, e) {
	        return xs.or(Object.values(this.ys).map((n => () => n.containsKey(t, e))));
	    }
	}

	/**
	 * Memory persistence is not actually transactional, but future implementations
	 * may have transaction-scoped state.
	 */ class Tr extends Cs {
	    constructor(t) {
	        super(), this.currentSequenceNumber = t;
	    }
	}

	class Ir {
	    constructor(t) {
	        this.persistence = t, 
	        /** Tracks all documents that are active in Query views. */
	        this.As = new wr, 
	        /** The list of documents that are potentially GCed after each transaction. */
	        this.Rs = null;
	    }
	    static Ps(t) {
	        return new Ir(t);
	    }
	    get bs() {
	        if (this.Rs) return this.Rs;
	        throw L();
	    }
	    addReference(t, e, n) {
	        return this.As.addReference(n, e), this.bs.delete(n.toString()), xs.resolve();
	    }
	    removeReference(t, e, n) {
	        return this.As.removeReference(n, e), this.bs.add(n.toString()), xs.resolve();
	    }
	    markPotentiallyOrphaned(t, e) {
	        return this.bs.add(e.toString()), xs.resolve();
	    }
	    removeTarget(t, e) {
	        this.As.Zn(e.targetId).forEach((t => this.bs.add(t.toString())));
	        const n = this.persistence.getTargetCache();
	        return n.getMatchingKeysForTargetId(t, e.targetId).next((t => {
	            t.forEach((t => this.bs.add(t.toString())));
	        })).next((() => n.removeTargetData(t, e)));
	    }
	    Es() {
	        this.Rs = new Set;
	    }
	    Ts(t) {
	        // Remove newly orphaned documents.
	        const e = this.persistence.getRemoteDocumentCache().newChangeBuffer();
	        return xs.forEach(this.bs, (n => {
	            const s = wt.fromPath(n);
	            return this.vs(t, s).next((t => {
	                t || e.removeEntry(s);
	            }));
	        })).next((() => (this.Rs = null, e.apply(t))));
	    }
	    updateLimboDocument(t, e) {
	        return this.vs(t, e).next((t => {
	            t ? this.bs.delete(e.toString()) : this.bs.add(e.toString());
	        }));
	    }
	    ps(t) {
	        // For eager GC, we don't care about the document size, there are no size thresholds.
	        return 0;
	    }
	    vs(t, e) {
	        return xs.or([ () => xs.resolve(this.As.containsKey(e)), () => this.persistence.getTargetCache().containsKey(t, e), () => this.persistence.Is(t, e) ]);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Simple wrapper around a nullable UID. Mostly exists to make code more
	 * readable.
	 */ class Ar {
	    constructor(t) {
	        this.uid = t;
	    }
	    isAuthenticated() {
	        return null != this.uid;
	    }
	    /**
	     * Returns a key representing this user, suitable for inclusion in a
	     * dictionary.
	     */    toKey() {
	        return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
	    }
	    isEqual(t) {
	        return t.uid === this.uid;
	    }
	}

	/** A user with a null UID. */ Ar.UNAUTHENTICATED = new Ar(null), 
	// TODO(mikelehen): Look into getting a proper uid-equivalent for
	// non-FirebaseAuth providers.
	Ar.GOOGLE_CREDENTIALS = new Ar("google-credentials-uid"), Ar.FIRST_PARTY = new Ar("first-party-uid");

	/**
	 * Metadata state of the local client. Unlike `RemoteClientState`, this class is
	 * mutable and keeps track of all pending mutations, which allows us to
	 * update the range of pending mutation batch IDs as new mutations are added or
	 * removed.
	 *
	 * The data in `LocalClientState` is not read from WebStorage and instead
	 * updated via its instance methods. The updated state can be serialized via
	 * `toWebStorageJSON()`.
	 */
	// Visible for testing.
	class Cr {
	    constructor() {
	        this.activeTargetIds = mn();
	    }
	    Ds(t) {
	        this.activeTargetIds = this.activeTargetIds.add(t);
	    }
	    Cs(t) {
	        this.activeTargetIds = this.activeTargetIds.delete(t);
	    }
	    /**
	     * Converts this entry into a JSON-encoded format we can use for WebStorage.
	     * Does not encode `clientId` as it is part of the key in WebStorage.
	     */    Ss() {
	        const t = {
	            activeTargetIds: this.activeTargetIds.toArray(),
	            updateTimeMs: Date.now()
	        };
	        return JSON.stringify(t);
	    }
	}

	class xr {
	    constructor() {
	        this.li = new Cr, this.fi = {}, this.onlineStateHandler = null, this.sequenceNumberHandler = null;
	    }
	    addPendingMutation(t) {
	        // No op.
	    }
	    updateMutationState(t, e, n) {
	        // No op.
	    }
	    addLocalQueryTarget(t) {
	        return this.li.Ds(t), this.fi[t] || "not-current";
	    }
	    updateQueryState(t, e, n) {
	        this.fi[t] = e;
	    }
	    removeLocalQueryTarget(t) {
	        this.li.Cs(t);
	    }
	    isLocalQueryTarget(t) {
	        return this.li.activeTargetIds.has(t);
	    }
	    clearQueryState(t) {
	        delete this.fi[t];
	    }
	    getAllActiveQueryTargets() {
	        return this.li.activeTargetIds;
	    }
	    isActiveQueryTarget(t) {
	        return this.li.activeTargetIds.has(t);
	    }
	    start() {
	        return this.li = new Cr, Promise.resolve();
	    }
	    handleUserChange(t, e, n) {
	        // No op.
	    }
	    setOnlineState(t) {
	        // No op.
	    }
	    shutdown() {}
	    writeSequenceNumber(t) {}
	    notifyBundleLoaded() {
	        // No op.
	    }
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class kr {
	    di(t) {
	        // No-op.
	    }
	    shutdown() {
	        // No-op.
	    }
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// References to `window` are guarded by BrowserConnectivityMonitor.isAvailable()
	/* eslint-disable no-restricted-globals */
	/**
	 * Browser implementation of ConnectivityMonitor.
	 */
	class $r {
	    constructor() {
	        this.wi = () => this._i(), this.mi = () => this.gi(), this.yi = [], this.pi();
	    }
	    di(t) {
	        this.yi.push(t);
	    }
	    shutdown() {
	        window.removeEventListener("online", this.wi), window.removeEventListener("offline", this.mi);
	    }
	    pi() {
	        window.addEventListener("online", this.wi), window.addEventListener("offline", this.mi);
	    }
	    _i() {
	        $("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");
	        for (const t of this.yi) t(0 /* AVAILABLE */);
	    }
	    gi() {
	        $("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");
	        for (const t of this.yi) t(1 /* UNAVAILABLE */);
	    }
	    // TODO(chenbrian): Consider passing in window either into this component or
	    // here for testing via FakeWindow.
	    /** Checks that all used attributes of window are available. */
	    static gt() {
	        return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const Or = {
	    BatchGetDocuments: "batchGet",
	    Commit: "commit",
	    RunQuery: "runQuery"
	};

	/**
	 * Maps RPC names to the corresponding REST endpoint name.
	 *
	 * We use array notation to avoid mangling.
	 */
	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Provides a simple helper class that implements the Stream interface to
	 * bridge to other implementations that are streams but do not implement the
	 * interface. The stream callbacks are invoked with the callOn... methods.
	 */
	class Fr {
	    constructor(t) {
	        this.Ei = t.Ei, this.Ti = t.Ti;
	    }
	    Ii(t) {
	        this.Ai = t;
	    }
	    Ri(t) {
	        this.Pi = t;
	    }
	    onMessage(t) {
	        this.bi = t;
	    }
	    close() {
	        this.Ti();
	    }
	    send(t) {
	        this.Ei(t);
	    }
	    vi() {
	        this.Ai();
	    }
	    Vi(t) {
	        this.Pi(t);
	    }
	    Si(t) {
	        this.bi(t);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class Mr extends 
	/**
	 * Base class for all Rest-based connections to the backend (WebChannel and
	 * HTTP).
	 */
	class {
	    constructor(t) {
	        this.databaseInfo = t, this.databaseId = t.databaseId;
	        const e = t.ssl ? "https" : "http";
	        this.Di = e + "://" + t.host, this.Ci = "projects/" + this.databaseId.projectId + "/databases/" + this.databaseId.database + "/documents";
	    }
	    Ni(t, e, n, s) {
	        const i = this.xi(t, e);
	        $("RestConnection", "Sending: ", i, n);
	        const r = {};
	        return this.ki(r, s), this.$i(t, i, r, n).then((t => ($("RestConnection", "Received: ", t), 
	        t)), (e => {
	            throw F("RestConnection", `${t} failed with error: `, e, "url: ", i, "request:", n), 
	            e;
	        }));
	    }
	    Oi(t, e, n, s) {
	        // The REST API automatically aggregates all of the streamed results, so we
	        // can just use the normal invoke() method.
	        return this.Ni(t, e, n, s);
	    }
	    /**
	     * Modifies the headers for a request, adding any authorization token if
	     * present and any additional headers for the request.
	     */    ki(t, e) {
	        if (t["X-Goog-Api-Client"] = "gl-js/ fire/" + V, 
	        // Content-Type: text/plain will avoid preflight requests which might
	        // mess with CORS and redirects by proxies. If we add custom headers
	        // we will need to change this code to potentially use the $httpOverwrite
	        // parameter supported by ESF to avoid triggering preflight requests.
	        t["Content-Type"] = "text/plain", this.databaseInfo.appId && (t["X-Firebase-GMPID"] = this.databaseInfo.appId), 
	        e) for (const n in e.authHeaders) e.authHeaders.hasOwnProperty(n) && (t[n] = e.authHeaders[n]);
	    }
	    xi(t, e) {
	        const n = Or[t];
	        return `${this.Di}/v1/${e}:${n}`;
	    }
	} {
	    constructor(t) {
	        super(t), this.forceLongPolling = t.forceLongPolling, this.autoDetectLongPolling = t.autoDetectLongPolling, 
	        this.useFetchStreams = t.useFetchStreams;
	    }
	    $i(t, e, n, s) {
	        return new Promise(((i, r) => {
	            const o = new XhrIo;
	            o.listenOnce(EventType.COMPLETE, (() => {
	                try {
	                    switch (o.getLastErrorCode()) {
	                      case ErrorCode.NO_ERROR:
	                        const e = o.getResponseJson();
	                        $("Connection", "XHR received:", JSON.stringify(e)), i(e);
	                        break;

	                      case ErrorCode.TIMEOUT:
	                        $("Connection", 'RPC "' + t + '" timed out'), r(new C(D.DEADLINE_EXCEEDED, "Request time out"));
	                        break;

	                      case ErrorCode.HTTP_ERROR:
	                        const n = o.getStatus();
	                        if ($("Connection", 'RPC "' + t + '" failed with status:', n, "response text:", o.getResponseText()), 
	                        n > 0) {
	                            const t = o.getResponseJson().error;
	                            if (t && t.status && t.message) {
	                                const e = function(t) {
	                                    const e = t.toLowerCase().replace(/_/g, "-");
	                                    return Object.values(D).indexOf(e) >= 0 ? e : D.UNKNOWN;
	                                }(t.status);
	                                r(new C(e, t.message));
	                            } else r(new C(D.UNKNOWN, "Server responded with status " + o.getStatus()));
	                        } else 
	                        // If we received an HTTP_ERROR but there's no status code,
	                        // it's most probably a connection issue
	                        r(new C(D.UNAVAILABLE, "Connection failed."));
	                        break;

	                      default:
	                        L();
	                    }
	                } finally {
	                    $("Connection", 'RPC "' + t + '" completed.');
	                }
	            }));
	            const c = JSON.stringify(s);
	            o.send(e, "POST", c, n, 15);
	        }));
	    }
	    Fi(t, e) {
	        const n = [ this.Di, "/", "google.firestore.v1.Firestore", "/", t, "/channel" ], s = createWebChannelTransport(), i = getStatEventTarget(), r = {
	            // Required for backend stickiness, routing behavior is based on this
	            // parameter.
	            httpSessionIdParam: "gsessionid",
	            initMessageHeaders: {},
	            messageUrlParams: {
	                // This param is used to improve routing and project isolation by the
	                // backend and must be included in every request.
	                database: `projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`
	            },
	            sendRawJson: !0,
	            supportsCrossDomainXhr: !0,
	            internalChannelParams: {
	                // Override the default timeout (randomized between 10-20 seconds) since
	                // a large write batch on a slow internet connection may take a long
	                // time to send to the backend. Rather than have WebChannel impose a
	                // tight timeout which could lead to infinite timeouts and retries, we
	                // set it very large (5-10 minutes) and rely on the browser's builtin
	                // timeouts to kick in if the request isn't working.
	                forwardChannelRequestTimeoutMs: 6e5
	            },
	            forceLongPolling: this.forceLongPolling,
	            detectBufferingProxy: this.autoDetectLongPolling
	        };
	        this.useFetchStreams && (r.xmlHttpFactory = new FetchXmlHttpFactory({})), this.ki(r.initMessageHeaders, e), 
	        // Sending the custom headers we just added to request.initMessageHeaders
	        // (Authorization, etc.) will trigger the browser to make a CORS preflight
	        // request because the XHR will no longer meet the criteria for a "simple"
	        // CORS request:
	        // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
	        // Therefore to avoid the CORS preflight request (an extra network
	        // roundtrip), we use the httpHeadersOverwriteParam option to specify that
	        // the headers should instead be encoded into a special "$httpHeaders" query
	        // parameter, which is recognized by the webchannel backend. This is
	        // formally defined here:
	        // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32
	        // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request
	        // doesn't have an Origin header. So we have to exclude a few browser environments that are
	        // known to (sometimes) not include an Origin. See
	        // https://github.com/firebase/firebase-js-sdk/issues/1491.
	        isMobileCordova() || isReactNative() || isElectron() || isIE$2() || isUWP() || isBrowserExtension() || (r.httpHeadersOverwriteParam = "$httpHeaders");
	        const o = n.join("");
	        $("Connection", "Creating WebChannel: " + o, r);
	        const c = s.createWebChannel(o, r);
	        // WebChannel supports sending the first message with the handshake - saving
	        // a network round trip. However, it will have to call send in the same
	        // JS event loop as open. In order to enforce this, we delay actually
	        // opening the WebChannel until send is called. Whether we have called
	        // open is tracked with this variable.
	                let u = !1, _ = !1;
	        // A flag to determine whether the stream was closed (by us or through an
	        // error/close event) to avoid delivering multiple close events or sending
	        // on a closed stream
	                const m = new Fr({
	            Ei: t => {
	                _ ? $("Connection", "Not sending because WebChannel is closed:", t) : (u || ($("Connection", "Opening WebChannel transport."), 
	                c.open(), u = !0), $("Connection", "WebChannel sending:", t), c.send(t));
	            },
	            Ti: () => c.close()
	        }), g = (t, e, n) => {
	            // TODO(dimond): closure typing seems broken because WebChannel does
	            // not implement goog.events.Listenable
	            t.listen(e, (t => {
	                try {
	                    n(t);
	                } catch (t) {
	                    setTimeout((() => {
	                        throw t;
	                    }), 0);
	                }
	            }));
	        };
	        // Closure events are guarded and exceptions are swallowed, so catch any
	        // exception and rethrow using a setTimeout so they become visible again.
	        // Note that eventually this function could go away if we are confident
	        // enough the code is exception free.
	                return g(c, WebChannel.EventType.OPEN, (() => {
	            _ || $("Connection", "WebChannel transport opened.");
	        })), g(c, WebChannel.EventType.CLOSE, (() => {
	            _ || (_ = !0, $("Connection", "WebChannel transport closed"), m.Vi());
	        })), g(c, WebChannel.EventType.ERROR, (t => {
	            _ || (_ = !0, F("Connection", "WebChannel transport errored:", t), m.Vi(new C(D.UNAVAILABLE, "The operation could not be completed")));
	        })), g(c, WebChannel.EventType.MESSAGE, (t => {
	            var e;
	            if (!_) {
	                const n = t.data[0];
	                B(!!n);
	                // TODO(b/35143891): There is a bug in One Platform that caused errors
	                // (and only errors) to be wrapped in an extra array. To be forward
	                // compatible with the bug we need to check either condition. The latter
	                // can be removed once the fix has been rolled out.
	                // Use any because msgData.error is not typed.
	                const s = n, i = s.error || (null === (e = s[0]) || void 0 === e ? void 0 : e.error);
	                if (i) {
	                    $("Connection", "WebChannel received error:", i);
	                    // error.status will be a string like 'OK' or 'NOT_FOUND'.
	                    const t = i.status;
	                    let e = 
	                    /**
	 * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
	 *
	 * @returns The Code equivalent to the given status string or undefined if
	 *     there is no match.
	 */
	                    function(t) {
	                        // lookup by string
	                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                        const e = Ye[t];
	                        if (void 0 !== e) return tn(e);
	                    }(t), n = i.message;
	                    void 0 === e && (e = D.INTERNAL, n = "Unknown error status: " + t + " with message " + i.message), 
	                    // Mark closed so no further events are propagated
	                    _ = !0, m.Vi(new C(e, n)), c.close();
	                } else $("Connection", "WebChannel received:", n), m.Si(n);
	            }
	        })), g(i, Event.STAT_EVENT, (t => {
	            t.stat === Stat.PROXY ? $("Connection", "Detected buffering proxy") : t.stat === Stat.NOPROXY && $("Connection", "Detected no buffering proxy");
	        })), setTimeout((() => {
	            // Technically we could/should wait for the WebChannel opened event,
	            // but because we want to send the first message with the WebChannel
	            // handshake we pretend the channel opened here (asynchronously), and
	            // then delay the actual open until the first message is sent.
	            m.vi();
	        }), 0), m;
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** Initializes the WebChannelConnection for the browser. */
	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** The Platform's 'window' implementation or null if not available. */
	function Lr() {
	    // `window` is not always available, e.g. in ReactNative and WebWorkers.
	    // eslint-disable-next-line no-restricted-globals
	    return "undefined" != typeof window ? window : null;
	}

	/** The Platform's 'document' implementation or null if not available. */ function Br() {
	    // `document` is not always available, e.g. in ReactNative and WebWorkers.
	    // eslint-disable-next-line no-restricted-globals
	    return "undefined" != typeof document ? document : null;
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ function Ur(t) {
	    return new Vn(t, /* useProto3Json= */ !0);
	}

	/**
	 * An instance of the Platform's 'TextEncoder' implementation.
	 */
	/**
	 * A helper for running delayed tasks following an exponential backoff curve
	 * between attempts.
	 *
	 * Each delay is made up of a "base" delay which follows the exponential
	 * backoff curve, and a +/- 50% "jitter" that is calculated and added to the
	 * base delay. This prevents clients from accidentally synchronizing their
	 * delays causing spikes of load to the backend.
	 */
	class qr {
	    constructor(
	    /**
	     * The AsyncQueue to run backoff operations on.
	     */
	    t, 
	    /**
	     * The ID to use when scheduling backoff operations on the AsyncQueue.
	     */
	    e, 
	    /**
	     * The initial delay (used as the base delay on the first retry attempt).
	     * Note that jitter will still be applied, so the actual delay could be as
	     * little as 0.5*initialDelayMs.
	     */
	    n = 1e3
	    /**
	     * The multiplier to use to determine the extended base delay after each
	     * attempt.
	     */ , s = 1.5
	    /**
	     * The maximum base delay after which no further backoff is performed.
	     * Note that jitter will still be applied, so the actual delay could be as
	     * much as 1.5*maxDelayMs.
	     */ , i = 6e4) {
	        this.Se = t, this.timerId = e, this.Mi = n, this.Li = s, this.Bi = i, this.Ui = 0, 
	        this.qi = null, 
	        /** The last backoff attempt, as epoch milliseconds. */
	        this.Ki = Date.now(), this.reset();
	    }
	    /**
	     * Resets the backoff delay.
	     *
	     * The very next backoffAndWait() will have no delay. If it is called again
	     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
	     * subsequent ones will increase according to the backoffFactor.
	     */    reset() {
	        this.Ui = 0;
	    }
	    /**
	     * Resets the backoff delay to the maximum delay (e.g. for use after a
	     * RESOURCE_EXHAUSTED error).
	     */    ji() {
	        this.Ui = this.Bi;
	    }
	    /**
	     * Returns a promise that resolves after currentDelayMs, and increases the
	     * delay for any subsequent attempts. If there was a pending backoff operation
	     * already, it will be canceled.
	     */    Qi(t) {
	        // Cancel any pending backoff operation.
	        this.cancel();
	        // First schedule using the current base (which may be 0 and should be
	        // honored as such).
	        const e = Math.floor(this.Ui + this.Wi()), n = Math.max(0, Date.now() - this.Ki), s = Math.max(0, e - n);
	        // Guard against lastAttemptTime being in the future due to a clock change.
	                s > 0 && $("ExponentialBackoff", `Backing off for ${s} ms (base delay: ${this.Ui} ms, delay with jitter: ${e} ms, last attempt: ${n} ms ago)`), 
	        this.qi = this.Se.enqueueAfterDelay(this.timerId, s, (() => (this.Ki = Date.now(), 
	        t()))), 
	        // Apply backoff factor to determine next delay and ensure it is within
	        // bounds.
	        this.Ui *= this.Li, this.Ui < this.Mi && (this.Ui = this.Mi), this.Ui > this.Bi && (this.Ui = this.Bi);
	    }
	    Gi() {
	        null !== this.qi && (this.qi.skipDelay(), this.qi = null);
	    }
	    cancel() {
	        null !== this.qi && (this.qi.cancel(), this.qi = null);
	    }
	    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */    Wi() {
	        return (Math.random() - .5) * this.Ui;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A PersistentStream is an abstract base class that represents a streaming RPC
	 * to the Firestore backend. It's built on top of the connections own support
	 * for streaming RPCs, and adds several critical features for our clients:
	 *
	 *   - Exponential backoff on failure
	 *   - Authentication via CredentialsProvider
	 *   - Dispatching all callbacks into the shared worker queue
	 *   - Closing idle streams after 60 seconds of inactivity
	 *
	 * Subclasses of PersistentStream implement serialization of models to and
	 * from the JSON representation of the protocol buffers for a specific
	 * streaming RPC.
	 *
	 * ## Starting and Stopping
	 *
	 * Streaming RPCs are stateful and need to be start()ed before messages can
	 * be sent and received. The PersistentStream will call the onOpen() function
	 * of the listener once the stream is ready to accept requests.
	 *
	 * Should a start() fail, PersistentStream will call the registered onClose()
	 * listener with a FirestoreError indicating what went wrong.
	 *
	 * A PersistentStream can be started and stopped repeatedly.
	 *
	 * Generic types:
	 *  SendType: The type of the outgoing message of the underlying
	 *    connection stream
	 *  ReceiveType: The type of the incoming message of the underlying
	 *    connection stream
	 *  ListenerType: The type of the listener that will be used for callbacks
	 */
	class Kr {
	    constructor(t, e, n, s, i, r) {
	        this.Se = t, this.zi = n, this.Hi = s, this.Ji = i, this.listener = r, this.state = 0 /* Initial */ , 
	        /**
	         * A close count that's incremented every time the stream is closed; used by
	         * getCloseGuardedDispatcher() to invalidate callbacks that happen after
	         * close.
	         */
	        this.Yi = 0, this.Xi = null, this.stream = null, this.Zi = new qr(t, e);
	    }
	    /**
	     * Returns true if start() has been called and no error has occurred. True
	     * indicates the stream is open or in the process of opening (which
	     * encompasses respecting backoff, getting auth tokens, and starting the
	     * actual RPC). Use isOpen() to determine if the stream is open and ready for
	     * outbound requests.
	     */    tr() {
	        return 1 /* Starting */ === this.state || 2 /* Open */ === this.state || 4 /* Backoff */ === this.state;
	    }
	    /**
	     * Returns true if the underlying RPC is open (the onOpen() listener has been
	     * called) and the stream is ready for outbound requests.
	     */    er() {
	        return 2 /* Open */ === this.state;
	    }
	    /**
	     * Starts the RPC. Only allowed if isStarted() returns false. The stream is
	     * not immediately ready for use: onOpen() will be invoked when the RPC is
	     * ready for outbound requests, at which point isOpen() will return true.
	     *
	     * When start returns, isStarted() will return true.
	     */    start() {
	        3 /* Error */ !== this.state ? this.auth() : this.nr();
	    }
	    /**
	     * Stops the RPC. This call is idempotent and allowed regardless of the
	     * current isStarted() state.
	     *
	     * When stop returns, isStarted() and isOpen() will both return false.
	     */    async stop() {
	        this.tr() && await this.close(0 /* Initial */);
	    }
	    /**
	     * After an error the stream will usually back off on the next attempt to
	     * start it. If the error warrants an immediate restart of the stream, the
	     * sender can use this to indicate that the receiver should not back off.
	     *
	     * Each error will call the onClose() listener. That function can decide to
	     * inhibit backoff if required.
	     */    sr() {
	        this.state = 0 /* Initial */ , this.Zi.reset();
	    }
	    /**
	     * Marks this stream as idle. If no further actions are performed on the
	     * stream for one minute, the stream will automatically close itself and
	     * notify the stream's onClose() handler with Status.OK. The stream will then
	     * be in a !isStarted() state, requiring the caller to start the stream again
	     * before further use.
	     *
	     * Only streams that are in state 'Open' can be marked idle, as all other
	     * states imply pending network operations.
	     */    ir() {
	        // Starts the idle time if we are in state 'Open' and are not yet already
	        // running a timer (in which case the previous idle timeout still applies).
	        this.er() && null === this.Xi && (this.Xi = this.Se.enqueueAfterDelay(this.zi, 6e4, (() => this.rr())));
	    }
	    /** Sends a message to the underlying stream. */    cr(t) {
	        this.ur(), this.stream.send(t);
	    }
	    /** Called by the idle timer when the stream should close due to inactivity. */    async rr() {
	        if (this.er()) 
	        // When timing out an idle stream there's no reason to force the stream into backoff when
	        // it restarts so set the stream state to Initial instead of Error.
	        return this.close(0 /* Initial */);
	    }
	    /** Marks the stream as active again. */    ur() {
	        this.Xi && (this.Xi.cancel(), this.Xi = null);
	    }
	    /**
	     * Closes the stream and cleans up as necessary:
	     *
	     * * closes the underlying GRPC stream;
	     * * calls the onClose handler with the given 'error';
	     * * sets internal stream state to 'finalState';
	     * * adjusts the backoff timer based on the error
	     *
	     * A new stream can be opened by calling start().
	     *
	     * @param finalState - the intended state of the stream after closing.
	     * @param error - the error the connection was closed with.
	     */    async close(t, e) {
	        // Cancel any outstanding timers (they're guaranteed not to execute).
	        this.ur(), this.Zi.cancel(), 
	        // Invalidates any stream-related callbacks (e.g. from auth or the
	        // underlying stream), guaranteeing they won't execute.
	        this.Yi++, 3 /* Error */ !== t ? 
	        // If this is an intentional close ensure we don't delay our next connection attempt.
	        this.Zi.reset() : e && e.code === D.RESOURCE_EXHAUSTED ? (
	        // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
	        O(e.toString()), O("Using maximum backoff delay to prevent overloading the backend."), 
	        this.Zi.ji()) : e && e.code === D.UNAUTHENTICATED && 
	        // "unauthenticated" error means the token was rejected. Try force refreshing it in case it
	        // just expired.
	        this.Ji.invalidateToken(), 
	        // Clean up the underlying stream because we are no longer interested in events.
	        null !== this.stream && (this.ar(), this.stream.close(), this.stream = null), 
	        // This state must be assigned before calling onClose() to allow the callback to
	        // inhibit backoff or otherwise manipulate the state in its non-started state.
	        this.state = t, 
	        // Notify the listener that the stream closed.
	        await this.listener.Ri(e);
	    }
	    /**
	     * Can be overridden to perform additional cleanup before the stream is closed.
	     * Calling super.tearDown() is not required.
	     */    ar() {}
	    auth() {
	        this.state = 1 /* Starting */;
	        const t = this.hr(this.Yi), e = this.Yi;
	        // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.
	                this.Ji.getToken().then((t => {
	            // Stream can be stopped while waiting for authentication.
	            // TODO(mikelehen): We really should just use dispatchIfNotClosed
	            // and let this dispatch onto the queue, but that opened a spec test can
	            // of worms that I don't want to deal with in this PR.
	            this.Yi === e && 
	            // Normally we'd have to schedule the callback on the AsyncQueue.
	            // However, the following calls are safe to be called outside the
	            // AsyncQueue since they don't chain asynchronous calls
	            this.lr(t);
	        }), (e => {
	            t((() => {
	                const t = new C(D.UNKNOWN, "Fetching auth token failed: " + e.message);
	                return this.dr(t);
	            }));
	        }));
	    }
	    lr(t) {
	        const e = this.hr(this.Yi);
	        this.stream = this.wr(t), this.stream.Ii((() => {
	            e((() => (this.state = 2 /* Open */ , this.listener.Ii())));
	        })), this.stream.Ri((t => {
	            e((() => this.dr(t)));
	        })), this.stream.onMessage((t => {
	            e((() => this.onMessage(t)));
	        }));
	    }
	    nr() {
	        this.state = 4 /* Backoff */ , this.Zi.Qi((async () => {
	            this.state = 0 /* Initial */ , this.start();
	        }));
	    }
	    // Visible for tests
	    dr(t) {
	        // In theory the stream could close cleanly, however, in our current model
	        // we never expect this to happen because if we stop a stream ourselves,
	        // this callback will never be called. To prevent cases where we retry
	        // without a backoff accidentally, we set the stream to error in all cases.
	        return $("PersistentStream", `close with error: ${t}`), this.stream = null, this.close(3 /* Error */ , t);
	    }
	    /**
	     * Returns a "dispatcher" function that dispatches operations onto the
	     * AsyncQueue but only runs them if closeCount remains unchanged. This allows
	     * us to turn auth / stream callbacks into no-ops if the stream is closed /
	     * re-opened, etc.
	     */    hr(t) {
	        return e => {
	            this.Se.enqueueAndForget((() => this.Yi === t ? e() : ($("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), 
	            Promise.resolve())));
	        };
	    }
	}

	/**
	 * A PersistentStream that implements the Listen RPC.
	 *
	 * Once the Listen stream has called the onOpen() listener, any number of
	 * listen() and unlisten() calls can be made to control what changes will be
	 * sent from the server for ListenResponses.
	 */ class jr extends Kr {
	    constructor(t, e, n, s, i) {
	        super(t, "listen_stream_connection_backoff" /* ListenStreamConnectionBackoff */ , "listen_stream_idle" /* ListenStreamIdle */ , e, n, i), 
	        this.R = s;
	    }
	    wr(t) {
	        return this.Hi.Fi("Listen", t);
	    }
	    onMessage(t) {
	        // A successful response means the stream is healthy
	        this.Zi.reset();
	        const e = jn(this.R, t), n = function(t) {
	            // We have only reached a consistent snapshot for the entire stream if there
	            // is a read_time set and it applies to all targets (i.e. the list of
	            // targets is empty). The backend is guaranteed to send such responses.
	            if (!("targetChange" in t)) return z$1.min();
	            const e = t.targetChange;
	            return e.targetIds && e.targetIds.length ? z$1.min() : e.readTime ? Nn(e.readTime) : z$1.min();
	        }(t);
	        return this.listener._r(e, n);
	    }
	    /**
	     * Registers interest in the results of the given target. If the target
	     * includes a resumeToken it will be included in the request. Results that
	     * affect the target will be streamed back as WatchChange messages that
	     * reference the targetId.
	     */    mr(t) {
	        const e = {};
	        e.database = Ln(this.R), e.addTarget = function(t, e) {
	            let n;
	            const s = e.target;
	            return n = Ft(s) ? {
	                documents: zn(t, s)
	            } : {
	                query: Hn(t, s)
	            }, n.targetId = e.targetId, e.resumeToken.approximateByteSize() > 0 ? n.resumeToken = Dn(t, e.resumeToken) : e.snapshotVersion.compareTo(z$1.min()) > 0 && (
	            // TODO(wuandy): Consider removing above check because it is most likely true.
	            // Right now, many tests depend on this behaviour though (leaving min() out
	            // of serialization).
	            n.readTime = Sn(t, e.snapshotVersion.toTimestamp())), n;
	        }(this.R, t);
	        const n = Yn(this.R, t);
	        n && (e.labels = n), this.cr(e);
	    }
	    /**
	     * Unregisters interest in the results of the target associated with the
	     * given targetId.
	     */    gr(t) {
	        const e = {};
	        e.database = Ln(this.R), e.removeTarget = t, this.cr(e);
	    }
	}

	/**
	 * A Stream that implements the Write RPC.
	 *
	 * The Write RPC requires the caller to maintain special streamToken
	 * state in between calls, to help the server understand which responses the
	 * client has processed by the time the next request is made. Every response
	 * will contain a streamToken; this value must be passed to the next
	 * request.
	 *
	 * After calling start() on this stream, the next request must be a handshake,
	 * containing whatever streamToken is on hand. Once a response to this
	 * request is received, all pending mutations may be submitted. When
	 * submitting multiple batches of mutations at the same time, it's
	 * okay to use the same streamToken for the calls to writeMutations.
	 *
	 * TODO(b/33271235): Use proto types
	 */ class Qr extends Kr {
	    constructor(t, e, n, s, i) {
	        super(t, "write_stream_connection_backoff" /* WriteStreamConnectionBackoff */ , "write_stream_idle" /* WriteStreamIdle */ , e, n, i), 
	        this.R = s, this.yr = !1;
	    }
	    /**
	     * Tracks whether or not a handshake has been successfully exchanged and
	     * the stream is ready to accept mutations.
	     */    get pr() {
	        return this.yr;
	    }
	    // Override of PersistentStream.start
	    start() {
	        this.yr = !1, this.lastStreamToken = void 0, super.start();
	    }
	    ar() {
	        this.yr && this.Er([]);
	    }
	    wr(t) {
	        return this.Hi.Fi("Write", t);
	    }
	    onMessage(t) {
	        if (
	        // Always capture the last stream token.
	        B(!!t.streamToken), this.lastStreamToken = t.streamToken, this.yr) {
	            // A successful first write response means the stream is healthy,
	            // Note, that we could consider a successful handshake healthy, however,
	            // the write itself might be causing an error we want to back off from.
	            this.Zi.reset();
	            const e = Gn(t.writeResults, t.commitTime), n = Nn(t.commitTime);
	            return this.listener.Tr(n, e);
	        }
	        // The first response is always the handshake response
	        return B(!t.writeResults || 0 === t.writeResults.length), this.yr = !0, this.listener.Ir();
	    }
	    /**
	     * Sends an initial streamToken to the server, performing the handshake
	     * required to make the StreamingWrite RPC work. Subsequent
	     * calls should wait until onHandshakeComplete was called.
	     */    Ar() {
	        // TODO(dimond): Support stream resumption. We intentionally do not set the
	        // stream token on the handshake, ignoring any stream token we might have.
	        const t = {};
	        t.database = Ln(this.R), this.cr(t);
	    }
	    /** Sends a group of mutations to the Firestore backend to apply. */    Er(t) {
	        const e = {
	            streamToken: this.lastStreamToken,
	            writes: t.map((t => Qn(this.R, t)))
	        };
	        this.cr(e);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Datastore and its related methods are a wrapper around the external Google
	 * Cloud Datastore grpc API, which provides an interface that is more convenient
	 * for the rest of the client SDK architecture to consume.
	 */
	/**
	 * An implementation of Datastore that exposes additional state for internal
	 * consumption.
	 */
	class Wr extends class {} {
	    constructor(t, e, n) {
	        super(), this.credentials = t, this.Hi = e, this.R = n, this.Rr = !1;
	    }
	    Pr() {
	        if (this.Rr) throw new C(D.FAILED_PRECONDITION, "The client has already been terminated.");
	    }
	    /** Gets an auth token and invokes the provided RPC. */    Ni(t, e, n) {
	        return this.Pr(), this.credentials.getToken().then((s => this.Hi.Ni(t, e, n, s))).catch((t => {
	            throw "FirebaseError" === t.name ? (t.code === D.UNAUTHENTICATED && this.credentials.invalidateToken(), 
	            t) : new C(D.UNKNOWN, t.toString());
	        }));
	    }
	    /** Gets an auth token and invokes the provided RPC with streamed results. */    Oi(t, e, n) {
	        return this.Pr(), this.credentials.getToken().then((s => this.Hi.Oi(t, e, n, s))).catch((t => {
	            throw "FirebaseError" === t.name ? (t.code === D.UNAUTHENTICATED && this.credentials.invalidateToken(), 
	            t) : new C(D.UNKNOWN, t.toString());
	        }));
	    }
	    terminate() {
	        this.Rr = !0;
	    }
	}

	// TODO(firestorexp): Make sure there is only one Datastore instance per
	// firestore-exp client.
	/**
	 * A component used by the RemoteStore to track the OnlineState (that is,
	 * whether or not the client as a whole should be considered to be online or
	 * offline), implementing the appropriate heuristics.
	 *
	 * In particular, when the client is trying to connect to the backend, we
	 * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for
	 * a connection to succeed. If we have too many failures or the timeout elapses,
	 * then we set the OnlineState to Offline, and the client will behave as if
	 * it is offline (get()s will return cached data, etc.).
	 */
	class Gr {
	    constructor(t, e) {
	        this.asyncQueue = t, this.onlineStateHandler = e, 
	        /** The current OnlineState. */
	        this.state = "Unknown" /* Unknown */ , 
	        /**
	         * A count of consecutive failures to open the stream. If it reaches the
	         * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
	         * Offline.
	         */
	        this.br = 0, 
	        /**
	         * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
	         * transition from OnlineState.Unknown to OnlineState.Offline without waiting
	         * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
	         */
	        this.vr = null, 
	        /**
	         * Whether the client should log a warning message if it fails to connect to
	         * the backend (initially true, cleared after a successful stream, or if we've
	         * logged the message already).
	         */
	        this.Vr = !0;
	    }
	    /**
	     * Called by RemoteStore when a watch stream is started (including on each
	     * backoff attempt).
	     *
	     * If this is the first attempt, it sets the OnlineState to Unknown and starts
	     * the onlineStateTimer.
	     */    Sr() {
	        0 === this.br && (this.Dr("Unknown" /* Unknown */), this.vr = this.asyncQueue.enqueueAfterDelay("online_state_timeout" /* OnlineStateTimeout */ , 1e4, (() => (this.vr = null, 
	        this.Cr("Backend didn't respond within 10 seconds."), this.Dr("Offline" /* Offline */), 
	        Promise.resolve()))));
	    }
	    /**
	     * Updates our OnlineState as appropriate after the watch stream reports a
	     * failure. The first failure moves us to the 'Unknown' state. We then may
	     * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
	     * actually transition to the 'Offline' state.
	     */    Nr(t) {
	        "Online" /* Online */ === this.state ? this.Dr("Unknown" /* Unknown */) : (this.br++, 
	        this.br >= 1 && (this.kr(), this.Cr(`Connection failed 1 times. Most recent error: ${t.toString()}`), 
	        this.Dr("Offline" /* Offline */)));
	    }
	    /**
	     * Explicitly sets the OnlineState to the specified state.
	     *
	     * Note that this resets our timers / failure counters, etc. used by our
	     * Offline heuristics, so must not be used in place of
	     * handleWatchStreamStart() and handleWatchStreamFailure().
	     */    set(t) {
	        this.kr(), this.br = 0, "Online" /* Online */ === t && (
	        // We've connected to watch at least once. Don't warn the developer
	        // about being offline going forward.
	        this.Vr = !1), this.Dr(t);
	    }
	    Dr(t) {
	        t !== this.state && (this.state = t, this.onlineStateHandler(t));
	    }
	    Cr(t) {
	        const e = `Could not reach Cloud Firestore backend. ${t}\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;
	        this.Vr ? (O(e), this.Vr = !1) : $("OnlineStateTracker", e);
	    }
	    kr() {
	        null !== this.vr && (this.vr.cancel(), this.vr = null);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class zr {
	    constructor(
	    /**
	     * The local store, used to fill the write pipeline with outbound mutations.
	     */
	    t, 
	    /** The client-side proxy for interacting with the backend. */
	    e, n, s, i) {
	        this.localStore = t, this.datastore = e, this.asyncQueue = n, this.remoteSyncer = {}, 
	        /**
	         * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
	         * LocalStore via fillWritePipeline() and have or will send to the write
	         * stream.
	         *
	         * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
	         * restart the write stream. When the stream is established the writes in the
	         * pipeline will be sent in order.
	         *
	         * Writes remain in writePipeline until they are acknowledged by the backend
	         * and thus will automatically be re-sent if the stream is interrupted /
	         * restarted before they're acknowledged.
	         *
	         * Write responses from the backend are linked to their originating request
	         * purely based on order, and so we can just shift() writes from the front of
	         * the writePipeline as we receive responses.
	         */
	        this.$r = [], 
	        /**
	         * A mapping of watched targets that the client cares about tracking and the
	         * user has explicitly called a 'listen' for this target.
	         *
	         * These targets may or may not have been sent to or acknowledged by the
	         * server. On re-establishing the listen stream, these targets should be sent
	         * to the server. The targets removed with unlistens are removed eagerly
	         * without waiting for confirmation from the listen stream.
	         */
	        this.Or = new Map, 
	        /**
	         * A set of reasons for why the RemoteStore may be offline. If empty, the
	         * RemoteStore may start its network connections.
	         */
	        this.Fr = new Set, 
	        /**
	         * Event handlers that get called when the network is disabled or enabled.
	         *
	         * PORTING NOTE: These functions are used on the Web client to create the
	         * underlying streams (to support tree-shakeable streams). On Android and iOS,
	         * the streams are created during construction of RemoteStore.
	         */
	        this.Mr = [], this.Lr = i, this.Lr.di((t => {
	            n.enqueueAndForget((async () => {
	                // Porting Note: Unlike iOS, `restartNetwork()` is called even when the
	                // network becomes unreachable as we don't have any other way to tear
	                // down our streams.
	                so(this) && ($("RemoteStore", "Restarting streams for network reachability change."), 
	                await async function(t) {
	                    const e = U(t);
	                    e.Fr.add(4 /* ConnectivityChange */), await Jr(e), e.Br.set("Unknown" /* Unknown */), 
	                    e.Fr.delete(4 /* ConnectivityChange */), await Hr(e);
	                }(this));
	            }));
	        })), this.Br = new Gr(n, s);
	    }
	}

	async function Hr(t) {
	    if (so(t)) for (const e of t.Mr) await e(/* enabled= */ !0);
	}

	/**
	 * Temporarily disables the network. The network can be re-enabled using
	 * enableNetwork().
	 */ async function Jr(t) {
	    for (const e of t.Mr) await e(/* enabled= */ !1);
	}

	/**
	 * Starts new listen for the given target. Uses resume token if provided. It
	 * is a no-op if the target of given `TargetData` is already being listened to.
	 */
	function Yr(t, e) {
	    const n = U(t);
	    n.Or.has(e.targetId) || (
	    // Mark this as something the client is currently listening for.
	    n.Or.set(e.targetId, e), no(n) ? 
	    // The listen will be sent in onWatchStreamOpen
	    eo(n) : To(n).er() && Zr(n, e));
	}

	/**
	 * Removes the listen from server. It is a no-op if the given target id is
	 * not being listened to.
	 */ function Xr(t, e) {
	    const n = U(t), s = To(n);
	    n.Or.delete(e), s.er() && to(n, e), 0 === n.Or.size && (s.er() ? s.ir() : so(n) && 
	    // Revert to OnlineState.Unknown if the watch stream is not open and we
	    // have no listeners, since without any listens to send we cannot
	    // confirm if the stream is healthy and upgrade to OnlineState.Online.
	    n.Br.set("Unknown" /* Unknown */));
	}

	/**
	 * We need to increment the the expected number of pending responses we're due
	 * from watch so we wait for the ack to process any messages from this target.
	 */ function Zr(t, e) {
	    t.Ur.q(e.targetId), To(t).mr(e);
	}

	/**
	 * We need to increment the expected number of pending responses we're due
	 * from watch so we wait for the removal on the server before we process any
	 * messages from this target.
	 */ function to(t, e) {
	    t.Ur.q(e), To(t).gr(e);
	}

	function eo(t) {
	    t.Ur = new An({
	        getRemoteKeysForTarget: e => t.remoteSyncer.getRemoteKeysForTarget(e),
	        lt: e => t.Or.get(e) || null
	    }), To(t).start(), t.Br.Sr();
	}

	/**
	 * Returns whether the watch stream should be started because it's necessary
	 * and has not yet been started.
	 */ function no(t) {
	    return so(t) && !To(t).tr() && t.Or.size > 0;
	}

	function so(t) {
	    return 0 === U(t).Fr.size;
	}

	function io(t) {
	    t.Ur = void 0;
	}

	async function ro(t) {
	    t.Or.forEach(((e, n) => {
	        Zr(t, e);
	    }));
	}

	async function oo(t, e) {
	    io(t), 
	    // If we still need the watch stream, retry the connection.
	    no(t) ? (t.Br.Nr(e), eo(t)) : 
	    // No need to restart watch stream because there are no active targets.
	    // The online state is set to unknown because there is no active attempt
	    // at establishing a connection
	    t.Br.set("Unknown" /* Unknown */);
	}

	async function co(t, e, n) {
	    if (
	    // Mark the client as online since we got a message from the server
	    t.Br.set("Online" /* Online */), e instanceof Tn && 2 /* Removed */ === e.state && e.cause) 
	    // There was an error on a target, don't wait for a consistent snapshot
	    // to raise events
	    try {
	        await 
	        /** Handles an error on a target */
	        async function(t, e) {
	            const n = e.cause;
	            for (const s of e.targetIds) 
	            // A watched target might have been removed already.
	            t.Or.has(s) && (await t.remoteSyncer.rejectListen(s, n), t.Or.delete(s), t.Ur.removeTarget(s));
	        }
	        /**
	 * Attempts to fill our write pipeline with writes from the LocalStore.
	 *
	 * Called internally to bootstrap or refill the write pipeline and by
	 * SyncEngine whenever there are new mutations to process.
	 *
	 * Starts the write stream if necessary.
	 */ (t, e);
	    } catch (n) {
	        $("RemoteStore", "Failed to remove targets %s: %s ", e.targetIds.join(","), n), 
	        await uo(t, n);
	    } else if (e instanceof pn ? t.Ur.X(e) : e instanceof En ? t.Ur.rt(e) : t.Ur.et(e), 
	    !n.isEqual(z$1.min())) try {
	        const e = await er(t.localStore);
	        n.compareTo(e) >= 0 && 
	        // We have received a target change with a global snapshot if the snapshot
	        // version is not equal to SnapshotVersion.min().
	        await 
	        /**
	 * Takes a batch of changes from the Datastore, repackages them as a
	 * RemoteEvent, and passes that on to the listener, which is typically the
	 * SyncEngine.
	 */
	        function(t, e) {
	            const n = t.Ur.ut(e);
	            // Update in-memory resume tokens. LocalStore will update the
	            // persistent view of these when applying the completed RemoteEvent.
	                        return n.targetChanges.forEach(((n, s) => {
	                if (n.resumeToken.approximateByteSize() > 0) {
	                    const i = t.Or.get(s);
	                    // A watched target might have been removed already.
	                                        i && t.Or.set(s, i.withResumeToken(n.resumeToken, e));
	                }
	            })), 
	            // Re-establish listens for the targets that have been invalidated by
	            // existence filter mismatches.
	            n.targetMismatches.forEach((e => {
	                const n = t.Or.get(e);
	                if (!n) 
	                // A watched target might have been removed already.
	                return;
	                // Clear the resume token for the target, since we're in a known mismatch
	                // state.
	                                t.Or.set(e, n.withResumeToken(st.EMPTY_BYTE_STRING, n.snapshotVersion)), 
	                // Cause a hard reset by unwatching and rewatching immediately, but
	                // deliberately don't send a resume token so that we get a full update.
	                to(t, e);
	                // Mark the target we send as being on behalf of an existence filter
	                // mismatch, but don't actually retain that in listenTargets. This ensures
	                // that we flag the first re-listen this way without impacting future
	                // listens of this target (that might happen e.g. on reconnect).
	                const s = new Gs(n.target, e, 1 /* ExistenceFilterMismatch */ , n.sequenceNumber);
	                Zr(t, s);
	            })), t.remoteSyncer.applyRemoteEvent(n);
	        }(t, n);
	    } catch (e) {
	        $("RemoteStore", "Failed to raise snapshot:", e), await uo(t, e);
	    }
	}

	/**
	 * Recovery logic for IndexedDB errors that takes the network offline until
	 * `op` succeeds. Retries are scheduled with backoff using
	 * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is
	 * validated via a generic operation.
	 *
	 * The returned Promise is resolved once the network is disabled and before
	 * any retry attempt.
	 */ async function uo(t, e, n) {
	    if (!Ms(e)) throw e;
	    t.Fr.add(1 /* IndexedDbFailed */), 
	    // Disable network and raise offline snapshots
	    await Jr(t), t.Br.set("Offline" /* Offline */), n || (
	    // Use a simple read operation to determine if IndexedDB recovered.
	    // Ideally, we would expose a health check directly on SimpleDb, but
	    // RemoteStore only has access to persistence through LocalStore.
	    n = () => er(t.localStore)), 
	    // Probe IndexedDB periodically and re-enable network
	    t.asyncQueue.enqueueRetryable((async () => {
	        $("RemoteStore", "Retrying IndexedDB access"), await n(), t.Fr.delete(1 /* IndexedDbFailed */), 
	        await Hr(t);
	    }));
	}

	/**
	 * Executes `op`. If `op` fails, takes the network offline until `op`
	 * succeeds. Returns after the first attempt.
	 */ function ao(t, e) {
	    return e().catch((n => uo(t, n, e)));
	}

	async function ho(t) {
	    const e = U(t), n = Io(e);
	    let s = e.$r.length > 0 ? e.$r[e.$r.length - 1].batchId : -1;
	    for (;lo(e); ) try {
	        const t = await ir(e.localStore, s);
	        if (null === t) {
	            0 === e.$r.length && n.ir();
	            break;
	        }
	        s = t.batchId, fo(e, t);
	    } catch (t) {
	        await uo(e, t);
	    }
	    wo(e) && _o(e);
	}

	/**
	 * Returns true if we can add to the write pipeline (i.e. the network is
	 * enabled and the write pipeline is not full).
	 */ function lo(t) {
	    return so(t) && t.$r.length < 10;
	}

	/**
	 * Queues additional writes to be sent to the write stream, sending them
	 * immediately if the write stream is established.
	 */ function fo(t, e) {
	    t.$r.push(e);
	    const n = Io(t);
	    n.er() && n.pr && n.Er(e.mutations);
	}

	function wo(t) {
	    return so(t) && !Io(t).tr() && t.$r.length > 0;
	}

	function _o(t) {
	    Io(t).start();
	}

	async function mo(t) {
	    Io(t).Ar();
	}

	async function go(t) {
	    const e = Io(t);
	    // Send the write pipeline now that the stream is established.
	        for (const n of t.$r) e.Er(n.mutations);
	}

	async function yo(t, e, n) {
	    const s = t.$r.shift(), i = Ws.from(s, e, n);
	    await ao(t, (() => t.remoteSyncer.applySuccessfulWrite(i))), 
	    // It's possible that with the completion of this mutation another
	    // slot has freed up.
	    await ho(t);
	}

	async function po(t, e) {
	    // If the write stream closed after the write handshake completes, a write
	    // operation failed and we fail the pending operation.
	    e && Io(t).pr && 
	    // This error affects the actual write.
	    await async function(t, e) {
	        // Only handle permanent errors here. If it's transient, just let the retry
	        // logic kick in.
	        if (n = e.code, Ze(n) && n !== D.ABORTED) {
	            // This was a permanent error, the request itself was the problem
	            // so it's not going to succeed if we resend it.
	            const n = t.$r.shift();
	            // In this case it's also unlikely that the server itself is melting
	            // down -- this was just a bad request so inhibit backoff on the next
	            // restart.
	                        Io(t).sr(), await ao(t, (() => t.remoteSyncer.rejectFailedWrite(n.batchId, e))), 
	            // It's possible that with the completion of this mutation
	            // another slot has freed up.
	            await ho(t);
	        }
	        var n;
	    }(t, e), 
	    // The write stream might have been started by refilling the write
	    // pipeline for failed writes
	    wo(t) && _o(t);
	}

	/**
	 * Toggles the network state when the client gains or loses its primary lease.
	 */
	async function Eo(t, e) {
	    const n = U(t);
	    e ? (n.Fr.delete(2 /* IsSecondary */), await Hr(n)) : e || (n.Fr.add(2 /* IsSecondary */), 
	    await Jr(n), n.Br.set("Unknown" /* Unknown */));
	}

	/**
	 * If not yet initialized, registers the WatchStream and its network state
	 * callback with `remoteStoreImpl`. Returns the existing stream if one is
	 * already available.
	 *
	 * PORTING NOTE: On iOS and Android, the WatchStream gets registered on startup.
	 * This is not done on Web to allow it to be tree-shaken.
	 */ function To(t) {
	    return t.qr || (
	    // Create stream (but note that it is not started yet).
	    t.qr = function(t, e, n) {
	        const s = U(t);
	        return s.Pr(), new jr(e, s.Hi, s.credentials, s.R, n);
	    }
	    /**
	 * @license
	 * Copyright 2018 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ (t.datastore, t.asyncQueue, {
	        Ii: ro.bind(null, t),
	        Ri: oo.bind(null, t),
	        _r: co.bind(null, t)
	    }), t.Mr.push((async e => {
	        e ? (t.qr.sr(), no(t) ? eo(t) : t.Br.set("Unknown" /* Unknown */)) : (await t.qr.stop(), 
	        io(t));
	    }))), t.qr;
	}

	/**
	 * If not yet initialized, registers the WriteStream and its network state
	 * callback with `remoteStoreImpl`. Returns the existing stream if one is
	 * already available.
	 *
	 * PORTING NOTE: On iOS and Android, the WriteStream gets registered on startup.
	 * This is not done on Web to allow it to be tree-shaken.
	 */ function Io(t) {
	    return t.Kr || (
	    // Create stream (but note that it is not started yet).
	    t.Kr = function(t, e, n) {
	        const s = U(t);
	        return s.Pr(), new Qr(e, s.Hi, s.credentials, s.R, n);
	    }(t.datastore, t.asyncQueue, {
	        Ii: mo.bind(null, t),
	        Ri: po.bind(null, t),
	        Ir: go.bind(null, t),
	        Tr: yo.bind(null, t)
	    }), t.Mr.push((async e => {
	        e ? (t.Kr.sr(), 
	        // This will start the write stream if necessary.
	        await ho(t)) : (await t.Kr.stop(), t.$r.length > 0 && ($("RemoteStore", `Stopping write stream with ${t.$r.length} pending writes`), 
	        t.$r = []));
	    }))), t.Kr;
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Represents an operation scheduled to be run in the future on an AsyncQueue.
	 *
	 * It is created via DelayedOperation.createAndSchedule().
	 *
	 * Supports cancellation (via cancel()) and early execution (via skipDelay()).
	 *
	 * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type
	 * in newer versions of TypeScript defines `finally`, which is not available in
	 * IE.
	 */
	class Ao {
	    constructor(t, e, n, s, i) {
	        this.asyncQueue = t, this.timerId = e, this.targetTimeMs = n, this.op = s, this.removalCallback = i, 
	        this.deferred = new Ns, this.then = this.deferred.promise.then.bind(this.deferred.promise), 
	        // It's normal for the deferred promise to be canceled (due to cancellation)
	        // and so we attach a dummy catch callback to avoid
	        // 'UnhandledPromiseRejectionWarning' log spam.
	        this.deferred.promise.catch((t => {}));
	    }
	    /**
	     * Creates and returns a DelayedOperation that has been scheduled to be
	     * executed on the provided asyncQueue after the provided delayMs.
	     *
	     * @param asyncQueue - The queue to schedule the operation on.
	     * @param id - A Timer ID identifying the type of operation this is.
	     * @param delayMs - The delay (ms) before the operation should be scheduled.
	     * @param op - The operation to run.
	     * @param removalCallback - A callback to be called synchronously once the
	     *   operation is executed or canceled, notifying the AsyncQueue to remove it
	     *   from its delayedOperations list.
	     *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
	     *   the DelayedOperation class public.
	     */    static createAndSchedule(t, e, n, s, i) {
	        const r = Date.now() + n, o = new Ao(t, e, r, s, i);
	        return o.start(n), o;
	    }
	    /**
	     * Starts the timer. This is called immediately after construction by
	     * createAndSchedule().
	     */    start(t) {
	        this.timerHandle = setTimeout((() => this.handleDelayElapsed()), t);
	    }
	    /**
	     * Queues the operation to run immediately (if it hasn't already been run or
	     * canceled).
	     */    skipDelay() {
	        return this.handleDelayElapsed();
	    }
	    /**
	     * Cancels the operation if it hasn't already been executed or canceled. The
	     * promise will be rejected.
	     *
	     * As long as the operation has not yet been run, calling cancel() provides a
	     * guarantee that the operation will not be run.
	     */    cancel(t) {
	        null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new C(D.CANCELLED, "Operation cancelled" + (t ? ": " + t : ""))));
	    }
	    handleDelayElapsed() {
	        this.asyncQueue.enqueueAndForget((() => null !== this.timerHandle ? (this.clearTimeout(), 
	        this.op().then((t => this.deferred.resolve(t)))) : Promise.resolve()));
	    }
	    clearTimeout() {
	        null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), 
	        this.timerHandle = null);
	    }
	}

	/**
	 * Returns a FirestoreError that can be surfaced to the user if the provided
	 * error is an IndexedDbTransactionError. Re-throws the error otherwise.
	 */ function Ro(t, e) {
	    if (O("AsyncQueue", `${e}: ${t}`), Ms(t)) return new C(D.UNAVAILABLE, `${e}: ${t}`);
	    throw t;
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * DocumentSet is an immutable (copy-on-write) collection that holds documents
	 * in order specified by the provided comparator. We always add a document key
	 * comparator on top of what is provided to guarantee document equality based on
	 * the key.
	 */ class Po {
	    /** The default ordering is by key if the comparator is omitted */
	    constructor(t) {
	        // We are adding document key comparator to the end as it's the only
	        // guaranteed unique property of a document.
	        this.comparator = t ? (e, n) => t(e, n) || wt.comparator(e.key, n.key) : (t, e) => wt.comparator(t.key, e.key), 
	        this.keyedMap = hn(), this.sortedSet = new en(this.comparator);
	    }
	    /**
	     * Returns an empty copy of the existing DocumentSet, using the same
	     * comparator.
	     */    static emptySet(t) {
	        return new Po(t.comparator);
	    }
	    has(t) {
	        return null != this.keyedMap.get(t);
	    }
	    get(t) {
	        return this.keyedMap.get(t);
	    }
	    first() {
	        return this.sortedSet.minKey();
	    }
	    last() {
	        return this.sortedSet.maxKey();
	    }
	    isEmpty() {
	        return this.sortedSet.isEmpty();
	    }
	    /**
	     * Returns the index of the provided key in the document set, or -1 if the
	     * document key is not present in the set;
	     */    indexOf(t) {
	        const e = this.keyedMap.get(t);
	        return e ? this.sortedSet.indexOf(e) : -1;
	    }
	    get size() {
	        return this.sortedSet.size;
	    }
	    /** Iterates documents in order defined by "comparator" */    forEach(t) {
	        this.sortedSet.inorderTraversal(((e, n) => (t(e), !1)));
	    }
	    /** Inserts or updates a document with the same key */    add(t) {
	        // First remove the element if we have it.
	        const e = this.delete(t.key);
	        return e.copy(e.keyedMap.insert(t.key, t), e.sortedSet.insert(t, null));
	    }
	    /** Deletes a document with a given key */    delete(t) {
	        const e = this.get(t);
	        return e ? this.copy(this.keyedMap.remove(t), this.sortedSet.remove(e)) : this;
	    }
	    isEqual(t) {
	        if (!(t instanceof Po)) return !1;
	        if (this.size !== t.size) return !1;
	        const e = this.sortedSet.getIterator(), n = t.sortedSet.getIterator();
	        for (;e.hasNext(); ) {
	            const t = e.getNext().key, s = n.getNext().key;
	            if (!t.isEqual(s)) return !1;
	        }
	        return !0;
	    }
	    toString() {
	        const t = [];
	        return this.forEach((e => {
	            t.push(e.toString());
	        })), 0 === t.length ? "DocumentSet ()" : "DocumentSet (\n  " + t.join("  \n") + "\n)";
	    }
	    copy(t, e) {
	        const n = new Po;
	        return n.comparator = this.comparator, n.keyedMap = t, n.sortedSet = e, n;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * DocumentChangeSet keeps track of a set of changes to docs in a query, merging
	 * duplicate events for the same doc.
	 */ class bo {
	    constructor() {
	        this.jr = new en(wt.comparator);
	    }
	    track(t) {
	        const e = t.doc.key, n = this.jr.get(e);
	        n ? 
	        // Merge the new change with the existing change.
	        0 /* Added */ !== t.type && 3 /* Metadata */ === n.type ? this.jr = this.jr.insert(e, t) : 3 /* Metadata */ === t.type && 1 /* Removed */ !== n.type ? this.jr = this.jr.insert(e, {
	            type: n.type,
	            doc: t.doc
	        }) : 2 /* Modified */ === t.type && 2 /* Modified */ === n.type ? this.jr = this.jr.insert(e, {
	            type: 2 /* Modified */ ,
	            doc: t.doc
	        }) : 2 /* Modified */ === t.type && 0 /* Added */ === n.type ? this.jr = this.jr.insert(e, {
	            type: 0 /* Added */ ,
	            doc: t.doc
	        }) : 1 /* Removed */ === t.type && 0 /* Added */ === n.type ? this.jr = this.jr.remove(e) : 1 /* Removed */ === t.type && 2 /* Modified */ === n.type ? this.jr = this.jr.insert(e, {
	            type: 1 /* Removed */ ,
	            doc: n.doc
	        }) : 0 /* Added */ === t.type && 1 /* Removed */ === n.type ? this.jr = this.jr.insert(e, {
	            type: 2 /* Modified */ ,
	            doc: t.doc
	        }) : 
	        // This includes these cases, which don't make sense:
	        // Added->Added
	        // Removed->Removed
	        // Modified->Added
	        // Removed->Modified
	        // Metadata->Added
	        // Removed->Metadata
	        L() : this.jr = this.jr.insert(e, t);
	    }
	    Qr() {
	        const t = [];
	        return this.jr.inorderTraversal(((e, n) => {
	            t.push(n);
	        })), t;
	    }
	}

	class vo {
	    constructor(t, e, n, s, i, r, o, c) {
	        this.query = t, this.docs = e, this.oldDocs = n, this.docChanges = s, this.mutatedKeys = i, 
	        this.fromCache = r, this.syncStateChanged = o, this.excludesMetadataChanges = c;
	    }
	    /** Returns a view snapshot as if all documents in the snapshot were added. */    static fromInitialDocuments(t, e, n, s) {
	        const i = [];
	        return e.forEach((t => {
	            i.push({
	                type: 0 /* Added */ ,
	                doc: t
	            });
	        })), new vo(t, e, Po.emptySet(e), i, n, s, 
	        /* syncStateChanged= */ !0, 
	        /* excludesMetadataChanges= */ !1);
	    }
	    get hasPendingWrites() {
	        return !this.mutatedKeys.isEmpty();
	    }
	    isEqual(t) {
	        if (!(this.fromCache === t.fromCache && this.syncStateChanged === t.syncStateChanged && this.mutatedKeys.isEqual(t.mutatedKeys) && le(this.query, t.query) && this.docs.isEqual(t.docs) && this.oldDocs.isEqual(t.oldDocs))) return !1;
	        const e = this.docChanges, n = t.docChanges;
	        if (e.length !== n.length) return !1;
	        for (let t = 0; t < e.length; t++) if (e[t].type !== n[t].type || !e[t].doc.isEqual(n[t].doc)) return !1;
	        return !0;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Holds the listeners and the last received ViewSnapshot for a query being
	 * tracked by EventManager.
	 */ class Vo {
	    constructor() {
	        this.Wr = void 0, this.listeners = [];
	    }
	}

	class So {
	    constructor() {
	        this.queries = new xi((t => fe(t)), le), this.onlineState = "Unknown" /* Unknown */ , 
	        this.Gr = new Set;
	    }
	}

	async function Do(t, e) {
	    const n = U(t), s = e.query;
	    let i = !1, r = n.queries.get(s);
	    if (r || (i = !0, r = new Vo), i) try {
	        r.Wr = await n.onListen(s);
	    } catch (t) {
	        const n = Ro(t, `Initialization of query '${de(e.query)}' failed`);
	        return void e.onError(n);
	    }
	    if (n.queries.set(s, r), r.listeners.push(e), 
	    // Run global snapshot listeners if a consistent snapshot has been emitted.
	    e.zr(n.onlineState), r.Wr) {
	        e.Hr(r.Wr) && ko(n);
	    }
	}

	async function Co(t, e) {
	    const n = U(t), s = e.query;
	    let i = !1;
	    const r = n.queries.get(s);
	    if (r) {
	        const t = r.listeners.indexOf(e);
	        t >= 0 && (r.listeners.splice(t, 1), i = 0 === r.listeners.length);
	    }
	    if (i) return n.queries.delete(s), n.onUnlisten(s);
	}

	function No(t, e) {
	    const n = U(t);
	    let s = !1;
	    for (const t of e) {
	        const e = t.query, i = n.queries.get(e);
	        if (i) {
	            for (const e of i.listeners) e.Hr(t) && (s = !0);
	            i.Wr = t;
	        }
	    }
	    s && ko(n);
	}

	function xo(t, e, n) {
	    const s = U(t), i = s.queries.get(e);
	    if (i) for (const t of i.listeners) t.onError(n);
	    // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()
	    // after an error.
	        s.queries.delete(e);
	}

	// Call all global snapshot listeners that have been set.
	function ko(t) {
	    t.Gr.forEach((t => {
	        t.next();
	    }));
	}

	/**
	 * QueryListener takes a series of internal view snapshots and determines
	 * when to raise the event.
	 *
	 * It uses an Observer to dispatch events.
	 */ class $o {
	    constructor(t, e, n) {
	        this.query = t, this.Jr = e, 
	        /**
	         * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
	         * observer. This flag is set to true once we've actually raised an event.
	         */
	        this.Yr = !1, this.Xr = null, this.onlineState = "Unknown" /* Unknown */ , this.options = n || {};
	    }
	    /**
	     * Applies the new ViewSnapshot to this listener, raising a user-facing event
	     * if applicable (depending on what changed, whether the user has opted into
	     * metadata-only changes, etc.). Returns true if a user-facing event was
	     * indeed raised.
	     */    Hr(t) {
	        if (!this.options.includeMetadataChanges) {
	            // Remove the metadata only changes.
	            const e = [];
	            for (const n of t.docChanges) 3 /* Metadata */ !== n.type && e.push(n);
	            t = new vo(t.query, t.docs, t.oldDocs, e, t.mutatedKeys, t.fromCache, t.syncStateChanged, 
	            /* excludesMetadataChanges= */ !0);
	        }
	        let e = !1;
	        return this.Yr ? this.Zr(t) && (this.Jr.next(t), e = !0) : this.eo(t, this.onlineState) && (this.no(t), 
	        e = !0), this.Xr = t, e;
	    }
	    onError(t) {
	        this.Jr.error(t);
	    }
	    /** Returns whether a snapshot was raised. */    zr(t) {
	        this.onlineState = t;
	        let e = !1;
	        return this.Xr && !this.Yr && this.eo(this.Xr, t) && (this.no(this.Xr), e = !0), 
	        e;
	    }
	    eo(t, e) {
	        // Always raise the first event when we're synced
	        if (!t.fromCache) return !0;
	        // NOTE: We consider OnlineState.Unknown as online (it should become Offline
	        // or Online if we wait long enough).
	                const n = "Offline" /* Offline */ !== e;
	        // Don't raise the event if we're online, aren't synced yet (checked
	        // above) and are waiting for a sync.
	                return (!this.options.so || !n) && (!t.docs.isEmpty() || "Offline" /* Offline */ === e);
	        // Raise data from cache if we have any documents or we are offline
	        }
	    Zr(t) {
	        // We don't need to handle includeDocumentMetadataChanges here because
	        // the Metadata only changes have already been stripped out if needed.
	        // At this point the only changes we will see are the ones we should
	        // propagate.
	        if (t.docChanges.length > 0) return !0;
	        const e = this.Xr && this.Xr.hasPendingWrites !== t.hasPendingWrites;
	        return !(!t.syncStateChanged && !e) && !0 === this.options.includeMetadataChanges;
	        // Generally we should have hit one of the cases above, but it's possible
	        // to get here if there were only metadata docChanges and they got
	        // stripped out.
	        }
	    no(t) {
	        t = vo.fromInitialDocuments(t.query, t.docs, t.mutatedKeys, t.fromCache), this.Yr = !0, 
	        this.Jr.next(t);
	    }
	}

	/**
	 * Returns a `LoadBundleTaskProgress` representing the progress that the loading
	 * has succeeded.
	 */
	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	class Bo {
	    constructor(t) {
	        this.key = t;
	    }
	}

	class Uo {
	    constructor(t) {
	        this.key = t;
	    }
	}

	/**
	 * View is responsible for computing the final merged truth of what docs are in
	 * a query. It gets notified of local and remote changes to docs, and applies
	 * the query filters and limits to determine the most correct possible results.
	 */ class qo {
	    constructor(t, 
	    /** Documents included in the remote target */
	    e) {
	        this.query = t, this.uo = e, this.ao = null, 
	        /**
	         * A flag whether the view is current with the backend. A view is considered
	         * current after it has seen the current flag from the backend and did not
	         * lose consistency within the watch stream (e.g. because of an existence
	         * filter mismatch).
	         */
	        this.current = !1, 
	        /** Documents in the view but not in the remote target */
	        this.ho = wn(), 
	        /** Document Keys that have local changes */
	        this.mutatedKeys = wn(), this.lo = _e(t), this.fo = new Po(this.lo);
	    }
	    /**
	     * The set of remote documents that the server has told us belongs to the target associated with
	     * this view.
	     */    get wo() {
	        return this.uo;
	    }
	    /**
	     * Iterates over a set of doc changes, applies the query limit, and computes
	     * what the new results should be, what the changes were, and whether we may
	     * need to go back to the local cache for more results. Does not make any
	     * changes to the view.
	     * @param docChanges - The doc changes to apply to this view.
	     * @param previousChanges - If this is being called with a refill, then start
	     *        with this set of docs and changes instead of the current view.
	     * @returns a new set of docs, changes, and refill flag.
	     */    _o(t, e) {
	        const n = e ? e.mo : new bo, s = e ? e.fo : this.fo;
	        let i = e ? e.mutatedKeys : this.mutatedKeys, r = s, o = !1;
	        // Track the last doc in a (full) limit. This is necessary, because some
	        // update (a delete, or an update moving a doc past the old limit) might
	        // mean there is some other document in the local cache that either should
	        // come (1) between the old last limit doc and the new last document, in the
	        // case of updates, or (2) after the new last document, in the case of
	        // deletes. So we keep this doc at the old limit to compare the updates to.
	        // Note that this should never get used in a refill (when previousChanges is
	        // set), because there will only be adds -- no deletes or updates.
	        const c = se(this.query) && s.size === this.query.limit ? s.last() : null, u = ie(this.query) && s.size === this.query.limit ? s.first() : null;
	        // Drop documents out to meet limit/limitToLast requirement.
	        if (t.inorderTraversal(((t, e) => {
	            const a = s.get(t), h = we(this.query, e) ? e : null, l = !!a && this.mutatedKeys.has(a.key), f = !!h && (h.hasLocalMutations || 
	            // We only consider committed mutations for documents that were
	            // mutated during the lifetime of the view.
	            this.mutatedKeys.has(h.key) && h.hasCommittedMutations);
	            let d = !1;
	            // Calculate change
	                        if (a && h) {
	                a.data.isEqual(h.data) ? l !== f && (n.track({
	                    type: 3 /* Metadata */ ,
	                    doc: h
	                }), d = !0) : this.yo(a, h) || (n.track({
	                    type: 2 /* Modified */ ,
	                    doc: h
	                }), d = !0, (c && this.lo(h, c) > 0 || u && this.lo(h, u) < 0) && (
	                // This doc moved from inside the limit to outside the limit.
	                // That means there may be some other doc in the local cache
	                // that should be included instead.
	                o = !0));
	            } else !a && h ? (n.track({
	                type: 0 /* Added */ ,
	                doc: h
	            }), d = !0) : a && !h && (n.track({
	                type: 1 /* Removed */ ,
	                doc: a
	            }), d = !0, (c || u) && (
	            // A doc was removed from a full limit query. We'll need to
	            // requery from the local cache to see if we know about some other
	            // doc that should be in the results.
	            o = !0));
	            d && (h ? (r = r.add(h), i = f ? i.add(t) : i.delete(t)) : (r = r.delete(t), i = i.delete(t)));
	        })), se(this.query) || ie(this.query)) for (;r.size > this.query.limit; ) {
	            const t = se(this.query) ? r.last() : r.first();
	            r = r.delete(t.key), i = i.delete(t.key), n.track({
	                type: 1 /* Removed */ ,
	                doc: t
	            });
	        }
	        return {
	            fo: r,
	            mo: n,
	            Nn: o,
	            mutatedKeys: i
	        };
	    }
	    yo(t, e) {
	        // We suppress the initial change event for documents that were modified as
	        // part of a write acknowledgment (e.g. when the value of a server transform
	        // is applied) as Watch will send us the same document again.
	        // By suppressing the event, we only raise two user visible events (one with
	        // `hasPendingWrites` and the final state of the document) instead of three
	        // (one with `hasPendingWrites`, the modified document with
	        // `hasPendingWrites` and the final state of the document).
	        return t.hasLocalMutations && e.hasCommittedMutations && !e.hasLocalMutations;
	    }
	    /**
	     * Updates the view with the given ViewDocumentChanges and optionally updates
	     * limbo docs and sync state from the provided target change.
	     * @param docChanges - The set of changes to make to the view's docs.
	     * @param updateLimboDocuments - Whether to update limbo documents based on
	     *        this change.
	     * @param targetChange - A target change to apply for computing limbo docs and
	     *        sync state.
	     * @returns A new ViewChange with the given docs, changes, and sync state.
	     */
	    // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
	    applyChanges(t, e, n) {
	        const s = this.fo;
	        this.fo = t.fo, this.mutatedKeys = t.mutatedKeys;
	        // Sort changes based on type and query comparator
	        const i = t.mo.Qr();
	        i.sort(((t, e) => function(t, e) {
	            const n = t => {
	                switch (t) {
	                  case 0 /* Added */ :
	                    return 1;

	                  case 2 /* Modified */ :
	                  case 3 /* Metadata */ :
	                    // A metadata change is converted to a modified change at the public
	                    // api layer.  Since we sort by document key and then change type,
	                    // metadata and modified changes must be sorted equivalently.
	                    return 2;

	                  case 1 /* Removed */ :
	                    return 0;

	                  default:
	                    return L();
	                }
	            };
	            return n(t) - n(e);
	        }
	        /**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ (t.type, e.type) || this.lo(t.doc, e.doc))), this.po(n);
	        const r = e ? this.Eo() : [], o = 0 === this.ho.size && this.current ? 1 /* Synced */ : 0 /* Local */ , c = o !== this.ao;
	        if (this.ao = o, 0 !== i.length || c) {
	            return {
	                snapshot: new vo(this.query, t.fo, s, i, t.mutatedKeys, 0 /* Local */ === o, c, 
	                /* excludesMetadataChanges= */ !1),
	                To: r
	            };
	        }
	        // no changes
	        return {
	            To: r
	        };
	    }
	    /**
	     * Applies an OnlineState change to the view, potentially generating a
	     * ViewChange if the view's syncState changes as a result.
	     */    zr(t) {
	        return this.current && "Offline" /* Offline */ === t ? (
	        // If we're offline, set `current` to false and then call applyChanges()
	        // to refresh our syncState and generate a ViewChange as appropriate. We
	        // are guaranteed to get a new TargetChange that sets `current` back to
	        // true once the client is back online.
	        this.current = !1, this.applyChanges({
	            fo: this.fo,
	            mo: new bo,
	            mutatedKeys: this.mutatedKeys,
	            Nn: !1
	        }, 
	        /* updateLimboDocuments= */ !1)) : {
	            To: []
	        };
	    }
	    /**
	     * Returns whether the doc for the given key should be in limbo.
	     */    Io(t) {
	        // If the remote end says it's part of this query, it's not in limbo.
	        return !this.uo.has(t) && (
	        // The local store doesn't think it's a result, so it shouldn't be in limbo.
	        !!this.fo.has(t) && !this.fo.get(t).hasLocalMutations);
	    }
	    /**
	     * Updates syncedDocuments, current, and limbo docs based on the given change.
	     * Returns the list of changes to which docs are in limbo.
	     */    po(t) {
	        t && (t.addedDocuments.forEach((t => this.uo = this.uo.add(t))), t.modifiedDocuments.forEach((t => {})), 
	        t.removedDocuments.forEach((t => this.uo = this.uo.delete(t))), this.current = t.current);
	    }
	    Eo() {
	        // We can only determine limbo documents when we're in-sync with the server.
	        if (!this.current) return [];
	        // TODO(klimt): Do this incrementally so that it's not quadratic when
	        // updating many documents.
	                const t = this.ho;
	        this.ho = wn(), this.fo.forEach((t => {
	            this.Io(t.key) && (this.ho = this.ho.add(t.key));
	        }));
	        // Diff the new limbo docs with the old limbo docs.
	        const e = [];
	        return t.forEach((t => {
	            this.ho.has(t) || e.push(new Uo(t));
	        })), this.ho.forEach((n => {
	            t.has(n) || e.push(new Bo(n));
	        })), e;
	    }
	    /**
	     * Update the in-memory state of the current view with the state read from
	     * persistence.
	     *
	     * We update the query view whenever a client's primary status changes:
	     * - When a client transitions from primary to secondary, it can miss
	     *   LocalStorage updates and its query views may temporarily not be
	     *   synchronized with the state on disk.
	     * - For secondary to primary transitions, the client needs to update the list
	     *   of `syncedDocuments` since secondary clients update their query views
	     *   based purely on synthesized RemoteEvents.
	     *
	     * @param queryResult.documents - The documents that match the query according
	     * to the LocalStore.
	     * @param queryResult.remoteKeys - The keys of the documents that match the
	     * query according to the backend.
	     *
	     * @returns The ViewChange that resulted from this synchronization.
	     */
	    // PORTING NOTE: Multi-tab only.
	    Ao(t) {
	        this.uo = t.Bn, this.ho = wn();
	        const e = this._o(t.documents);
	        return this.applyChanges(e, /*updateLimboDocuments=*/ !0);
	    }
	    /**
	     * Returns a view snapshot as if this query was just listened to. Contains
	     * a document add for every existing document and the `fromCache` and
	     * `hasPendingWrites` status of the already established view.
	     */
	    // PORTING NOTE: Multi-tab only.
	    Ro() {
	        return vo.fromInitialDocuments(this.query, this.fo, this.mutatedKeys, 0 /* Local */ === this.ao);
	    }
	}

	/**
	 * QueryView contains all of the data that SyncEngine needs to keep track of for
	 * a particular query.
	 */
	class Ko {
	    constructor(
	    /**
	     * The query itself.
	     */
	    t, 
	    /**
	     * The target number created by the client that is used in the watch
	     * stream to identify this query.
	     */
	    e, 
	    /**
	     * The view is responsible for computing the final merged truth of what
	     * docs are in the query. It gets notified of local and remote changes,
	     * and applies the query filters and limits to determine the most correct
	     * possible results.
	     */
	    n) {
	        this.query = t, this.targetId = e, this.view = n;
	    }
	}

	/** Tracks a limbo resolution. */ class jo {
	    constructor(t) {
	        this.key = t, 
	        /**
	         * Set to true once we've received a document. This is used in
	         * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
	         * decide whether it needs to manufacture a delete event for the target once
	         * the target is CURRENT.
	         */
	        this.Po = !1;
	    }
	}

	/**
	 * An implementation of `SyncEngine` coordinating with other parts of SDK.
	 *
	 * The parts of SyncEngine that act as a callback to RemoteStore need to be
	 * registered individually. This is done in `syncEngineWrite()` and
	 * `syncEngineListen()` (as well as `applyPrimaryState()`) as these methods
	 * serve as entry points to RemoteStore's functionality.
	 *
	 * Note: some field defined in this class might have public access level, but
	 * the class is not exported so they are only accessible from this module.
	 * This is useful to implement optional features (like bundles) in free
	 * functions, such that they are tree-shakeable.
	 */ class Qo {
	    constructor(t, e, n, 
	    // PORTING NOTE: Manages state synchronization in multi-tab environments.
	    s, i, r) {
	        this.localStore = t, this.remoteStore = e, this.eventManager = n, this.sharedClientState = s, 
	        this.currentUser = i, this.maxConcurrentLimboResolutions = r, this.bo = {}, this.vo = new xi((t => fe(t)), le), 
	        this.Vo = new Map, 
	        /**
	         * The keys of documents that are in limbo for which we haven't yet started a
	         * limbo resolution query. The strings in this set are the result of calling
	         * `key.path.canonicalString()` where `key` is a `DocumentKey` object.
	         *
	         * The `Set` type was chosen because it provides efficient lookup and removal
	         * of arbitrary elements and it also maintains insertion order, providing the
	         * desired queue-like FIFO semantics.
	         */
	        this.So = new Set, 
	        /**
	         * Keeps track of the target ID for each document that is in limbo with an
	         * active target.
	         */
	        this.Do = new en(wt.comparator), 
	        /**
	         * Keeps track of the information about an active limbo resolution for each
	         * active target ID that was started for the purpose of limbo resolution.
	         */
	        this.Co = new Map, this.No = new wr, 
	        /** Stores user completion handlers, indexed by User and BatchId. */
	        this.xo = {}, 
	        /** Stores user callbacks waiting for all pending writes to be acknowledged. */
	        this.ko = new Map, this.$o = Ti.Yt(), this.onlineState = "Unknown" /* Unknown */ , 
	        // The primary state is set to `true` or `false` immediately after Firestore
	        // startup. In the interim, a client should only be considered primary if
	        // `isPrimary` is true.
	        this.Oo = void 0;
	    }
	    get isPrimaryClient() {
	        return !0 === this.Oo;
	    }
	}

	/**
	 * Initiates the new listen, resolves promise when listen enqueued to the
	 * server. All the subsequent view snapshots or errors are sent to the
	 * subscribed handlers. Returns the initial snapshot.
	 */
	async function Wo(t, e) {
	    const n = Tc(t);
	    let s, i;
	    const r = n.vo.get(e);
	    if (r) 
	    // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
	    // already exists when EventManager calls us for the first time. This
	    // happens when the primary tab is already listening to this query on
	    // behalf of another tab and the user of the primary also starts listening
	    // to the query. EventManager will not have an assigned target ID in this
	    // case and calls `listen` to obtain this ID.
	    s = r.targetId, n.sharedClientState.addLocalQueryTarget(s), i = r.view.Ro(); else {
	        const t = await rr(n.localStore, ae(e)), r = n.sharedClientState.addLocalQueryTarget(t.targetId);
	        s = t.targetId, i = await Go(n, e, s, "current" === r), n.isPrimaryClient && Yr(n.remoteStore, t);
	    }
	    return i;
	}

	/**
	 * Registers a view for a previously unknown query and computes its initial
	 * snapshot.
	 */ async function Go(t, e, n, s) {
	    // PORTING NOTE: On Web only, we inject the code that registers new Limbo
	    // targets based on view changes. This allows us to only depend on Limbo
	    // changes when user code includes queries.
	    t.Fo = (e, n, s) => async function(t, e, n, s) {
	        let i = e.view._o(n);
	        i.Nn && (
	        // The query has a limit and some docs were removed, so we need
	        // to re-run the query against the local store to make sure we
	        // didn't lose any good docs that had been past the limit.
	        i = await cr(t.localStore, e.query, 
	        /* usePreviousResults= */ !1).then((({documents: t}) => e.view._o(t, i))));
	        const r = s && s.targetChanges.get(e.targetId), o = e.view.applyChanges(i, 
	        /* updateLimboDocuments= */ t.isPrimaryClient, r);
	        return oc(t, e.targetId, o.To), o.snapshot;
	    }(t, e, n, s);
	    const i = await cr(t.localStore, e, 
	    /* usePreviousResults= */ !0), r = new qo(e, i.Bn), o = r._o(i.documents), c = yn.createSynthesizedTargetChangeForCurrentChange(n, s && "Offline" /* Offline */ !== t.onlineState), u = r.applyChanges(o, 
	    /* updateLimboDocuments= */ t.isPrimaryClient, c);
	    oc(t, n, u.To);
	    const a = new Ko(e, n, r);
	    return t.vo.set(e, a), t.Vo.has(n) ? t.Vo.get(n).push(e) : t.Vo.set(n, [ e ]), u.snapshot;
	}

	/** Stops listening to the query. */ async function zo(t, e) {
	    const n = U(t), s = n.vo.get(e), i = n.Vo.get(s.targetId);
	    if (i.length > 1) return n.Vo.set(s.targetId, i.filter((t => !le(t, e)))), void n.vo.delete(e);
	    // No other queries are mapped to the target, clean up the query and the target.
	        if (n.isPrimaryClient) {
	        // We need to remove the local query target first to allow us to verify
	        // whether any other client is still interested in this target.
	        n.sharedClientState.removeLocalQueryTarget(s.targetId);
	        n.sharedClientState.isActiveQueryTarget(s.targetId) || await or(n.localStore, s.targetId, 
	        /*keepPersistedTargetData=*/ !1).then((() => {
	            n.sharedClientState.clearQueryState(s.targetId), Xr(n.remoteStore, s.targetId), 
	            ic(n, s.targetId);
	        })).catch(bi);
	    } else ic(n, s.targetId), await or(n.localStore, s.targetId, 
	    /*keepPersistedTargetData=*/ !0);
	}

	/**
	 * Initiates the write of local mutation batch which involves adding the
	 * writes to the mutation queue, notifying the remote store about new
	 * mutations and raising events for any changes this write caused.
	 *
	 * The promise returned by this call is resolved when the above steps
	 * have completed, *not* when the write was acked by the backend. The
	 * userCallback is resolved once the write was acked/rejected by the
	 * backend (or failed locally for any other reason).
	 */ async function Ho(t, e, n) {
	    const s = Ic(t);
	    try {
	        const t = await function(t, e) {
	            const n = U(t), s = G.now(), i = e.reduce(((t, e) => t.add(e.key)), wn());
	            let r;
	            return n.persistence.runTransaction("Locally write mutations", "readwrite", (t => n.Mn.pn(t, i).next((i => {
	                r = i;
	                // For non-idempotent mutations (such as `FieldValue.increment()`),
	                // we record the base state in a separate patch mutation. This is
	                // later used to guarantee consistent values and prevents flicker
	                // even if the backend sends us an update that already includes our
	                // transform.
	                const o = [];
	                for (const t of e) {
	                    const e = Be(t, r.get(t.key));
	                    null != e && 
	                    // NOTE: The base state should only be applied if there's some
	                    // existing document to override, so use a Precondition of
	                    // exists=true
	                    o.push(new je(t.key, e, Dt(e.value.mapValue), $e.exists(!0)));
	                }
	                return n._n.addMutationBatch(t, s, o, e);
	            })))).then((t => (t.applyToLocalDocumentSet(r), {
	                batchId: t.batchId,
	                changes: r
	            })));
	        }(s.localStore, e);
	        s.sharedClientState.addPendingMutation(t.batchId), function(t, e, n) {
	            let s = t.xo[t.currentUser.toKey()];
	            s || (s = new en(j));
	            s = s.insert(e, n), t.xo[t.currentUser.toKey()] = s;
	        }
	        /**
	 * Resolves or rejects the user callback for the given batch and then discards
	 * it.
	 */ (s, t.batchId, n), await ac(s, t.changes), await ho(s.remoteStore);
	    } catch (t) {
	        // If we can't persist the mutation, we reject the user callback and
	        // don't send the mutation. The user can then retry the write.
	        const e = Ro(t, "Failed to persist write");
	        n.reject(e);
	    }
	}

	/**
	 * Applies one remote event to the sync engine, notifying any views of the
	 * changes, and releasing any pending mutation batches that would become
	 * visible because of the snapshot version the remote event contains.
	 */ async function Jo(t, e) {
	    const n = U(t);
	    try {
	        const t = await nr(n.localStore, e);
	        // Update `receivedDocument` as appropriate for any limbo targets.
	                e.targetChanges.forEach(((t, e) => {
	            const s = n.Co.get(e);
	            s && (
	            // Since this is a limbo resolution lookup, it's for a single document
	            // and it could be added, modified, or removed, but not a combination.
	            B(t.addedDocuments.size + t.modifiedDocuments.size + t.removedDocuments.size <= 1), 
	            t.addedDocuments.size > 0 ? s.Po = !0 : t.modifiedDocuments.size > 0 ? B(s.Po) : t.removedDocuments.size > 0 && (B(s.Po), 
	            s.Po = !1));
	        })), await ac(n, t, e);
	    } catch (t) {
	        await bi(t);
	    }
	}

	/**
	 * Applies an OnlineState change to the sync engine and notifies any views of
	 * the change.
	 */ function Yo(t, e, n) {
	    const s = U(t);
	    // If we are the secondary client, we explicitly ignore the remote store's
	    // online state (the local client may go offline, even though the primary
	    // tab remains online) and only apply the primary tab's online state from
	    // SharedClientState.
	        if (s.isPrimaryClient && 0 /* RemoteStore */ === n || !s.isPrimaryClient && 1 /* SharedClientState */ === n) {
	        const t = [];
	        s.vo.forEach(((n, s) => {
	            const i = s.view.zr(e);
	            i.snapshot && t.push(i.snapshot);
	        })), function(t, e) {
	            const n = U(t);
	            n.onlineState = e;
	            let s = !1;
	            n.queries.forEach(((t, n) => {
	                for (const t of n.listeners) 
	                // Run global snapshot listeners if a consistent snapshot has been emitted.
	                t.zr(e) && (s = !0);
	            })), s && ko(n);
	        }(s.eventManager, e), t.length && s.bo._r(t), s.onlineState = e, s.isPrimaryClient && s.sharedClientState.setOnlineState(e);
	    }
	}

	/**
	 * Rejects the listen for the given targetID. This can be triggered by the
	 * backend for any active target.
	 *
	 * @param syncEngine - The sync engine implementation.
	 * @param targetId - The targetID corresponds to one previously initiated by the
	 * user as part of TargetData passed to listen() on RemoteStore.
	 * @param err - A description of the condition that has forced the rejection.
	 * Nearly always this will be an indication that the user is no longer
	 * authorized to see the data matching the target.
	 */ async function Xo(t, e, n) {
	    const s = U(t);
	    // PORTING NOTE: Multi-tab only.
	        s.sharedClientState.updateQueryState(e, "rejected", n);
	    const i = s.Co.get(e), r = i && i.key;
	    if (r) {
	        // TODO(klimt): We really only should do the following on permission
	        // denied errors, but we don't have the cause code here.
	        // It's a limbo doc. Create a synthetic event saying it was deleted.
	        // This is kind of a hack. Ideally, we would have a method in the local
	        // store to purge a document. However, it would be tricky to keep all of
	        // the local store's invariants with another method.
	        let t = new en(wt.comparator);
	        t = t.insert(r, Ct.newNoDocument(r, z$1.min()));
	        const n = wn().add(r), i = new gn(z$1.min(), 
	        /* targetChanges= */ new Map, 
	        /* targetMismatches= */ new rn(j), t, n);
	        await Jo(s, i), 
	        // Since this query failed, we won't want to manually unlisten to it.
	        // We only remove it from bookkeeping after we successfully applied the
	        // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
	        // this query when the RemoteStore restarts the Watch stream, which should
	        // re-trigger the target failure.
	        s.Do = s.Do.remove(r), s.Co.delete(e), uc(s);
	    } else await or(s.localStore, e, 
	    /* keepPersistedTargetData */ !1).then((() => ic(s, e, n))).catch(bi);
	}

	async function Zo(t, e) {
	    const n = U(t), s = e.batch.batchId;
	    try {
	        const t = await tr(n.localStore, e);
	        // The local store may or may not be able to apply the write result and
	        // raise events immediately (depending on whether the watcher is caught
	        // up), so we raise user callbacks first so that they consistently happen
	        // before listen events.
	                sc(n, s, /*error=*/ null), nc(n, s), n.sharedClientState.updateMutationState(s, "acknowledged"), 
	        await ac(n, t);
	    } catch (t) {
	        await bi(t);
	    }
	}

	async function tc(t, e, n) {
	    const s = U(t);
	    try {
	        const t = await function(t, e) {
	            const n = U(t);
	            return n.persistence.runTransaction("Reject batch", "readwrite-primary", (t => {
	                let s;
	                return n._n.lookupMutationBatch(t, e).next((e => (B(null !== e), s = e.keys(), n._n.removeMutationBatch(t, e)))).next((() => n._n.performConsistencyCheck(t))).next((() => n.Mn.pn(t, s)));
	            }));
	        }
	        /**
	 * Returns the largest (latest) batch id in mutation queue that is pending
	 * server response.
	 *
	 * Returns `BATCHID_UNKNOWN` if the queue is empty.
	 */ (s.localStore, e);
	        // The local store may or may not be able to apply the write result and
	        // raise events immediately (depending on whether the watcher is caught up),
	        // so we raise user callbacks first so that they consistently happen before
	        // listen events.
	                sc(s, e, n), nc(s, e), s.sharedClientState.updateMutationState(e, "rejected", n), 
	        await ac(s, t);
	    } catch (n) {
	        await bi(n);
	    }
	}

	/**
	 * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,
	 * if there are any.
	 */ function nc(t, e) {
	    (t.ko.get(e) || []).forEach((t => {
	        t.resolve();
	    })), t.ko.delete(e);
	}

	/** Reject all outstanding callbacks waiting for pending writes to complete. */ function sc(t, e, n) {
	    const s = U(t);
	    let i = s.xo[s.currentUser.toKey()];
	    // NOTE: Mutations restored from persistence won't have callbacks, so it's
	    // okay for there to be no callback for this ID.
	        if (i) {
	        const t = i.get(e);
	        t && (n ? t.reject(n) : t.resolve(), i = i.remove(e)), s.xo[s.currentUser.toKey()] = i;
	    }
	}

	function ic(t, e, n = null) {
	    t.sharedClientState.removeLocalQueryTarget(e);
	    for (const s of t.Vo.get(e)) t.vo.delete(s), n && t.bo.Mo(s, n);
	    if (t.Vo.delete(e), t.isPrimaryClient) {
	        t.No.Zn(e).forEach((e => {
	            t.No.containsKey(e) || 
	            // We removed the last reference for this key
	            rc(t, e);
	        }));
	    }
	}

	function rc(t, e) {
	    t.So.delete(e.path.canonicalString());
	    // It's possible that the target already got removed because the query failed. In that case,
	    // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.
	    const n = t.Do.get(e);
	    null !== n && (Xr(t.remoteStore, n), t.Do = t.Do.remove(e), t.Co.delete(n), uc(t));
	}

	function oc(t, e, n) {
	    for (const s of n) if (s instanceof Bo) t.No.addReference(s.key, e), cc(t, s); else if (s instanceof Uo) {
	        $("SyncEngine", "Document no longer in limbo: " + s.key), t.No.removeReference(s.key, e);
	        t.No.containsKey(s.key) || 
	        // We removed the last reference for this key
	        rc(t, s.key);
	    } else L();
	}

	function cc(t, e) {
	    const n = e.key, s = n.path.canonicalString();
	    t.Do.get(n) || t.So.has(s) || ($("SyncEngine", "New document in limbo: " + n), t.So.add(s), 
	    uc(t));
	}

	/**
	 * Starts listens for documents in limbo that are enqueued for resolution,
	 * subject to a maximum number of concurrent resolutions.
	 *
	 * Without bounding the number of concurrent resolutions, the server can fail
	 * with "resource exhausted" errors which can lead to pathological client
	 * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.
	 */ function uc(t) {
	    for (;t.So.size > 0 && t.Do.size < t.maxConcurrentLimboResolutions; ) {
	        const e = t.So.values().next().value;
	        t.So.delete(e);
	        const n = new wt(Z.fromString(e)), s = t.$o.next();
	        t.Co.set(s, new jo(n)), t.Do = t.Do.insert(n, s), Yr(t.remoteStore, new Gs(ae(ne(n.path)), s, 2 /* LimboResolution */ , S.o));
	    }
	}

	async function ac(t, e, n) {
	    const s = U(t), i = [], r = [], o = [];
	    s.vo.isEmpty() || (s.vo.forEach(((t, c) => {
	        o.push(s.Fo(c, e, n).then((t => {
	            if (t) {
	                s.isPrimaryClient && s.sharedClientState.updateQueryState(c.targetId, t.fromCache ? "not-current" : "current"), 
	                i.push(t);
	                const e = Hi.vn(c.targetId, t);
	                r.push(e);
	            }
	        })));
	    })), await Promise.all(o), s.bo._r(i), await async function(t, e) {
	        const n = U(t);
	        try {
	            await n.persistence.runTransaction("notifyLocalViewChanges", "readwrite", (t => xs.forEach(e, (e => xs.forEach(e.Pn, (s => n.persistence.referenceDelegate.addReference(t, e.targetId, s))).next((() => xs.forEach(e.bn, (s => n.persistence.referenceDelegate.removeReference(t, e.targetId, s)))))))));
	        } catch (t) {
	            if (!Ms(t)) throw t;
	            // If `notifyLocalViewChanges` fails, we did not advance the sequence
	            // number for the documents that were included in this transaction.
	            // This might trigger them to be deleted earlier than they otherwise
	            // would have, but it should not invalidate the integrity of the data.
	            $("LocalStore", "Failed to update sequence numbers: " + t);
	        }
	        for (const t of e) {
	            const e = t.targetId;
	            if (!t.fromCache) {
	                const t = n.kn.get(e), s = t.snapshotVersion, i = t.withLastLimboFreeSnapshotVersion(s);
	                // Advance the last limbo free snapshot version
	                                n.kn = n.kn.insert(e, i);
	            }
	        }
	    }(s.localStore, r));
	}

	async function hc(t, e) {
	    const n = U(t);
	    if (!n.currentUser.isEqual(e)) {
	        $("SyncEngine", "User change. New user:", e.toKey());
	        const t = await Zi(n.localStore, e);
	        n.currentUser = e, 
	        // Fails tasks waiting for pending writes requested by previous user.
	        function(t, e) {
	            t.ko.forEach((t => {
	                t.forEach((t => {
	                    t.reject(new C(D.CANCELLED, e));
	                }));
	            })), t.ko.clear();
	        }(n, "'waitForPendingWrites' promise is rejected due to a user change."), 
	        // TODO(b/114226417): Consider calling this only in the primary tab.
	        n.sharedClientState.handleUserChange(e, t.removedBatchIds, t.addedBatchIds), await ac(n, t.Ln);
	    }
	}

	function lc(t, e) {
	    const n = U(t), s = n.Co.get(e);
	    if (s && s.Po) return wn().add(s.key);
	    {
	        let t = wn();
	        const s = n.Vo.get(e);
	        if (!s) return t;
	        for (const e of s) {
	            const s = n.vo.get(e);
	            t = t.unionWith(s.view.wo);
	        }
	        return t;
	    }
	}

	function Tc(t) {
	    const e = U(t);
	    return e.remoteStore.remoteSyncer.applyRemoteEvent = Jo.bind(null, e), e.remoteStore.remoteSyncer.getRemoteKeysForTarget = lc.bind(null, e), 
	    e.remoteStore.remoteSyncer.rejectListen = Xo.bind(null, e), e.bo._r = No.bind(null, e.eventManager), 
	    e.bo.Mo = xo.bind(null, e.eventManager), e;
	}

	function Ic(t) {
	    const e = U(t);
	    return e.remoteStore.remoteSyncer.applySuccessfulWrite = Zo.bind(null, e), e.remoteStore.remoteSyncer.rejectFailedWrite = tc.bind(null, e), 
	    e;
	}

	class Rc {
	    constructor() {
	        this.synchronizeTabs = !1;
	    }
	    async initialize(t) {
	        this.R = Ur(t.databaseInfo.databaseId), this.sharedClientState = this.Bo(t), this.persistence = this.Uo(t), 
	        await this.persistence.start(), this.gcScheduler = this.qo(t), this.localStore = this.Ko(t);
	    }
	    qo(t) {
	        return null;
	    }
	    Ko(t) {
	        return Xi(this.persistence, new Ji, t.initialUser, this.R);
	    }
	    Uo(t) {
	        return new Er(Ir.Ps, this.R);
	    }
	    Bo(t) {
	        return new xr;
	    }
	    async terminate() {
	        this.gcScheduler && this.gcScheduler.stop(), await this.sharedClientState.shutdown(), 
	        await this.persistence.shutdown();
	    }
	}

	/**
	 * Provides all components needed for Firestore with IndexedDB persistence.
	 */ class Pc extends Rc {
	    constructor(t, e, n) {
	        super(), this.jo = t, this.cacheSizeBytes = e, this.forceOwnership = n, this.synchronizeTabs = !1;
	    }
	    async initialize(t) {
	        await super.initialize(t), await hr(this.localStore), await this.jo.initialize(this, t), 
	        // Enqueue writes from a previous session
	        await Ic(this.jo.syncEngine), await ho(this.jo.remoteStore);
	    }
	    Ko(t) {
	        return Xi(this.persistence, new Ji, t.initialUser, this.R);
	    }
	    qo(t) {
	        const e = this.persistence.referenceDelegate.garbageCollector;
	        return new Si(e, t.asyncQueue);
	    }
	    Uo(t) {
	        const e = Wi(t.databaseInfo.databaseId, t.databaseInfo.persistenceKey), n = void 0 !== this.cacheSizeBytes ? di.withCacheSize(this.cacheSizeBytes) : di.DEFAULT;
	        return new Ki(this.synchronizeTabs, e, t.clientId, n, t.asyncQueue, Lr(), Br(), this.R, this.sharedClientState, !!this.forceOwnership);
	    }
	    Bo(t) {
	        return new xr;
	    }
	}

	/**
	 * Initializes and wires the components that are needed to interface with the
	 * network.
	 */ class vc {
	    async initialize(t, e) {
	        this.localStore || (this.localStore = t.localStore, this.sharedClientState = t.sharedClientState, 
	        this.datastore = this.createDatastore(e), this.remoteStore = this.createRemoteStore(e), 
	        this.eventManager = this.createEventManager(e), this.syncEngine = this.createSyncEngine(e, 
	        /* startAsPrimary=*/ !t.synchronizeTabs), this.sharedClientState.onlineStateHandler = t => Yo(this.syncEngine, t, 1 /* SharedClientState */), 
	        this.remoteStore.remoteSyncer.handleCredentialChange = hc.bind(null, this.syncEngine), 
	        await Eo(this.remoteStore, this.syncEngine.isPrimaryClient));
	    }
	    createEventManager(t) {
	        return new So;
	    }
	    createDatastore(t) {
	        const e = Ur(t.databaseInfo.databaseId), n = (s = t.databaseInfo, new Mr(s));
	        var s;
	        /** Return the Platform-specific connectivity monitor. */        return function(t, e, n) {
	            return new Wr(t, e, n);
	        }(t.credentials, n, e);
	    }
	    createRemoteStore(t) {
	        return e = this.localStore, n = this.datastore, s = t.asyncQueue, i = t => Yo(this.syncEngine, t, 0 /* RemoteStore */), 
	        r = $r.gt() ? new $r : new kr, new zr(e, n, s, i, r);
	        var e, n, s, i, r;
	        /** Re-enables the network. Idempotent. */    }
	    createSyncEngine(t, e) {
	        return function(t, e, n, 
	        // PORTING NOTE: Manages state synchronization in multi-tab environments.
	        s, i, r, o) {
	            const c = new Qo(t, e, n, s, i, r);
	            return o && (c.Oo = !0), c;
	        }(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, t.initialUser, t.maxConcurrentLimboResolutions, e);
	    }
	    terminate() {
	        return async function(t) {
	            const e = U(t);
	            $("RemoteStore", "RemoteStore shutting down."), e.Fr.add(5 /* Shutdown */), await Jr(e), 
	            e.Lr.shutdown(), 
	            // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
	            // triggering spurious listener events with cached data, etc.
	            e.Br.set("Unknown" /* Unknown */);
	        }(this.remoteStore);
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * On web, a `ReadableStream` is wrapped around by a `ByteStreamReader`.
	 */
	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/*
	 * A wrapper implementation of Observer<T> that will dispatch events
	 * asynchronously. To allow immediate silencing, a mute call is added which
	 * causes events scheduled to no longer be raised.
	 */
	class Sc {
	    constructor(t) {
	        this.observer = t, 
	        /**
	         * When set to true, will not raise future events. Necessary to deal with
	         * async detachment of listener.
	         */
	        this.muted = !1;
	    }
	    next(t) {
	        this.observer.next && this.Qo(this.observer.next, t);
	    }
	    error(t) {
	        this.observer.error ? this.Qo(this.observer.error, t) : console.error("Uncaught Error in snapshot listener:", t);
	    }
	    Wo() {
	        this.muted = !0;
	    }
	    Qo(t, e) {
	        this.muted || setTimeout((() => {
	            this.muted || t(e);
	        }), 0);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * FirestoreClient is a top-level class that constructs and owns all of the
	 * pieces of the client SDK architecture. It is responsible for creating the
	 * async queue that is shared by all of the other components in the system.
	 */
	class xc {
	    constructor(t, 
	    /**
	     * Asynchronous queue responsible for all of our internal processing. When
	     * we get incoming work from the user (via public API) or the network
	     * (incoming GRPC messages), we should always schedule onto this queue.
	     * This ensures all of our work is properly serialized (e.g. we don't
	     * start processing a new operation while the previous one is waiting for
	     * an async I/O to complete).
	     */
	    e, n) {
	        this.credentials = t, this.asyncQueue = e, this.databaseInfo = n, this.user = Ar.UNAUTHENTICATED, 
	        this.clientId = K.u(), this.credentialListener = () => Promise.resolve(), this.credentials.setChangeListener(e, (async t => {
	            $("FirestoreClient", "Received user=", t.uid), await this.credentialListener(t), 
	            this.user = t;
	        }));
	    }
	    async getConfiguration() {
	        return {
	            asyncQueue: this.asyncQueue,
	            databaseInfo: this.databaseInfo,
	            clientId: this.clientId,
	            credentials: this.credentials,
	            initialUser: this.user,
	            maxConcurrentLimboResolutions: 100
	        };
	    }
	    setCredentialChangeListener(t) {
	        this.credentialListener = t;
	    }
	    /**
	     * Checks that the client has not been terminated. Ensures that other methods on
	     * this class cannot be called after the client is terminated.
	     */    verifyNotTerminated() {
	        if (this.asyncQueue.isShuttingDown) throw new C(D.FAILED_PRECONDITION, "The client has already been terminated.");
	    }
	    terminate() {
	        this.asyncQueue.enterRestrictedMode();
	        const t = new Ns;
	        return this.asyncQueue.enqueueAndForgetEvenWhileRestricted((async () => {
	            try {
	                this.onlineComponents && await this.onlineComponents.terminate(), this.offlineComponents && await this.offlineComponents.terminate(), 
	                // `removeChangeListener` must be called after shutting down the
	                // RemoteStore as it will prevent the RemoteStore from retrieving
	                // auth tokens.
	                this.credentials.removeChangeListener(), t.resolve();
	            } catch (e) {
	                const n = Ro(e, "Failed to shutdown persistence");
	                t.reject(n);
	            }
	        })), t.promise;
	    }
	}

	async function kc(t, e) {
	    t.asyncQueue.verifyOperationInProgress(), $("FirestoreClient", "Initializing OfflineComponentProvider");
	    const n = await t.getConfiguration();
	    await e.initialize(n);
	    let s = n.initialUser;
	    t.setCredentialChangeListener((async t => {
	        s.isEqual(t) || (await Zi(e.localStore, t), s = t);
	    })), 
	    // When a user calls clearPersistence() in one client, all other clients
	    // need to be terminated to allow the delete to succeed.
	    e.persistence.setDatabaseDeletedListener((() => t.terminate())), t.offlineComponents = e;
	}

	async function $c(t, e) {
	    t.asyncQueue.verifyOperationInProgress();
	    const n = await Oc(t);
	    $("FirestoreClient", "Initializing OnlineComponentProvider");
	    const s = await t.getConfiguration();
	    await e.initialize(n, s), 
	    // The CredentialChangeListener of the online component provider takes
	    // precedence over the offline component provider.
	    t.setCredentialChangeListener((t => async function(t, e) {
	        const n = U(t);
	        n.asyncQueue.verifyOperationInProgress(), $("RemoteStore", "RemoteStore received new credentials");
	        const s = so(n);
	        // Tear down and re-create our network streams. This will ensure we get a
	        // fresh auth token for the new user and re-fill the write pipeline with
	        // new mutations from the LocalStore (since mutations are per-user).
	                n.Fr.add(3 /* CredentialChange */), await Jr(n), s && 
	        // Don't set the network status to Unknown if we are offline.
	        n.Br.set("Unknown" /* Unknown */), await n.remoteSyncer.handleCredentialChange(e), 
	        n.Fr.delete(3 /* CredentialChange */), await Hr(n);
	    }(e.remoteStore, t))), t.onlineComponents = e;
	}

	async function Oc(t) {
	    return t.offlineComponents || ($("FirestoreClient", "Using default OfflineComponentProvider"), 
	    await kc(t, new Rc)), t.offlineComponents;
	}

	async function Fc(t) {
	    return t.onlineComponents || ($("FirestoreClient", "Using default OnlineComponentProvider"), 
	    await $c(t, new vc)), t.onlineComponents;
	}

	function Uc(t) {
	    return Fc(t).then((t => t.syncEngine));
	}

	async function qc(t) {
	    const e = await Fc(t), n = e.eventManager;
	    return n.onListen = Wo.bind(null, e.syncEngine), n.onUnlisten = zo.bind(null, e.syncEngine), 
	    n;
	}

	class Zc {
	    /**
	     * Constructs a DatabaseInfo using the provided host, databaseId and
	     * persistenceKey.
	     *
	     * @param databaseId - The database to use.
	     * @param appId - The Firebase App Id.
	     * @param persistenceKey - A unique identifier for this Firestore's local
	     * storage (used in conjunction with the databaseId).
	     * @param host - The Firestore backend host to connect to.
	     * @param ssl - Whether to use SSL when connecting.
	     * @param forceLongPolling - Whether to use the forceLongPolling option
	     * when using WebChannel as the network transport.
	     * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
	     * option when using WebChannel as the network transport.
	     * @param useFetchStreams Whether to use the Fetch API instead of
	     * XMLHTTPRequest
	     */
	    constructor(t, e, n, s, i, r, o, c) {
	        this.databaseId = t, this.appId = e, this.persistenceKey = n, this.host = s, this.ssl = i, 
	        this.forceLongPolling = r, this.autoDetectLongPolling = o, this.useFetchStreams = c;
	    }
	}

	/** The default database name for a project. */
	/** Represents the database ID a Firestore client is associated with. */
	class tu {
	    constructor(t, e) {
	        this.projectId = t, this.database = e || "(default)";
	    }
	    get isDefaultDatabase() {
	        return "(default)" === this.database;
	    }
	    isEqual(t) {
	        return t instanceof tu && t.projectId === this.projectId && t.database === this.database;
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const eu = new Map;

	/**
	 * An instance map that ensures only one Datastore exists per Firestore
	 * instance.
	 */
	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	class nu {
	    constructor(t, e) {
	        this.user = e, this.type = "OAuth", this.authHeaders = {}, 
	        // Set the headers using Object Literal notation to avoid minification
	        this.authHeaders.Authorization = `Bearer ${t}`;
	    }
	}

	/** A CredentialsProvider that always yields an empty token. */ class su {
	    constructor() {
	        /**
	         * Stores the listener registered with setChangeListener()
	         * This isn't actually necessary since the UID never changes, but we use this
	         * to verify the listen contract is adhered to in tests.
	         */
	        this.changeListener = null;
	    }
	    getToken() {
	        return Promise.resolve(null);
	    }
	    invalidateToken() {}
	    setChangeListener(t, e) {
	        this.changeListener = e, 
	        // Fire with initial user.
	        t.enqueueRetryable((() => e(Ar.UNAUTHENTICATED)));
	    }
	    removeChangeListener() {
	        this.changeListener = null;
	    }
	}

	class ru {
	    constructor(t) {
	        /** Tracks the current User. */
	        this.currentUser = Ar.UNAUTHENTICATED, 
	        /** Promise that allows blocking on the initialization of Firebase Auth. */
	        this.oc = new Ns, 
	        /**
	         * Counter used to detect if the token changed while a getToken request was
	         * outstanding.
	         */
	        this.cc = 0, this.forceRefresh = !1, this.auth = null, this.asyncQueue = null, this.uc = () => {
	            this.cc++, this.currentUser = this.ac(), this.oc.resolve(), this.changeListener && this.asyncQueue.enqueueRetryable((() => this.changeListener(this.currentUser)));
	        };
	        const e = t => {
	            $("FirebaseCredentialsProvider", "Auth detected"), this.auth = t, this.auth.addAuthTokenListener(this.uc);
	        };
	        t.onInit((t => e(t))), 
	        // Our users can initialize Auth right after Firestore, so we give it
	        // a chance to register itself with the component framework before we
	        // determine whether to start up in unauthenticated mode.
	        setTimeout((() => {
	            if (!this.auth) {
	                const n = t.getImmediate({
	                    optional: !0
	                });
	                n ? e(n) : (
	                // If auth is still not available, proceed with `null` user
	                $("FirebaseCredentialsProvider", "Auth not yet detected"), this.oc.resolve());
	            }
	        }), 0);
	    }
	    getToken() {
	        // Take note of the current value of the tokenCounter so that this method
	        // can fail (with an ABORTED error) if there is a token change while the
	        // request is outstanding.
	        const t = this.cc, e = this.forceRefresh;
	        return this.forceRefresh = !1, this.auth ? this.auth.getToken(e).then((e => 
	        // Cancel the request since the token changed while the request was
	        // outstanding so the response is potentially for a previous user (which
	        // user, we can't be sure).
	        this.cc !== t ? ($("FirebaseCredentialsProvider", "getToken aborted due to token change."), 
	        this.getToken()) : e ? (B("string" == typeof e.accessToken), new nu(e.accessToken, this.currentUser)) : null)) : Promise.resolve(null);
	    }
	    invalidateToken() {
	        this.forceRefresh = !0;
	    }
	    setChangeListener(t, e) {
	        this.asyncQueue = t, 
	        // Blocks the AsyncQueue until the next user is available.
	        this.asyncQueue.enqueueRetryable((async () => {
	            await this.oc.promise, await e(this.currentUser), this.changeListener = e;
	        }));
	    }
	    removeChangeListener() {
	        this.auth && this.auth.removeAuthTokenListener(this.uc), this.changeListener = () => Promise.resolve();
	    }
	    // Auth.getUid() can return null even with a user logged in. It is because
	    // getUid() is synchronous, but the auth code populating Uid is asynchronous.
	    // This method should only be called in the AuthTokenListener callback
	    // to guarantee to get the actual user.
	    ac() {
	        const t = this.auth && this.auth.getUid();
	        return B(null === t || "string" == typeof t), new Ar(t);
	    }
	}

	/*
	 * FirstPartyToken provides a fresh token each time its value
	 * is requested, because if the token is too old, requests will be rejected.
	 * Technically this may no longer be necessary since the SDK should gracefully
	 * recover from unauthenticated errors (see b/33147818 for context), but it's
	 * safer to keep the implementation as-is.
	 */ class ou {
	    constructor(t, e, n) {
	        this.hc = t, this.lc = e, this.fc = n, this.type = "FirstParty", this.user = Ar.FIRST_PARTY;
	    }
	    get authHeaders() {
	        const t = {
	            "X-Goog-AuthUser": this.lc
	        }, e = this.hc.auth.getAuthHeaderValueForFirstParty([]);
	        // Use array notation to prevent minification
	                return e && (t.Authorization = e), this.fc && (t["X-Goog-Iam-Authorization-Token"] = this.fc), 
	        t;
	    }
	}

	/*
	 * Provides user credentials required for the Firestore JavaScript SDK
	 * to authenticate the user, using technique that is only available
	 * to applications hosted by Google.
	 */ class cu {
	    constructor(t, e, n) {
	        this.hc = t, this.lc = e, this.fc = n;
	    }
	    getToken() {
	        return Promise.resolve(new ou(this.hc, this.lc, this.fc));
	    }
	    setChangeListener(t, e) {
	        // Fire with initial uid.
	        t.enqueueRetryable((() => e(Ar.FIRST_PARTY)));
	    }
	    removeChangeListener() {}
	    invalidateToken() {}
	}

	/**
	 * Builds a CredentialsProvider depending on the type of
	 * the credentials passed in.
	 */
	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function uu(t, e, n) {
	    if (!n) throw new C(D.INVALID_ARGUMENT, `Function ${t}() cannot be called with an empty ${e}.`);
	}

	/**
	 * Validates that two boolean options are not set at the same time.
	 */
	/**
	 * Validates that `path` refers to a document (indicated by the fact it contains
	 * an even numbers of segments).
	 */
	function au(t) {
	    if (!wt.isDocumentKey(t)) throw new C(D.INVALID_ARGUMENT, `Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`);
	}

	/**
	 * Validates that `path` refers to a collection (indicated by the fact it
	 * contains an odd numbers of segments).
	 */ function hu(t) {
	    if (wt.isDocumentKey(t)) throw new C(D.INVALID_ARGUMENT, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);
	}

	/**
	 * Returns true if it's a non-null object without a custom prototype
	 * (i.e. excludes Array, Date, etc.).
	 */
	/** Returns a string describing the type / value of the provided input. */
	function lu(t) {
	    if (void 0 === t) return "undefined";
	    if (null === t) return "null";
	    if ("string" == typeof t) return t.length > 20 && (t = `${t.substring(0, 20)}...`), 
	    JSON.stringify(t);
	    if ("number" == typeof t || "boolean" == typeof t) return "" + t;
	    if ("object" == typeof t) {
	        if (t instanceof Array) return "an array";
	        {
	            const e = 
	            /** Hacky method to try to get the constructor name for an object. */
	            function(t) {
	                if (t.constructor) {
	                    const e = /function\s+([^\s(]+)\s*\(/.exec(t.constructor.toString());
	                    if (e && e.length > 1) return e[1];
	                }
	                return null;
	            }
	            /**
	 * Casts `obj` to `T`, optionally unwrapping Compat types to expose the
	 * underlying instance. Throws if  `obj` is not an instance of `T`.
	 *
	 * This cast is used in the Lite and Full SDK to verify instance types for
	 * arguments passed to the public API.
	 */ (t);
	            return e ? `a custom ${e} object` : "an object";
	        }
	    }
	    return "function" == typeof t ? "a function" : L();
	}

	function fu(t, 
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	e) {
	    if ("_delegate" in t && (
	    // Unwrap Compat types
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    t = t._delegate), !(t instanceof e)) {
	        if (e.name === t.constructor.name) throw new C(D.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
	        {
	            const n = lu(t);
	            throw new C(D.INVALID_ARGUMENT, `Expected type '${e.name}', but it was: ${n}`);
	        }
	    }
	    return t;
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// settings() defaults:
	/**
	 * A concrete type describing all the values that can be applied via a
	 * user-supplied firestore.Settings object. This is a separate type so that
	 * defaults can be supplied and the value can be checked for equality.
	 */
	class wu {
	    constructor(t) {
	        var e;
	        if (void 0 === t.host) {
	            if (void 0 !== t.ssl) throw new C(D.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
	            this.host = "firestore.googleapis.com", this.ssl = true;
	        } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;
	        if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, 
	        void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040; else {
	            if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new C(D.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
	            this.cacheSizeBytes = t.cacheSizeBytes;
	        }
	        this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, 
	        this.useFetchStreams = !!t.useFetchStreams, function(t, e, n, s) {
	            if (!0 === e && !0 === s) throw new C(D.INVALID_ARGUMENT, `${t} and ${n} cannot be used together.`);
	        }("experimentalForceLongPolling", t.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t.experimentalAutoDetectLongPolling);
	    }
	    isEqual(t) {
	        return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * The Cloud Firestore service interface.
	 *
	 * Do not call this constructor directly. Instead, use {@link getFirestore}.
	 */ class _u {
	    /** @hideconstructor */
	    constructor(t, e) {
	        /**
	         * Whether it's a Firestore or Firestore Lite instance.
	         */
	        this.type = "firestore-lite", this._persistenceKey = "(lite)", this._settings = new wu({}), 
	        this._settingsFrozen = !1, t instanceof tu ? (this._databaseId = t, this._credentials = new su) : (this._app = t, 
	        this._databaseId = function(t) {
	            if (!Object.prototype.hasOwnProperty.apply(t.options, [ "projectId" ])) throw new C(D.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
	            return new tu(t.options.projectId);
	        }
	        /**
	 * Modify this instance to communicate with the Cloud Firestore emulator.
	 *
	 * Note: This must be called before this instance has been used to do any
	 * operations.
	 *
	 * @param firestore - The Firestore instance to configure to connect to the
	 * emulator.
	 * @param host - the emulator host (ex: localhost).
	 * @param port - the emulator port (ex: 9000).
	 * @param options.mockUserToken - the mock auth token to use for unit testing
	 * Security Rules.
	 */ (t), this._credentials = new ru(e));
	    }
	    /**
	     * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service
	     * instance.
	     */    get app() {
	        if (!this._app) throw new C(D.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
	        return this._app;
	    }
	    get _initialized() {
	        return this._settingsFrozen;
	    }
	    get _terminated() {
	        return void 0 !== this._terminateTask;
	    }
	    _setSettings(t) {
	        if (this._settingsFrozen) throw new C(D.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
	        this._settings = new wu(t), void 0 !== t.credentials && (this._credentials = function(t) {
	            if (!t) return new su;
	            switch (t.type) {
	              case "gapi":
	                const e = t.client;
	                // Make sure this really is a Gapi client.
	                                return B(!("object" != typeof e || null === e || !e.auth || !e.auth.getAuthHeaderValueForFirstParty)), 
	                new cu(e, t.sessionIndex || "0", t.iamToken || null);

	              case "provider":
	                return t.client;

	              default:
	                throw new C(D.INVALID_ARGUMENT, "makeCredentialsProvider failed due to invalid credential type");
	            }
	        }(t.credentials));
	    }
	    _getSettings() {
	        return this._settings;
	    }
	    _freezeSettings() {
	        return this._settingsFrozen = !0, this._settings;
	    }
	    _delete() {
	        return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;
	    }
	    /** Returns a JSON-serializable representation of this Firestore instance. */    toJSON() {
	        return {
	            app: this._app,
	            databaseId: this._databaseId,
	            settings: this._settings
	        };
	    }
	    /**
	     * Terminates all components used by this client. Subclasses can override
	     * this method to clean up their own dependencies, but must also call this
	     * method.
	     *
	     * Only ever called once.
	     */    _terminate() {
	        /**
	 * Removes all components associated with the provided instance. Must be called
	 * when the `Firestore` instance is terminated.
	 */
	        return function(t) {
	            const e = eu.get(t);
	            e && ($("ComponentProvider", "Removing Datastore"), eu.delete(t), e.terminate());
	        }(this), Promise.resolve();
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A `DocumentReference` refers to a document location in a Firestore database
	 * and can be used to write, read, or listen to the location. The document at
	 * the referenced location may or may not exist.
	 */ class gu {
	    /** @hideconstructor */
	    constructor(t, 
	    /**
	     * If provided, the `FirestoreDataConverter` associated with this instance.
	     */
	    e, n) {
	        this.converter = e, this._key = n, 
	        /** The type of this Firestore reference. */
	        this.type = "document", this.firestore = t;
	    }
	    get _path() {
	        return this._key.path;
	    }
	    /**
	     * The document's identifier within its collection.
	     */    get id() {
	        return this._key.path.lastSegment();
	    }
	    /**
	     * A string representing the path of the referenced document (relative
	     * to the root of the database).
	     */    get path() {
	        return this._key.path.canonicalString();
	    }
	    /**
	     * The collection this `DocumentReference` belongs to.
	     */    get parent() {
	        return new pu(this.firestore, this.converter, this._key.path.popLast());
	    }
	    withConverter(t) {
	        return new gu(this.firestore, t, this._key);
	    }
	}

	/**
	 * A `Query` refers to a Query which you can read or listen to. You can also
	 * construct refined `Query` objects by adding filters and ordering.
	 */ class yu {
	    // This is the lite version of the Query class in the main SDK.
	    /** @hideconstructor protected */
	    constructor(t, 
	    /**
	     * If provided, the `FirestoreDataConverter` associated with this instance.
	     */
	    e, n) {
	        this.converter = e, this._query = n, 
	        /** The type of this Firestore reference. */
	        this.type = "query", this.firestore = t;
	    }
	    withConverter(t) {
	        return new yu(this.firestore, t, this._query);
	    }
	}

	/**
	 * A `CollectionReference` object can be used for adding documents, getting
	 * document references, and querying for documents (using {@link query}).
	 */ class pu extends yu {
	    /** @hideconstructor */
	    constructor(t, e, n) {
	        super(t, e, ne(n)), this._path = n, 
	        /** The type of this Firestore reference. */
	        this.type = "collection";
	    }
	    /** The collection's identifier. */    get id() {
	        return this._query.path.lastSegment();
	    }
	    /**
	     * A string representing the path of the referenced collection (relative
	     * to the root of the database).
	     */    get path() {
	        return this._query.path.canonicalString();
	    }
	    /**
	     * A reference to the containing `DocumentReference` if this is a
	     * subcollection. If this isn't a subcollection, the reference is null.
	     */    get parent() {
	        const t = this._path.popLast();
	        return t.isEmpty() ? null : new gu(this.firestore, 
	        /* converter= */ null, new wt(t));
	    }
	    withConverter(t) {
	        return new pu(this.firestore, t, this._path);
	    }
	}

	function Eu(t, e, ...n) {
	    if (t = getModularInstance(t), uu("collection", "path", e), t instanceof _u) {
	        const s = Z.fromString(e, ...n);
	        return hu(s), new pu(t, /* converter= */ null, s);
	    }
	    {
	        if (!(t instanceof gu || t instanceof pu)) throw new C(D.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
	        const s = Z.fromString(t.path, ...n).child(Z.fromString(e));
	        return hu(s), new pu(t.firestore, 
	        /* converter= */ null, s);
	    }
	}

	function Iu(t, e, ...n) {
	    if (t = getModularInstance(t), 
	    // We allow omission of 'pathString' but explicitly prohibit passing in both
	    // 'undefined' and 'null'.
	    1 === arguments.length && (e = K.u()), uu("doc", "path", e), t instanceof _u) {
	        const s = Z.fromString(e, ...n);
	        return au(s), new gu(t, 
	        /* converter= */ null, new wt(s));
	    }
	    {
	        if (!(t instanceof gu || t instanceof pu)) throw new C(D.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
	        const s = t._path.child(Z.fromString(e, ...n));
	        return au(s), new gu(t.firestore, t instanceof pu ? t.converter : null, new wt(s));
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class Pu {
	    constructor() {
	        // The last promise in the queue.
	        this.dc = Promise.resolve(), 
	        // A list of retryable operations. Retryable operations are run in order and
	        // retried with backoff.
	        this.wc = [], 
	        // Is this AsyncQueue being shut down? Once it is set to true, it will not
	        // be changed again.
	        this._c = !1, 
	        // Operations scheduled to be queued in the future. Operations are
	        // automatically removed after they are run or canceled.
	        this.mc = [], 
	        // visible for testing
	        this.gc = null, 
	        // Flag set while there's an outstanding AsyncQueue operation, used for
	        // assertion sanity-checks.
	        this.yc = !1, 
	        // Enabled during shutdown on Safari to prevent future access to IndexedDB.
	        this.Ec = !1, 
	        // List of TimerIds to fast-forward delays for.
	        this.Tc = [], 
	        // Backoff timer used to schedule retries for retryable operations
	        this.Zi = new qr(this, "async_queue_retry" /* AsyncQueueRetry */), 
	        // Visibility handler that triggers an immediate retry of all retryable
	        // operations. Meant to speed up recovery when we regain file system access
	        // after page comes into foreground.
	        this.Ic = () => {
	            const t = Br();
	            t && $("AsyncQueue", "Visibility state changed to " + t.visibilityState), this.Zi.Gi();
	        };
	        const t = Br();
	        t && "function" == typeof t.addEventListener && t.addEventListener("visibilitychange", this.Ic);
	    }
	    get isShuttingDown() {
	        return this._c;
	    }
	    /**
	     * Adds a new operation to the queue without waiting for it to complete (i.e.
	     * we ignore the Promise result).
	     */    enqueueAndForget(t) {
	        // eslint-disable-next-line @typescript-eslint/no-floating-promises
	        this.enqueue(t);
	    }
	    enqueueAndForgetEvenWhileRestricted(t) {
	        this.Ac(), 
	        // eslint-disable-next-line @typescript-eslint/no-floating-promises
	        this.Rc(t);
	    }
	    enterRestrictedMode(t) {
	        if (!this._c) {
	            this._c = !0, this.Ec = t || !1;
	            const e = Br();
	            e && "function" == typeof e.removeEventListener && e.removeEventListener("visibilitychange", this.Ic);
	        }
	    }
	    enqueue(t) {
	        if (this.Ac(), this._c) 
	        // Return a Promise which never resolves.
	        return new Promise((() => {}));
	        // Create a deferred Promise that we can return to the callee. This
	        // allows us to return a "hanging Promise" only to the callee and still
	        // advance the queue even when the operation is not run.
	                const e = new Ns;
	        return this.Rc((() => this._c && this.Ec ? Promise.resolve() : (t().then(e.resolve, e.reject), 
	        e.promise))).then((() => e.promise));
	    }
	    enqueueRetryable(t) {
	        this.enqueueAndForget((() => (this.wc.push(t), this.Pc())));
	    }
	    /**
	     * Runs the next operation from the retryable queue. If the operation fails,
	     * reschedules with backoff.
	     */    async Pc() {
	        if (0 !== this.wc.length) {
	            try {
	                await this.wc[0](), this.wc.shift(), this.Zi.reset();
	            } catch (t) {
	                if (!Ms(t)) throw t;
	 // Failure will be handled by AsyncQueue
	                                $("AsyncQueue", "Operation failed with retryable error: " + t);
	            }
	            this.wc.length > 0 && 
	            // If there are additional operations, we re-schedule `retryNextOp()`.
	            // This is necessary to run retryable operations that failed during
	            // their initial attempt since we don't know whether they are already
	            // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
	            // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
	            // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
	            // call scheduled here.
	            // Since `backoffAndRun()` cancels an existing backoff and schedules a
	            // new backoff on every call, there is only ever a single additional
	            // operation in the queue.
	            this.Zi.Qi((() => this.Pc()));
	        }
	    }
	    Rc(t) {
	        const e = this.dc.then((() => (this.yc = !0, t().catch((t => {
	            this.gc = t, this.yc = !1;
	            // Re-throw the error so that this.tail becomes a rejected Promise and
	            // all further attempts to chain (via .then) will just short-circuit
	            // and return the rejected Promise.
	            throw O("INTERNAL UNHANDLED ERROR: ", 
	            /**
	 * Chrome includes Error.message in Error.stack. Other browsers do not.
	 * This returns expected output of message + stack when available.
	 * @param error - Error or FirestoreError
	 */
	            function(t) {
	                let e = t.message || "";
	                t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + "\n" + t.stack);
	                return e;
	            }
	            /**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ (t)), t;
	        })).then((t => (this.yc = !1, t))))));
	        return this.dc = e, e;
	    }
	    enqueueAfterDelay(t, e, n) {
	        this.Ac(), 
	        // Fast-forward delays for timerIds that have been overriden.
	        this.Tc.indexOf(t) > -1 && (e = 0);
	        const s = Ao.createAndSchedule(this, t, e, n, (t => this.bc(t)));
	        return this.mc.push(s), s;
	    }
	    Ac() {
	        this.gc && L();
	    }
	    verifyOperationInProgress() {}
	    /**
	     * Waits until all currently queued tasks are finished executing. Delayed
	     * operations are not run.
	     */    async vc() {
	        // Operations in the queue prior to draining may have enqueued additional
	        // operations. Keep draining the queue until the tail is no longer advanced,
	        // which indicates that no more new operations were enqueued and that all
	        // operations were executed.
	        let t;
	        do {
	            t = this.dc, await t;
	        } while (t !== this.dc);
	    }
	    /**
	     * For Tests: Determine if a delayed operation with a particular TimerId
	     * exists.
	     */    Vc(t) {
	        for (const e of this.mc) if (e.timerId === t) return !0;
	        return !1;
	    }
	    /**
	     * For Tests: Runs some or all delayed operations early.
	     *
	     * @param lastTimerId - Delayed operations up to and including this TimerId
	     * will be drained. Pass TimerId.All to run all delayed operations.
	     * @returns a Promise that resolves once all operations have been run.
	     */    Sc(t) {
	        // Note that draining may generate more delayed ops, so we do that first.
	        return this.vc().then((() => {
	            // Run ops in the same order they'd run if they ran naturally.
	            this.mc.sort(((t, e) => t.targetTimeMs - e.targetTimeMs));
	            for (const e of this.mc) if (e.skipDelay(), "all" /* All */ !== t && e.timerId === t) break;
	            return this.vc();
	        }));
	    }
	    /**
	     * For Tests: Skip all subsequent delays for a timer id.
	     */    Dc(t) {
	        this.Tc.push(t);
	    }
	    /** Called once a DelayedOperation is run or canceled. */    bc(t) {
	        // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
	        const e = this.mc.indexOf(t);
	        this.mc.splice(e, 1);
	    }
	}

	function bu(t) {
	    /**
	 * Returns true if obj is an object and contains at least one of the specified
	 * methods.
	 */
	    return function(t, e) {
	        if ("object" != typeof t || null === t) return !1;
	        const n = t;
	        for (const t of e) if (t in n && "function" == typeof n[t]) return !0;
	        return !1;
	    }
	    /**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	    /**
	 * Represents the task of loading a Firestore bundle. It provides progress of bundle
	 * loading, as well as task completion and error events.
	 *
	 * The API is compatible with `Promise<LoadBundleTaskProgress>`.
	 */ (t, [ "next", "error", "complete" ]);
	}

	/**
	 * The Cloud Firestore service interface.
	 *
	 * Do not call this constructor directly. Instead, use {@link getFirestore}.
	 */
	class Su extends _u {
	    /** @hideconstructor */
	    constructor(t, e) {
	        super(t, e), 
	        /**
	         * Whether it's a Firestore or Firestore Lite instance.
	         */
	        this.type = "firestore", this._queue = new Pu, this._persistenceKey = "name" in t ? t.name : "[DEFAULT]";
	    }
	    _terminate() {
	        return this._firestoreClient || 
	        // The client must be initialized to ensure that all subsequent API
	        // usage throws an exception.
	        xu(this), this._firestoreClient.terminate();
	    }
	}

	/**
	 * Returns the existing instance of Firestore that is associated with the
	 * provided {@link @firebase/app#FirebaseApp}. If no instance exists, initializes a new
	 * instance with default settings.
	 *
	 * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Firestore
	 * instance is associated with.
	 * @returns The `Firestore` instance of the provided app.
	 */ function Cu(n = getApp()) {
	    return _getProvider(n, "firestore-exp").getImmediate();
	}

	/**
	 * @internal
	 */ function Nu(t) {
	    return t._firestoreClient || xu(t), t._firestoreClient.verifyNotTerminated(), t._firestoreClient;
	}

	function xu(t) {
	    var e;
	    const n = t._freezeSettings(), s = function(t, e, n, s) {
	        return new Zc(t, e, n, s.host, s.ssl, s.experimentalForceLongPolling, s.experimentalAutoDetectLongPolling, s.useFetchStreams);
	    }(t._databaseId, (null === (e = t._app) || void 0 === e ? void 0 : e.options.appId) || "", t._persistenceKey, n);
	    t._firestoreClient = new xc(t._credentials, t._queue, s);
	}

	/**
	 * Attempts to enable persistent storage, if possible.
	 *
	 * Must be called before any other functions (other than
	 * {@link initializeFirestore}, {@link getFirestore} or
	 * {@link clearIndexedDbPersistence}.
	 *
	 * If this fails, `enableIndexedDbPersistence()` will reject the promise it
	 * returns. Note that even after this failure, the `Firestore` instance will
	 * remain usable, however offline persistence will be disabled.
	 *
	 * There are several reasons why this can fail, which can be identified by
	 * the `code` on the error.
	 *
	 *   * failed-precondition: The app is already open in another browser tab.
	 *   * unimplemented: The browser is incompatible with the offline
	 *     persistence implementation.
	 *
	 * @param firestore - The `Firestore` instance to enable persistence for.
	 * @param persistenceSettings - Optional settings object to configure
	 * persistence.
	 * @returns A promise that represents successfully enabling persistent storage.
	 */ function ku(t, e) {
	    ju(t = fu(t, Su));
	    const n = Nu(t), s = t._freezeSettings(), i = new vc;
	    return Ou(n, i, new Pc(i, s.cacheSizeBytes, null == e ? void 0 : e.forceOwnership));
	}

	/**
	 * Registers both the `OfflineComponentProvider` and `OnlineComponentProvider`.
	 * If the operation fails with a recoverable error (see
	 * `canRecoverFromIndexedDbError()` below), the returned Promise is rejected
	 * but the client remains usable.
	 */ function Ou(t, e, n) {
	    const s = new Ns;
	    return t.asyncQueue.enqueue((async () => {
	        try {
	            await kc(t, n), await $c(t, e), s.resolve();
	        } catch (t) {
	            if (!
	            /**
	 * Decides whether the provided error allows us to gracefully disable
	 * persistence (as opposed to crashing the client).
	 */
	            function(t) {
	                if ("FirebaseError" === t.name) return t.code === D.FAILED_PRECONDITION || t.code === D.UNIMPLEMENTED;
	                if ("undefined" != typeof DOMException && t instanceof DOMException) 
	                // There are a few known circumstances where we can open IndexedDb but
	                // trying to read/write will fail (e.g. quota exceeded). For
	                // well-understood cases, we attempt to detect these and then gracefully
	                // fall back to memory persistence.
	                // NOTE: Rather than continue to add to this list, we could decide to
	                // always fall back, with the risk that we might accidentally hide errors
	                // representing actual SDK bugs.
	                // When the browser is out of quota we could get either quota exceeded
	                // or an aborted error depending on whether the error happened during
	                // schema migration.
	                return 22 === t.code || 20 === t.code || 
	                // Firefox Private Browsing mode disables IndexedDb and returns
	                // INVALID_STATE for any usage.
	                11 === t.code;
	                return !0;
	            }
	            /**
	 * Clears the persistent storage. This includes pending writes and cached
	 * documents.
	 *
	 * Must be called while the `Firestore` instance is not started (after the app is
	 * terminated or when the app is first initialized). On startup, this function
	 * must be called before other functions (other than {@link
	 * initializeFirestore} or {@link getFirestore})). If the `Firestore`
	 * instance is still running, the promise will be rejected with the error code
	 * of `failed-precondition`.
	 *
	 * Note: `clearIndexedDbPersistence()` is primarily intended to help write
	 * reliable tests that use Cloud Firestore. It uses an efficient mechanism for
	 * dropping existing data but does not attempt to securely overwrite or
	 * otherwise make cached data unrecoverable. For applications that are sensitive
	 * to the disclosure of cached data in between user sessions, we strongly
	 * recommend not enabling persistence at all.
	 *
	 * @param firestore - The `Firestore` instance to clear persistence for.
	 * @returns A promise that is resolved when the persistent storage is
	 * cleared. Otherwise, the promise is rejected with an error.
	 */ (t)) throw t;
	            console.warn("Error enabling offline persistence. Falling back to persistence disabled: " + t), 
	            s.reject(t);
	        }
	    })).then((() => s.promise));
	}

	function ju(t) {
	    if (t._initialized || t._terminated) throw new C(D.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.");
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A `FieldPath` refers to a field in a document. The path may consist of a
	 * single field name (referring to a top-level field in the document), or a
	 * list of field names (referring to a nested field in the document).
	 *
	 * Create a `FieldPath` by providing field names. If more than one field
	 * name is provided, the path will point to a nested field in a document.
	 */
	class Qu {
	    /**
	     * Creates a FieldPath from the provided field names. If more than one field
	     * name is provided, the path will point to a nested field in a document.
	     *
	     * @param fieldNames - A list of field names.
	     */
	    constructor(...t) {
	        for (let e = 0; e < t.length; ++e) if (0 === t[e].length) throw new C(D.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
	        this._internalPath = new et(t);
	    }
	    /**
	     * Returns true if this `FieldPath` is equal to the provided one.
	     *
	     * @param other - The `FieldPath` to compare against.
	     * @returns true if this `FieldPath` is equal to the provided one.
	     */    isEqual(t) {
	        return this._internalPath.isEqual(t._internalPath);
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An immutable object representing an array of bytes.
	 */ class Gu {
	    /** @hideconstructor */
	    constructor(t) {
	        this._byteString = t;
	    }
	    /**
	     * Creates a new `Bytes` object from the given Base64 string, converting it to
	     * bytes.
	     *
	     * @param base64 - The Base64 string used to create the `Bytes` object.
	     */    static fromBase64String(t) {
	        try {
	            return new Gu(st.fromBase64String(t));
	        } catch (t) {
	            throw new C(D.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + t);
	        }
	    }
	    /**
	     * Creates a new `Bytes` object from the given Uint8Array.
	     *
	     * @param array - The Uint8Array used to create the `Bytes` object.
	     */    static fromUint8Array(t) {
	        return new Gu(st.fromUint8Array(t));
	    }
	    /**
	     * Returns the underlying bytes as a Base64-encoded string.
	     *
	     * @returns The Base64-encoded string created from the `Bytes` object.
	     */    toBase64() {
	        return this._byteString.toBase64();
	    }
	    /**
	     * Returns the underlying bytes in a new `Uint8Array`.
	     *
	     * @returns The Uint8Array created from the `Bytes` object.
	     */    toUint8Array() {
	        return this._byteString.toUint8Array();
	    }
	    /**
	     * Returns a string representation of the `Bytes` object.
	     *
	     * @returns A string representation of the `Bytes` object.
	     */    toString() {
	        return "Bytes(base64: " + this.toBase64() + ")";
	    }
	    /**
	     * Returns true if this `Bytes` object is equal to the provided one.
	     *
	     * @param other - The `Bytes` object to compare against.
	     * @returns true if this `Bytes` object is equal to the provided one.
	     */    isEqual(t) {
	        return this._byteString.isEqual(t._byteString);
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Sentinel values that can be used when writing document fields with `set()`
	 * or `update()`.
	 */ class zu {
	    /**
	     * @param _methodName - The public API endpoint that returns this class.
	     * @hideconstructor
	     */
	    constructor(t) {
	        this._methodName = t;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An immutable object representing a geographic location in Firestore. The
	 * location is represented as latitude/longitude pair.
	 *
	 * Latitude values are in the range of [-90, 90].
	 * Longitude values are in the range of [-180, 180].
	 */ class Hu {
	    /**
	     * Creates a new immutable `GeoPoint` object with the provided latitude and
	     * longitude values.
	     * @param latitude - The latitude as number between -90 and 90.
	     * @param longitude - The longitude as number between -180 and 180.
	     */
	    constructor(t, e) {
	        if (!isFinite(t) || t < -90 || t > 90) throw new C(D.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + t);
	        if (!isFinite(e) || e < -180 || e > 180) throw new C(D.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + e);
	        this._lat = t, this._long = e;
	    }
	    /**
	     * The latitude of this `GeoPoint` instance.
	     */    get latitude() {
	        return this._lat;
	    }
	    /**
	     * The longitude of this `GeoPoint` instance.
	     */    get longitude() {
	        return this._long;
	    }
	    /**
	     * Returns true if this `GeoPoint` is equal to the provided one.
	     *
	     * @param other - The `GeoPoint` to compare against.
	     * @returns true if this `GeoPoint` is equal to the provided one.
	     */    isEqual(t) {
	        return this._lat === t._lat && this._long === t._long;
	    }
	    /** Returns a JSON-serializable representation of this GeoPoint. */    toJSON() {
	        return {
	            latitude: this._lat,
	            longitude: this._long
	        };
	    }
	    /**
	     * Actually private to JS consumers of our API, so this function is prefixed
	     * with an underscore.
	     */    _compareTo(t) {
	        return j(this._lat, t._lat) || j(this._long, t._long);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const Ju = /^__.*__$/;

	/** The result of parsing document data (e.g. for a setData call). */ class Yu {
	    constructor(t, e, n) {
	        this.data = t, this.fieldMask = e, this.fieldTransforms = n;
	    }
	    toMutation(t, e) {
	        return null !== this.fieldMask ? new je(t, this.data, this.fieldMask, e, this.fieldTransforms) : new Ke(t, this.data, e, this.fieldTransforms);
	    }
	}

	/** The result of parsing "update" data (i.e. for an updateData call). */ class Xu {
	    constructor(t, 
	    // The fieldMask does not include document transforms.
	    e, n) {
	        this.data = t, this.fieldMask = e, this.fieldTransforms = n;
	    }
	    toMutation(t, e) {
	        return new je(t, this.data, this.fieldMask, e, this.fieldTransforms);
	    }
	}

	function Zu(t) {
	    switch (t) {
	      case 0 /* Set */ :
	 // fall through
	              case 2 /* MergeSet */ :
	 // fall through
	              case 1 /* Update */ :
	        return !0;

	      case 3 /* Argument */ :
	      case 4 /* ArrayArgument */ :
	        return !1;

	      default:
	        throw L();
	    }
	}

	/** A "context" object passed around while parsing user data. */ class ta {
	    /**
	     * Initializes a ParseContext with the given source and path.
	     *
	     * @param settings - The settings for the parser.
	     * @param databaseId - The database ID of the Firestore instance.
	     * @param serializer - The serializer to use to generate the Value proto.
	     * @param ignoreUndefinedProperties - Whether to ignore undefined properties
	     * rather than throw.
	     * @param fieldTransforms - A mutable list of field transforms encountered
	     * while parsing the data.
	     * @param fieldMask - A mutable list of field paths encountered while parsing
	     * the data.
	     *
	     * TODO(b/34871131): We don't support array paths right now, so path can be
	     * null to indicate the context represents any location within an array (in
	     * which case certain features will not work and errors will be somewhat
	     * compromised).
	     */
	    constructor(t, e, n, s, i, r) {
	        this.settings = t, this.databaseId = e, this.R = n, this.ignoreUndefinedProperties = s, 
	        // Minor hack: If fieldTransforms is undefined, we assume this is an
	        // external call and we need to validate the entire path.
	        void 0 === i && this.Cc(), this.fieldTransforms = i || [], this.fieldMask = r || [];
	    }
	    get path() {
	        return this.settings.path;
	    }
	    get Nc() {
	        return this.settings.Nc;
	    }
	    /** Returns a new context with the specified settings overwritten. */    xc(t) {
	        return new ta(Object.assign(Object.assign({}, this.settings), t), this.databaseId, this.R, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
	    }
	    kc(t) {
	        var e;
	        const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), s = this.xc({
	            path: n,
	            $c: !1
	        });
	        return s.Oc(t), s;
	    }
	    Fc(t) {
	        var e;
	        const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), s = this.xc({
	            path: n,
	            $c: !1
	        });
	        return s.Cc(), s;
	    }
	    Mc(t) {
	        // TODO(b/34871131): We don't support array paths right now; so make path
	        // undefined.
	        return this.xc({
	            path: void 0,
	            $c: !0
	        });
	    }
	    Lc(t) {
	        return Ea(t, this.settings.methodName, this.settings.Bc || !1, this.path, this.settings.Uc);
	    }
	    /** Returns 'true' if 'fieldPath' was traversed when creating this context. */    contains(t) {
	        return void 0 !== this.fieldMask.find((e => t.isPrefixOf(e))) || void 0 !== this.fieldTransforms.find((e => t.isPrefixOf(e.field)));
	    }
	    Cc() {
	        // TODO(b/34871131): Remove null check once we have proper paths for fields
	        // within arrays.
	        if (this.path) for (let t = 0; t < this.path.length; t++) this.Oc(this.path.get(t));
	    }
	    Oc(t) {
	        if (0 === t.length) throw this.Lc("Document fields must not be empty");
	        if (Zu(this.Nc) && Ju.test(t)) throw this.Lc('Document fields cannot begin and end with "__"');
	    }
	}

	/**
	 * Helper for parsing raw user input (provided via the API) into internal model
	 * classes.
	 */ class ea {
	    constructor(t, e, n) {
	        this.databaseId = t, this.ignoreUndefinedProperties = e, this.R = n || Ur(t);
	    }
	    /** Creates a new top-level parse context. */    qc(t, e, n, s = !1) {
	        return new ta({
	            Nc: t,
	            methodName: e,
	            Uc: n,
	            path: et.emptyPath(),
	            $c: !1,
	            Bc: s
	        }, this.databaseId, this.R, this.ignoreUndefinedProperties);
	    }
	}

	function na(t) {
	    const e = t._freezeSettings(), n = Ur(t._databaseId);
	    return new ea(t._databaseId, !!e.ignoreUndefinedProperties, n);
	}

	/** Parse document data from a set() call. */ function sa(t, e, n, s, i, r = {}) {
	    const o = t.qc(r.merge || r.mergeFields ? 2 /* MergeSet */ : 0 /* Set */ , e, n, i);
	    ma("Data must be an object, but it was:", o, s);
	    const c = wa(s, o);
	    let u, a;
	    if (r.merge) u = new nt(o.fieldMask), a = o.fieldTransforms; else if (r.mergeFields) {
	        const t = [];
	        for (const s of r.mergeFields) {
	            const i = ga(e, s, n);
	            if (!o.contains(i)) throw new C(D.INVALID_ARGUMENT, `Field '${i}' is specified in your field mask but missing from your input data.`);
	            Ta(t, i) || t.push(i);
	        }
	        u = new nt(t), a = o.fieldTransforms.filter((t => u.covers(t.field)));
	    } else u = null, a = o.fieldTransforms;
	    return new Yu(new St(c), u, a);
	}

	class ia extends zu {
	    _toFieldTransform(t) {
	        if (2 /* MergeSet */ !== t.Nc) throw 1 /* Update */ === t.Nc ? t.Lc(`${this._methodName}() can only appear at the top level of your update data`) : t.Lc(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);
	        // No transform to add for a delete, but we need to add it to our
	        // fieldMask so it gets deleted.
	        return t.fieldMask.push(t.path), null;
	    }
	    isEqual(t) {
	        return t instanceof ia;
	    }
	}

	/** Parse update data from an update() call. */ function ha(t, e, n, s) {
	    const i = t.qc(1 /* Update */ , e, n);
	    ma("Data must be an object, but it was:", i, s);
	    const r = [], o = St.empty();
	    J(s, ((t, s) => {
	        const c = pa(e, t, n);
	        // For Compat types, we have to "extract" the underlying types before
	        // performing validation.
	                s = getModularInstance(s);
	        const u = i.Fc(c);
	        if (s instanceof ia) 
	        // Add it to the field mask, but don't add anything to updateData.
	        r.push(c); else {
	            const t = da(s, u);
	            null != t && (r.push(c), o.set(c, t));
	        }
	    }));
	    const c = new nt(r);
	    return new Xu(o, c, i.fieldTransforms);
	}

	/** Parse update data from a list of field/value arguments. */ function la(t, e, n, s, i, r) {
	    const o = t.qc(1 /* Update */ , e, n), c = [ ga(e, s, n) ], u = [ i ];
	    if (r.length % 2 != 0) throw new C(D.INVALID_ARGUMENT, `Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);
	    for (let t = 0; t < r.length; t += 2) c.push(ga(e, r[t])), u.push(r[t + 1]);
	    const a = [], h = St.empty();
	    // We iterate in reverse order to pick the last value for a field if the
	    // user specified the field multiple times.
	    for (let t = c.length - 1; t >= 0; --t) if (!Ta(a, c[t])) {
	        const e = c[t];
	        let n = u[t];
	        // For Compat types, we have to "extract" the underlying types before
	        // performing validation.
	                n = getModularInstance(n);
	        const s = o.Fc(e);
	        if (n instanceof ia) 
	        // Add it to the field mask, but don't add anything to updateData.
	        a.push(e); else {
	            const t = da(n, s);
	            null != t && (a.push(e), h.set(e, t));
	        }
	    }
	    const l = new nt(a);
	    return new Xu(h, l, o.fieldTransforms);
	}

	/**
	 * Parses user data to Protobuf Values.
	 *
	 * @param input - Data to be parsed.
	 * @param context - A context object representing the current path being parsed,
	 * the source of the data being parsed, etc.
	 * @returns The parsed value, or null if the value was a FieldValue sentinel
	 * that should not be included in the resulting parsed data.
	 */ function da(t, e) {
	    if (_a(
	    // Unwrap the API type from the Compat SDK. This will return the API type
	    // from firestore-exp.
	    t = getModularInstance(t))) return ma("Unsupported field value:", e, t), wa(t, e);
	    if (t instanceof zu) 
	    // FieldValues usually parse into transforms (except FieldValue.delete())
	    // in which case we do not want to include this field in our parsed data
	    // (as doing so will overwrite the field directly prior to the transform
	    // trying to transform it). So we don't add this location to
	    // context.fieldMask and we return null as our parsing result.
	    /**
	 * "Parses" the provided FieldValueImpl, adding any necessary transforms to
	 * context.fieldTransforms.
	 */
	    return function(t, e) {
	        // Sentinels are only supported with writes, and not within arrays.
	        if (!Zu(e.Nc)) throw e.Lc(`${t._methodName}() can only be used with update() and set()`);
	        if (!e.path) throw e.Lc(`${t._methodName}() is not currently supported inside arrays`);
	        const n = t._toFieldTransform(e);
	        n && e.fieldTransforms.push(n);
	    }
	    /**
	 * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)
	 *
	 * @returns The parsed value
	 */ (t, e), null;
	    if (void 0 === t && e.ignoreUndefinedProperties) 
	    // If the input is undefined it can never participate in the fieldMask, so
	    // don't handle this below. If `ignoreUndefinedProperties` is false,
	    // `parseScalarValue` will reject an undefined value.
	    return null;
	    if (
	    // If context.path is null we are inside an array and we don't support
	    // field mask paths more granular than the top-level array.
	    e.path && e.fieldMask.push(e.path), t instanceof Array) {
	        // TODO(b/34871131): Include the path containing the array in the error
	        // message.
	        // In the case of IN queries, the parsed data is an array (representing
	        // the set of values to be included for the IN query) that may directly
	        // contain additional arrays (each representing an individual field
	        // value), so we disable this validation.
	        if (e.settings.$c && 4 /* ArrayArgument */ !== e.Nc) throw e.Lc("Nested arrays are not supported");
	        return function(t, e) {
	            const n = [];
	            let s = 0;
	            for (const i of t) {
	                let t = da(i, e.Mc(s));
	                null == t && (
	                // Just include nulls in the array for fields being replaced with a
	                // sentinel.
	                t = {
	                    nullValue: "NULL_VALUE"
	                }), n.push(t), s++;
	            }
	            return {
	                arrayValue: {
	                    values: n
	                }
	            };
	        }(t, e);
	    }
	    return function(t, e) {
	        if (null === (t = getModularInstance(t))) return {
	            nullValue: "NULL_VALUE"
	        };
	        if ("number" == typeof t) return pe(e.R, t);
	        if ("boolean" == typeof t) return {
	            booleanValue: t
	        };
	        if ("string" == typeof t) return {
	            stringValue: t
	        };
	        if (t instanceof Date) {
	            const n = G.fromDate(t);
	            return {
	                timestampValue: Sn(e.R, n)
	            };
	        }
	        if (t instanceof G) {
	            // Firestore backend truncates precision down to microseconds. To ensure
	            // offline mode works the same with regards to truncation, perform the
	            // truncation immediately without waiting for the backend to do that.
	            const n = new G(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));
	            return {
	                timestampValue: Sn(e.R, n)
	            };
	        }
	        if (t instanceof Hu) return {
	            geoPointValue: {
	                latitude: t.latitude,
	                longitude: t.longitude
	            }
	        };
	        if (t instanceof Gu) return {
	            bytesValue: Dn(e.R, t._byteString)
	        };
	        if (t instanceof gu) {
	            const n = e.databaseId, s = t.firestore._databaseId;
	            if (!s.isEqual(n)) throw e.Lc(`Document reference is for database ${s.projectId}/${s.database} but should be for database ${n.projectId}/${n.database}`);
	            return {
	                referenceValue: xn(t.firestore._databaseId || e.databaseId, t._key.path)
	            };
	        }
	        throw e.Lc(`Unsupported field value: ${lu(t)}`);
	    }
	    /**
	 * Checks whether an object looks like a JSON object that should be converted
	 * into a struct. Normal class/prototype instances are considered to look like
	 * JSON objects since they should be converted to a struct value. Arrays, Dates,
	 * GeoPoints, etc. are not considered to look like JSON objects since they map
	 * to specific FieldValue types other than ObjectValue.
	 */ (t, e);
	}

	function wa(t, e) {
	    const n = {};
	    return Y(t) ? 
	    // If we encounter an empty object, we explicitly add it to the update
	    // mask to ensure that the server creates a map entry.
	    e.path && e.path.length > 0 && e.fieldMask.push(e.path) : J(t, ((t, s) => {
	        const i = da(s, e.kc(t));
	        null != i && (n[t] = i);
	    })), {
	        mapValue: {
	            fields: n
	        }
	    };
	}

	function _a(t) {
	    return !("object" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof G || t instanceof Hu || t instanceof Gu || t instanceof gu || t instanceof zu);
	}

	function ma(t, e, n) {
	    if (!_a(n) || !function(t) {
	        return "object" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));
	    }(n)) {
	        const s = lu(n);
	        throw "an object" === s ? e.Lc(t + " a custom object") : e.Lc(t + " " + s);
	    }
	}

	/**
	 * Helper that calls fromDotSeparatedString() but wraps any error thrown.
	 */ function ga(t, e, n) {
	    if ((
	    // If required, replace the FieldPath Compat class with with the firestore-exp
	    // FieldPath.
	    e = getModularInstance(e)) instanceof Qu) return e._internalPath;
	    if ("string" == typeof e) return pa(t, e);
	    throw Ea("Field path arguments must be of type string or FieldPath.", t, 
	    /* hasConverter= */ !1, 
	    /* path= */ void 0, n);
	}

	/**
	 * Matches any characters in a field path string that are reserved.
	 */ const ya = new RegExp("[~\\*/\\[\\]]");

	/**
	 * Wraps fromDotSeparatedString with an error message about the method that
	 * was thrown.
	 * @param methodName - The publicly visible method name
	 * @param path - The dot-separated string form of a field path which will be
	 * split on dots.
	 * @param targetDoc - The document against which the field path will be
	 * evaluated.
	 */ function pa(t, e, n) {
	    if (e.search(ya) >= 0) throw Ea(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`, t, 
	    /* hasConverter= */ !1, 
	    /* path= */ void 0, n);
	    try {
	        return new Qu(...e.split("."))._internalPath;
	    } catch (s) {
	        throw Ea(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, t, 
	        /* hasConverter= */ !1, 
	        /* path= */ void 0, n);
	    }
	}

	function Ea(t, e, n, s, i) {
	    const r = s && !s.isEmpty(), o = void 0 !== i;
	    let c = `Function ${e}() called with invalid data`;
	    n && (c += " (via `toFirestore()`)"), c += ". ";
	    let u = "";
	    return (r || o) && (u += " (found", r && (u += ` in field ${s}`), o && (u += ` in document ${i}`), 
	    u += ")"), new C(D.INVALID_ARGUMENT, c + t + u);
	}

	/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */ function Ta(t, e) {
	    return t.some((t => t.isEqual(e)));
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A `DocumentSnapshot` contains data read from a document in your Firestore
	 * database. The data can be extracted with `.data()` or `.get(<field>)` to
	 * get a specific field.
	 *
	 * For a `DocumentSnapshot` that points to a non-existing document, any data
	 * access will return 'undefined'. You can use the `exists()` method to
	 * explicitly verify a document's existence.
	 */ class Ia {
	    // Note: This class is stripped down version of the DocumentSnapshot in
	    // the legacy SDK. The changes are:
	    // - No support for SnapshotMetadata.
	    // - No support for SnapshotOptions.
	    /** @hideconstructor protected */
	    constructor(t, e, n, s, i) {
	        this._firestore = t, this._userDataWriter = e, this._key = n, this._document = s, 
	        this._converter = i;
	    }
	    /** Property of the `DocumentSnapshot` that provides the document's ID. */    get id() {
	        return this._key.path.lastSegment();
	    }
	    /**
	     * The `DocumentReference` for the document included in the `DocumentSnapshot`.
	     */    get ref() {
	        return new gu(this._firestore, this._converter, this._key);
	    }
	    /**
	     * Signals whether or not the document at the snapshot's location exists.
	     *
	     * @returns true if the document exists.
	     */    exists() {
	        return null !== this._document;
	    }
	    /**
	     * Retrieves all fields in the document as an `Object`. Returns `undefined` if
	     * the document doesn't exist.
	     *
	     * @returns An `Object` containing all fields in the document or `undefined`
	     * if the document doesn't exist.
	     */    data() {
	        if (this._document) {
	            if (this._converter) {
	                // We only want to use the converter and create a new DocumentSnapshot
	                // if a converter has been provided.
	                const t = new Aa(this._firestore, this._userDataWriter, this._key, this._document, 
	                /* converter= */ null);
	                return this._converter.fromFirestore(t);
	            }
	            return this._userDataWriter.convertValue(this._document.data.value);
	        }
	    }
	    /**
	     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
	     * document or field doesn't exist.
	     *
	     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
	     * field.
	     * @returns The data at the specified field location or undefined if no such
	     * field exists in the document.
	     */
	    // We are using `any` here to avoid an explicit cast by our users.
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    get(t) {
	        if (this._document) {
	            const e = this._document.data.field(Ra("DocumentSnapshot.get", t));
	            if (null !== e) return this._userDataWriter.convertValue(e);
	        }
	    }
	}

	/**
	 * A `QueryDocumentSnapshot` contains data read from a document in your
	 * Firestore database as part of a query. The document is guaranteed to exist
	 * and its data can be extracted with `.data()` or `.get(<field>)` to get a
	 * specific field.
	 *
	 * A `QueryDocumentSnapshot` offers the same API surface as a
	 * `DocumentSnapshot`. Since query results contain only existing documents, the
	 * `exists` property will always be true and `data()` will never return
	 * 'undefined'.
	 */ class Aa extends Ia {
	    /**
	     * Retrieves all fields in the document as an `Object`.
	     *
	     * @override
	     * @returns An `Object` containing all fields in the document.
	     */
	    data() {
	        return super.data();
	    }
	}

	/**
	 * Helper that calls fromDotSeparatedString() but wraps any error thrown.
	 */ function Ra(t, e) {
	    return "string" == typeof e ? pa(t, e) : e instanceof Qu ? e._internalPath : e._delegate._internalPath;
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Metadata about a snapshot, describing the state of the snapshot.
	 */ class Pa {
	    /** @hideconstructor */
	    constructor(t, e) {
	        this.hasPendingWrites = t, this.fromCache = e;
	    }
	    /**
	     * Returns true if this `SnapshotMetadata` is equal to the provided one.
	     *
	     * @param other - The `SnapshotMetadata` to compare against.
	     * @returns true if this `SnapshotMetadata` is equal to the provided one.
	     */    isEqual(t) {
	        return this.hasPendingWrites === t.hasPendingWrites && this.fromCache === t.fromCache;
	    }
	}

	/**
	 * A `DocumentSnapshot` contains data read from a document in your Firestore
	 * database. The data can be extracted with `.data()` or `.get(<field>)` to
	 * get a specific field.
	 *
	 * For a `DocumentSnapshot` that points to a non-existing document, any data
	 * access will return 'undefined'. You can use the `exists()` method to
	 * explicitly verify a document's existence.
	 */ class ba extends Ia {
	    /** @hideconstructor protected */
	    constructor(t, e, n, s, i, r) {
	        super(t, e, n, s, r), this._firestore = t, this._firestoreImpl = t, this.metadata = i;
	    }
	    /**
	     * Property of the `DocumentSnapshot` that signals whether or not the data
	     * exists. True if the document exists.
	     */    exists() {
	        return super.exists();
	    }
	    /**
	     * Retrieves all fields in the document as an `Object`. Returns `undefined` if
	     * the document doesn't exist.
	     *
	     * By default, `FieldValue.serverTimestamp()` values that have not yet been
	     * set to their final value will be returned as `null`. You can override
	     * this by passing an options object.
	     *
	     * @param options - An options object to configure how data is retrieved from
	     * the snapshot (for example the desired behavior for server timestamps that
	     * have not yet been set to their final value).
	     * @returns An `Object` containing all fields in the document or `undefined` if
	     * the document doesn't exist.
	     */    data(t = {}) {
	        if (this._document) {
	            if (this._converter) {
	                // We only want to use the converter and create a new DocumentSnapshot
	                // if a converter has been provided.
	                const e = new va(this._firestore, this._userDataWriter, this._key, this._document, this.metadata, 
	                /* converter= */ null);
	                return this._converter.fromFirestore(e, t);
	            }
	            return this._userDataWriter.convertValue(this._document.data.value, t.serverTimestamps);
	        }
	    }
	    /**
	     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
	     * document or field doesn't exist.
	     *
	     * By default, a `FieldValue.serverTimestamp()` that has not yet been set to
	     * its final value will be returned as `null`. You can override this by
	     * passing an options object.
	     *
	     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
	     * field.
	     * @param options - An options object to configure how the field is retrieved
	     * from the snapshot (for example the desired behavior for server timestamps
	     * that have not yet been set to their final value).
	     * @returns The data at the specified field location or undefined if no such
	     * field exists in the document.
	     */
	    // We are using `any` here to avoid an explicit cast by our users.
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    get(t, e = {}) {
	        if (this._document) {
	            const n = this._document.data.field(Ra("DocumentSnapshot.get", t));
	            if (null !== n) return this._userDataWriter.convertValue(n, e.serverTimestamps);
	        }
	    }
	}

	/**
	 * A `QueryDocumentSnapshot` contains data read from a document in your
	 * Firestore database as part of a query. The document is guaranteed to exist
	 * and its data can be extracted with `.data()` or `.get(<field>)` to get a
	 * specific field.
	 *
	 * A `QueryDocumentSnapshot` offers the same API surface as a
	 * `DocumentSnapshot`. Since query results contain only existing documents, the
	 * `exists` property will always be true and `data()` will never return
	 * 'undefined'.
	 */ class va extends ba {
	    /**
	     * Retrieves all fields in the document as an `Object`.
	     *
	     * By default, `FieldValue.serverTimestamp()` values that have not yet been
	     * set to their final value will be returned as `null`. You can override
	     * this by passing an options object.
	     *
	     * @override
	     * @param options - An options object to configure how data is retrieved from
	     * the snapshot (for example the desired behavior for server timestamps that
	     * have not yet been set to their final value).
	     * @returns An `Object` containing all fields in the document.
	     */
	    data(t = {}) {
	        return super.data(t);
	    }
	}

	/**
	 * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects
	 * representing the results of a query. The documents can be accessed as an
	 * array via the `docs` property or enumerated using the `forEach` method. The
	 * number of documents can be determined via the `empty` and `size`
	 * properties.
	 */ class Va {
	    /** @hideconstructor */
	    constructor(t, e, n, s) {
	        this._firestore = t, this._userDataWriter = e, this._snapshot = s, this.metadata = new Pa(s.hasPendingWrites, s.fromCache), 
	        this.query = n;
	    }
	    /** An array of all the documents in the `QuerySnapshot`. */    get docs() {
	        const t = [];
	        return this.forEach((e => t.push(e))), t;
	    }
	    /** The number of documents in the `QuerySnapshot`. */    get size() {
	        return this._snapshot.docs.size;
	    }
	    /** True if there are no documents in the `QuerySnapshot`. */    get empty() {
	        return 0 === this.size;
	    }
	    /**
	     * Enumerates all of the documents in the `QuerySnapshot`.
	     *
	     * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
	     * each document in the snapshot.
	     * @param thisArg - The `this` binding for the callback.
	     */    forEach(t, e) {
	        this._snapshot.docs.forEach((n => {
	            t.call(e, new va(this._firestore, this._userDataWriter, n.key, n, new Pa(this._snapshot.mutatedKeys.has(n.key), this._snapshot.fromCache), this.query.converter));
	        }));
	    }
	    /**
	     * Returns an array of the documents changes since the last snapshot. If this
	     * is the first snapshot, all documents will be in the list as 'added'
	     * changes.
	     *
	     * @param options - `SnapshotListenOptions` that control whether metadata-only
	     * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger
	     * snapshot events.
	     */    docChanges(t = {}) {
	        const e = !!t.includeMetadataChanges;
	        if (e && this._snapshot.excludesMetadataChanges) throw new C(D.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
	        return this._cachedChanges && this._cachedChangesIncludeMetadataChanges === e || (this._cachedChanges = 
	        /** Calculates the array of DocumentChanges for a given ViewSnapshot. */
	        function(t, e) {
	            if (t._snapshot.oldDocs.isEmpty()) {
	                let e = 0;
	                return t._snapshot.docChanges.map((n => ({
	                    type: "added",
	                    doc: new va(t._firestore, t._userDataWriter, n.doc.key, n.doc, new Pa(t._snapshot.mutatedKeys.has(n.doc.key), t._snapshot.fromCache), t.query.converter),
	                    oldIndex: -1,
	                    newIndex: e++
	                })));
	            }
	            {
	                // A DocumentSet that is updated incrementally as changes are applied to use
	                // to lookup the index of a document.
	                let n = t._snapshot.oldDocs;
	                return t._snapshot.docChanges.filter((t => e || 3 /* Metadata */ !== t.type)).map((e => {
	                    const s = new va(t._firestore, t._userDataWriter, e.doc.key, e.doc, new Pa(t._snapshot.mutatedKeys.has(e.doc.key), t._snapshot.fromCache), t.query.converter);
	                    let i = -1, r = -1;
	                    return 0 /* Added */ !== e.type && (i = n.indexOf(e.doc.key), n = n.delete(e.doc.key)), 
	                    1 /* Removed */ !== e.type && (n = n.add(e.doc), r = n.indexOf(e.doc.key)), {
	                        type: Sa(e.type),
	                        doc: s,
	                        oldIndex: i,
	                        newIndex: r
	                    };
	                }));
	            }
	        }(this, e), this._cachedChangesIncludeMetadataChanges = e), this._cachedChanges;
	    }
	}

	function Sa(t) {
	    switch (t) {
	      case 0 /* Added */ :
	        return "added";

	      case 2 /* Modified */ :
	      case 3 /* Metadata */ :
	        return "modified";

	      case 1 /* Removed */ :
	        return "removed";

	      default:
	        return L();
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ function Ca(t) {
	    if (ie(t) && 0 === t.explicitOrderBy.length) throw new C(D.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Converts Firestore's internal types to the JavaScript types that we expose
	 * to the user.
	 *
	 * @internal
	 */ class Ya {
	    convertValue(t, e = "none") {
	        switch (_t(t)) {
	          case 0 /* NullValue */ :
	            return null;

	          case 1 /* BooleanValue */ :
	            return t.booleanValue;

	          case 2 /* NumberValue */ :
	            return ot(t.integerValue || t.doubleValue);

	          case 3 /* TimestampValue */ :
	            return this.convertTimestamp(t.timestampValue);

	          case 4 /* ServerTimestampValue */ :
	            return this.convertServerTimestamp(t, e);

	          case 5 /* StringValue */ :
	            return t.stringValue;

	          case 6 /* BlobValue */ :
	            return this.convertBytes(ct(t.bytesValue));

	          case 7 /* RefValue */ :
	            return this.convertReference(t.referenceValue);

	          case 8 /* GeoPointValue */ :
	            return this.convertGeoPoint(t.geoPointValue);

	          case 9 /* ArrayValue */ :
	            return this.convertArray(t.arrayValue, e);

	          case 10 /* ObjectValue */ :
	            return this.convertObject(t.mapValue, e);

	          default:
	            throw L();
	        }
	    }
	    convertObject(t, e) {
	        const n = {};
	        return J(t.fields, ((t, s) => {
	            n[t] = this.convertValue(s, e);
	        })), n;
	    }
	    convertGeoPoint(t) {
	        return new Hu(ot(t.latitude), ot(t.longitude));
	    }
	    convertArray(t, e) {
	        return (t.values || []).map((t => this.convertValue(t, e)));
	    }
	    convertServerTimestamp(t, e) {
	        switch (e) {
	          case "previous":
	            const n = at(t);
	            return null == n ? null : this.convertValue(n, e);

	          case "estimate":
	            return this.convertTimestamp(ht(t));

	          default:
	            return null;
	        }
	    }
	    convertTimestamp(t) {
	        const e = rt(t);
	        return new G(e.seconds, e.nanos);
	    }
	    convertDocumentKey(t, e) {
	        const n = Z.fromString(t);
	        B(us(n));
	        const s = new tu(n.get(1), n.get(3)), i = new wt(n.popFirst(5));
	        return s.isEqual(e) || 
	        // TODO(b/64130202): Somehow support foreign references.
	        O(`Document ${i} contains a document reference within a different database (${s.projectId}/${s.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`), 
	        i;
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Converts custom model object of type T into DocumentData by applying the
	 * converter if it exists.
	 *
	 * This function is used when converting user objects to DocumentData
	 * because we want to provide the user with a more specific error message if
	 * their set() or fails due to invalid data originating from a toFirestore()
	 * call.
	 */ function Xa(t, e, n) {
	    let s;
	    // Cast to `any` in order to satisfy the union type constraint on
	    // toFirestore().
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    return s = t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e, 
	    s;
	}

	class sh extends Ya {
	    constructor(t) {
	        super(), this.firestore = t;
	    }
	    convertBytes(t) {
	        return new Gu(t);
	    }
	    convertReference(t) {
	        const e = this.convertDocumentKey(t, this.firestore._databaseId);
	        return new gu(this.firestore, /* converter= */ null, e);
	    }
	}

	function ah(t, e, n) {
	    t = fu(t, gu);
	    const s = fu(t.firestore, Su), i = Xa(t.converter, e, n);
	    return _h(s, [ sa(na(s), "setDoc", t._key, i, null !== t.converter, n).toMutation(t._key, $e.none()) ]);
	}

	function hh(t, e, n, ...s) {
	    t = fu(t, gu);
	    const i = fu(t.firestore, Su), r = na(i);
	    let o;
	    o = "string" == typeof (
	    // For Compat types, we have to "extract" the underlying types before
	    // performing validation.
	    e = getModularInstance(e)) || e instanceof Qu ? la(r, "updateDoc", t._key, e, n, s) : ha(r, "updateDoc", t._key, e);
	    return _h(i, [ o.toMutation(t._key, $e.exists(!0)) ]);
	}

	/**
	 * Deletes the document referred to by the specified `DocumentReference`.
	 *
	 * @param reference - A reference to the document to delete.
	 * @returns A Promise resolved once the document has been successfully
	 * deleted from the backend (note that it won't resolve while you're offline).
	 */ function lh(t) {
	    return _h(fu(t.firestore, Su), [ new ze(t._key, $e.none()) ]);
	}

	/**
	 * Add a new document to specified `CollectionReference` with the given data,
	 * assigning it a document ID automatically.
	 *
	 * @param reference - A reference to the collection to add this document to.
	 * @param data - An Object containing the data for the new document.
	 * @returns A Promise resolved with a `DocumentReference` pointing to the
	 * newly created document after it has been written to the backend (Note that it
	 * won't resolve while you're offline).
	 */ function fh(t, e) {
	    const n = fu(t.firestore, Su), s = Iu(t), i = Xa(t.converter, e);
	    return _h(n, [ sa(na(t.firestore), "addDoc", s._key, i, null !== t.converter, {}).toMutation(s._key, $e.exists(!1)) ]).then((() => s));
	}

	function dh(t, ...e) {
	    var n, s, i;
	    t = getModularInstance(t);
	    let r = {
	        includeMetadataChanges: !1
	    }, o = 0;
	    "object" != typeof e[o] || bu(e[o]) || (r = e[o], o++);
	    const c = {
	        includeMetadataChanges: r.includeMetadataChanges
	    };
	    if (bu(e[o])) {
	        const t = e[o];
	        e[o] = null === (n = t.next) || void 0 === n ? void 0 : n.bind(t), e[o + 1] = null === (s = t.error) || void 0 === s ? void 0 : s.bind(t), 
	        e[o + 2] = null === (i = t.complete) || void 0 === i ? void 0 : i.bind(t);
	    }
	    let u, a, h;
	    if (t instanceof gu) a = fu(t.firestore, Su), h = ne(t._key.path), u = {
	        next: n => {
	            e[o] && e[o](mh(a, t, n));
	        },
	        error: e[o + 1],
	        complete: e[o + 2]
	    }; else {
	        const n = fu(t, yu);
	        a = fu(n.firestore, Su), h = n._query;
	        const s = new sh(a);
	        u = {
	            next: t => {
	                e[o] && e[o](new Va(a, s, n, t));
	            },
	            error: e[o + 1],
	            complete: e[o + 2]
	        }, Ca(t._query);
	    }
	    return function(t, e, n, s) {
	        const i = new Sc(s), r = new $o(e, i, n);
	        return t.asyncQueue.enqueueAndForget((async () => Do(await qc(t), r))), () => {
	            i.Wo(), t.asyncQueue.enqueueAndForget((async () => Co(await qc(t), r)));
	        };
	    }(Nu(a), h, c, u);
	}

	/**
	 * Locally writes `mutations` on the async queue.
	 * @internal
	 */ function _h(t, e) {
	    return function(t, e) {
	        const n = new Ns;
	        return t.asyncQueue.enqueueAndForget((async () => Ho(await Uc(t), e, n))), n.promise;
	    }(Nu(t), e);
	}

	/**
	 * Converts a ViewSnapshot that contains the single document specified by `ref`
	 * to a DocumentSnapshot.
	 */ function mh(t, e, n) {
	    const s = n.docs.get(e._key), i = new sh(t);
	    return new ba(t, i, e._key, s, new Pa(n.hasPendingWrites, n.fromCache), e.converter);
	}

	/**
	 * Cloud Firestore
	 *
	 * @packageDocumentation
	 */ var Ph;

	!function(t) {
	    V = t;
	}(SDK_VERSION), _registerComponent(new Component("firestore-exp", ((t, {options: e}) => {
	    const n = t.getProvider("app-exp").getImmediate(), s = new Su(n, t.getProvider("auth-internal"));
	    return e = Object.assign({
	        useFetchStreams: !0
	    }, e), s._setSettings(e), s;
	}), "PUBLIC" /* PUBLIC */)), registerVersion("@firebase/firestore", "0.0.900-exp.8b4d7550f", Ph);

	function toArray(arr) {
	  return Array.prototype.slice.call(arr);
	}

	function promisifyRequest(request) {
	  return new Promise(function(resolve, reject) {
	    request.onsuccess = function() {
	      resolve(request.result);
	    };

	    request.onerror = function() {
	      reject(request.error);
	    };
	  });
	}

	function promisifyRequestCall(obj, method, args) {
	  var request;
	  var p = new Promise(function(resolve, reject) {
	    request = obj[method].apply(obj, args);
	    promisifyRequest(request).then(resolve, reject);
	  });

	  p.request = request;
	  return p;
	}

	function promisifyCursorRequestCall(obj, method, args) {
	  var p = promisifyRequestCall(obj, method, args);
	  return p.then(function(value) {
	    if (!value) return;
	    return new Cursor(value, p.request);
	  });
	}

	function proxyProperties(ProxyClass, targetProp, properties) {
	  properties.forEach(function(prop) {
	    Object.defineProperty(ProxyClass.prototype, prop, {
	      get: function() {
	        return this[targetProp][prop];
	      },
	      set: function(val) {
	        this[targetProp][prop] = val;
	      }
	    });
	  });
	}

	function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {
	  properties.forEach(function(prop) {
	    if (!(prop in Constructor.prototype)) return;
	    ProxyClass.prototype[prop] = function() {
	      return promisifyRequestCall(this[targetProp], prop, arguments);
	    };
	  });
	}

	function proxyMethods(ProxyClass, targetProp, Constructor, properties) {
	  properties.forEach(function(prop) {
	    if (!(prop in Constructor.prototype)) return;
	    ProxyClass.prototype[prop] = function() {
	      return this[targetProp][prop].apply(this[targetProp], arguments);
	    };
	  });
	}

	function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {
	  properties.forEach(function(prop) {
	    if (!(prop in Constructor.prototype)) return;
	    ProxyClass.prototype[prop] = function() {
	      return promisifyCursorRequestCall(this[targetProp], prop, arguments);
	    };
	  });
	}

	function Index(index) {
	  this._index = index;
	}

	proxyProperties(Index, '_index', [
	  'name',
	  'keyPath',
	  'multiEntry',
	  'unique'
	]);

	proxyRequestMethods(Index, '_index', IDBIndex, [
	  'get',
	  'getKey',
	  'getAll',
	  'getAllKeys',
	  'count'
	]);

	proxyCursorRequestMethods(Index, '_index', IDBIndex, [
	  'openCursor',
	  'openKeyCursor'
	]);

	function Cursor(cursor, request) {
	  this._cursor = cursor;
	  this._request = request;
	}

	proxyProperties(Cursor, '_cursor', [
	  'direction',
	  'key',
	  'primaryKey',
	  'value'
	]);

	proxyRequestMethods(Cursor, '_cursor', IDBCursor, [
	  'update',
	  'delete'
	]);

	// proxy 'next' methods
	['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {
	  if (!(methodName in IDBCursor.prototype)) return;
	  Cursor.prototype[methodName] = function() {
	    var cursor = this;
	    var args = arguments;
	    return Promise.resolve().then(function() {
	      cursor._cursor[methodName].apply(cursor._cursor, args);
	      return promisifyRequest(cursor._request).then(function(value) {
	        if (!value) return;
	        return new Cursor(value, cursor._request);
	      });
	    });
	  };
	});

	function ObjectStore(store) {
	  this._store = store;
	}

	ObjectStore.prototype.createIndex = function() {
	  return new Index(this._store.createIndex.apply(this._store, arguments));
	};

	ObjectStore.prototype.index = function() {
	  return new Index(this._store.index.apply(this._store, arguments));
	};

	proxyProperties(ObjectStore, '_store', [
	  'name',
	  'keyPath',
	  'indexNames',
	  'autoIncrement'
	]);

	proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [
	  'put',
	  'add',
	  'delete',
	  'clear',
	  'get',
	  'getAll',
	  'getKey',
	  'getAllKeys',
	  'count'
	]);

	proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [
	  'openCursor',
	  'openKeyCursor'
	]);

	proxyMethods(ObjectStore, '_store', IDBObjectStore, [
	  'deleteIndex'
	]);

	function Transaction(idbTransaction) {
	  this._tx = idbTransaction;
	  this.complete = new Promise(function(resolve, reject) {
	    idbTransaction.oncomplete = function() {
	      resolve();
	    };
	    idbTransaction.onerror = function() {
	      reject(idbTransaction.error);
	    };
	    idbTransaction.onabort = function() {
	      reject(idbTransaction.error);
	    };
	  });
	}

	Transaction.prototype.objectStore = function() {
	  return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));
	};

	proxyProperties(Transaction, '_tx', [
	  'objectStoreNames',
	  'mode'
	]);

	proxyMethods(Transaction, '_tx', IDBTransaction, [
	  'abort'
	]);

	function UpgradeDB(db, oldVersion, transaction) {
	  this._db = db;
	  this.oldVersion = oldVersion;
	  this.transaction = new Transaction(transaction);
	}

	UpgradeDB.prototype.createObjectStore = function() {
	  return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));
	};

	proxyProperties(UpgradeDB, '_db', [
	  'name',
	  'version',
	  'objectStoreNames'
	]);

	proxyMethods(UpgradeDB, '_db', IDBDatabase, [
	  'deleteObjectStore',
	  'close'
	]);

	function DB(db) {
	  this._db = db;
	}

	DB.prototype.transaction = function() {
	  return new Transaction(this._db.transaction.apply(this._db, arguments));
	};

	proxyProperties(DB, '_db', [
	  'name',
	  'version',
	  'objectStoreNames'
	]);

	proxyMethods(DB, '_db', IDBDatabase, [
	  'close'
	]);

	// Add cursor iterators
	// TODO: remove this once browsers do the right thing with promises
	['openCursor', 'openKeyCursor'].forEach(function(funcName) {
	  [ObjectStore, Index].forEach(function(Constructor) {
	    // Don't create iterateKeyCursor if openKeyCursor doesn't exist.
	    if (!(funcName in Constructor.prototype)) return;

	    Constructor.prototype[funcName.replace('open', 'iterate')] = function() {
	      var args = toArray(arguments);
	      var callback = args[args.length - 1];
	      var nativeObject = this._store || this._index;
	      var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));
	      request.onsuccess = function() {
	        callback(request.result);
	      };
	    };
	  });
	});

	// polyfill getAll
	[Index, ObjectStore].forEach(function(Constructor) {
	  if (Constructor.prototype.getAll) return;
	  Constructor.prototype.getAll = function(query, count) {
	    var instance = this;
	    var items = [];

	    return new Promise(function(resolve) {
	      instance.iterateCursor(query, function(cursor) {
	        if (!cursor) {
	          resolve(items);
	          return;
	        }
	        items.push(cursor.value);

	        if (count !== undefined && items.length == count) {
	          resolve(items);
	          return;
	        }
	        cursor.continue();
	      });
	    });
	  };
	});

	function openDb(name, version, upgradeCallback) {
	  var p = promisifyRequestCall(indexedDB, 'open', [name, version]);
	  var request = p.request;

	  if (request) {
	    request.onupgradeneeded = function(event) {
	      if (upgradeCallback) {
	        upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));
	      }
	    };
	  }

	  return p.then(function(db) {
	    return new DB(db);
	  });
	}

	const name$2 = "@firebase/installations-exp";
	const version$2 = "0.0.900-exp.8b4d7550f";

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const PENDING_TIMEOUT_MS = 10000;
	const PACKAGE_VERSION = `w:${version$2}`;
	const INTERNAL_AUTH_VERSION = 'FIS_v2';
	const INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';
	const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour
	const SERVICE = 'installations';
	const SERVICE_NAME = 'Installations';

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const ERROR_DESCRIPTION_MAP$1 = {
	    ["missing-app-config-values" /* MISSING_APP_CONFIG_VALUES */]: 'Missing App configuration value: "{$valueName}"',
	    ["not-registered" /* NOT_REGISTERED */]: 'Firebase Installation is not registered.',
	    ["installation-not-found" /* INSTALLATION_NOT_FOUND */]: 'Firebase Installation not found.',
	    ["request-failed" /* REQUEST_FAILED */]: '{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',
	    ["app-offline" /* APP_OFFLINE */]: 'Could not process request. Application offline.',
	    ["delete-pending-registration" /* DELETE_PENDING_REGISTRATION */]: "Can't delete installation while there is a pending registration request."
	};
	const ERROR_FACTORY$1 = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP$1);
	/** Returns true if error is a FirebaseError that is based on an error from the server. */
	function isServerError(error) {
	    return (error instanceof FirebaseError &&
	        error.code.includes("request-failed" /* REQUEST_FAILED */));
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function getInstallationsEndpoint({ projectId }) {
	    return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;
	}
	function extractAuthTokenInfoFromResponse(response) {
	    return {
	        token: response.token,
	        requestStatus: 2 /* COMPLETED */,
	        expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),
	        creationTime: Date.now()
	    };
	}
	async function getErrorFromResponse(requestName, response) {
	    const responseJson = await response.json();
	    const errorData = responseJson.error;
	    return ERROR_FACTORY$1.create("request-failed" /* REQUEST_FAILED */, {
	        requestName,
	        serverCode: errorData.code,
	        serverMessage: errorData.message,
	        serverStatus: errorData.status
	    });
	}
	function getHeaders({ apiKey }) {
	    return new Headers({
	        'Content-Type': 'application/json',
	        Accept: 'application/json',
	        'x-goog-api-key': apiKey
	    });
	}
	function getHeadersWithAuth(appConfig, { refreshToken }) {
	    const headers = getHeaders(appConfig);
	    headers.append('Authorization', getAuthorizationHeader(refreshToken));
	    return headers;
	}
	/**
	 * Calls the passed in fetch wrapper and returns the response.
	 * If the returned response has a status of 5xx, re-runs the function once and
	 * returns the response.
	 */
	async function retryIfServerError(fn) {
	    const result = await fn();
	    if (result.status >= 500 && result.status < 600) {
	        // Internal Server Error. Retry request.
	        return fn();
	    }
	    return result;
	}
	function getExpiresInFromResponseExpiresIn(responseExpiresIn) {
	    // This works because the server will never respond with fractions of a second.
	    return Number(responseExpiresIn.replace('s', '000'));
	}
	function getAuthorizationHeader(refreshToken) {
	    return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	async function createInstallationRequest(appConfig, { fid }) {
	    const endpoint = getInstallationsEndpoint(appConfig);
	    const headers = getHeaders(appConfig);
	    const body = {
	        fid,
	        authVersion: INTERNAL_AUTH_VERSION,
	        appId: appConfig.appId,
	        sdkVersion: PACKAGE_VERSION
	    };
	    const request = {
	        method: 'POST',
	        headers,
	        body: JSON.stringify(body)
	    };
	    const response = await retryIfServerError(() => fetch(endpoint, request));
	    if (response.ok) {
	        const responseValue = await response.json();
	        const registeredInstallationEntry = {
	            fid: responseValue.fid || fid,
	            registrationStatus: 2 /* COMPLETED */,
	            refreshToken: responseValue.refreshToken,
	            authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)
	        };
	        return registeredInstallationEntry;
	    }
	    else {
	        throw await getErrorFromResponse('Create Installation', response);
	    }
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** Returns a promise that resolves after given time passes. */
	function sleep(ms) {
	    return new Promise(resolve => {
	        setTimeout(resolve, ms);
	    });
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function bufferToBase64UrlSafe(array) {
	    const b64 = btoa(String.fromCharCode(...array));
	    return b64.replace(/\+/g, '-').replace(/\//g, '_');
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const VALID_FID_PATTERN = /^[cdef][\w-]{21}$/;
	const INVALID_FID = '';
	/**
	 * Generates a new FID using random values from Web Crypto API.
	 * Returns an empty string if FID generation fails for any reason.
	 */
	function generateFid() {
	    try {
	        // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5
	        // bytes. our implementation generates a 17 byte array instead.
	        const fidByteArray = new Uint8Array(17);
	        const crypto = self.crypto || self.msCrypto;
	        crypto.getRandomValues(fidByteArray);
	        // Replace the first 4 random bits with the constant FID header of 0b0111.
	        fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);
	        const fid = encode(fidByteArray);
	        return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;
	    }
	    catch (_a) {
	        // FID generation errored
	        return INVALID_FID;
	    }
	}
	/** Converts a FID Uint8Array to a base64 string representation. */
	function encode(fidByteArray) {
	    const b64String = bufferToBase64UrlSafe(fidByteArray);
	    // Remove the 23rd character that was added because of the extra 4 bits at the
	    // end of our 17 byte array, and the '=' padding.
	    return b64String.substr(0, 22);
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** Returns a string key that can be used to identify the app. */
	function getKey(appConfig) {
	    return `${appConfig.appName}!${appConfig.appId}`;
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const fidChangeCallbacks = new Map();
	/**
	 * Calls the onIdChange callbacks with the new FID value, and broadcasts the
	 * change to other tabs.
	 */
	function fidChanged(appConfig, fid) {
	    const key = getKey(appConfig);
	    callFidChangeCallbacks(key, fid);
	    broadcastFidChange(key, fid);
	}
	function callFidChangeCallbacks(key, fid) {
	    const callbacks = fidChangeCallbacks.get(key);
	    if (!callbacks) {
	        return;
	    }
	    for (const callback of callbacks) {
	        callback(fid);
	    }
	}
	function broadcastFidChange(key, fid) {
	    const channel = getBroadcastChannel();
	    if (channel) {
	        channel.postMessage({ key, fid });
	    }
	    closeBroadcastChannel();
	}
	let broadcastChannel = null;
	/** Opens and returns a BroadcastChannel if it is supported by the browser. */
	function getBroadcastChannel() {
	    if (!broadcastChannel && 'BroadcastChannel' in self) {
	        broadcastChannel = new BroadcastChannel('[Firebase] FID Change');
	        broadcastChannel.onmessage = e => {
	            callFidChangeCallbacks(e.data.key, e.data.fid);
	        };
	    }
	    return broadcastChannel;
	}
	function closeBroadcastChannel() {
	    if (fidChangeCallbacks.size === 0 && broadcastChannel) {
	        broadcastChannel.close();
	        broadcastChannel = null;
	    }
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const DATABASE_NAME = 'firebase-installations-database';
	const DATABASE_VERSION = 1;
	const OBJECT_STORE_NAME = 'firebase-installations-store';
	let dbPromise = null;
	function getDbPromise() {
	    if (!dbPromise) {
	        dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDB => {
	            // We don't use 'break' in this switch statement, the fall-through
	            // behavior is what we want, because if there are multiple versions between
	            // the old version and the current version, we want ALL the migrations
	            // that correspond to those versions to run, not only the last one.
	            // eslint-disable-next-line default-case
	            switch (upgradeDB.oldVersion) {
	                case 0:
	                    upgradeDB.createObjectStore(OBJECT_STORE_NAME);
	            }
	        });
	    }
	    return dbPromise;
	}
	/** Assigns or overwrites the record for the given key with the given value. */
	async function set(appConfig, value) {
	    const key = getKey(appConfig);
	    const db = await getDbPromise();
	    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
	    const objectStore = tx.objectStore(OBJECT_STORE_NAME);
	    const oldValue = await objectStore.get(key);
	    await objectStore.put(value, key);
	    await tx.complete;
	    if (!oldValue || oldValue.fid !== value.fid) {
	        fidChanged(appConfig, value.fid);
	    }
	    return value;
	}
	/** Removes record(s) from the objectStore that match the given key. */
	async function remove(appConfig) {
	    const key = getKey(appConfig);
	    const db = await getDbPromise();
	    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
	    await tx.objectStore(OBJECT_STORE_NAME).delete(key);
	    await tx.complete;
	}
	/**
	 * Atomically updates a record with the result of updateFn, which gets
	 * called with the current value. If newValue is undefined, the record is
	 * deleted instead.
	 * @return Updated value
	 */
	async function update(appConfig, updateFn) {
	    const key = getKey(appConfig);
	    const db = await getDbPromise();
	    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
	    const store = tx.objectStore(OBJECT_STORE_NAME);
	    const oldValue = await store.get(key);
	    const newValue = updateFn(oldValue);
	    if (newValue === undefined) {
	        await store.delete(key);
	    }
	    else {
	        await store.put(newValue, key);
	    }
	    await tx.complete;
	    if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {
	        fidChanged(appConfig, newValue.fid);
	    }
	    return newValue;
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Updates and returns the InstallationEntry from the database.
	 * Also triggers a registration request if it is necessary and possible.
	 */
	async function getInstallationEntry(appConfig) {
	    let registrationPromise;
	    const installationEntry = await update(appConfig, oldEntry => {
	        const installationEntry = updateOrCreateInstallationEntry(oldEntry);
	        const entryWithPromise = triggerRegistrationIfNecessary(appConfig, installationEntry);
	        registrationPromise = entryWithPromise.registrationPromise;
	        return entryWithPromise.installationEntry;
	    });
	    if (installationEntry.fid === INVALID_FID) {
	        // FID generation failed. Waiting for the FID from the server.
	        return { installationEntry: await registrationPromise };
	    }
	    return {
	        installationEntry,
	        registrationPromise
	    };
	}
	/**
	 * Creates a new Installation Entry if one does not exist.
	 * Also clears timed out pending requests.
	 */
	function updateOrCreateInstallationEntry(oldEntry) {
	    const entry = oldEntry || {
	        fid: generateFid(),
	        registrationStatus: 0 /* NOT_STARTED */
	    };
	    return clearTimedOutRequest(entry);
	}
	/**
	 * If the Firebase Installation is not registered yet, this will trigger the
	 * registration and return an InProgressInstallationEntry.
	 *
	 * If registrationPromise does not exist, the installationEntry is guaranteed
	 * to be registered.
	 */
	function triggerRegistrationIfNecessary(appConfig, installationEntry) {
	    if (installationEntry.registrationStatus === 0 /* NOT_STARTED */) {
	        if (!navigator.onLine) {
	            // Registration required but app is offline.
	            const registrationPromiseWithError = Promise.reject(ERROR_FACTORY$1.create("app-offline" /* APP_OFFLINE */));
	            return {
	                installationEntry,
	                registrationPromise: registrationPromiseWithError
	            };
	        }
	        // Try registering. Change status to IN_PROGRESS.
	        const inProgressEntry = {
	            fid: installationEntry.fid,
	            registrationStatus: 1 /* IN_PROGRESS */,
	            registrationTime: Date.now()
	        };
	        const registrationPromise = registerInstallation(appConfig, inProgressEntry);
	        return { installationEntry: inProgressEntry, registrationPromise };
	    }
	    else if (installationEntry.registrationStatus === 1 /* IN_PROGRESS */) {
	        return {
	            installationEntry,
	            registrationPromise: waitUntilFidRegistration(appConfig)
	        };
	    }
	    else {
	        return { installationEntry };
	    }
	}
	/** This will be executed only once for each new Firebase Installation. */
	async function registerInstallation(appConfig, installationEntry) {
	    try {
	        const registeredInstallationEntry = await createInstallationRequest(appConfig, installationEntry);
	        return set(appConfig, registeredInstallationEntry);
	    }
	    catch (e) {
	        if (isServerError(e) && e.customData.serverCode === 409) {
	            // Server returned a "FID can not be used" error.
	            // Generate a new ID next time.
	            await remove(appConfig);
	        }
	        else {
	            // Registration failed. Set FID as not registered.
	            await set(appConfig, {
	                fid: installationEntry.fid,
	                registrationStatus: 0 /* NOT_STARTED */
	            });
	        }
	        throw e;
	    }
	}
	/** Call if FID registration is pending in another request. */
	async function waitUntilFidRegistration(appConfig) {
	    // Unfortunately, there is no way of reliably observing when a value in
	    // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),
	    // so we need to poll.
	    let entry = await updateInstallationRequest(appConfig);
	    while (entry.registrationStatus === 1 /* IN_PROGRESS */) {
	        // createInstallation request still in progress.
	        await sleep(100);
	        entry = await updateInstallationRequest(appConfig);
	    }
	    if (entry.registrationStatus === 0 /* NOT_STARTED */) {
	        // The request timed out or failed in a different call. Try again.
	        const { installationEntry, registrationPromise } = await getInstallationEntry(appConfig);
	        if (registrationPromise) {
	            return registrationPromise;
	        }
	        else {
	            // if there is no registrationPromise, entry is registered.
	            return installationEntry;
	        }
	    }
	    return entry;
	}
	/**
	 * Called only if there is a CreateInstallation request in progress.
	 *
	 * Updates the InstallationEntry in the DB based on the status of the
	 * CreateInstallation request.
	 *
	 * Returns the updated InstallationEntry.
	 */
	function updateInstallationRequest(appConfig) {
	    return update(appConfig, oldEntry => {
	        if (!oldEntry) {
	            throw ERROR_FACTORY$1.create("installation-not-found" /* INSTALLATION_NOT_FOUND */);
	        }
	        return clearTimedOutRequest(oldEntry);
	    });
	}
	function clearTimedOutRequest(entry) {
	    if (hasInstallationRequestTimedOut(entry)) {
	        return {
	            fid: entry.fid,
	            registrationStatus: 0 /* NOT_STARTED */
	        };
	    }
	    return entry;
	}
	function hasInstallationRequestTimedOut(installationEntry) {
	    return (installationEntry.registrationStatus === 1 /* IN_PROGRESS */ &&
	        installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now());
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	async function generateAuthTokenRequest({ appConfig, platformLoggerProvider }, installationEntry) {
	    const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);
	    const headers = getHeadersWithAuth(appConfig, installationEntry);
	    // If platform logger exists, add the platform info string to the header.
	    const platformLogger = platformLoggerProvider.getImmediate({
	        optional: true
	    });
	    if (platformLogger) {
	        headers.append('x-firebase-client', platformLogger.getPlatformInfoString());
	    }
	    const body = {
	        installation: {
	            sdkVersion: PACKAGE_VERSION
	        }
	    };
	    const request = {
	        method: 'POST',
	        headers,
	        body: JSON.stringify(body)
	    };
	    const response = await retryIfServerError(() => fetch(endpoint, request));
	    if (response.ok) {
	        const responseValue = await response.json();
	        const completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);
	        return completedAuthToken;
	    }
	    else {
	        throw await getErrorFromResponse('Generate Auth Token', response);
	    }
	}
	function getGenerateAuthTokenEndpoint(appConfig, { fid }) {
	    return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Returns a valid authentication token for the installation. Generates a new
	 * token if one doesn't exist, is expired or about to expire.
	 *
	 * Should only be called if the Firebase Installation is registered.
	 */
	async function refreshAuthToken(installations, forceRefresh = false) {
	    let tokenPromise;
	    const entry = await update(installations.appConfig, oldEntry => {
	        if (!isEntryRegistered(oldEntry)) {
	            throw ERROR_FACTORY$1.create("not-registered" /* NOT_REGISTERED */);
	        }
	        const oldAuthToken = oldEntry.authToken;
	        if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {
	            // There is a valid token in the DB.
	            return oldEntry;
	        }
	        else if (oldAuthToken.requestStatus === 1 /* IN_PROGRESS */) {
	            // There already is a token request in progress.
	            tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);
	            return oldEntry;
	        }
	        else {
	            // No token or token expired.
	            if (!navigator.onLine) {
	                throw ERROR_FACTORY$1.create("app-offline" /* APP_OFFLINE */);
	            }
	            const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);
	            tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);
	            return inProgressEntry;
	        }
	    });
	    const authToken = tokenPromise
	        ? await tokenPromise
	        : entry.authToken;
	    return authToken;
	}
	/**
	 * Call only if FID is registered and Auth Token request is in progress.
	 *
	 * Waits until the current pending request finishes. If the request times out,
	 * tries once in this thread as well.
	 */
	async function waitUntilAuthTokenRequest(installations, forceRefresh) {
	    // Unfortunately, there is no way of reliably observing when a value in
	    // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),
	    // so we need to poll.
	    let entry = await updateAuthTokenRequest(installations.appConfig);
	    while (entry.authToken.requestStatus === 1 /* IN_PROGRESS */) {
	        // generateAuthToken still in progress.
	        await sleep(100);
	        entry = await updateAuthTokenRequest(installations.appConfig);
	    }
	    const authToken = entry.authToken;
	    if (authToken.requestStatus === 0 /* NOT_STARTED */) {
	        // The request timed out or failed in a different call. Try again.
	        return refreshAuthToken(installations, forceRefresh);
	    }
	    else {
	        return authToken;
	    }
	}
	/**
	 * Called only if there is a GenerateAuthToken request in progress.
	 *
	 * Updates the InstallationEntry in the DB based on the status of the
	 * GenerateAuthToken request.
	 *
	 * Returns the updated InstallationEntry.
	 */
	function updateAuthTokenRequest(appConfig) {
	    return update(appConfig, oldEntry => {
	        if (!isEntryRegistered(oldEntry)) {
	            throw ERROR_FACTORY$1.create("not-registered" /* NOT_REGISTERED */);
	        }
	        const oldAuthToken = oldEntry.authToken;
	        if (hasAuthTokenRequestTimedOut(oldAuthToken)) {
	            return Object.assign(Object.assign({}, oldEntry), { authToken: { requestStatus: 0 /* NOT_STARTED */ } });
	        }
	        return oldEntry;
	    });
	}
	async function fetchAuthTokenFromServer(installations, installationEntry) {
	    try {
	        const authToken = await generateAuthTokenRequest(installations, installationEntry);
	        const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), { authToken });
	        await set(installations.appConfig, updatedInstallationEntry);
	        return authToken;
	    }
	    catch (e) {
	        if (isServerError(e) &&
	            (e.customData.serverCode === 401 || e.customData.serverCode === 404)) {
	            // Server returned a "FID not found" or a "Invalid authentication" error.
	            // Generate a new ID next time.
	            await remove(installations.appConfig);
	        }
	        else {
	            const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), { authToken: { requestStatus: 0 /* NOT_STARTED */ } });
	            await set(installations.appConfig, updatedInstallationEntry);
	        }
	        throw e;
	    }
	}
	function isEntryRegistered(installationEntry) {
	    return (installationEntry !== undefined &&
	        installationEntry.registrationStatus === 2 /* COMPLETED */);
	}
	function isAuthTokenValid(authToken) {
	    return (authToken.requestStatus === 2 /* COMPLETED */ &&
	        !isAuthTokenExpired(authToken));
	}
	function isAuthTokenExpired(authToken) {
	    const now = Date.now();
	    return (now < authToken.creationTime ||
	        authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER);
	}
	/** Returns an updated InstallationEntry with an InProgressAuthToken. */
	function makeAuthTokenRequestInProgressEntry(oldEntry) {
	    const inProgressAuthToken = {
	        requestStatus: 1 /* IN_PROGRESS */,
	        requestTime: Date.now()
	    };
	    return Object.assign(Object.assign({}, oldEntry), { authToken: inProgressAuthToken });
	}
	function hasAuthTokenRequestTimedOut(authToken) {
	    return (authToken.requestStatus === 1 /* IN_PROGRESS */ &&
	        authToken.requestTime + PENDING_TIMEOUT_MS < Date.now());
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Creates a Firebase Installation if there isn't one for the app and
	 * returns the Installation ID.
	 * @param installations - The `Installations` instance.
	 *
	 * @public
	 */
	async function getId(installations) {
	    const installationsImpl = installations;
	    const { installationEntry, registrationPromise } = await getInstallationEntry(installationsImpl.appConfig);
	    if (registrationPromise) {
	        registrationPromise.catch(console.error);
	    }
	    else {
	        // If the installation is already registered, update the authentication
	        // token if needed.
	        refreshAuthToken(installationsImpl).catch(console.error);
	    }
	    return installationEntry.fid;
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Returns an Installation auth token, identifying the current Firebase Installation.
	 * @param installations - The `Installations` instance.
	 * @param forceRefresh - Force refresh regardless of token expiration.
	 *
	 * @public
	 */
	async function getToken(installations, forceRefresh = false) {
	    const installationsImpl = installations;
	    await completeInstallationRegistration(installationsImpl.appConfig);
	    // At this point we either have a Registered Installation in the DB, or we've
	    // already thrown an error.
	    const authToken = await refreshAuthToken(installationsImpl, forceRefresh);
	    return authToken.token;
	}
	async function completeInstallationRegistration(appConfig) {
	    const { registrationPromise } = await getInstallationEntry(appConfig);
	    if (registrationPromise) {
	        // A createInstallation request is in progress. Wait until it finishes.
	        await registrationPromise;
	    }
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function extractAppConfig(app) {
	    if (!app || !app.options) {
	        throw getMissingValueError('App Configuration');
	    }
	    if (!app.name) {
	        throw getMissingValueError('App Name');
	    }
	    // Required app config keys
	    const configKeys = [
	        'projectId',
	        'apiKey',
	        'appId'
	    ];
	    for (const keyName of configKeys) {
	        if (!app.options[keyName]) {
	            throw getMissingValueError(keyName);
	        }
	    }
	    return {
	        appName: app.name,
	        projectId: app.options.projectId,
	        apiKey: app.options.apiKey,
	        appId: app.options.appId
	    };
	}
	function getMissingValueError(valueName) {
	    return ERROR_FACTORY$1.create("missing-app-config-values" /* MISSING_APP_CONFIG_VALUES */, {
	        valueName
	    });
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const INSTALLATIONS_NAME = 'installations-exp';
	const INSTALLATIONS_NAME_INTERNAL = 'installations-exp-internal';
	const publicFactory = (container) => {
	    const app = container.getProvider('app-exp').getImmediate();
	    // Throws if app isn't configured properly.
	    const appConfig = extractAppConfig(app);
	    const platformLoggerProvider = _getProvider(app, 'platform-logger');
	    const installationsImpl = {
	        app,
	        appConfig,
	        platformLoggerProvider,
	        _delete: () => Promise.resolve()
	    };
	    return installationsImpl;
	};
	const internalFactory = (container) => {
	    const app = container.getProvider('app-exp').getImmediate();
	    // Internal FIS instance relies on public FIS instance.
	    const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();
	    const installationsInternal = {
	        getId: () => getId(installations),
	        getToken: (forceRefresh) => getToken(installations, forceRefresh)
	    };
	    return installationsInternal;
	};
	function registerInstallations() {
	    _registerComponent(new Component(INSTALLATIONS_NAME, publicFactory, "PUBLIC" /* PUBLIC */));
	    _registerComponent(new Component(INSTALLATIONS_NAME_INTERNAL, internalFactory, "PRIVATE" /* PRIVATE */));
	}

	/**
	 * Firebase Installations
	 *
	 * @packageDocumentation
	 */
	registerInstallations();
	registerVersion(name$2, version$2);

	const name$1 = "@firebase/remote-config-exp";
	const version$1 = "0.0.900-exp.8b4d7550f";

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Shims a minimal AbortSignal.
	 *
	 * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects
	 * of networking, such as retries. Firebase doesn't use AbortController enough to justify a
	 * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be
	 * swapped out if/when we do.
	 */
	class RemoteConfigAbortSignal {
	    constructor() {
	        this.listeners = [];
	    }
	    addEventListener(listener) {
	        this.listeners.push(listener);
	    }
	    abort() {
	        this.listeners.forEach(listener => listener());
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const RC_COMPONENT_NAME = 'remote-config-exp';

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const ERROR_DESCRIPTION_MAP = {
	    ["registration-window" /* REGISTRATION_WINDOW */]: 'Undefined window object. This SDK only supports usage in a browser environment.',
	    ["registration-project-id" /* REGISTRATION_PROJECT_ID */]: 'Undefined project identifier. Check Firebase app initialization.',
	    ["registration-api-key" /* REGISTRATION_API_KEY */]: 'Undefined API key. Check Firebase app initialization.',
	    ["registration-app-id" /* REGISTRATION_APP_ID */]: 'Undefined app identifier. Check Firebase app initialization.',
	    ["storage-open" /* STORAGE_OPEN */]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',
	    ["storage-get" /* STORAGE_GET */]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',
	    ["storage-set" /* STORAGE_SET */]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',
	    ["storage-delete" /* STORAGE_DELETE */]: 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',
	    ["fetch-client-network" /* FETCH_NETWORK */]: 'Fetch client failed to connect to a network. Check Internet connection.' +
	        ' Original error: {$originalErrorMessage}.',
	    ["fetch-timeout" /* FETCH_TIMEOUT */]: 'The config fetch request timed out. ' +
	        ' Configure timeout using "fetchTimeoutMillis" SDK setting.',
	    ["fetch-throttle" /* FETCH_THROTTLE */]: 'The config fetch request timed out while in an exponential backoff state.' +
	        ' Configure timeout using "fetchTimeoutMillis" SDK setting.' +
	        ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',
	    ["fetch-client-parse" /* FETCH_PARSE */]: 'Fetch client could not parse response.' +
	        ' Original error: {$originalErrorMessage}.',
	    ["fetch-status" /* FETCH_STATUS */]: 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.'
	};
	const ERROR_FACTORY = new ErrorFactory('remoteconfig' /* service */, 'Remote Config' /* service name */, ERROR_DESCRIPTION_MAP);
	// Note how this is like typeof/instanceof, but for ErrorCode.
	function hasErrorCode(e, errorCode) {
	    return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const DEFAULT_VALUE_FOR_BOOLEAN = false;
	const DEFAULT_VALUE_FOR_STRING = '';
	const DEFAULT_VALUE_FOR_NUMBER = 0;
	const BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];
	class Value {
	    constructor(_source, _value = DEFAULT_VALUE_FOR_STRING) {
	        this._source = _source;
	        this._value = _value;
	    }
	    asString() {
	        return this._value;
	    }
	    asBoolean() {
	        if (this._source === 'static') {
	            return DEFAULT_VALUE_FOR_BOOLEAN;
	        }
	        return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;
	    }
	    asNumber() {
	        if (this._source === 'static') {
	            return DEFAULT_VALUE_FOR_NUMBER;
	        }
	        let num = Number(this._value);
	        if (isNaN(num)) {
	            num = DEFAULT_VALUE_FOR_NUMBER;
	        }
	        return num;
	    }
	    getSource() {
	        return this._source;
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 *
	 * @param app - The `FirebaseApp` instance.
	 * @returns A `RemoteConfig` instance.
	 *
	 * @public
	 */
	function getRemoteConfig(app = getApp()) {
	    app = getModularInstance(app);
	    const rcProvider = _getProvider(app, RC_COMPONENT_NAME);
	    return rcProvider.getImmediate();
	}
	/**
	 * Makes the last fetched config available to the getters.
	 * @param remoteConfig - The `RemoteConfig` instance.
	 * @returns A promise which resolves to true if the current call activated the fetched configs.
	 * If the fetched configs were already activated, the promise will resolve to false.
	 *
	 * @public
	 */
	async function activate(remoteConfig) {
	    const rc = getModularInstance(remoteConfig);
	    const [lastSuccessfulFetchResponse, activeConfigEtag] = await Promise.all([
	        rc._storage.getLastSuccessfulFetchResponse(),
	        rc._storage.getActiveConfigEtag()
	    ]);
	    if (!lastSuccessfulFetchResponse ||
	        !lastSuccessfulFetchResponse.config ||
	        !lastSuccessfulFetchResponse.eTag ||
	        lastSuccessfulFetchResponse.eTag === activeConfigEtag) {
	        // Either there is no successful fetched config, or is the same as current active
	        // config.
	        return false;
	    }
	    await Promise.all([
	        rc._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),
	        rc._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)
	    ]);
	    return true;
	}
	/**
	 * Ensures the last activated config are available to the getters.
	 * @param remoteConfig - The `RemoteConfig` instance.
	 *
	 * @returns A promise that resolves when the last activated config is available to the getters.
	 * @public
	 */
	function ensureInitialized(remoteConfig) {
	    const rc = getModularInstance(remoteConfig);
	    if (!rc._initializePromise) {
	        rc._initializePromise = rc._storageCache.loadFromStorage().then(() => {
	            rc._isInitializationComplete = true;
	        });
	    }
	    return rc._initializePromise;
	}
	/**
	 * Fetches and caches configuration from the Remote Config service.
	 * @param remoteConfig - The `RemoteConfig` instance.
	 * @public
	 */
	async function fetchConfig(remoteConfig) {
	    const rc = getModularInstance(remoteConfig);
	    // Aborts the request after the given timeout, causing the fetch call to
	    // reject with an AbortError.
	    //
	    // <p>Aborting after the request completes is a no-op, so we don't need a
	    // corresponding clearTimeout.
	    //
	    // Locating abort logic here because:
	    // * it uses a developer setting (timeout)
	    // * it applies to all retries (like curl's max-time arg)
	    // * it is consistent with the Fetch API's signal input
	    const abortSignal = new RemoteConfigAbortSignal();
	    setTimeout(async () => {
	        // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.
	        abortSignal.abort();
	    }, rc.settings.fetchTimeoutMillis);
	    // Catches *all* errors thrown by client so status can be set consistently.
	    try {
	        await rc._client.fetch({
	            cacheMaxAgeMillis: rc.settings.minimumFetchIntervalMillis,
	            signal: abortSignal
	        });
	        await rc._storageCache.setLastFetchStatus('success');
	    }
	    catch (e) {
	        const lastFetchStatus = hasErrorCode(e, "fetch-throttle" /* FETCH_THROTTLE */)
	            ? 'throttle'
	            : 'failure';
	        await rc._storageCache.setLastFetchStatus(lastFetchStatus);
	        throw e;
	    }
	}
	/**
	 * Gets the {@link Value} for the given key.
	 *
	 * @param remoteConfig - The `RemoteConfig` instance.
	 * @param key - The name of the parameter.
	 *
	 * @returns The value for the given key.
	 *
	 * @public
	 */
	function getValue(remoteConfig, key) {
	    const rc = getModularInstance(remoteConfig);
	    if (!rc._isInitializationComplete) {
	        rc._logger.debug(`A value was requested for key "${key}" before SDK initialization completed.` +
	            ' Await on ensureInitialized if the intent was to get a previously activated value.');
	    }
	    const activeConfig = rc._storageCache.getActiveConfig();
	    if (activeConfig && activeConfig[key] !== undefined) {
	        return new Value('remote', activeConfig[key]);
	    }
	    else if (rc.defaultConfig && rc.defaultConfig[key] !== undefined) {
	        return new Value('default', String(rc.defaultConfig[key]));
	    }
	    rc._logger.debug(`Returning static value for key "${key}".` +
	        ' Define a default or remote value if this is unintentional.');
	    return new Value('static');
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Implements the {@link RemoteConfigClient} abstraction with success response caching.
	 *
	 * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service
	 * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the
	 * Cache API doesn't support matching entries by time.
	 */
	class CachingClient {
	    constructor(client, storage, storageCache, logger) {
	        this.client = client;
	        this.storage = storage;
	        this.storageCache = storageCache;
	        this.logger = logger;
	    }
	    /**
	     * Returns true if the age of the cached fetched configs is less than or equal to
	     * {@link Settings#minimumFetchIntervalInSeconds}.
	     *
	     * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the
	     * native Fetch API.
	     *
	     * <p>Visible for testing.
	     */
	    isCachedDataFresh(cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis) {
	        // Cache can only be fresh if it's populated.
	        if (!lastSuccessfulFetchTimestampMillis) {
	            this.logger.debug('Config fetch cache check. Cache unpopulated.');
	            return false;
	        }
	        // Calculates age of cache entry.
	        const cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;
	        const isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;
	        this.logger.debug('Config fetch cache check.' +
	            ` Cache age millis: ${cacheAgeMillis}.` +
	            ` Cache max age millis (minimumFetchIntervalMillis setting): ${cacheMaxAgeMillis}.` +
	            ` Is cache hit: ${isCachedDataFresh}.`);
	        return isCachedDataFresh;
	    }
	    async fetch(request) {
	        // Reads from persisted storage to avoid cache miss if callers don't wait on initialization.
	        const [lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse] = await Promise.all([
	            this.storage.getLastSuccessfulFetchTimestampMillis(),
	            this.storage.getLastSuccessfulFetchResponse()
	        ]);
	        // Exits early on cache hit.
	        if (lastSuccessfulFetchResponse &&
	            this.isCachedDataFresh(request.cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis)) {
	            return lastSuccessfulFetchResponse;
	        }
	        // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API
	        // that allows the caller to pass an ETag.
	        request.eTag =
	            lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;
	        // Falls back to service on cache miss.
	        const response = await this.client.fetch(request);
	        // Fetch throws for non-success responses, so success is guaranteed here.
	        const storageOperations = [
	            // Uses write-through cache for consistency with synchronous public API.
	            this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())
	        ];
	        if (response.status === 200) {
	            // Caches response only if it has changed, ie non-304 responses.
	            storageOperations.push(this.storage.setLastSuccessfulFetchResponse(response));
	        }
	        await Promise.all(storageOperations);
	        return response;
	    }
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Attempts to get the most accurate browser language setting.
	 *
	 * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.
	 *
	 * <p>Defers default language specification to server logic for consistency.
	 *
	 * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.
	 */
	function getUserLanguage(navigatorLanguage = navigator) {
	    return (
	    // Most reliable, but only supported in Chrome/Firefox.
	    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||
	        // Supported in most browsers, but returns the language of the browser
	        // UI, not the language set in browser settings.
	        navigatorLanguage.language
	    // Polyfill otherwise.
	    );
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Implements the Client abstraction for the Remote Config REST API.
	 */
	class RestClient {
	    constructor(firebaseInstallations, sdkVersion, namespace, projectId, apiKey, appId) {
	        this.firebaseInstallations = firebaseInstallations;
	        this.sdkVersion = sdkVersion;
	        this.namespace = namespace;
	        this.projectId = projectId;
	        this.apiKey = apiKey;
	        this.appId = appId;
	    }
	    /**
	     * Fetches from the Remote Config REST API.
	     *
	     * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't
	     * connect to the network.
	     * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the
	     * fetch response.
	     * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.
	     */
	    async fetch(request) {
	        const [installationId, installationToken] = await Promise.all([
	            this.firebaseInstallations.getId(),
	            this.firebaseInstallations.getToken()
	        ]);
	        const urlBase = window.FIREBASE_REMOTE_CONFIG_URL_BASE ||
	            'https://firebaseremoteconfig.googleapis.com';
	        const url = `${urlBase}/v1/projects/${this.projectId}/namespaces/${this.namespace}:fetch?key=${this.apiKey}`;
	        const headers = {
	            'Content-Type': 'application/json',
	            'Content-Encoding': 'gzip',
	            // Deviates from pure decorator by not passing max-age header since we don't currently have
	            // service behavior using that header.
	            'If-None-Match': request.eTag || '*'
	        };
	        const requestBody = {
	            /* eslint-disable camelcase */
	            sdk_version: this.sdkVersion,
	            app_instance_id: installationId,
	            app_instance_id_token: installationToken,
	            app_id: this.appId,
	            language_code: getUserLanguage()
	            /* eslint-enable camelcase */
	        };
	        const options = {
	            method: 'POST',
	            headers,
	            body: JSON.stringify(requestBody)
	        };
	        // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.
	        const fetchPromise = fetch(url, options);
	        const timeoutPromise = new Promise((_resolve, reject) => {
	            // Maps async event listener to Promise API.
	            request.signal.addEventListener(() => {
	                // Emulates https://heycam.github.io/webidl/#aborterror
	                const error = new Error('The operation was aborted.');
	                error.name = 'AbortError';
	                reject(error);
	            });
	        });
	        let response;
	        try {
	            await Promise.race([fetchPromise, timeoutPromise]);
	            response = await fetchPromise;
	        }
	        catch (originalError) {
	            let errorCode = "fetch-client-network" /* FETCH_NETWORK */;
	            if (originalError.name === 'AbortError') {
	                errorCode = "fetch-timeout" /* FETCH_TIMEOUT */;
	            }
	            throw ERROR_FACTORY.create(errorCode, {
	                originalErrorMessage: originalError.message
	            });
	        }
	        let status = response.status;
	        // Normalizes nullable header to optional.
	        const responseEtag = response.headers.get('ETag') || undefined;
	        let config;
	        let state;
	        // JSON parsing throws SyntaxError if the response body isn't a JSON string.
	        // Requesting application/json and checking for a 200 ensures there's JSON data.
	        if (response.status === 200) {
	            let responseBody;
	            try {
	                responseBody = await response.json();
	            }
	            catch (originalError) {
	                throw ERROR_FACTORY.create("fetch-client-parse" /* FETCH_PARSE */, {
	                    originalErrorMessage: originalError.message
	                });
	            }
	            config = responseBody['entries'];
	            state = responseBody['state'];
	        }
	        // Normalizes based on legacy state.
	        if (state === 'INSTANCE_STATE_UNSPECIFIED') {
	            status = 500;
	        }
	        else if (state === 'NO_CHANGE') {
	            status = 304;
	        }
	        else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {
	            // These cases can be fixed remotely, so normalize to safe value.
	            config = {};
	        }
	        // Normalize to exception-based control flow for non-success cases.
	        // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for
	        // differentiating success states (200 from 304; the state body param is undefined in a
	        // standard 304).
	        if (status !== 304 && status !== 200) {
	            throw ERROR_FACTORY.create("fetch-status" /* FETCH_STATUS */, {
	                httpStatus: status
	            });
	        }
	        return { status, eTag: responseEtag, config };
	    }
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Supports waiting on a backoff by:
	 *
	 * <ul>
	 *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>
	 *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>
	 *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled
	 *       request appear the same.</li>
	 * </ul>
	 *
	 * <p>Visible for testing.
	 */
	function setAbortableTimeout(signal, throttleEndTimeMillis) {
	    return new Promise((resolve, reject) => {
	        // Derives backoff from given end time, normalizing negative numbers to zero.
	        const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);
	        const timeout = setTimeout(resolve, backoffMillis);
	        // Adds listener, rather than sets onabort, because signal is a shared object.
	        signal.addEventListener(() => {
	            clearTimeout(timeout);
	            // If the request completes before this timeout, the rejection has no effect.
	            reject(ERROR_FACTORY.create("fetch-throttle" /* FETCH_THROTTLE */, {
	                throttleEndTimeMillis
	            }));
	        });
	    });
	}
	/**
	 * Returns true if the {@link Error} indicates a fetch request may succeed later.
	 */
	function isRetriableError(e) {
	    if (!(e instanceof FirebaseError) || !e.customData) {
	        return false;
	    }
	    // Uses string index defined by ErrorData, which FirebaseError implements.
	    const httpStatus = Number(e.customData['httpStatus']);
	    return (httpStatus === 429 ||
	        httpStatus === 500 ||
	        httpStatus === 503 ||
	        httpStatus === 504);
	}
	/**
	 * Decorates a Client with retry logic.
	 *
	 * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache
	 * responses (because the SDK has no use for error responses).
	 */
	class RetryingClient {
	    constructor(client, storage) {
	        this.client = client;
	        this.storage = storage;
	    }
	    async fetch(request) {
	        const throttleMetadata = (await this.storage.getThrottleMetadata()) || {
	            backoffCount: 0,
	            throttleEndTimeMillis: Date.now()
	        };
	        return this.attemptFetch(request, throttleMetadata);
	    }
	    /**
	     * A recursive helper for attempting a fetch request repeatedly.
	     *
	     * @throws any non-retriable errors.
	     */
	    async attemptFetch(request, { throttleEndTimeMillis, backoffCount }) {
	        // Starts with a (potentially zero) timeout to support resumption from stored state.
	        // Ensures the throttle end time is honored if the last attempt timed out.
	        // Note the SDK will never make a request if the fetch timeout expires at this point.
	        await setAbortableTimeout(request.signal, throttleEndTimeMillis);
	        try {
	            const response = await this.client.fetch(request);
	            // Note the SDK only clears throttle state if response is success or non-retriable.
	            await this.storage.deleteThrottleMetadata();
	            return response;
	        }
	        catch (e) {
	            if (!isRetriableError(e)) {
	                throw e;
	            }
	            // Increments backoff state.
	            const throttleMetadata = {
	                throttleEndTimeMillis: Date.now() + calculateBackoffMillis(backoffCount),
	                backoffCount: backoffCount + 1
	            };
	            // Persists state.
	            await this.storage.setThrottleMetadata(throttleMetadata);
	            return this.attemptFetch(request, throttleMetadata);
	        }
	    }
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute
	const DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.
	/**
	 * Encapsulates business logic mapping network and storage dependencies to the public SDK API.
	 *
	 * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.
	 */
	class RemoteConfig {
	    constructor(
	    // Required by FirebaseServiceFactory interface.
	    app, 
	    // JS doesn't support private yet
	    // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an
	    // underscore prefix.
	    /**
	     * @internal
	     */
	    _client, 
	    /**
	     * @internal
	     */
	    _storageCache, 
	    /**
	     * @internal
	     */
	    _storage, 
	    /**
	     * @internal
	     */
	    _logger) {
	        this.app = app;
	        this._client = _client;
	        this._storageCache = _storageCache;
	        this._storage = _storage;
	        this._logger = _logger;
	        /**
	         * Tracks completion of initialization promise.
	         * @internal
	         */
	        this._isInitializationComplete = false;
	        this.settings = {
	            fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,
	            minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS
	        };
	        this.defaultConfig = {};
	    }
	    get fetchTimeMillis() {
	        return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;
	    }
	    get lastFetchStatus() {
	        return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';
	    }
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.
	 */
	function toFirebaseError(event, errorCode) {
	    const originalError = event.target.error || undefined;
	    return ERROR_FACTORY.create(errorCode, {
	        originalErrorMessage: originalError && originalError.message
	    });
	}
	/**
	 * A general-purpose store keyed by app + namespace + {@link
	 * ProjectNamespaceKeyFieldValue}.
	 *
	 * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact
	 * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys
	 * for a set of key-value pairs. See {@link Storage#createCompositeKey}.
	 *
	 * <p>Visible for testing.
	 */
	const APP_NAMESPACE_STORE = 'app_namespace_store';
	const DB_NAME = 'firebase_remote_config';
	const DB_VERSION = 1;
	// Visible for testing.
	function openDatabase() {
	    return new Promise((resolve, reject) => {
	        const request = indexedDB.open(DB_NAME, DB_VERSION);
	        request.onerror = event => {
	            reject(toFirebaseError(event, "storage-open" /* STORAGE_OPEN */));
	        };
	        request.onsuccess = event => {
	            resolve(event.target.result);
	        };
	        request.onupgradeneeded = event => {
	            const db = event.target.result;
	            // We don't use 'break' in this switch statement, the fall-through
	            // behavior is what we want, because if there are multiple versions between
	            // the old version and the current version, we want ALL the migrations
	            // that correspond to those versions to run, not only the last one.
	            // eslint-disable-next-line default-case
	            switch (event.oldVersion) {
	                case 0:
	                    db.createObjectStore(APP_NAMESPACE_STORE, {
	                        keyPath: 'compositeKey'
	                    });
	            }
	        };
	    });
	}
	/**
	 * Abstracts data persistence.
	 */
	class Storage {
	    /**
	     * @param appId enables storage segmentation by app (ID + name).
	     * @param appName enables storage segmentation by app (ID + name).
	     * @param namespace enables storage segmentation by namespace.
	     */
	    constructor(appId, appName, namespace, openDbPromise = openDatabase()) {
	        this.appId = appId;
	        this.appName = appName;
	        this.namespace = namespace;
	        this.openDbPromise = openDbPromise;
	    }
	    getLastFetchStatus() {
	        return this.get('last_fetch_status');
	    }
	    setLastFetchStatus(status) {
	        return this.set('last_fetch_status', status);
	    }
	    // This is comparable to a cache entry timestamp. If we need to expire other data, we could
	    // consider adding timestamp to all storage records and an optional max age arg to getters.
	    getLastSuccessfulFetchTimestampMillis() {
	        return this.get('last_successful_fetch_timestamp_millis');
	    }
	    setLastSuccessfulFetchTimestampMillis(timestamp) {
	        return this.set('last_successful_fetch_timestamp_millis', timestamp);
	    }
	    getLastSuccessfulFetchResponse() {
	        return this.get('last_successful_fetch_response');
	    }
	    setLastSuccessfulFetchResponse(response) {
	        return this.set('last_successful_fetch_response', response);
	    }
	    getActiveConfig() {
	        return this.get('active_config');
	    }
	    setActiveConfig(config) {
	        return this.set('active_config', config);
	    }
	    getActiveConfigEtag() {
	        return this.get('active_config_etag');
	    }
	    setActiveConfigEtag(etag) {
	        return this.set('active_config_etag', etag);
	    }
	    getThrottleMetadata() {
	        return this.get('throttle_metadata');
	    }
	    setThrottleMetadata(metadata) {
	        return this.set('throttle_metadata', metadata);
	    }
	    deleteThrottleMetadata() {
	        return this.delete('throttle_metadata');
	    }
	    async get(key) {
	        const db = await this.openDbPromise;
	        return new Promise((resolve, reject) => {
	            const transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');
	            const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);
	            const compositeKey = this.createCompositeKey(key);
	            try {
	                const request = objectStore.get(compositeKey);
	                request.onerror = event => {
	                    reject(toFirebaseError(event, "storage-get" /* STORAGE_GET */));
	                };
	                request.onsuccess = event => {
	                    const result = event.target.result;
	                    if (result) {
	                        resolve(result.value);
	                    }
	                    else {
	                        resolve(undefined);
	                    }
	                };
	            }
	            catch (e) {
	                reject(ERROR_FACTORY.create("storage-get" /* STORAGE_GET */, {
	                    originalErrorMessage: e && e.message
	                }));
	            }
	        });
	    }
	    async set(key, value) {
	        const db = await this.openDbPromise;
	        return new Promise((resolve, reject) => {
	            const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');
	            const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);
	            const compositeKey = this.createCompositeKey(key);
	            try {
	                const request = objectStore.put({
	                    compositeKey,
	                    value
	                });
	                request.onerror = (event) => {
	                    reject(toFirebaseError(event, "storage-set" /* STORAGE_SET */));
	                };
	                request.onsuccess = () => {
	                    resolve();
	                };
	            }
	            catch (e) {
	                reject(ERROR_FACTORY.create("storage-set" /* STORAGE_SET */, {
	                    originalErrorMessage: e && e.message
	                }));
	            }
	        });
	    }
	    async delete(key) {
	        const db = await this.openDbPromise;
	        return new Promise((resolve, reject) => {
	            const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');
	            const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);
	            const compositeKey = this.createCompositeKey(key);
	            try {
	                const request = objectStore.delete(compositeKey);
	                request.onerror = (event) => {
	                    reject(toFirebaseError(event, "storage-delete" /* STORAGE_DELETE */));
	                };
	                request.onsuccess = () => {
	                    resolve();
	                };
	            }
	            catch (e) {
	                reject(ERROR_FACTORY.create("storage-delete" /* STORAGE_DELETE */, {
	                    originalErrorMessage: e && e.message
	                }));
	            }
	        });
	    }
	    // Facilitates composite key functionality (which is unsupported in IE).
	    createCompositeKey(key) {
	        return [this.appId, this.appName, this.namespace, key].join();
	    }
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A memory cache layer over storage to support the SDK's synchronous read requirements.
	 */
	class StorageCache {
	    constructor(storage) {
	        this.storage = storage;
	    }
	    /**
	     * Memory-only getters
	     */
	    getLastFetchStatus() {
	        return this.lastFetchStatus;
	    }
	    getLastSuccessfulFetchTimestampMillis() {
	        return this.lastSuccessfulFetchTimestampMillis;
	    }
	    getActiveConfig() {
	        return this.activeConfig;
	    }
	    /**
	     * Read-ahead getter
	     */
	    async loadFromStorage() {
	        const lastFetchStatusPromise = this.storage.getLastFetchStatus();
	        const lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();
	        const activeConfigPromise = this.storage.getActiveConfig();
	        // Note:
	        // 1. we consistently check for undefined to avoid clobbering defined values
	        //   in memory
	        // 2. we defer awaiting to improve readability, as opposed to destructuring
	        //   a Promise.all result, for example
	        const lastFetchStatus = await lastFetchStatusPromise;
	        if (lastFetchStatus) {
	            this.lastFetchStatus = lastFetchStatus;
	        }
	        const lastSuccessfulFetchTimestampMillis = await lastSuccessfulFetchTimestampMillisPromise;
	        if (lastSuccessfulFetchTimestampMillis) {
	            this.lastSuccessfulFetchTimestampMillis = lastSuccessfulFetchTimestampMillis;
	        }
	        const activeConfig = await activeConfigPromise;
	        if (activeConfig) {
	            this.activeConfig = activeConfig;
	        }
	    }
	    /**
	     * Write-through setters
	     */
	    setLastFetchStatus(status) {
	        this.lastFetchStatus = status;
	        return this.storage.setLastFetchStatus(status);
	    }
	    setLastSuccessfulFetchTimestampMillis(timestampMillis) {
	        this.lastSuccessfulFetchTimestampMillis = timestampMillis;
	        return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);
	    }
	    setActiveConfig(activeConfig) {
	        this.activeConfig = activeConfig;
	        return this.storage.setActiveConfig(activeConfig);
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function registerRemoteConfig() {
	    _registerComponent(new Component(RC_COMPONENT_NAME, remoteConfigFactory, "PUBLIC" /* PUBLIC */).setMultipleInstances(true));
	    registerVersion(name$1, version$1);
	    function remoteConfigFactory(container, { instanceIdentifier: namespace }) {
	        /* Dependencies */
	        // getImmediate for FirebaseApp will always succeed
	        const app = container.getProvider('app-exp').getImmediate();
	        // The following call will always succeed because rc has `import '@firebase/installations'`
	        const installations = container
	            .getProvider('installations-exp-internal')
	            .getImmediate();
	        // Guards against the SDK being used in non-browser environments.
	        if (typeof window === 'undefined') {
	            throw ERROR_FACTORY.create("registration-window" /* REGISTRATION_WINDOW */);
	        }
	        // Normalizes optional inputs.
	        const { projectId, apiKey, appId } = app.options;
	        if (!projectId) {
	            throw ERROR_FACTORY.create("registration-project-id" /* REGISTRATION_PROJECT_ID */);
	        }
	        if (!apiKey) {
	            throw ERROR_FACTORY.create("registration-api-key" /* REGISTRATION_API_KEY */);
	        }
	        if (!appId) {
	            throw ERROR_FACTORY.create("registration-app-id" /* REGISTRATION_APP_ID */);
	        }
	        namespace = namespace || 'firebase';
	        const storage = new Storage(appId, app.name, namespace);
	        const storageCache = new StorageCache(storage);
	        const logger = new Logger(name$1);
	        // Sets ERROR as the default log level.
	        // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.
	        logger.logLevel = LogLevel.ERROR;
	        const restClient = new RestClient(installations, 
	        // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.
	        SDK_VERSION, namespace, projectId, apiKey, appId);
	        const retryingClient = new RetryingClient(restClient, storage);
	        const cachingClient = new CachingClient(retryingClient, storage, storageCache, logger);
	        const remoteConfigInstance = new RemoteConfig(app, cachingClient, storageCache, storage, logger);
	        // Starts warming cache.
	        // eslint-disable-next-line @typescript-eslint/no-floating-promises
	        ensureInitialized(remoteConfigInstance);
	        return remoteConfigInstance;
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// This API is put in a separate file, so we can stub fetchConfig and activate in tests.
	// It's not possible to stub standalone functions from the same module.
	/**
	 *
	 * Performs fetch and activate operations, as a convenience.
	 *
	 * @param remoteConfig - The remote config instance.
	 *
	 * @returns A promise which resolves to true if the current call activated the fetched configs.
	 * If the fetched configs were already activated, the promise will resolve to false.
	 *
	 * @public
	 */
	async function fetchAndActivate(remoteConfig) {
	    remoteConfig = getModularInstance(remoteConfig);
	    await fetchConfig(remoteConfig);
	    return activate(remoteConfig);
	}

	/**
	 * Firebase Remote Config
	 *
	 * @packageDocumentation
	 */
	/** register component and version */
	registerRemoteConfig();

	function _extends$1() {
	  _extends$1 = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$1.apply(this, arguments);
	}

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  _setPrototypeOf(subClass, superClass);
	}

	var propTypes = {exports: {}};

	var reactIs = {exports: {}};

	var reactIs_production_min = {};

	/** @license React v16.13.1
	 * react-is.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
	Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
	function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}reactIs_production_min.AsyncMode=l;reactIs_production_min.ConcurrentMode=m;reactIs_production_min.ContextConsumer=k;reactIs_production_min.ContextProvider=h;reactIs_production_min.Element=c;reactIs_production_min.ForwardRef=n;reactIs_production_min.Fragment=e;reactIs_production_min.Lazy=t;reactIs_production_min.Memo=r;reactIs_production_min.Portal=d;
	reactIs_production_min.Profiler=g;reactIs_production_min.StrictMode=f;reactIs_production_min.Suspense=p;reactIs_production_min.isAsyncMode=function(a){return A(a)||z(a)===l};reactIs_production_min.isConcurrentMode=A;reactIs_production_min.isContextConsumer=function(a){return z(a)===k};reactIs_production_min.isContextProvider=function(a){return z(a)===h};reactIs_production_min.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min.isForwardRef=function(a){return z(a)===n};reactIs_production_min.isFragment=function(a){return z(a)===e};reactIs_production_min.isLazy=function(a){return z(a)===t};
	reactIs_production_min.isMemo=function(a){return z(a)===r};reactIs_production_min.isPortal=function(a){return z(a)===d};reactIs_production_min.isProfiler=function(a){return z(a)===g};reactIs_production_min.isStrictMode=function(a){return z(a)===f};reactIs_production_min.isSuspense=function(a){return z(a)===p};
	reactIs_production_min.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};reactIs_production_min.typeOf=z;

	var reactIs_development = {};

	/** @license React v16.13.1
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */



	if ("development" !== "production") {
	  (function() {

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	// (unstable) APIs that have been removed. Can we remove the symbols?

	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	} // AsyncMode is deprecated along with isAsyncMode

	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }

	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	reactIs_development.AsyncMode = AsyncMode;
	reactIs_development.ConcurrentMode = ConcurrentMode;
	reactIs_development.ContextConsumer = ContextConsumer;
	reactIs_development.ContextProvider = ContextProvider;
	reactIs_development.Element = Element;
	reactIs_development.ForwardRef = ForwardRef;
	reactIs_development.Fragment = Fragment;
	reactIs_development.Lazy = Lazy;
	reactIs_development.Memo = Memo;
	reactIs_development.Portal = Portal;
	reactIs_development.Profiler = Profiler;
	reactIs_development.StrictMode = StrictMode;
	reactIs_development.Suspense = Suspense;
	reactIs_development.isAsyncMode = isAsyncMode;
	reactIs_development.isConcurrentMode = isConcurrentMode;
	reactIs_development.isContextConsumer = isContextConsumer;
	reactIs_development.isContextProvider = isContextProvider;
	reactIs_development.isElement = isElement;
	reactIs_development.isForwardRef = isForwardRef;
	reactIs_development.isFragment = isFragment;
	reactIs_development.isLazy = isLazy;
	reactIs_development.isMemo = isMemo;
	reactIs_development.isPortal = isPortal;
	reactIs_development.isProfiler = isProfiler;
	reactIs_development.isStrictMode = isStrictMode;
	reactIs_development.isSuspense = isSuspense;
	reactIs_development.isValidElementType = isValidElementType;
	reactIs_development.typeOf = typeOf;
	  })();
	}

	if ("development" === 'production') {
	  reactIs.exports = reactIs_production_min;
	} else {
	  reactIs.exports = reactIs_development;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret$3 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	var ReactPropTypesSecret_1 = ReactPropTypesSecret$3;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var printWarning$1 = function() {};

	if ("development" !== 'production') {
	  var ReactPropTypesSecret$2 = ReactPropTypesSecret_1;
	  var loggedTypeFailures = {};
	  var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);

	  printWarning$1 = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes$1(typeSpecs, values, location, componentName, getStack) {
	  if ("development" !== 'production') {
	    for (var typeSpecName in typeSpecs) {
	      if (has$1(typeSpecs, typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error(
	              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
	              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
	            );
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$2);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning$1(
	            (componentName || 'React class') + ': type specification of ' +
	            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
	            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
	            'You may have forgotten to pass an argument to the type checker ' +
	            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
	            'shape all require an argument).'
	          );
	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          printWarning$1(
	            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
	          );
	        }
	      }
	    }
	  }
	}

	/**
	 * Resets warning cache when testing.
	 *
	 * @private
	 */
	checkPropTypes$1.resetWarningCache = function() {
	  if ("development" !== 'production') {
	    loggedTypeFailures = {};
	  }
	};

	var checkPropTypes_1 = checkPropTypes$1;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactIs$1 = reactIs.exports;
	var assign = objectAssign;

	var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
	var checkPropTypes = checkPropTypes_1;

	var has = Function.call.bind(Object.prototype.hasOwnProperty);
	var printWarning = function() {};

	if ("development" !== 'production') {
	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	function emptyFunctionThatReturnsNull() {
	  return null;
	}

	var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    elementType: createElementTypeTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    if ("development" !== 'production') {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret$1) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error(
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if ("development" !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            printWarning(
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret$1);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!ReactIs$1.isValidElementType(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      if ("development" !== 'production') {
	        if (arguments.length > 1) {
	          printWarning(
	            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
	            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
	          );
	        } else {
	          printWarning('Invalid argument supplied to oneOf, expected an array.');
	        }
	      }
	      return emptyFunctionThatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
	        var type = getPreciseType(value);
	        if (type === 'symbol') {
	          return String(value);
	        }
	        return value;
	      });
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (has(propValue, key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      "development" !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunctionThatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning(
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
	        );
	        return emptyFunctionThatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret$1) == null) {
	          return null;
	        }
	      }

	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from
	      // props.
	      var allKeys = assign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // falsy value can't be a Symbol
	    if (!propValue) {
	      return false;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret = ReactPropTypesSecret_1;

	function emptyFunction() {}
	function emptyFunctionWithReset() {}
	emptyFunctionWithReset.resetWarningCache = emptyFunction;

	var factoryWithThrowingShims = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }
	    var err = new Error(
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	    err.name = 'Invariant Violation';
	    throw err;
	  }  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  }  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,

	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    elementType: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim,

	    checkPropTypes: emptyFunctionWithReset,
	    resetWarningCache: emptyFunction
	  };

	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	if ("development" !== 'production') {
	  var ReactIs = reactIs.exports;

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  propTypes.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  propTypes.exports = factoryWithThrowingShims();
	}

	var PropTypes = propTypes.exports;

	/**
	 * Checks if a given element has a CSS class.
	 * 
	 * @param element the element
	 * @param className the CSS class name
	 */
	function hasClass(element, className) {
	  if (element.classList) return !!className && element.classList.contains(className);
	  return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
	}

	/**
	 * Adds a CSS class to a given element.
	 * 
	 * @param element the element
	 * @param className the CSS class name
	 */

	function addClass(element, className) {
	  if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + " " + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + " " + className);
	}

	function replaceClassName(origClass, classToRemove) {
	  return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
	}
	/**
	 * Removes a CSS class from a given element.
	 * 
	 * @param element the element
	 * @param className the CSS class name
	 */


	function removeClass$1(element, className) {
	  if (element.classList) {
	    element.classList.remove(className);
	  } else if (typeof element.className === 'string') {
	    element.className = replaceClassName(element.className, className);
	  } else {
	    element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
	  }
	}

	var config = {
	  disabled: false
	};

	var timeoutsShape = "development" !== 'production' ? PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
	  enter: PropTypes.number,
	  exit: PropTypes.number,
	  appear: PropTypes.number
	}).isRequired]) : null;
	var classNamesShape = "development" !== 'production' ? PropTypes.oneOfType([PropTypes.string, PropTypes.shape({
	  enter: PropTypes.string,
	  exit: PropTypes.string,
	  active: PropTypes.string
	}), PropTypes.shape({
	  enter: PropTypes.string,
	  enterDone: PropTypes.string,
	  enterActive: PropTypes.string,
	  exit: PropTypes.string,
	  exitDone: PropTypes.string,
	  exitActive: PropTypes.string
	})]) : null;

	var TransitionGroupContext = React.createContext(null);

	var UNMOUNTED = 'unmounted';
	var EXITED = 'exited';
	var ENTERING = 'entering';
	var ENTERED = 'entered';
	var EXITING = 'exiting';
	/**
	 * The Transition component lets you describe a transition from one component
	 * state to another _over time_ with a simple declarative API. Most commonly
	 * it's used to animate the mounting and unmounting of a component, but can also
	 * be used to describe in-place transition states as well.
	 *
	 * ---
	 *
	 * **Note**: `Transition` is a platform-agnostic base component. If you're using
	 * transitions in CSS, you'll probably want to use
	 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
	 * instead. It inherits all the features of `Transition`, but contains
	 * additional features necessary to play nice with CSS transitions (hence the
	 * name of the component).
	 *
	 * ---
	 *
	 * By default the `Transition` component does not alter the behavior of the
	 * component it renders, it only tracks "enter" and "exit" states for the
	 * components. It's up to you to give meaning and effect to those states. For
	 * example we can add styles to a component when it enters or exits:
	 *
	 * ```jsx
	 * import { Transition } from 'react-transition-group';
	 *
	 * const duration = 300;
	 *
	 * const defaultStyle = {
	 *   transition: `opacity ${duration}ms ease-in-out`,
	 *   opacity: 0,
	 * }
	 *
	 * const transitionStyles = {
	 *   entering: { opacity: 1 },
	 *   entered:  { opacity: 1 },
	 *   exiting:  { opacity: 0 },
	 *   exited:  { opacity: 0 },
	 * };
	 *
	 * const Fade = ({ in: inProp }) => (
	 *   <Transition in={inProp} timeout={duration}>
	 *     {state => (
	 *       <div style={{
	 *         ...defaultStyle,
	 *         ...transitionStyles[state]
	 *       }}>
	 *         I'm a fade Transition!
	 *       </div>
	 *     )}
	 *   </Transition>
	 * );
	 * ```
	 *
	 * There are 4 main states a Transition can be in:
	 *  - `'entering'`
	 *  - `'entered'`
	 *  - `'exiting'`
	 *  - `'exited'`
	 *
	 * Transition state is toggled via the `in` prop. When `true` the component
	 * begins the "Enter" stage. During this stage, the component will shift from
	 * its current transition state, to `'entering'` for the duration of the
	 * transition and then to the `'entered'` stage once it's complete. Let's take
	 * the following example (we'll use the
	 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
	 *
	 * ```jsx
	 * function App() {
	 *   const [inProp, setInProp] = useState(false);
	 *   return (
	 *     <div>
	 *       <Transition in={inProp} timeout={500}>
	 *         {state => (
	 *           // ...
	 *         )}
	 *       </Transition>
	 *       <button onClick={() => setInProp(true)}>
	 *         Click to Enter
	 *       </button>
	 *     </div>
	 *   );
	 * }
	 * ```
	 *
	 * When the button is clicked the component will shift to the `'entering'` state
	 * and stay there for 500ms (the value of `timeout`) before it finally switches
	 * to `'entered'`.
	 *
	 * When `in` is `false` the same thing happens except the state moves from
	 * `'exiting'` to `'exited'`.
	 */

	var Transition = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose(Transition, _React$Component);

	  function Transition(props, context) {
	    var _this;

	    _this = _React$Component.call(this, props, context) || this;
	    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

	    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
	    var initialStatus;
	    _this.appearStatus = null;

	    if (props.in) {
	      if (appear) {
	        initialStatus = EXITED;
	        _this.appearStatus = ENTERING;
	      } else {
	        initialStatus = ENTERED;
	      }
	    } else {
	      if (props.unmountOnExit || props.mountOnEnter) {
	        initialStatus = UNMOUNTED;
	      } else {
	        initialStatus = EXITED;
	      }
	    }

	    _this.state = {
	      status: initialStatus
	    };
	    _this.nextCallback = null;
	    return _this;
	  }

	  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
	    var nextIn = _ref.in;

	    if (nextIn && prevState.status === UNMOUNTED) {
	      return {
	        status: EXITED
	      };
	    }

	    return null;
	  } // getSnapshotBeforeUpdate(prevProps) {
	  //   let nextStatus = null
	  //   if (prevProps !== this.props) {
	  //     const { status } = this.state
	  //     if (this.props.in) {
	  //       if (status !== ENTERING && status !== ENTERED) {
	  //         nextStatus = ENTERING
	  //       }
	  //     } else {
	  //       if (status === ENTERING || status === ENTERED) {
	  //         nextStatus = EXITING
	  //       }
	  //     }
	  //   }
	  //   return { nextStatus }
	  // }
	  ;

	  var _proto = Transition.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this.updateStatus(true, this.appearStatus);
	  };

	  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var nextStatus = null;

	    if (prevProps !== this.props) {
	      var status = this.state.status;

	      if (this.props.in) {
	        if (status !== ENTERING && status !== ENTERED) {
	          nextStatus = ENTERING;
	        }
	      } else {
	        if (status === ENTERING || status === ENTERED) {
	          nextStatus = EXITING;
	        }
	      }
	    }

	    this.updateStatus(false, nextStatus);
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.cancelNextCallback();
	  };

	  _proto.getTimeouts = function getTimeouts() {
	    var timeout = this.props.timeout;
	    var exit, enter, appear;
	    exit = enter = appear = timeout;

	    if (timeout != null && typeof timeout !== 'number') {
	      exit = timeout.exit;
	      enter = timeout.enter; // TODO: remove fallback for next major

	      appear = timeout.appear !== undefined ? timeout.appear : enter;
	    }

	    return {
	      exit: exit,
	      enter: enter,
	      appear: appear
	    };
	  };

	  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
	    if (mounting === void 0) {
	      mounting = false;
	    }

	    if (nextStatus !== null) {
	      // nextStatus will always be ENTERING or EXITING.
	      this.cancelNextCallback();

	      if (nextStatus === ENTERING) {
	        this.performEnter(mounting);
	      } else {
	        this.performExit();
	      }
	    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
	      this.setState({
	        status: UNMOUNTED
	      });
	    }
	  };

	  _proto.performEnter = function performEnter(mounting) {
	    var _this2 = this;

	    var enter = this.props.enter;
	    var appearing = this.context ? this.context.isMounting : mounting;

	    var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing],
	        maybeNode = _ref2[0],
	        maybeAppearing = _ref2[1];

	    var timeouts = this.getTimeouts();
	    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
	    // if we are mounting and running this it means appear _must_ be set

	    if (!mounting && !enter || config.disabled) {
	      this.safeSetState({
	        status: ENTERED
	      }, function () {
	        _this2.props.onEntered(maybeNode);
	      });
	      return;
	    }

	    this.props.onEnter(maybeNode, maybeAppearing);
	    this.safeSetState({
	      status: ENTERING
	    }, function () {
	      _this2.props.onEntering(maybeNode, maybeAppearing);

	      _this2.onTransitionEnd(enterTimeout, function () {
	        _this2.safeSetState({
	          status: ENTERED
	        }, function () {
	          _this2.props.onEntered(maybeNode, maybeAppearing);
	        });
	      });
	    });
	  };

	  _proto.performExit = function performExit() {
	    var _this3 = this;

	    var exit = this.props.exit;
	    var timeouts = this.getTimeouts();
	    var maybeNode = this.props.nodeRef ? undefined : ReactDOM.findDOMNode(this); // no exit animation skip right to EXITED

	    if (!exit || config.disabled) {
	      this.safeSetState({
	        status: EXITED
	      }, function () {
	        _this3.props.onExited(maybeNode);
	      });
	      return;
	    }

	    this.props.onExit(maybeNode);
	    this.safeSetState({
	      status: EXITING
	    }, function () {
	      _this3.props.onExiting(maybeNode);

	      _this3.onTransitionEnd(timeouts.exit, function () {
	        _this3.safeSetState({
	          status: EXITED
	        }, function () {
	          _this3.props.onExited(maybeNode);
	        });
	      });
	    });
	  };

	  _proto.cancelNextCallback = function cancelNextCallback() {
	    if (this.nextCallback !== null) {
	      this.nextCallback.cancel();
	      this.nextCallback = null;
	    }
	  };

	  _proto.safeSetState = function safeSetState(nextState, callback) {
	    // This shouldn't be necessary, but there are weird race conditions with
	    // setState callbacks and unmounting in testing, so always make sure that
	    // we can cancel any pending setState callbacks after we unmount.
	    callback = this.setNextCallback(callback);
	    this.setState(nextState, callback);
	  };

	  _proto.setNextCallback = function setNextCallback(callback) {
	    var _this4 = this;

	    var active = true;

	    this.nextCallback = function (event) {
	      if (active) {
	        active = false;
	        _this4.nextCallback = null;
	        callback(event);
	      }
	    };

	    this.nextCallback.cancel = function () {
	      active = false;
	    };

	    return this.nextCallback;
	  };

	  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
	    this.setNextCallback(handler);
	    var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
	    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

	    if (!node || doesNotHaveTimeoutOrListener) {
	      setTimeout(this.nextCallback, 0);
	      return;
	    }

	    if (this.props.addEndListener) {
	      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
	          maybeNode = _ref3[0],
	          maybeNextCallback = _ref3[1];

	      this.props.addEndListener(maybeNode, maybeNextCallback);
	    }

	    if (timeout != null) {
	      setTimeout(this.nextCallback, timeout);
	    }
	  };

	  _proto.render = function render() {
	    var status = this.state.status;

	    if (status === UNMOUNTED) {
	      return null;
	    }

	    var _this$props = this.props,
	        children = _this$props.children;
	        _this$props.in;
	        _this$props.mountOnEnter;
	        _this$props.unmountOnExit;
	        _this$props.appear;
	        _this$props.enter;
	        _this$props.exit;
	        _this$props.timeout;
	        _this$props.addEndListener;
	        _this$props.onEnter;
	        _this$props.onEntering;
	        _this$props.onEntered;
	        _this$props.onExit;
	        _this$props.onExiting;
	        _this$props.onExited;
	        _this$props.nodeRef;
	        var childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);

	    return (
	      /*#__PURE__*/
	      // allows for nested Transitions
	      React.createElement(TransitionGroupContext.Provider, {
	        value: null
	      }, typeof children === 'function' ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))
	    );
	  };

	  return Transition;
	}(React.Component);

	Transition.contextType = TransitionGroupContext;
	Transition.propTypes = "development" !== "production" ? {
	  /**
	   * A React reference to DOM element that need to transition:
	   * https://stackoverflow.com/a/51127130/4671932
	   *
	   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
	   *      (e.g. `onEnter`) because user already has direct access to the node.
	   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
	   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
	   *     (see
	   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
	   */
	  nodeRef: PropTypes.shape({
	    current: typeof Element === 'undefined' ? PropTypes.any : function (propValue, key, componentName, location, propFullName, secret) {
	      var value = propValue[key];
	      return PropTypes.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
	    }
	  }),

	  /**
	   * A `function` child can be used instead of a React element. This function is
	   * called with the current transition status (`'entering'`, `'entered'`,
	   * `'exiting'`, `'exited'`), which can be used to apply context
	   * specific props to a component.
	   *
	   * ```jsx
	   * <Transition in={this.state.in} timeout={150}>
	   *   {state => (
	   *     <MyComponent className={`fade fade-${state}`} />
	   *   )}
	   * </Transition>
	   * ```
	   */
	  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,

	  /**
	   * Show the component; triggers the enter or exit states
	   */
	  in: PropTypes.bool,

	  /**
	   * By default the child component is mounted immediately along with
	   * the parent `Transition` component. If you want to "lazy mount" the component on the
	   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
	   * mounted, even on "exited", unless you also specify `unmountOnExit`.
	   */
	  mountOnEnter: PropTypes.bool,

	  /**
	   * By default the child component stays mounted after it reaches the `'exited'` state.
	   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
	   */
	  unmountOnExit: PropTypes.bool,

	  /**
	   * By default the child component does not perform the enter transition when
	   * it first mounts, regardless of the value of `in`. If you want this
	   * behavior, set both `appear` and `in` to `true`.
	   *
	   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
	   * > only adds an additional enter transition. However, in the
	   * > `<CSSTransition>` component that first enter transition does result in
	   * > additional `.appear-*` classes, that way you can choose to style it
	   * > differently.
	   */
	  appear: PropTypes.bool,

	  /**
	   * Enable or disable enter transitions.
	   */
	  enter: PropTypes.bool,

	  /**
	   * Enable or disable exit transitions.
	   */
	  exit: PropTypes.bool,

	  /**
	   * The duration of the transition, in milliseconds.
	   * Required unless `addEndListener` is provided.
	   *
	   * You may specify a single timeout for all transitions:
	   *
	   * ```jsx
	   * timeout={500}
	   * ```
	   *
	   * or individually:
	   *
	   * ```jsx
	   * timeout={{
	   *  appear: 500,
	   *  enter: 300,
	   *  exit: 500,
	   * }}
	   * ```
	   *
	   * - `appear` defaults to the value of `enter`
	   * - `enter` defaults to `0`
	   * - `exit` defaults to `0`
	   *
	   * @type {number | { enter?: number, exit?: number, appear?: number }}
	   */
	  timeout: function timeout(props) {
	    var pt = timeoutsShape;
	    if (!props.addEndListener) pt = pt.isRequired;

	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    return pt.apply(void 0, [props].concat(args));
	  },

	  /**
	   * Add a custom transition end trigger. Called with the transitioning
	   * DOM node and a `done` callback. Allows for more fine grained transition end
	   * logic. Timeouts are still used as a fallback if provided.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * ```jsx
	   * addEndListener={(node, done) => {
	   *   // use the css transitionend event to mark the finish of a transition
	   *   node.addEventListener('transitionend', done, false);
	   * }}
	   * ```
	   */
	  addEndListener: PropTypes.func,

	  /**
	   * Callback fired before the "entering" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool) -> void
	   */
	  onEnter: PropTypes.func,

	  /**
	   * Callback fired after the "entering" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntering: PropTypes.func,

	  /**
	   * Callback fired after the "entered" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool) -> void
	   */
	  onEntered: PropTypes.func,

	  /**
	   * Callback fired before the "exiting" status is applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExit: PropTypes.func,

	  /**
	   * Callback fired after the "exiting" status is applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExiting: PropTypes.func,

	  /**
	   * Callback fired after the "exited" status is applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExited: PropTypes.func
	} : {}; // Name the function so it is clearer in the documentation

	function noop$1() {}

	Transition.defaultProps = {
	  in: false,
	  mountOnEnter: false,
	  unmountOnExit: false,
	  appear: false,
	  enter: true,
	  exit: true,
	  onEnter: noop$1,
	  onEntering: noop$1,
	  onEntered: noop$1,
	  onExit: noop$1,
	  onExiting: noop$1,
	  onExited: noop$1
	};
	Transition.UNMOUNTED = UNMOUNTED;
	Transition.EXITED = EXITED;
	Transition.ENTERING = ENTERING;
	Transition.ENTERED = ENTERED;
	Transition.EXITING = EXITING;

	var _addClass = function addClass$1(node, classes) {
	  return node && classes && classes.split(' ').forEach(function (c) {
	    return addClass(node, c);
	  });
	};

	var removeClass = function removeClass(node, classes) {
	  return node && classes && classes.split(' ').forEach(function (c) {
	    return removeClass$1(node, c);
	  });
	};
	/**
	 * A transition component inspired by the excellent
	 * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should
	 * use it if you're using CSS transitions or animations. It's built upon the
	 * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
	 * component, so it inherits all of its props.
	 *
	 * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
	 * and `exit` states of the transition. The first class is applied and then a
	 * second `*-active` class in order to activate the CSS transition. After the
	 * transition, matching `*-done` class names are applied to persist the
	 * transition state.
	 *
	 * ```jsx
	 * function App() {
	 *   const [inProp, setInProp] = useState(false);
	 *   return (
	 *     <div>
	 *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
	 *         <div>
	 *           {"I'll receive my-node-* classes"}
	 *         </div>
	 *       </CSSTransition>
	 *       <button type="button" onClick={() => setInProp(true)}>
	 *         Click to Enter
	 *       </button>
	 *     </div>
	 *   );
	 * }
	 * ```
	 *
	 * When the `in` prop is set to `true`, the child component will first receive
	 * the class `example-enter`, then the `example-enter-active` will be added in
	 * the next tick. `CSSTransition` [forces a
	 * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
	 * between before adding the `example-enter-active`. This is an important trick
	 * because it allows us to transition between `example-enter` and
	 * `example-enter-active` even though they were added immediately one after
	 * another. Most notably, this is what makes it possible for us to animate
	 * _appearance_.
	 *
	 * ```css
	 * .my-node-enter {
	 *   opacity: 0;
	 * }
	 * .my-node-enter-active {
	 *   opacity: 1;
	 *   transition: opacity 200ms;
	 * }
	 * .my-node-exit {
	 *   opacity: 1;
	 * }
	 * .my-node-exit-active {
	 *   opacity: 0;
	 *   transition: opacity 200ms;
	 * }
	 * ```
	 *
	 * `*-active` classes represent which styles you want to animate **to**, so it's
	 * important to add `transition` declaration only to them, otherwise transitions
	 * might not behave as intended! This might not be obvious when the transitions
	 * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in
	 * the example above (minus `transition`), but it becomes apparent in more
	 * complex transitions.
	 *
	 * **Note**: If you're using the
	 * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)
	 * prop, make sure to define styles for `.appear-*` classes as well.
	 */


	var CSSTransition = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose(CSSTransition, _React$Component);

	  function CSSTransition() {
	    var _this;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
	    _this.appliedClasses = {
	      appear: {},
	      enter: {},
	      exit: {}
	    };

	    _this.onEnter = function (maybeNode, maybeAppearing) {
	      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),
	          node = _this$resolveArgument[0],
	          appearing = _this$resolveArgument[1];

	      _this.removeClasses(node, 'exit');

	      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');

	      if (_this.props.onEnter) {
	        _this.props.onEnter(maybeNode, maybeAppearing);
	      }
	    };

	    _this.onEntering = function (maybeNode, maybeAppearing) {
	      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),
	          node = _this$resolveArgument2[0],
	          appearing = _this$resolveArgument2[1];

	      var type = appearing ? 'appear' : 'enter';

	      _this.addClass(node, type, 'active');

	      if (_this.props.onEntering) {
	        _this.props.onEntering(maybeNode, maybeAppearing);
	      }
	    };

	    _this.onEntered = function (maybeNode, maybeAppearing) {
	      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),
	          node = _this$resolveArgument3[0],
	          appearing = _this$resolveArgument3[1];

	      var type = appearing ? 'appear' : 'enter';

	      _this.removeClasses(node, type);

	      _this.addClass(node, type, 'done');

	      if (_this.props.onEntered) {
	        _this.props.onEntered(maybeNode, maybeAppearing);
	      }
	    };

	    _this.onExit = function (maybeNode) {
	      var _this$resolveArgument4 = _this.resolveArguments(maybeNode),
	          node = _this$resolveArgument4[0];

	      _this.removeClasses(node, 'appear');

	      _this.removeClasses(node, 'enter');

	      _this.addClass(node, 'exit', 'base');

	      if (_this.props.onExit) {
	        _this.props.onExit(maybeNode);
	      }
	    };

	    _this.onExiting = function (maybeNode) {
	      var _this$resolveArgument5 = _this.resolveArguments(maybeNode),
	          node = _this$resolveArgument5[0];

	      _this.addClass(node, 'exit', 'active');

	      if (_this.props.onExiting) {
	        _this.props.onExiting(maybeNode);
	      }
	    };

	    _this.onExited = function (maybeNode) {
	      var _this$resolveArgument6 = _this.resolveArguments(maybeNode),
	          node = _this$resolveArgument6[0];

	      _this.removeClasses(node, 'exit');

	      _this.addClass(node, 'exit', 'done');

	      if (_this.props.onExited) {
	        _this.props.onExited(maybeNode);
	      }
	    };

	    _this.resolveArguments = function (maybeNode, maybeAppearing) {
	      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`
	      : [maybeNode, maybeAppearing];
	    };

	    _this.getClassNames = function (type) {
	      var classNames = _this.props.classNames;
	      var isStringClassNames = typeof classNames === 'string';
	      var prefix = isStringClassNames && classNames ? classNames + "-" : '';
	      var baseClassName = isStringClassNames ? "" + prefix + type : classNames[type];
	      var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
	      var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
	      return {
	        baseClassName: baseClassName,
	        activeClassName: activeClassName,
	        doneClassName: doneClassName
	      };
	    };

	    return _this;
	  }

	  var _proto = CSSTransition.prototype;

	  _proto.addClass = function addClass(node, type, phase) {
	    var className = this.getClassNames(type)[phase + "ClassName"];

	    var _this$getClassNames = this.getClassNames('enter'),
	        doneClassName = _this$getClassNames.doneClassName;

	    if (type === 'appear' && phase === 'done' && doneClassName) {
	      className += " " + doneClassName;
	    } // This is to force a repaint,
	    // which is necessary in order to transition styles when adding a class name.


	    if (phase === 'active') {
	      /* eslint-disable no-unused-expressions */
	      node && node.scrollTop;
	    }

	    if (className) {
	      this.appliedClasses[type][phase] = className;

	      _addClass(node, className);
	    }
	  };

	  _proto.removeClasses = function removeClasses(node, type) {
	    var _this$appliedClasses$ = this.appliedClasses[type],
	        baseClassName = _this$appliedClasses$.base,
	        activeClassName = _this$appliedClasses$.active,
	        doneClassName = _this$appliedClasses$.done;
	    this.appliedClasses[type] = {};

	    if (baseClassName) {
	      removeClass(node, baseClassName);
	    }

	    if (activeClassName) {
	      removeClass(node, activeClassName);
	    }

	    if (doneClassName) {
	      removeClass(node, doneClassName);
	    }
	  };

	  _proto.render = function render() {
	    var _this$props = this.props;
	        _this$props.classNames;
	        var props = _objectWithoutPropertiesLoose(_this$props, ["classNames"]);

	    return /*#__PURE__*/React.createElement(Transition, _extends$1({}, props, {
	      onEnter: this.onEnter,
	      onEntered: this.onEntered,
	      onEntering: this.onEntering,
	      onExit: this.onExit,
	      onExiting: this.onExiting,
	      onExited: this.onExited
	    }));
	  };

	  return CSSTransition;
	}(React.Component);

	CSSTransition.defaultProps = {
	  classNames: ''
	};
	CSSTransition.propTypes = "development" !== "production" ? _extends$1({}, Transition.propTypes, {
	  /**
	   * The animation classNames applied to the component as it appears, enters,
	   * exits or has finished the transition. A single name can be provided, which
	   * will be suffixed for each stage, e.g. `classNames="fade"` applies:
	   *
	   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
	   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
	   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
	   *
	   * A few details to note about how these classes are applied:
	   *
	   * 1. They are _joined_ with the ones that are already defined on the child
	   *    component, so if you want to add some base styles, you can use
	   *    `className` without worrying that it will be overridden.
	   *
	   * 2. If the transition component mounts with `in={false}`, no classes are
	   *    applied yet. You might be expecting `*-exit-done`, but if you think
	   *    about it, a component cannot finish exiting if it hasn't entered yet.
	   *
	   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
	   *    allows you to define different behavior for when appearing is done and
	   *    when regular entering is done, using selectors like
	   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
	   *    an epic entrance animation when element first appears in the DOM using
	   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
	   *    simply use `fade-enter-done` for defining both cases.
	   *
	   * Each individual classNames can also be specified independently like:
	   *
	   * ```js
	   * classNames={{
	   *  appear: 'my-appear',
	   *  appearActive: 'my-active-appear',
	   *  appearDone: 'my-done-appear',
	   *  enter: 'my-enter',
	   *  enterActive: 'my-active-enter',
	   *  enterDone: 'my-done-enter',
	   *  exit: 'my-exit',
	   *  exitActive: 'my-active-exit',
	   *  exitDone: 'my-done-exit',
	   * }}
	   * ```
	   *
	   * If you want to set these classes using CSS Modules:
	   *
	   * ```js
	   * import styles from './styles.css';
	   * ```
	   *
	   * you might want to use camelCase in your CSS file, that way could simply
	   * spread them instead of listing them one by one:
	   *
	   * ```js
	   * classNames={{ ...styles }}
	   * ```
	   *
	   * @type {string | {
	   *  appear?: string,
	   *  appearActive?: string,
	   *  appearDone?: string,
	   *  enter?: string,
	   *  enterActive?: string,
	   *  enterDone?: string,
	   *  exit?: string,
	   *  exitActive?: string,
	   *  exitDone?: string,
	   * }}
	   */
	  classNames: classNamesShape,

	  /**
	   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
	   * applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEnter: PropTypes.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'enter-active' or
	   * 'appear-active' class is applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntering: PropTypes.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'enter' or
	   * 'appear' classes are **removed** and the `done` class is added to the DOM node.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntered: PropTypes.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'exit' class is
	   * applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed
	   *
	   * @type Function(node: HtmlElement)
	   */
	  onExit: PropTypes.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed
	   *
	   * @type Function(node: HtmlElement)
	   */
	  onExiting: PropTypes.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'exit' classes
	   * are **removed** and the `exit-done` class is added to the DOM node.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed
	   *
	   * @type Function(node: HtmlElement)
	   */
	  onExited: PropTypes.func
	}) : {};

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	/**
	 * Given `this.props.children`, return an object mapping key to child.
	 *
	 * @param {*} children `this.props.children`
	 * @return {object} Mapping of key to child
	 */

	function getChildMapping(children, mapFn) {
	  var mapper = function mapper(child) {
	    return mapFn && react.exports.isValidElement(child) ? mapFn(child) : child;
	  };

	  var result = Object.create(null);
	  if (children) react.exports.Children.map(children, function (c) {
	    return c;
	  }).forEach(function (child) {
	    // run the map function here instead so that the key is the computed one
	    result[child.key] = mapper(child);
	  });
	  return result;
	}
	/**
	 * When you're adding or removing children some may be added or removed in the
	 * same render pass. We want to show *both* since we want to simultaneously
	 * animate elements in and out. This function takes a previous set of keys
	 * and a new set of keys and merges them with its best guess of the correct
	 * ordering. In the future we may expose some of the utilities in
	 * ReactMultiChild to make this easy, but for now React itself does not
	 * directly have this concept of the union of prevChildren and nextChildren
	 * so we implement it here.
	 *
	 * @param {object} prev prev children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @param {object} next next children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @return {object} a key set that contains all keys in `prev` and all keys
	 * in `next` in a reasonable order.
	 */

	function mergeChildMappings(prev, next) {
	  prev = prev || {};
	  next = next || {};

	  function getValueForKey(key) {
	    return key in next ? next[key] : prev[key];
	  } // For each key of `next`, the list of keys to insert before that key in
	  // the combined list


	  var nextKeysPending = Object.create(null);
	  var pendingKeys = [];

	  for (var prevKey in prev) {
	    if (prevKey in next) {
	      if (pendingKeys.length) {
	        nextKeysPending[prevKey] = pendingKeys;
	        pendingKeys = [];
	      }
	    } else {
	      pendingKeys.push(prevKey);
	    }
	  }

	  var i;
	  var childMapping = {};

	  for (var nextKey in next) {
	    if (nextKeysPending[nextKey]) {
	      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	        var pendingNextKey = nextKeysPending[nextKey][i];
	        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	      }
	    }

	    childMapping[nextKey] = getValueForKey(nextKey);
	  } // Finally, add the keys which didn't appear before any key in `next`


	  for (i = 0; i < pendingKeys.length; i++) {
	    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	  }

	  return childMapping;
	}

	function getProp(child, prop, props) {
	  return props[prop] != null ? props[prop] : child.props[prop];
	}

	function getInitialChildMapping(props, onExited) {
	  return getChildMapping(props.children, function (child) {
	    return react.exports.cloneElement(child, {
	      onExited: onExited.bind(null, child),
	      in: true,
	      appear: getProp(child, 'appear', props),
	      enter: getProp(child, 'enter', props),
	      exit: getProp(child, 'exit', props)
	    });
	  });
	}
	function getNextChildMapping(nextProps, prevChildMapping, onExited) {
	  var nextChildMapping = getChildMapping(nextProps.children);
	  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
	  Object.keys(children).forEach(function (key) {
	    var child = children[key];
	    if (!react.exports.isValidElement(child)) return;
	    var hasPrev = (key in prevChildMapping);
	    var hasNext = (key in nextChildMapping);
	    var prevChild = prevChildMapping[key];
	    var isLeaving = react.exports.isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)

	    if (hasNext && (!hasPrev || isLeaving)) {
	      // console.log('entering', key)
	      children[key] = react.exports.cloneElement(child, {
	        onExited: onExited.bind(null, child),
	        in: true,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    } else if (!hasNext && hasPrev && !isLeaving) {
	      // item is old (exiting)
	      // console.log('leaving', key)
	      children[key] = react.exports.cloneElement(child, {
	        in: false
	      });
	    } else if (hasNext && hasPrev && react.exports.isValidElement(prevChild)) {
	      // item hasn't changed transition states
	      // copy over the last transition props;
	      // console.log('unchanged', key)
	      children[key] = react.exports.cloneElement(child, {
	        onExited: onExited.bind(null, child),
	        in: prevChild.props.in,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    }
	  });
	  return children;
	}

	var values = Object.values || function (obj) {
	  return Object.keys(obj).map(function (k) {
	    return obj[k];
	  });
	};

	var defaultProps = {
	  component: 'div',
	  childFactory: function childFactory(child) {
	    return child;
	  }
	};
	/**
	 * The `<TransitionGroup>` component manages a set of transition components
	 * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
	 * components, `<TransitionGroup>` is a state machine for managing the mounting
	 * and unmounting of components over time.
	 *
	 * Consider the example below. As items are removed or added to the TodoList the
	 * `in` prop is toggled automatically by the `<TransitionGroup>`.
	 *
	 * Note that `<TransitionGroup>`  does not define any animation behavior!
	 * Exactly _how_ a list item animates is up to the individual transition
	 * component. This means you can mix and match animations across different list
	 * items.
	 */

	var TransitionGroup = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose(TransitionGroup, _React$Component);

	  function TransitionGroup(props, context) {
	    var _this;

	    _this = _React$Component.call(this, props, context) || this;

	    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear


	    _this.state = {
	      contextValue: {
	        isMounting: true
	      },
	      handleExited: handleExited,
	      firstRender: true
	    };
	    return _this;
	  }

	  var _proto = TransitionGroup.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this.mounted = true;
	    this.setState({
	      contextValue: {
	        isMounting: false
	      }
	    });
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.mounted = false;
	  };

	  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
	    var prevChildMapping = _ref.children,
	        handleExited = _ref.handleExited,
	        firstRender = _ref.firstRender;
	    return {
	      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
	      firstRender: false
	    };
	  } // node is `undefined` when user provided `nodeRef` prop
	  ;

	  _proto.handleExited = function handleExited(child, node) {
	    var currentChildMapping = getChildMapping(this.props.children);
	    if (child.key in currentChildMapping) return;

	    if (child.props.onExited) {
	      child.props.onExited(node);
	    }

	    if (this.mounted) {
	      this.setState(function (state) {
	        var children = _extends$1({}, state.children);

	        delete children[child.key];
	        return {
	          children: children
	        };
	      });
	    }
	  };

	  _proto.render = function render() {
	    var _this$props = this.props,
	        Component = _this$props.component,
	        childFactory = _this$props.childFactory,
	        props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);

	    var contextValue = this.state.contextValue;
	    var children = values(this.state.children).map(childFactory);
	    delete props.appear;
	    delete props.enter;
	    delete props.exit;

	    if (Component === null) {
	      return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {
	        value: contextValue
	      }, children);
	    }

	    return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {
	      value: contextValue
	    }, /*#__PURE__*/React.createElement(Component, props, children));
	  };

	  return TransitionGroup;
	}(React.Component);

	TransitionGroup.propTypes = "development" !== "production" ? {
	  /**
	   * `<TransitionGroup>` renders a `<div>` by default. You can change this
	   * behavior by providing a `component` prop.
	   * If you use React v16+ and would like to avoid a wrapping `<div>` element
	   * you can pass in `component={null}`. This is useful if the wrapping div
	   * borks your css styles.
	   */
	  component: PropTypes.any,

	  /**
	   * A set of `<Transition>` components, that are toggled `in` and out as they
	   * leave. the `<TransitionGroup>` will inject specific transition props, so
	   * remember to spread them through if you are wrapping the `<Transition>` as
	   * with our `<Fade>` example.
	   *
	   * While this component is meant for multiple `Transition` or `CSSTransition`
	   * children, sometimes you may want to have a single transition child with
	   * content that you want to be transitioned out and in when you change it
	   * (e.g. routes, images etc.) In that case you can change the `key` prop of
	   * the transition child as you change its content, this will cause
	   * `TransitionGroup` to transition the child out and back in.
	   */
	  children: PropTypes.node,

	  /**
	   * A convenience prop that enables or disables appear animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  appear: PropTypes.bool,

	  /**
	   * A convenience prop that enables or disables enter animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  enter: PropTypes.bool,

	  /**
	   * A convenience prop that enables or disables exit animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  exit: PropTypes.bool,

	  /**
	   * You may need to apply reactive updates to a child as it is exiting.
	   * This is generally done by using `cloneElement` however in the case of an exiting
	   * child the element has already been removed and not accessible to the consumer.
	   *
	   * If you do need to update a child as it leaves you can provide a `childFactory`
	   * to wrap every child, even the ones that are leaving.
	   *
	   * @type Function(child: ReactElement) -> ReactElement
	   */
	  childFactory: PropTypes.func
	} : {};
	TransitionGroup.defaultProps = defaultProps;

	var scrollLock = {exports: {}};

	(function (module, exports) {
	(function webpackUniversalModuleDefinition(root, factory) {
		module.exports = factory();
	})(commonjsGlobal$1, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) value = __webpack_require__(value);
	/******/ 		if(mode & 8) return value;
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	__webpack_require__.r(__webpack_exports__);

	// CONCATENATED MODULE: ./src/tools.js
	var argumentAsArray = function argumentAsArray(argument) {
	  return Array.isArray(argument) ? argument : [argument];
	};
	var isElement = function isElement(target) {
	  return target instanceof Node;
	};
	var isElementList = function isElementList(nodeList) {
	  return nodeList instanceof NodeList;
	};
	var eachNode = function eachNode(nodeList, callback) {
	  if (nodeList && callback) {
	    nodeList = isElementList(nodeList) ? nodeList : [nodeList];

	    for (var i = 0; i < nodeList.length; i++) {
	      if (callback(nodeList[i], i, nodeList.length) === true) {
	        break;
	      }
	    }
	  }
	};
	var throwError = function throwError(message) {
	  return console.error("[scroll-lock] ".concat(message));
	};
	var arrayAsSelector = function arrayAsSelector(array) {
	  if (Array.isArray(array)) {
	    var selector = array.join(', ');
	    return selector;
	  }
	};
	var nodeListAsArray = function nodeListAsArray(nodeList) {
	  var nodes = [];
	  eachNode(nodeList, function (node) {
	    return nodes.push(node);
	  });
	  return nodes;
	};
	var findParentBySelector = function findParentBySelector($el, selector) {
	  var self = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
	  var $root = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : document;

	  if (self && nodeListAsArray($root.querySelectorAll(selector)).indexOf($el) !== -1) {
	    return $el;
	  }

	  while (($el = $el.parentElement) && nodeListAsArray($root.querySelectorAll(selector)).indexOf($el) === -1) {
	  }

	  return $el;
	};
	var elementHasSelector = function elementHasSelector($el, selector) {
	  var $root = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;
	  var has = nodeListAsArray($root.querySelectorAll(selector)).indexOf($el) !== -1;
	  return has;
	};
	var elementHasOverflowHidden = function elementHasOverflowHidden($el) {
	  if ($el) {
	    var computedStyle = getComputedStyle($el);
	    var overflowIsHidden = computedStyle.overflow === 'hidden';
	    return overflowIsHidden;
	  }
	};
	var elementScrollTopOnStart = function elementScrollTopOnStart($el) {
	  if ($el) {
	    if (elementHasOverflowHidden($el)) {
	      return true;
	    }

	    var scrollTop = $el.scrollTop;
	    return scrollTop <= 0;
	  }
	};
	var elementScrollTopOnEnd = function elementScrollTopOnEnd($el) {
	  if ($el) {
	    if (elementHasOverflowHidden($el)) {
	      return true;
	    }

	    var scrollTop = $el.scrollTop;
	    var scrollHeight = $el.scrollHeight;
	    var scrollTopWithHeight = scrollTop + $el.offsetHeight;
	    return scrollTopWithHeight >= scrollHeight;
	  }
	};
	var elementScrollLeftOnStart = function elementScrollLeftOnStart($el) {
	  if ($el) {
	    if (elementHasOverflowHidden($el)) {
	      return true;
	    }

	    var scrollLeft = $el.scrollLeft;
	    return scrollLeft <= 0;
	  }
	};
	var elementScrollLeftOnEnd = function elementScrollLeftOnEnd($el) {
	  if ($el) {
	    if (elementHasOverflowHidden($el)) {
	      return true;
	    }

	    var scrollLeft = $el.scrollLeft;
	    var scrollWidth = $el.scrollWidth;
	    var scrollLeftWithWidth = scrollLeft + $el.offsetWidth;
	    return scrollLeftWithWidth >= scrollWidth;
	  }
	};
	var elementIsScrollableField = function elementIsScrollableField($el) {
	  var selector = 'textarea, [contenteditable="true"]';
	  return elementHasSelector($el, selector);
	};
	var elementIsInputRange = function elementIsInputRange($el) {
	  var selector = 'input[type="range"]';
	  return elementHasSelector($el, selector);
	};
	// CONCATENATED MODULE: ./src/scroll-lock.js
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "disablePageScroll", function() { return disablePageScroll; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enablePageScroll", function() { return enablePageScroll; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getScrollState", function() { return getScrollState; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clearQueueScrollLocks", function() { return clearQueueScrollLocks; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTargetScrollBarWidth", function() { return scroll_lock_getTargetScrollBarWidth; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCurrentTargetScrollBarWidth", function() { return scroll_lock_getCurrentTargetScrollBarWidth; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPageScrollBarWidth", function() { return getPageScrollBarWidth; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCurrentPageScrollBarWidth", function() { return getCurrentPageScrollBarWidth; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addScrollableTarget", function() { return scroll_lock_addScrollableTarget; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeScrollableTarget", function() { return scroll_lock_removeScrollableTarget; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addScrollableSelector", function() { return scroll_lock_addScrollableSelector; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeScrollableSelector", function() { return scroll_lock_removeScrollableSelector; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addLockableTarget", function() { return scroll_lock_addLockableTarget; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addLockableSelector", function() { return scroll_lock_addLockableSelector; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setFillGapMethod", function() { return scroll_lock_setFillGapMethod; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addFillGapTarget", function() { return scroll_lock_addFillGapTarget; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeFillGapTarget", function() { return scroll_lock_removeFillGapTarget; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addFillGapSelector", function() { return scroll_lock_addFillGapSelector; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeFillGapSelector", function() { return scroll_lock_removeFillGapSelector; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "refillGaps", function() { return refillGaps; });
	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


	var FILL_GAP_AVAILABLE_METHODS = ['padding', 'margin', 'width', 'max-width', 'none'];
	var TOUCH_DIRECTION_DETECT_OFFSET = 3;
	var state = {
	  scroll: true,
	  queue: 0,
	  scrollableSelectors: ['[data-scroll-lock-scrollable]'],
	  lockableSelectors: ['body', '[data-scroll-lock-lockable]'],
	  fillGapSelectors: ['body', '[data-scroll-lock-fill-gap]', '[data-scroll-lock-lockable]'],
	  fillGapMethod: FILL_GAP_AVAILABLE_METHODS[0],
	  //
	  startTouchY: 0,
	  startTouchX: 0
	};
	var disablePageScroll = function disablePageScroll(target) {
	  if (state.queue <= 0) {
	    state.scroll = false;
	    scroll_lock_hideLockableOverflow();
	    fillGaps();
	  }

	  scroll_lock_addScrollableTarget(target);
	  state.queue++;
	};
	var enablePageScroll = function enablePageScroll(target) {
	  state.queue > 0 && state.queue--;

	  if (state.queue <= 0) {
	    state.scroll = true;
	    scroll_lock_showLockableOverflow();
	    unfillGaps();
	  }

	  scroll_lock_removeScrollableTarget(target);
	};
	var getScrollState = function getScrollState() {
	  return state.scroll;
	};
	var clearQueueScrollLocks = function clearQueueScrollLocks() {
	  state.queue = 0;
	};
	var scroll_lock_getTargetScrollBarWidth = function getTargetScrollBarWidth($target) {
	  var onlyExists = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	  if (isElement($target)) {
	    var currentOverflowYProperty = $target.style.overflowY;

	    if (onlyExists) {
	      if (!getScrollState()) {
	        $target.style.overflowY = $target.getAttribute('data-scroll-lock-saved-overflow-y-property');
	      }
	    } else {
	      $target.style.overflowY = 'scroll';
	    }

	    var width = scroll_lock_getCurrentTargetScrollBarWidth($target);
	    $target.style.overflowY = currentOverflowYProperty;
	    return width;
	  } else {
	    return 0;
	  }
	};
	var scroll_lock_getCurrentTargetScrollBarWidth = function getCurrentTargetScrollBarWidth($target) {
	  if (isElement($target)) {
	    if ($target === document.body) {
	      var documentWidth = document.documentElement.clientWidth;
	      var windowWidth = window.innerWidth;
	      var currentWidth = windowWidth - documentWidth;
	      return currentWidth;
	    } else {
	      var borderLeftWidthCurrentProperty = $target.style.borderLeftWidth;
	      var borderRightWidthCurrentProperty = $target.style.borderRightWidth;
	      $target.style.borderLeftWidth = '0px';
	      $target.style.borderRightWidth = '0px';

	      var _currentWidth = $target.offsetWidth - $target.clientWidth;

	      $target.style.borderLeftWidth = borderLeftWidthCurrentProperty;
	      $target.style.borderRightWidth = borderRightWidthCurrentProperty;
	      return _currentWidth;
	    }
	  } else {
	    return 0;
	  }
	};
	var getPageScrollBarWidth = function getPageScrollBarWidth() {
	  var onlyExists = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	  return scroll_lock_getTargetScrollBarWidth(document.body, onlyExists);
	};
	var getCurrentPageScrollBarWidth = function getCurrentPageScrollBarWidth() {
	  return scroll_lock_getCurrentTargetScrollBarWidth(document.body);
	};
	var scroll_lock_addScrollableTarget = function addScrollableTarget(target) {
	  if (target) {
	    var targets = argumentAsArray(target);
	    targets.map(function ($targets) {
	      eachNode($targets, function ($target) {
	        if (isElement($target)) {
	          $target.setAttribute('data-scroll-lock-scrollable', '');
	        } else {
	          throwError("\"".concat($target, "\" is not a Element."));
	        }
	      });
	    });
	  }
	};
	var scroll_lock_removeScrollableTarget = function removeScrollableTarget(target) {
	  if (target) {
	    var targets = argumentAsArray(target);
	    targets.map(function ($targets) {
	      eachNode($targets, function ($target) {
	        if (isElement($target)) {
	          $target.removeAttribute('data-scroll-lock-scrollable');
	        } else {
	          throwError("\"".concat($target, "\" is not a Element."));
	        }
	      });
	    });
	  }
	};
	var scroll_lock_addScrollableSelector = function addScrollableSelector(selector) {
	  if (selector) {
	    var selectors = argumentAsArray(selector);
	    selectors.map(function (selector) {
	      state.scrollableSelectors.push(selector);
	    });
	  }
	};
	var scroll_lock_removeScrollableSelector = function removeScrollableSelector(selector) {
	  if (selector) {
	    var selectors = argumentAsArray(selector);
	    selectors.map(function (selector) {
	      state.scrollableSelectors = state.scrollableSelectors.filter(function (sSelector) {
	        return sSelector !== selector;
	      });
	    });
	  }
	};
	var scroll_lock_addLockableTarget = function addLockableTarget(target) {
	  if (target) {
	    var targets = argumentAsArray(target);
	    targets.map(function ($targets) {
	      eachNode($targets, function ($target) {
	        if (isElement($target)) {
	          $target.setAttribute('data-scroll-lock-lockable', '');
	        } else {
	          throwError("\"".concat($target, "\" is not a Element."));
	        }
	      });
	    });

	    if (!getScrollState()) {
	      scroll_lock_hideLockableOverflow();
	    }
	  }
	};
	var scroll_lock_addLockableSelector = function addLockableSelector(selector) {
	  if (selector) {
	    var selectors = argumentAsArray(selector);
	    selectors.map(function (selector) {
	      state.lockableSelectors.push(selector);
	    });

	    if (!getScrollState()) {
	      scroll_lock_hideLockableOverflow();
	    }

	    scroll_lock_addFillGapSelector(selector);
	  }
	};
	var scroll_lock_setFillGapMethod = function setFillGapMethod(method) {
	  if (method) {
	    if (FILL_GAP_AVAILABLE_METHODS.indexOf(method) !== -1) {
	      state.fillGapMethod = method;
	      refillGaps();
	    } else {
	      var methods = FILL_GAP_AVAILABLE_METHODS.join(', ');
	      throwError("\"".concat(method, "\" method is not available!\nAvailable fill gap methods: ").concat(methods, "."));
	    }
	  }
	};
	var scroll_lock_addFillGapTarget = function addFillGapTarget(target) {
	  if (target) {
	    var targets = argumentAsArray(target);
	    targets.map(function ($targets) {
	      eachNode($targets, function ($target) {
	        if (isElement($target)) {
	          $target.setAttribute('data-scroll-lock-fill-gap', '');

	          if (!state.scroll) {
	            scroll_lock_fillGapTarget($target);
	          }
	        } else {
	          throwError("\"".concat($target, "\" is not a Element."));
	        }
	      });
	    });
	  }
	};
	var scroll_lock_removeFillGapTarget = function removeFillGapTarget(target) {
	  if (target) {
	    var targets = argumentAsArray(target);
	    targets.map(function ($targets) {
	      eachNode($targets, function ($target) {
	        if (isElement($target)) {
	          $target.removeAttribute('data-scroll-lock-fill-gap');

	          if (!state.scroll) {
	            scroll_lock_unfillGapTarget($target);
	          }
	        } else {
	          throwError("\"".concat($target, "\" is not a Element."));
	        }
	      });
	    });
	  }
	};
	var scroll_lock_addFillGapSelector = function addFillGapSelector(selector) {
	  if (selector) {
	    var selectors = argumentAsArray(selector);
	    selectors.map(function (selector) {
	      if (state.fillGapSelectors.indexOf(selector) === -1) {
	        state.fillGapSelectors.push(selector);

	        if (!state.scroll) {
	          scroll_lock_fillGapSelector(selector);
	        }
	      }
	    });
	  }
	};
	var scroll_lock_removeFillGapSelector = function removeFillGapSelector(selector) {
	  if (selector) {
	    var selectors = argumentAsArray(selector);
	    selectors.map(function (selector) {
	      state.fillGapSelectors = state.fillGapSelectors.filter(function (fSelector) {
	        return fSelector !== selector;
	      });

	      if (!state.scroll) {
	        scroll_lock_unfillGapSelector(selector);
	      }
	    });
	  }
	};
	var refillGaps = function refillGaps() {
	  if (!state.scroll) {
	    fillGaps();
	  }
	};

	var scroll_lock_hideLockableOverflow = function hideLockableOverflow() {
	  var selector = arrayAsSelector(state.lockableSelectors);
	  scroll_lock_hideLockableOverflowSelector(selector);
	};

	var scroll_lock_showLockableOverflow = function showLockableOverflow() {
	  var selector = arrayAsSelector(state.lockableSelectors);
	  scroll_lock_showLockableOverflowSelector(selector);
	};

	var scroll_lock_hideLockableOverflowSelector = function hideLockableOverflowSelector(selector) {
	  var $targets = document.querySelectorAll(selector);
	  eachNode($targets, function ($target) {
	    scroll_lock_hideLockableOverflowTarget($target);
	  });
	};

	var scroll_lock_showLockableOverflowSelector = function showLockableOverflowSelector(selector) {
	  var $targets = document.querySelectorAll(selector);
	  eachNode($targets, function ($target) {
	    scroll_lock_showLockableOverflowTarget($target);
	  });
	};

	var scroll_lock_hideLockableOverflowTarget = function hideLockableOverflowTarget($target) {
	  if (isElement($target) && $target.getAttribute('data-scroll-lock-locked') !== 'true') {
	    var computedStyle = window.getComputedStyle($target);
	    $target.setAttribute('data-scroll-lock-saved-overflow-y-property', computedStyle.overflowY);
	    $target.setAttribute('data-scroll-lock-saved-inline-overflow-property', $target.style.overflow);
	    $target.setAttribute('data-scroll-lock-saved-inline-overflow-y-property', $target.style.overflowY);
	    $target.style.overflow = 'hidden';
	    $target.setAttribute('data-scroll-lock-locked', 'true');
	  }
	};

	var scroll_lock_showLockableOverflowTarget = function showLockableOverflowTarget($target) {
	  if (isElement($target) && $target.getAttribute('data-scroll-lock-locked') === 'true') {
	    $target.style.overflow = $target.getAttribute('data-scroll-lock-saved-inline-overflow-property');
	    $target.style.overflowY = $target.getAttribute('data-scroll-lock-saved-inline-overflow-y-property');
	    $target.removeAttribute('data-scroll-lock-saved-overflow-property');
	    $target.removeAttribute('data-scroll-lock-saved-inline-overflow-property');
	    $target.removeAttribute('data-scroll-lock-saved-inline-overflow-y-property');
	    $target.removeAttribute('data-scroll-lock-locked');
	  }
	};

	var fillGaps = function fillGaps() {
	  state.fillGapSelectors.map(function (selector) {
	    scroll_lock_fillGapSelector(selector);
	  });
	};

	var unfillGaps = function unfillGaps() {
	  state.fillGapSelectors.map(function (selector) {
	    scroll_lock_unfillGapSelector(selector);
	  });
	};

	var scroll_lock_fillGapSelector = function fillGapSelector(selector) {
	  var $targets = document.querySelectorAll(selector);
	  var isLockable = state.lockableSelectors.indexOf(selector) !== -1;
	  eachNode($targets, function ($target) {
	    scroll_lock_fillGapTarget($target, isLockable);
	  });
	};

	var scroll_lock_fillGapTarget = function fillGapTarget($target) {
	  var isLockable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	  if (isElement($target)) {
	    var scrollBarWidth;

	    if ($target.getAttribute('data-scroll-lock-lockable') === '' || isLockable) {
	      scrollBarWidth = scroll_lock_getTargetScrollBarWidth($target, true);
	    } else {
	      var $lockableParent = findParentBySelector($target, arrayAsSelector(state.lockableSelectors));
	      scrollBarWidth = scroll_lock_getTargetScrollBarWidth($lockableParent, true);
	    }

	    if ($target.getAttribute('data-scroll-lock-filled-gap') === 'true') {
	      scroll_lock_unfillGapTarget($target);
	    }

	    var computedStyle = window.getComputedStyle($target);
	    $target.setAttribute('data-scroll-lock-filled-gap', 'true');
	    $target.setAttribute('data-scroll-lock-current-fill-gap-method', state.fillGapMethod);

	    if (state.fillGapMethod === 'margin') {
	      var currentMargin = parseFloat(computedStyle.marginRight);
	      $target.style.marginRight = "".concat(currentMargin + scrollBarWidth, "px");
	    } else if (state.fillGapMethod === 'width') {
	      $target.style.width = "calc(100% - ".concat(scrollBarWidth, "px)");
	    } else if (state.fillGapMethod === 'max-width') {
	      $target.style.maxWidth = "calc(100% - ".concat(scrollBarWidth, "px)");
	    } else if (state.fillGapMethod === 'padding') {
	      var currentPadding = parseFloat(computedStyle.paddingRight);
	      $target.style.paddingRight = "".concat(currentPadding + scrollBarWidth, "px");
	    }
	  }
	};

	var scroll_lock_unfillGapSelector = function unfillGapSelector(selector) {
	  var $targets = document.querySelectorAll(selector);
	  eachNode($targets, function ($target) {
	    scroll_lock_unfillGapTarget($target);
	  });
	};

	var scroll_lock_unfillGapTarget = function unfillGapTarget($target) {
	  if (isElement($target)) {
	    if ($target.getAttribute('data-scroll-lock-filled-gap') === 'true') {
	      var currentFillGapMethod = $target.getAttribute('data-scroll-lock-current-fill-gap-method');
	      $target.removeAttribute('data-scroll-lock-filled-gap');
	      $target.removeAttribute('data-scroll-lock-current-fill-gap-method');

	      if (currentFillGapMethod === 'margin') {
	        $target.style.marginRight = "";
	      } else if (currentFillGapMethod === 'width') {
	        $target.style.width = "";
	      } else if (currentFillGapMethod === 'max-width') {
	        $target.style.maxWidth = "";
	      } else if (currentFillGapMethod === 'padding') {
	        $target.style.paddingRight = "";
	      }
	    }
	  }
	};

	var onResize = function onResize(e) {
	  refillGaps();
	};

	var onTouchStart = function onTouchStart(e) {
	  if (!state.scroll) {
	    state.startTouchY = e.touches[0].clientY;
	    state.startTouchX = e.touches[0].clientX;
	  }
	};

	var scroll_lock_onTouchMove = function onTouchMove(e) {
	  if (!state.scroll) {
	    var startTouchY = state.startTouchY,
	        startTouchX = state.startTouchX;
	    var currentClientY = e.touches[0].clientY;
	    var currentClientX = e.touches[0].clientX;

	    if (e.touches.length < 2) {
	      var selector = arrayAsSelector(state.scrollableSelectors);
	      var direction = {
	        up: startTouchY < currentClientY,
	        down: startTouchY > currentClientY,
	        left: startTouchX < currentClientX,
	        right: startTouchX > currentClientX
	      };
	      var directionWithOffset = {
	        up: startTouchY + TOUCH_DIRECTION_DETECT_OFFSET < currentClientY,
	        down: startTouchY - TOUCH_DIRECTION_DETECT_OFFSET > currentClientY,
	        left: startTouchX + TOUCH_DIRECTION_DETECT_OFFSET < currentClientX,
	        right: startTouchX - TOUCH_DIRECTION_DETECT_OFFSET > currentClientX
	      };

	      var handle = function handle($el) {
	        var skip = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	        if ($el) {
	          var parentScrollableEl = findParentBySelector($el, selector, false);

	          if (elementIsInputRange($el)) {
	            return false;
	          }

	          if (skip || elementIsScrollableField($el) && findParentBySelector($el, selector) || elementHasSelector($el, selector)) {
	            var prevent = false;

	            if (elementScrollLeftOnStart($el) && elementScrollLeftOnEnd($el)) {
	              if (direction.up && elementScrollTopOnStart($el) || direction.down && elementScrollTopOnEnd($el)) {
	                prevent = true;
	              }
	            } else if (elementScrollTopOnStart($el) && elementScrollTopOnEnd($el)) {
	              if (direction.left && elementScrollLeftOnStart($el) || direction.right && elementScrollLeftOnEnd($el)) {
	                prevent = true;
	              }
	            } else if (directionWithOffset.up && elementScrollTopOnStart($el) || directionWithOffset.down && elementScrollTopOnEnd($el) || directionWithOffset.left && elementScrollLeftOnStart($el) || directionWithOffset.right && elementScrollLeftOnEnd($el)) {
	              prevent = true;
	            }

	            if (prevent) {
	              if (parentScrollableEl) {
	                handle(parentScrollableEl, true);
	              } else {
	                if (e.cancelable) {
	                  e.preventDefault();
	                }
	              }
	            }
	          } else {
	            handle(parentScrollableEl);
	          }
	        } else {
	          if (e.cancelable) {
	            e.preventDefault();
	          }
	        }
	      };

	      handle(e.target);
	    }
	  }
	};

	var onTouchEnd = function onTouchEnd(e) {
	  if (!state.scroll) {
	    state.startTouchY = 0;
	    state.startTouchX = 0;
	  }
	};

	if (typeof window !== 'undefined') {
	  window.addEventListener('resize', onResize);
	}

	if (typeof document !== 'undefined') {
	  document.addEventListener('touchstart', onTouchStart);
	  document.addEventListener('touchmove', scroll_lock_onTouchMove, {
	    passive: false
	  });
	  document.addEventListener('touchend', onTouchEnd);
	}

	var deprecatedMethods = {
	  hide: function hide(target) {
	    throwError('"hide" is deprecated! Use "disablePageScroll" instead. \n https://github.com/FL3NKEY/scroll-lock#disablepagescrollscrollabletarget');
	    disablePageScroll(target);
	  },
	  show: function show(target) {
	    throwError('"show" is deprecated! Use "enablePageScroll" instead. \n https://github.com/FL3NKEY/scroll-lock#enablepagescrollscrollabletarget');
	    enablePageScroll(target);
	  },
	  toggle: function toggle(target) {
	    throwError('"toggle" is deprecated! Do not use it.');

	    if (getScrollState()) {
	      disablePageScroll();
	    } else {
	      enablePageScroll(target);
	    }
	  },
	  getState: function getState() {
	    throwError('"getState" is deprecated! Use "getScrollState" instead. \n https://github.com/FL3NKEY/scroll-lock#getscrollstate');
	    return getScrollState();
	  },
	  getWidth: function getWidth() {
	    throwError('"getWidth" is deprecated! Use "getPageScrollBarWidth" instead. \n https://github.com/FL3NKEY/scroll-lock#getpagescrollbarwidth');
	    return getPageScrollBarWidth();
	  },
	  getCurrentWidth: function getCurrentWidth() {
	    throwError('"getCurrentWidth" is deprecated! Use "getCurrentPageScrollBarWidth" instead. \n https://github.com/FL3NKEY/scroll-lock#getcurrentpagescrollbarwidth');
	    return getCurrentPageScrollBarWidth();
	  },
	  setScrollableTargets: function setScrollableTargets(target) {
	    throwError('"setScrollableTargets" is deprecated! Use "addScrollableTarget" instead. \n https://github.com/FL3NKEY/scroll-lock#addscrollabletargetscrollabletarget');
	    scroll_lock_addScrollableTarget(target);
	  },
	  setFillGapSelectors: function setFillGapSelectors(selector) {
	    throwError('"setFillGapSelectors" is deprecated! Use "addFillGapSelector" instead. \n https://github.com/FL3NKEY/scroll-lock#addfillgapselectorfillgapselector');
	    scroll_lock_addFillGapSelector(selector);
	  },
	  setFillGapTargets: function setFillGapTargets(target) {
	    throwError('"setFillGapTargets" is deprecated! Use "addFillGapTarget" instead. \n https://github.com/FL3NKEY/scroll-lock#addfillgaptargetfillgaptarget');
	    scroll_lock_addFillGapTarget(target);
	  },
	  clearQueue: function clearQueue() {
	    throwError('"clearQueue" is deprecated! Use "clearQueueScrollLocks" instead. \n https://github.com/FL3NKEY/scroll-lock#clearqueuescrolllocks');
	    clearQueueScrollLocks();
	  }
	};

	var scrollLock = _objectSpread({
	  disablePageScroll: disablePageScroll,
	  enablePageScroll: enablePageScroll,
	  getScrollState: getScrollState,
	  clearQueueScrollLocks: clearQueueScrollLocks,
	  getTargetScrollBarWidth: scroll_lock_getTargetScrollBarWidth,
	  getCurrentTargetScrollBarWidth: scroll_lock_getCurrentTargetScrollBarWidth,
	  getPageScrollBarWidth: getPageScrollBarWidth,
	  getCurrentPageScrollBarWidth: getCurrentPageScrollBarWidth,
	  addScrollableSelector: scroll_lock_addScrollableSelector,
	  removeScrollableSelector: scroll_lock_removeScrollableSelector,
	  addScrollableTarget: scroll_lock_addScrollableTarget,
	  removeScrollableTarget: scroll_lock_removeScrollableTarget,
	  addLockableSelector: scroll_lock_addLockableSelector,
	  addLockableTarget: scroll_lock_addLockableTarget,
	  addFillGapSelector: scroll_lock_addFillGapSelector,
	  removeFillGapSelector: scroll_lock_removeFillGapSelector,
	  addFillGapTarget: scroll_lock_addFillGapTarget,
	  removeFillGapTarget: scroll_lock_removeFillGapTarget,
	  setFillGapMethod: scroll_lock_setFillGapMethod,
	  refillGaps: refillGaps,
	  _state: state
	}, deprecatedMethods);

	/* harmony default export */ __webpack_exports__["default"] = (scrollLock);

	/***/ })
	/******/ ])["default"];
	});
	}(scrollLock));

	var name = "firebase-exp";
	var version = "9.0.0-beta.8";

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	registerVersion(name, version, 'app');

	initializeApp({
	  apiKey: "AIzaSyAkNpqlq9hU_cDu1_4wQIBNNc9OJd4LT1g",
	  authDomain: "rebot-f643e.firebaseapp.com",
	  projectId: "rebot-f643e",
	  storageBucket: "rebot-f643e.appspot.com",
	  messagingSenderId: "329205426356",
	  appId: "1:329205426356:web:d8c730df77b0d7b9890fe1"
	});
	const firestore = Cu();
	const remoteConfig = getRemoteConfig();
	remoteConfig.settings.minimumFetchIntervalMillis = 110000;
	ku(firestore, {
	  forceOwnership: true
	}).catch(err => {
	  console.log(err.code);
	});
	const user = JSON.parse(localStorage.getItem("user"));

	if (!user) {
	  window.location = "./auth.html";
	} //const userCollection = collection(firestore, `users/${user.id}/`);


	const id = `${user.id}`;
	const database = {
	  timetable: Iu(firestore, "timeTables", "9D"),
	  settings: Iu(firestore, "users", id, "userStorage", "config"),
	  workspace: Iu(firestore, "users", id, "userStorage", "workspace"),
	  marks: Iu(firestore, "users", id, "userStorage", "marks"),
	  notes: Eu(firestore, "users", id, "notes"),
	  firestore
	};
	const settingsContext = /*#__PURE__*/react.exports.createContext(null);
	const manifestContext = /*#__PURE__*/react.exports.createContext(null);
	const timetableContext = /*#__PURE__*/react.exports.createContext(null);

	function Dropdown(props) {
	  const [isOpen, setIsOpen] = react.exports.useState(false);
	  const button = react.exports.useRef();

	  function setUnfocusListener() {
	    if (isOpen) {
	      button.current.addEventListener("blur", () => {
	        setIsOpen(false);
	      }, {
	        once: true
	      });

	      if (window.ios) {
	        button.current.addEventListener("mouseout", () => {
	          setIsOpen(false);
	        }, {
	          once: true
	        });
	      }
	    }
	  }

	  return /*#__PURE__*/React.createElement("div", {
	    className: "dropdown"
	  }, /*#__PURE__*/React.createElement("button", {
	    ref: button,
	    className: "menuBtn",
	    onClick: () => setIsOpen(!isOpen)
	  }, /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-ellipsis-v"
	  })), /*#__PURE__*/React.createElement(CSSTransition, {
	    in: isOpen,
	    timeout: 300,
	    classNames: "dropdown-content",
	    onEnter: setUnfocusListener,
	    unmountOnExit: true
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "dropdown-content"
	  }, props.children)));
	}

	function SubjectRow$2(props) {
	  const manifest = react.exports.useContext(manifestContext);
	  const settings = react.exports.useContext(settingsContext);
	  const hwInput = react.exports.useRef(null);
	  react.exports.useEffect(() => {
	    hwInput.current.value = props.lesson_data.hw;
	  }, [props.lesson_data.hw]);
	  const title = manifest ? manifest[props.lesson_data.id].title : /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-circle-notch fa-spin"
	  });
	  const style = {
	    backgroundColor: manifest ? manifest[props.lesson_data.id].color : "var(--background3)"
	  };

	  function setTest() {
	    hh(database.timetable, {
	      [props.path + ".test"]: !props.lesson_data.test
	    });
	  }

	  function openInstant() {
	    const toOpen = [{
	      id: props.lesson_data.id,
	      hw: props.lesson_data.hw
	    }];
	    window.InstantView.open(toOpen);
	  }

	  function copy() {
	    navigator.clipboard.writeText(hwInput.current.value).then(() => {
	      window.UI.alert("Скопировано");
	    });
	  }

	  const classes = props.lesson_data.test ? "SubjectRow test" : "SubjectRow";
	  return /*#__PURE__*/React.createElement("div", {
	    className: classes
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "subj",
	    style: style
	  }, title), /*#__PURE__*/React.createElement("div", {
	    className: "homework fr"
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "scroll-wraper"
	  }, /*#__PURE__*/React.createElement("input", {
	    type: "text",
	    ref: hwInput,
	    contentEditable: "true"
	  })), /*#__PURE__*/React.createElement(Dropdown, null, /*#__PURE__*/React.createElement("button", {
	    className: "withIcon",
	    onClick: setTest
	  }, /*#__PURE__*/React.createElement("svg", {
	    width: "28",
	    height: "28",
	    viewBox: "0 0 28 28",
	    fill: "var(--text)"
	  }, /*#__PURE__*/React.createElement("path", {
	    d: "M7.04785 16.3613C7.04785 17.1611 7.59277 17.6885 8.42773 17.6885H13.1211V21.8545C13.1211 23.0762 13.7539 24.333 14 24.333C14.2373 24.333 14.8701 23.0762 14.8701 21.8545V17.6885H19.5723C20.4072 17.6885 20.9434 17.1611 20.9434 16.3613C20.9434 14.4629 19.4404 12.5205 16.9531 11.6064L16.6719 7.51074C17.9814 6.77246 19.0186 5.95508 19.4668 5.36621C19.7129 5.05859 19.8271 4.7334 19.8271 4.45215C19.8271 3.87207 19.3877 3.44141 18.7197 3.44141H9.27148C8.6123 3.44141 8.16406 3.87207 8.16406 4.45215C8.16406 4.7334 8.27832 5.05859 8.52441 5.36621C8.97266 5.95508 10.0098 6.77246 11.3193 7.51074L11.0381 11.6064C8.55078 12.5205 7.04785 14.4629 7.04785 16.3613Z"
	  })), /*#__PURE__*/React.createElement("span", null, props.lesson_data.test ? "Не контрольная" : "Контрольная")), /*#__PURE__*/React.createElement("button", {
	    className: "withIcon",
	    onClick: copy
	  }, /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-clone"
	  }), /*#__PURE__*/React.createElement("span", null, "\u0421\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C")))), !settings.stealth && props.lesson_data.hw && /*#__PURE__*/React.createElement("div", {
	    className: "tool stealth",
	    onClick: openInstant
	  }, /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-book"
	  })));
	}

	var SubjectRow$3 = /*#__PURE__*/react.exports.memo(SubjectRow$2);

	const day_titles = {
	  1: "Понедельник",
	  2: "Вторник",
	  3: "Среда",
	  4: "Четверг",
	  5: "Пятница",
	  6: "Суббота",
	  7: "Воскресенье"
	};
	function Day(props) {
	  const settings = react.exports.useContext(settingsContext);
	  const day_data = props.day_data;
	  let rows = [];
	  let subj;

	  for (subj in props.day_data) {
	    rows.push( /*#__PURE__*/React.createElement(SubjectRow$3, {
	      key: subj,
	      path: props.pathToDay + "." + subj,
	      lesson_data: day_data[subj]
	    }));
	  }

	  function openInstant() {
	    const toOpen = [];

	    for (let subj in day_data) {
	      day_data[subj].hw && toOpen.push(day_data[subj]);
	    }

	    toOpen && window.InstantView.open(toOpen);
	  }

	  return /*#__PURE__*/React.createElement("div", {
	    className: "UIBlock day"
	  }, /*#__PURE__*/React.createElement("h1", null, day_titles[props.day_num]), !settings.stealth && /*#__PURE__*/React.createElement("button", {
	    className: "table-btn open-all stealth",
	    onClick: openInstant
	  }, /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-book fa-lg"
	  })), /*#__PURE__*/React.createElement("button", {
	    className: "table-btn share"
	  }, /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-share fa-lg"
	  })), /*#__PURE__*/React.createElement("div", {
	    className: "content"
	  }, rows));
	}

	var index$1 = typeof document !== 'undefined' ? react.exports.useLayoutEffect : react.exports.useEffect;

	var useLatest = function useLatest(value) {
	  var ref = react.exports.useRef(value);
	  index$1(function () {
	    ref.current = value;
	  });
	  return ref;
	};

	var updateRef = function updateRef(ref, value) {
	  if (typeof ref === 'function') {
	    ref(value);
	    return;
	  }
	  ref.current = value;
	};

	var useComposedRef = function useComposedRef(libRef, userRef) {
	  var prevUserRef = react.exports.useRef();
	  return react.exports.useCallback(function (instance) {
	    libRef.current = instance;

	    if (prevUserRef.current) {
	      updateRef(prevUserRef.current, null);
	    }

	    prevUserRef.current = userRef;

	    if (!userRef) {
	      return;
	    }

	    updateRef(userRef, instance);
	  }, [userRef]);
	};

	var HIDDEN_TEXTAREA_STYLE = {
	  'min-height': '0',
	  'max-height': 'none',
	  height: '0',
	  visibility: 'hidden',
	  overflow: 'hidden',
	  position: 'absolute',
	  'z-index': '-1000',
	  top: '0',
	  right: '0'
	};

	var forceHiddenStyles = function forceHiddenStyles(node) {
	  Object.keys(HIDDEN_TEXTAREA_STYLE).forEach(function (key) {
	    node.style.setProperty(key, HIDDEN_TEXTAREA_STYLE[key], 'important');
	  });
	};

	//   export type CalculatedNodeHeights = [height: number, rowHeight: number];
	// https://github.com/microsoft/TypeScript/issues/28259

	var hiddenTextarea = null;

	var getHeight = function getHeight(node, sizingData) {
	  var height = node.scrollHeight;

	  if (sizingData.sizingStyle.boxSizing === 'border-box') {
	    // border-box: add border, since height = content + padding + border
	    return height + sizingData.borderSize;
	  } // remove padding, since height = content


	  return height - sizingData.paddingSize;
	};

	function calculateNodeHeight(sizingData, value, minRows, maxRows) {
	  if (minRows === void 0) {
	    minRows = 1;
	  }

	  if (maxRows === void 0) {
	    maxRows = Infinity;
	  }

	  if (!hiddenTextarea) {
	    hiddenTextarea = document.createElement('textarea');
	    hiddenTextarea.setAttribute('tabindex', '-1');
	    hiddenTextarea.setAttribute('aria-hidden', 'true');
	    forceHiddenStyles(hiddenTextarea);
	  }

	  if (hiddenTextarea.parentNode === null) {
	    document.body.appendChild(hiddenTextarea);
	  }

	  var paddingSize = sizingData.paddingSize,
	      borderSize = sizingData.borderSize,
	      sizingStyle = sizingData.sizingStyle;
	  var boxSizing = sizingStyle.boxSizing;
	  Object.keys(sizingStyle).forEach(function (_key) {
	    var key = _key;
	    hiddenTextarea.style[key] = sizingStyle[key];
	  });
	  forceHiddenStyles(hiddenTextarea);
	  hiddenTextarea.value = value;
	  var height = getHeight(hiddenTextarea, sizingData); // measure height of a textarea with a single row

	  hiddenTextarea.value = 'x';
	  var rowHeight = hiddenTextarea.scrollHeight - paddingSize;
	  var minHeight = rowHeight * minRows;

	  if (boxSizing === 'border-box') {
	    minHeight = minHeight + paddingSize + borderSize;
	  }

	  height = Math.max(minHeight, height);
	  var maxHeight = rowHeight * maxRows;

	  if (boxSizing === 'border-box') {
	    maxHeight = maxHeight + paddingSize + borderSize;
	  }

	  height = Math.min(maxHeight, height);
	  return [height, rowHeight];
	}

	var noop = function noop() {};
	var pick = function pick(props, obj) {
	  return props.reduce(function (acc, prop) {
	    acc[prop] = obj[prop];
	    return acc;
	  }, {});
	};

	var SIZING_STYLE = ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth', 'boxSizing', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'lineHeight', 'paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop', // non-standard
	'tabSize', 'textIndent', // non-standard
	'textRendering', 'textTransform', 'width', 'wordBreak'];
	var isIE$1 = typeof document !== 'undefined' ? !!document.documentElement.currentStyle : false;

	var getSizingData = function getSizingData(node) {
	  var style = window.getComputedStyle(node);

	  if (style === null) {
	    return null;
	  }

	  var sizingStyle = pick(SIZING_STYLE, style);
	  var boxSizing = sizingStyle.boxSizing; // probably node is detached from DOM, can't read computed dimensions

	  if (boxSizing === '') {
	    return null;
	  } // IE (Edge has already correct behaviour) returns content width as computed width
	  // so we need to add manually padding and border widths


	  if (isIE$1 && boxSizing === 'border-box') {
	    sizingStyle.width = parseFloat(sizingStyle.width) + parseFloat(sizingStyle.borderRightWidth) + parseFloat(sizingStyle.borderLeftWidth) + parseFloat(sizingStyle.paddingRight) + parseFloat(sizingStyle.paddingLeft) + 'px';
	  }

	  var paddingSize = parseFloat(sizingStyle.paddingBottom) + parseFloat(sizingStyle.paddingTop);
	  var borderSize = parseFloat(sizingStyle.borderBottomWidth) + parseFloat(sizingStyle.borderTopWidth);
	  return {
	    sizingStyle: sizingStyle,
	    paddingSize: paddingSize,
	    borderSize: borderSize
	  };
	};

	var useWindowResizeListener = function useWindowResizeListener(listener) {
	  var latestListener = useLatest(listener);
	  react.exports.useLayoutEffect(function () {
	    var handler = function handler(event) {
	      latestListener.current(event);
	    };

	    window.addEventListener('resize', handler);
	    return function () {
	      window.removeEventListener('resize', handler);
	    };
	  }, []);
	};

	var TextareaAutosize = function TextareaAutosize(_ref, userRef) {
	  var cacheMeasurements = _ref.cacheMeasurements,
	      maxRows = _ref.maxRows,
	      minRows = _ref.minRows,
	      _ref$onChange = _ref.onChange,
	      onChange = _ref$onChange === void 0 ? noop : _ref$onChange,
	      _ref$onHeightChange = _ref.onHeightChange,
	      onHeightChange = _ref$onHeightChange === void 0 ? noop : _ref$onHeightChange,
	      props = _objectWithoutPropertiesLoose(_ref, ["cacheMeasurements", "maxRows", "minRows", "onChange", "onHeightChange"]);

	  if ("development" !== 'production' && props.style) {
	    if ('maxHeight' in props.style) {
	      throw new Error('Using `style.maxHeight` for <TextareaAutosize/> is not supported. Please use `maxRows`.');
	    }

	    if ('minHeight' in props.style) {
	      throw new Error('Using `style.minHeight` for <TextareaAutosize/> is not supported. Please use `minRows`.');
	    }
	  }

	  var isControlled = props.value !== undefined;
	  var libRef = react.exports.useRef(null);
	  var ref = useComposedRef(libRef, userRef);
	  var heightRef = react.exports.useRef(0);
	  var measurementsCacheRef = react.exports.useRef();

	  var resizeTextarea = function resizeTextarea() {
	    var node = libRef.current;
	    var nodeSizingData = cacheMeasurements && measurementsCacheRef.current ? measurementsCacheRef.current : getSizingData(node);

	    if (!nodeSizingData) {
	      return;
	    }

	    measurementsCacheRef.current = nodeSizingData;

	    var _calculateNodeHeight = calculateNodeHeight(nodeSizingData, node.value || node.placeholder || 'x', minRows, maxRows),
	        height = _calculateNodeHeight[0],
	        rowHeight = _calculateNodeHeight[1];

	    if (heightRef.current !== height) {
	      heightRef.current = height;
	      node.style.setProperty('height', height + "px", 'important');
	      onHeightChange(height, {
	        rowHeight: rowHeight
	      });
	    }
	  };

	  var handleChange = function handleChange(event) {
	    if (!isControlled) {
	      resizeTextarea();
	    }

	    onChange(event);
	  };

	  if (typeof document !== 'undefined') {
	    react.exports.useLayoutEffect(resizeTextarea);
	    useWindowResizeListener(resizeTextarea);
	  }

	  return /*#__PURE__*/react.exports.createElement("textarea", _extends$1({}, props, {
	    onChange: handleChange,
	    ref: ref
	  }));
	};

	var index = /* #__PURE__ */react.exports.forwardRef(TextareaAutosize);

	function Note(props) {
	  const input = react.exports.useRef();
	  const [text, setText] = react.exports.useState(props.noteData.text);
	  const isPinned = props.noteData.isPinned;
	  react.exports.useEffect(() => {
	    setText(props.noteData.text);
	  }, [props.noteData.text]);

	  function updateText() {
	    setText(input.current.value);
	  }

	  function removeNote() {
	    lh(props.docRef);
	  }

	  function changeNote() {
	    ah(props.docRef, {
	      text
	    }, {
	      merge: true
	    });
	  }

	  function updatePin() {
	    ah(props.docRef, {
	      isPinned: !isPinned
	    }, {
	      merge: true
	    });
	  }

	  function copy() {
	    navigator.clipboard.writeText(text).then(() => {
	      window.UI.alert("Скопировано в буфер обмена");
	    });
	  }

	  const className = "note " + (isPinned ? "pinned" : "");
	  return /*#__PURE__*/React.createElement("div", {
	    className: className
	  }, /*#__PURE__*/React.createElement(index, {
	    maxRows: 10,
	    ref: input,
	    value: text,
	    onBlur: changeNote,
	    onChange: updateText
	  }), /*#__PURE__*/React.createElement(Dropdown, null, /*#__PURE__*/React.createElement("button", {
	    className: "withIcon",
	    onClick: updatePin
	  }, /*#__PURE__*/React.createElement("svg", {
	    width: "28",
	    height: "28",
	    viewBox: "0 0 28 28",
	    fill: "var(--text)"
	  }, /*#__PURE__*/React.createElement("path", {
	    d: "M7.04785 16.3613C7.04785 17.1611 7.59277 17.6885 8.42773 17.6885H13.1211V21.8545C13.1211 23.0762 13.7539 24.333 14 24.333C14.2373 24.333 14.8701 23.0762 14.8701 21.8545V17.6885H19.5723C20.4072 17.6885 20.9434 17.1611 20.9434 16.3613C20.9434 14.4629 19.4404 12.5205 16.9531 11.6064L16.6719 7.51074C17.9814 6.77246 19.0186 5.95508 19.4668 5.36621C19.7129 5.05859 19.8271 4.7334 19.8271 4.45215C19.8271 3.87207 19.3877 3.44141 18.7197 3.44141H9.27148C8.6123 3.44141 8.16406 3.87207 8.16406 4.45215C8.16406 4.7334 8.27832 5.05859 8.52441 5.36621C8.97266 5.95508 10.0098 6.77246 11.3193 7.51074L11.0381 11.6064C8.55078 12.5205 7.04785 14.4629 7.04785 16.3613Z"
	  })), /*#__PURE__*/React.createElement("span", null, isPinned ? "Открепить" : "Закрепить")), /*#__PURE__*/React.createElement("button", {
	    className: "withIcon",
	    onClick: copy
	  }, /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-clone"
	  }), /*#__PURE__*/React.createElement("span", null, "\u0421\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C")), /*#__PURE__*/React.createElement("button", {
	    className: "withIcon danger",
	    onClick: removeNote
	  }, /*#__PURE__*/React.createElement("svg", {
	    width: "28",
	    height: "28",
	    viewBox: "0 0 28 28",
	    fill: "var(--text)"
	  }, /*#__PURE__*/React.createElement("path", {
	    d: "M9.84277 22.4785H18.166C19.3701 22.4785 20.0732 21.8369 20.126 20.6416L20.6797 7.94141H21.8926C22.3408 7.94141 22.6836 7.58984 22.6836 7.15039C22.6836 6.71094 22.332 6.37695 21.8926 6.37695H18.0781V5.05859C18.0781 3.65234 17.1729 2.81738 15.6611 2.81738H12.3213C10.8096 2.81738 9.9043 3.65234 9.9043 5.05859V6.37695H6.10742C5.66797 6.37695 5.31641 6.71973 5.31641 7.15039C5.31641 7.59863 5.66797 7.94141 6.10742 7.94141H7.3291L7.8916 20.6416C7.93555 21.8369 8.63867 22.4785 9.84277 22.4785ZM11.7324 5.1377C11.7324 4.74219 12.0049 4.4873 12.4443 4.4873H15.5469C15.9863 4.4873 16.2588 4.74219 16.2588 5.1377V6.37695H11.7324V5.1377ZM11.1787 19.7803C10.8271 19.7803 10.5811 19.5518 10.5723 19.2002L10.3086 9.86621C10.2998 9.51465 10.5459 9.27734 10.915 9.27734C11.2666 9.27734 11.5127 9.50586 11.5215 9.85742L11.7852 19.1914C11.8027 19.543 11.5566 19.7803 11.1787 19.7803ZM14 19.7803C13.6309 19.7803 13.3848 19.5518 13.3848 19.2002V9.85742C13.3848 9.51465 13.6309 9.27734 14 9.27734C14.3691 9.27734 14.624 9.51465 14.624 9.85742V19.2002C14.624 19.5518 14.3691 19.7803 14 19.7803ZM16.8213 19.7891C16.4434 19.7891 16.1973 19.543 16.2148 19.2002L16.4785 9.85742C16.4873 9.50586 16.7334 9.27734 17.085 9.27734C17.4541 9.27734 17.7002 9.51465 17.6914 9.86621L17.4277 19.2002C17.4189 19.5518 17.1729 19.7891 16.8213 19.7891Z"
	  })), /*#__PURE__*/React.createElement("span", null, "\u0423\u0434\u0430\u043B\u0438\u0442\u044C"))));
	}

	function Notes() {
	  const [notes, setNotes] = react.exports.useState([]);
	  react.exports.useEffect(() => {
	    dh(database.notes, collection => {
	      const newNotes = [];
	      collection.forEach(doc => {
	        const data = doc.data();
	        const block = /*#__PURE__*/React.createElement(Note, {
	          docRef: doc.ref,
	          key: doc.id,
	          noteData: data
	        });
	        newNotes.push(block);
	      });
	      setNotes(newNotes);
	    });
	  }, []);

	  function addNote() {
	    if (notes.length <= 8) {
	      fh(database.notes, {
	        text: "",
	        isPinned: false
	      });
	    } else {
	      window.UI.alert("Нельзя добавить больше 10 заметок");
	    }
	  }

	  return /*#__PURE__*/React.createElement("div", {
	    className: "UIBlock",
	    id: "notes"
	  }, /*#__PURE__*/React.createElement("h1", null, "\u0417\u0430\u043C\u0435\u0442\u043A\u0438"), /*#__PURE__*/React.createElement("button", {
	    id: "add-note",
	    onClick: addNote
	  }, /*#__PURE__*/React.createElement("svg", {
	    width: "30",
	    height: "30",
	    viewBox: "0 0 28 28",
	    fill: "var(--text)"
	  }, /*#__PURE__*/React.createElement("path", {
	    d: "M13.9912 22.7422C18.9746 22.7422 23.0879 18.6289 23.0879 13.6543C23.0879 8.67969 18.9658 4.56641 13.9824 4.56641C9.00781 4.56641 4.90332 8.67969 4.90332 13.6543C4.90332 18.6289 9.0166 22.7422 13.9912 22.7422ZM9.7373 13.6631C9.7373 13.1445 10.1064 12.7842 10.6162 12.7842H13.1211V10.2793C13.1211 9.76953 13.4727 9.40918 13.9736 9.40918C14.4922 9.40918 14.8525 9.76953 14.8525 10.2793V12.7842H17.3662C17.8672 12.7842 18.2363 13.1445 18.2363 13.6631C18.2363 14.1641 17.8672 14.5244 17.3662 14.5244H14.8525V17.0293C14.8525 17.5303 14.4922 17.8994 13.9736 17.8994C13.4727 17.8994 13.1211 17.5303 13.1211 17.0293V14.5244H10.6162C10.1064 14.5244 9.7373 14.1641 9.7373 13.6631Z"
	  }))), /*#__PURE__*/React.createElement("div", {
	    className: "content"
	  }, notes));
	}

	function HomeScreen(props) {
	  const timetable = react.exports.useContext(timetableContext);
	  let day_num = new Date().getDay();
	  if (day_num == 0 || day_num == 6) day_num = 1;
	  return /*#__PURE__*/React.createElement("div", {
	    id: "homescreen-layout"
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "side-left"
	  }, false , /*#__PURE__*/React.createElement(Notes, null)), /*#__PURE__*/React.createElement("div", {
	    className: "side-right"
	  }, timetable && /*#__PURE__*/React.createElement(Day, {
	    day_num: day_num,
	    pathToDay: "2." + day_num,
	    day_data: timetable[2][day_num]
	  })));
	}

	function Week(props) {
	  const [isOffline, setOffline] = react.exports.useState(!navigator.onLine);
	  const [week, setWeek] = react.exports.useState(2);
	  const fullTimetable = react.exports.useContext(timetableContext);
	  react.exports.useEffect(() => {
	    window.addEventListener('online', () => setOffline(true));
	    window.addEventListener('offline', () => setOffline(true));
	  }, []);
	  const title = week == 1 ? "Прошлая неделя" : week == 2 ? "Эта неделя" : "Следующая неделя";
	  const days = [];

	  if (fullTimetable) {
	    const timetable = fullTimetable[week];
	    let day;

	    for (day in timetable) {
	      days.push( /*#__PURE__*/React.createElement(Day, {
	        key: day,
	        pathToDay: week + "." + day,
	        day_num: day,
	        day_data: timetable[day]
	      }));
	    }
	  }

	  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("header", {
	    id: "week-header"
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "block-style weekChanger"
	  }, week > 1 ? /*#__PURE__*/React.createElement("button", {
	    onClick: () => setWeek(week - 1)
	  }, /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-chevron-left fa-2x"
	  })) : /*#__PURE__*/React.createElement("button", {
	    className: "unactive"
	  }, /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-chevron-left fa-2x"
	  })), /*#__PURE__*/React.createElement("span", null, title), week < 3 ? /*#__PURE__*/React.createElement("button", {
	    onClick: () => setWeek(week + 1)
	  }, /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-chevron-right fa-2x"
	  })) : /*#__PURE__*/React.createElement("button", {
	    className: "unactive"
	  }, /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-chevron-right fa-2x"
	  }))), /*#__PURE__*/React.createElement("button", {
	    className: "block-style settings-btn",
	    onClick: () => props.setSettingsOpen(true)
	  }, /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-cog"
	  }))), isOffline && /*#__PURE__*/React.createElement("div", {
	    className: "offline-alert"
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "text"
	  }, /*#__PURE__*/React.createElement("h4", null, "\u0418\u043D\u0442\u0435\u0440\u043D\u0435\u0442 \u043D\u0435\u0434\u043E\u0441\u0442\u0443\u043F\u0435\u043D"), /*#__PURE__*/React.createElement("p", null, "\u0414\u0430\u043D\u043D\u044B\u0435 \u0431\u0443\u0434\u0443\u0442 \u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u044B \u043F\u0440\u0438 \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0438")), /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-exclamation-triangle"
	  })), /*#__PURE__*/React.createElement(TransitionGroup, {
	    exit: false
	  }, /*#__PURE__*/React.createElement(CSSTransition, {
	    key: week,
	    timeout: 300,
	    classNames: "week-grid"
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "week-grid"
	  }, days))));
	}

	function Resheba(props) {
	  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("header", null, /*#__PURE__*/React.createElement("div", {
	    className: "search"
	  }, /*#__PURE__*/React.createElement("img", {
	    className: "google active",
	    width: "20px",
	    src: "static/icons/google.svg"
	  }), /*#__PURE__*/React.createElement("img", {
	    className: "rebot",
	    width: "10px",
	    src: "static/icons/resheba.svg"
	  }), /*#__PURE__*/React.createElement("input", {
	    className: "google active",
	    type: "text",
	    autoComplete: "off"
	  }), /*#__PURE__*/React.createElement("input", {
	    step: "1",
	    inputMode: "decimal",
	    className: "rebot",
	    autoComplete: "off"
	  })), /*#__PURE__*/React.createElement("div", {
	    className: "wraper"
	  }, /*#__PURE__*/React.createElement("button", {
	    id: "bel"
	  }, "\u0411\u0435\u043B \u044F\u0437"), /*#__PURE__*/React.createElement("button", {
	    id: "rus"
	  }, "\u0420\u0443\u0441 \u044F\u0437"), /*#__PURE__*/React.createElement("button", {
	    id: "alg"
	  }, "\u0410\u043B\u0433\u0435\u0431\u0440\u0430"), /*#__PURE__*/React.createElement("button", {
	    id: "geom"
	  }, "\u0413\u0435\u043E\u043C\u0435\u0442\u0440\u0438\u044F"), /*#__PURE__*/React.createElement("button", {
	    id: "him"
	  }, "\u0425\u0438\u043C\u0438\u044F"), /*#__PURE__*/React.createElement("button", {
	    id: "phis"
	  }, "\u0424\u0438\u0437\u0438\u043A\u0430"), /*#__PURE__*/React.createElement("button", {
	    id: "brainly"
	  }, "Brainly"), /*#__PURE__*/React.createElement("button", {
	    id: "eng"
	  }, "\u0410\u043D\u0433\u043B\u0438\u0439\u0441\u043A\u0438\u0439"), /*#__PURE__*/React.createElement("button", {
	    id: "math"
	  }, "Photomath"))), /*#__PURE__*/React.createElement("div", {
	    className: "tool-bar"
	  }, /*#__PURE__*/React.createElement("button", {
	    onClick: () => props.setNotebooksOpen(true)
	  }, /*#__PURE__*/React.createElement("svg", {
	    width: "32",
	    height: "32",
	    viewBox: "0 0 28 28",
	    fill: "var(--text)"
	  }, /*#__PURE__*/React.createElement("path", {
	    d: "M9.5791 20.7207C11.1172 20.720 12.1807 21.2744 12.6553 21.5996C12.8223 21.6875 13.2617 21.96 13.376 21.9863V7.37891C12.7168 6.23633 10.915 5.33984 9.07812 5.33984C6.64355 5.33984 4.65723 6.71094 4.13867 7.74805V21.0283C4.14746 21.8105 4.58691 22.127 5.13184 22.127C5.53613 22.127 5.79102 21.9863 6.06348 21.7754C6.62598 21.3184 7.91797 20.7207 9.5791 20.7207ZM18.4209 20.7207C20.082 20.7207 21.3652 21.3184 21.9277 21.7754C22.2002 21.9863 22.4551 22.127 22.8506 22.127C23.3955 22.127 23.8525 21.8105 23.8525 21.0283V7.74805C23.334 6.71094 21.3477 5.33984 18.9219 5.33984C17.085 5.33984 15.2744 6.23633 14.624 7.37891V22.0039C14.7295 21.9775 15.1689 21.6963 15.3447 21.5996C15.8193 21.2744 16.8828 20.7207 18.4209 20.7207Z"
	  }))), /*#__PURE__*/React.createElement("span", {
	    id: "current-subj"
	  }, "ReBot"), /*#__PURE__*/React.createElement("button", {
	    onClick: () => props.setSettingsOpen(true)
	  }, /*#__PURE__*/React.createElement("svg", {
	    width: "30",
	    height: "30",
	    viewBox: "0 0 28 28",
	    fill: "var(--text)"
	  }, /*#__PURE__*/React.createElement("path", {
	    d: "M13.2002 23.0059H14.8086C15.3359 23.0059 15.7314 22.6895 15.8457 22.1709L16.2852 20.3164C16.584 20.2109 16.8652 20.0967 17.1289 19.9736L18.7549 20.9756C19.1855 21.248 19.7041 21.2041 20.0645 20.8438L21.1982 19.71C21.5586 19.3496 21.6113 18.8135 21.3213 18.374L20.3281 16.7656C20.4512 16.502 20.5654 16.2207 20.6533 15.9482L22.5254 15.5088C23.0439 15.3945 23.3516 14.999 23.3516 14.4717V12.8896C23.3516 12.3711 23.0439 11.9668 22.5254 11.8525L20.6709 11.4043C20.5742 11.0967 20.4512 10.8242 20.3457 10.5869L21.3389 8.94336C21.6201 8.49512 21.585 7.99414 21.207 7.625L20.0645 6.49121C19.6953 6.15723 19.2295 6.0957 18.7812 6.3418L17.1289 7.36133C16.874 7.23828 16.5928 7.12402 16.2939 7.01855L15.8457 5.1377C15.7314 4.61914 15.3359 4.30273 14.8086 4.30273H13.2002C12.6641 4.30273 12.2686 4.61914 12.1543 5.1377L11.7148 7.00977C11.416 7.10645 11.126 7.2207 10.8623 7.35254L9.21875 6.3418C8.77051 6.0957 8.31348 6.14844 7.93555 6.49121L6.79297 7.625C6.41504 7.99414 6.37988 8.49512 6.66113 8.94336L7.6543 10.5869C7.54883 10.8242 7.43457 11.0967 7.3291 11.4043L5.47461 11.8525C4.95605 11.9668 4.64844 12.3711 4.64844 12.8896V14.4717C4.64844 14.999 4.95605 15.3945 5.47461 15.5088L7.34668 15.9482C7.43457 16.2207 7.54883 16.502 7.67188 16.7656L6.67871 18.374C6.38867 18.8135 6.44141 19.3496 6.81055 19.71L7.93555 20.8438C8.2959 21.2041 8.81445 21.248 9.25391 20.9756L10.8711 19.9736C11.1348 20.0967 11.416 20.2109 11.7148 20.3164L12.1543 22.1709C12.2686 22.6895 12.6641 23.0059 13.2002 23.0059ZM14 16.7305C12.3125 16.7305 10.9326 15.3418 10.9326 13.6455C10.9326 11.9668 12.3125 10.5869 14 10.5869C15.6963 10.5869 17.0762 11.9668 17.0762 13.6455C17.0762 15.3418 15.6963 16.7305 14 16.7305Z"
	  })))), /*#__PURE__*/React.createElement("div", {
	    id: "boxes"
	  }), /*#__PURE__*/React.createElement("div", {
	    className: "template"
	  }, /*#__PURE__*/React.createElement("div", {
	    id: "viewbox",
	    className: "viewbox",
	    complete: "false"
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "viewbox-tools"
	  }, /*#__PURE__*/React.createElement("button", {
	    className: "alt",
	    id: "alt-re"
	  }, "\u0420\u0435\u0448\u0435\u0431\u043D\u0438\u043A 2"), /*#__PURE__*/React.createElement("div", {
	    className: "center-section"
	  }, /*#__PURE__*/React.createElement("button", {
	    id: "prew",
	    onClick: () => globalThis.ReBot.change_num(this.parentNode, -1)
	  }, /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-chevron-left fa-lg"
	  })), /*#__PURE__*/React.createElement("span", {
	    className: "num"
	  }), /*#__PURE__*/React.createElement("button", {
	    id: "next",
	    onClick: () => globalThis.ReBot.change_num(this.parentNode, 1)
	  }, /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-chevron-right fa-lg"
	  }))), /*#__PURE__*/React.createElement("button", {
	    className: "close",
	    onClick: () => globalThis.ReBot.remove(this.parentNode.parentNode)
	  }, /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-times fa-lg"
	  }))), /*#__PURE__*/React.createElement("div", {
	    className: "viewbox-content"
	  }, /*#__PURE__*/React.createElement("img", {
	    width: "100%",
	    id: "view"
	  })))));
	}

	var AutosizeInput$1 = {};

	Object.defineProperty(AutosizeInput$1, "__esModule", {
		value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = react.exports;

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = propTypes.exports;

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var sizerStyle = {
		position: 'absolute',
		top: 0,
		left: 0,
		visibility: 'hidden',
		height: 0,
		overflow: 'scroll',
		whiteSpace: 'pre'
	};

	var INPUT_PROPS_BLACKLIST = ['extraWidth', 'injectStyles', 'inputClassName', 'inputRef', 'inputStyle', 'minWidth', 'onAutosize', 'placeholderIsMinWidth'];

	var cleanInputProps = function cleanInputProps(inputProps) {
		INPUT_PROPS_BLACKLIST.forEach(function (field) {
			return delete inputProps[field];
		});
		return inputProps;
	};

	var copyStyles = function copyStyles(styles, node) {
		node.style.fontSize = styles.fontSize;
		node.style.fontFamily = styles.fontFamily;
		node.style.fontWeight = styles.fontWeight;
		node.style.fontStyle = styles.fontStyle;
		node.style.letterSpacing = styles.letterSpacing;
		node.style.textTransform = styles.textTransform;
	};

	var isIE = typeof window !== 'undefined' && window.navigator ? /MSIE |Trident\/|Edge\//.test(window.navigator.userAgent) : false;

	var generateId = function generateId() {
		// we only need an auto-generated ID for stylesheet injection, which is only
		// used for IE. so if the browser is not IE, this should return undefined.
		return isIE ? '_' + Math.random().toString(36).substr(2, 12) : undefined;
	};

	var AutosizeInput = function (_Component) {
		_inherits(AutosizeInput, _Component);

		_createClass(AutosizeInput, null, [{
			key: 'getDerivedStateFromProps',
			value: function getDerivedStateFromProps(props, state) {
				var id = props.id;

				return id !== state.prevId ? { inputId: id || generateId(), prevId: id } : null;
			}
		}]);

		function AutosizeInput(props) {
			_classCallCheck(this, AutosizeInput);

			var _this = _possibleConstructorReturn(this, (AutosizeInput.__proto__ || Object.getPrototypeOf(AutosizeInput)).call(this, props));

			_this.inputRef = function (el) {
				_this.input = el;
				if (typeof _this.props.inputRef === 'function') {
					_this.props.inputRef(el);
				}
			};

			_this.placeHolderSizerRef = function (el) {
				_this.placeHolderSizer = el;
			};

			_this.sizerRef = function (el) {
				_this.sizer = el;
			};

			_this.state = {
				inputWidth: props.minWidth,
				inputId: props.id || generateId(),
				prevId: props.id
			};
			return _this;
		}

		_createClass(AutosizeInput, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				this.mounted = true;
				this.copyInputStyles();
				this.updateInputWidth();
			}
		}, {
			key: 'componentDidUpdate',
			value: function componentDidUpdate(prevProps, prevState) {
				if (prevState.inputWidth !== this.state.inputWidth) {
					if (typeof this.props.onAutosize === 'function') {
						this.props.onAutosize(this.state.inputWidth);
					}
				}
				this.updateInputWidth();
			}
		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {
				this.mounted = false;
			}
		}, {
			key: 'copyInputStyles',
			value: function copyInputStyles() {
				if (!this.mounted || !window.getComputedStyle) {
					return;
				}
				var inputStyles = this.input && window.getComputedStyle(this.input);
				if (!inputStyles) {
					return;
				}
				copyStyles(inputStyles, this.sizer);
				if (this.placeHolderSizer) {
					copyStyles(inputStyles, this.placeHolderSizer);
				}
			}
		}, {
			key: 'updateInputWidth',
			value: function updateInputWidth() {
				if (!this.mounted || !this.sizer || typeof this.sizer.scrollWidth === 'undefined') {
					return;
				}
				var newInputWidth = void 0;
				if (this.props.placeholder && (!this.props.value || this.props.value && this.props.placeholderIsMinWidth)) {
					newInputWidth = Math.max(this.sizer.scrollWidth, this.placeHolderSizer.scrollWidth) + 2;
				} else {
					newInputWidth = this.sizer.scrollWidth + 2;
				}
				// add extraWidth to the detected width. for number types, this defaults to 16 to allow for the stepper UI
				var extraWidth = this.props.type === 'number' && this.props.extraWidth === undefined ? 16 : parseInt(this.props.extraWidth) || 0;
				newInputWidth += extraWidth;
				if (newInputWidth < this.props.minWidth) {
					newInputWidth = this.props.minWidth;
				}
				if (newInputWidth !== this.state.inputWidth) {
					this.setState({
						inputWidth: newInputWidth
					});
				}
			}
		}, {
			key: 'getInput',
			value: function getInput() {
				return this.input;
			}
		}, {
			key: 'focus',
			value: function focus() {
				this.input.focus();
			}
		}, {
			key: 'blur',
			value: function blur() {
				this.input.blur();
			}
		}, {
			key: 'select',
			value: function select() {
				this.input.select();
			}
		}, {
			key: 'renderStyles',
			value: function renderStyles() {
				// this method injects styles to hide IE's clear indicator, which messes
				// with input size detection. the stylesheet is only injected when the
				// browser is IE, and can also be disabled by the `injectStyles` prop.
				var injectStyles = this.props.injectStyles;

				return isIE && injectStyles ? _react2.default.createElement('style', { dangerouslySetInnerHTML: {
						__html: 'input#' + this.state.inputId + '::-ms-clear {display: none;}'
					} }) : null;
			}
		}, {
			key: 'render',
			value: function render() {
				var sizerValue = [this.props.defaultValue, this.props.value, ''].reduce(function (previousValue, currentValue) {
					if (previousValue !== null && previousValue !== undefined) {
						return previousValue;
					}
					return currentValue;
				});

				var wrapperStyle = _extends({}, this.props.style);
				if (!wrapperStyle.display) wrapperStyle.display = 'inline-block';

				var inputStyle = _extends({
					boxSizing: 'content-box',
					width: this.state.inputWidth + 'px'
				}, this.props.inputStyle);

				var inputProps = _objectWithoutProperties(this.props, []);

				cleanInputProps(inputProps);
				inputProps.className = this.props.inputClassName;
				inputProps.id = this.state.inputId;
				inputProps.style = inputStyle;

				return _react2.default.createElement(
					'div',
					{ className: this.props.className, style: wrapperStyle },
					this.renderStyles(),
					_react2.default.createElement('input', _extends({}, inputProps, { ref: this.inputRef })),
					_react2.default.createElement(
						'div',
						{ ref: this.sizerRef, style: sizerStyle },
						sizerValue
					),
					this.props.placeholder ? _react2.default.createElement(
						'div',
						{ ref: this.placeHolderSizerRef, style: sizerStyle },
						this.props.placeholder
					) : null
				);
			}
		}]);

		return AutosizeInput;
	}(_react.Component);

	AutosizeInput.propTypes = {
		className: _propTypes2.default.string, // className for the outer element
		defaultValue: _propTypes2.default.any, // default field value
		extraWidth: _propTypes2.default.oneOfType([// additional width for input element
		_propTypes2.default.number, _propTypes2.default.string]),
		id: _propTypes2.default.string, // id to use for the input, can be set for consistent snapshots
		injectStyles: _propTypes2.default.bool, // inject the custom stylesheet to hide clear UI, defaults to true
		inputClassName: _propTypes2.default.string, // className for the input element
		inputRef: _propTypes2.default.func, // ref callback for the input element
		inputStyle: _propTypes2.default.object, // css styles for the input element
		minWidth: _propTypes2.default.oneOfType([// minimum width for input element
		_propTypes2.default.number, _propTypes2.default.string]),
		onAutosize: _propTypes2.default.func, // onAutosize handler: function(newWidth) {}
		onChange: _propTypes2.default.func, // onChange handler: function(event) {}
		placeholder: _propTypes2.default.string, // placeholder text
		placeholderIsMinWidth: _propTypes2.default.bool, // don't collapse size to less than the placeholder
		style: _propTypes2.default.object, // css styles for the outer element
		value: _propTypes2.default.any // field value
	};
	AutosizeInput.defaultProps = {
		minWidth: 1,
		injectStyles: true
	};

	var _default = AutosizeInput$1.default = AutosizeInput;

	// TEST READY

	function SubjectRow(props) {
	  const marksInput = react.exports.useRef(null);
	  const [marks, setMarks] = react.exports.useState(props.marks);
	  react.exports.useEffect(() => {
	    setMarks(props.marks);
	  }, [props.marks]);
	  const title = props.subject.title;
	  const style = {
	    backgroundColor: props.subject.color
	  };
	  let sum = 0;
	  let length = 0;
	  let average = null;

	  if (marks) {
	    const marks_list = marks.split(",");
	    marks_list.map(mark => {
	      let int = parseInt(mark);
	      if (!int) return;
	      sum += int;
	      length++;
	    });
	    average = sum / length;

	    if (!isNaN(average) && average <= 10) {
	      average = Number(average.toFixed(1));
	    } else {
	      average = null;
	    }
	  }

	  function createPattern() {
	    marksInput.current.focus();

	    if (marks.trim().slice(-1) != "," && marks != "") {
	      setMarks(marks + ", ");
	    }
	  }

	  function handleSubmit(event) {
	    ah(database.marks, {
	      [props.subject.id]: marks
	    }, {
	      merge: true
	    });
	    marksInput.current.blur();
	    event.preventDefault();
	  }

	  return /*#__PURE__*/React.createElement("div", {
	    className: "SubjectRow"
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "subj",
	    style: style
	  }, title), /*#__PURE__*/React.createElement("div", {
	    className: "homework fr"
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "scroll-wraper"
	  }, /*#__PURE__*/React.createElement(_default, {
	    type: "text",
	    inputMode: "decimal",
	    value: marks,
	    ref: marksInput,
	    onChange: e => setMarks(e.target.value),
	    onBlur: handleSubmit
	  }))), marks && average && /*#__PURE__*/React.createElement("div", {
	    className: "tool"
	  }, average), /*#__PURE__*/React.createElement("div", {
	    className: "tool",
	    onClick: createPattern
	  }, /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-plus"
	  })));
	}

	var SubjectRow$1 = /*#__PURE__*/react.exports.memo(SubjectRow);

	// TEST READY
	function Marks() {
	  const manifest = react.exports.useContext(manifestContext);
	  const [marks, setMarks] = react.exports.useState(null);
	  react.exports.useEffect(() => {
	    dh(database.marks, snapshot => {
	      if (snapshot.data()) {
	        setMarks(Object.fromEntries(Object.entries(snapshot.data()).sort()));
	      }
	    });
	  }, []);
	  const rows = [];

	  if (marks) {
	    for (let subjID in manifest) {
	      const subject = manifest[subjID];
	      subject.id = subjID;
	      rows.push( /*#__PURE__*/React.createElement(SubjectRow$1, {
	        key: subjID,
	        subject: subject,
	        marks: marks[subjID]
	      }));
	    }
	  }

	  return /*#__PURE__*/React.createElement("div", {
	    className: "UIBlock"
	  }, /*#__PURE__*/React.createElement("h1", null, "\u041E\u0446\u0435\u043D\u043A\u0438"), /*#__PURE__*/React.createElement("div", {
	    className: "content"
	  }, rows));
	}

	class UI$1 {
	  static alert(text) {
	    let alert = document.querySelector(".alert");
	    alert.textContent = text;
	    alert.style = "display: block; animation: alert 0.45s cubic-bezier(.5,.1,.3,1); animation-fill-mode: forwards;";

	    if (window.active_timeout) {
	      clearTimeout(window.active_timeout);
	    }

	    window.active_timeout = setTimeout(() => {
	      alert.style = "display: block; animation: alert-down 0.4s cubic-bezier(.5,.1,.3,1); animation-fill-mode: forwards;";
	      alert.addEventListener("animationend", () => {
	        alert.style = "";
	      }, {
	        once: true
	      });
	      window.active_timeout = undefined;
	    }, 1400);
	  }

	  static open(target) {
	    target.style = "display: block; animation: slide-left 0.6s cubic-bezier(.5,.1,.3,1); animation-fill-mode: forwards;";
	  }

	  static slide(target) {
	    target.classList.toggle("active");
	  }

	  static getInput(callback, param) {
	    const searchWraper = document.querySelector("#rebot .search");
	    const inputRebot = searchWraper.querySelector("input.rebot");
	    const inputGoogle = searchWraper.querySelector("input.google");
	    const iconGoogle = searchWraper.querySelector("img.google");
	    const iconRebot = searchWraper.querySelector("img.rebot");
	    inputRebot.classList.add("active");
	    inputGoogle.classList.remove("active");
	    inputRebot.focus();
	    iconGoogle.classList.remove("active");
	    iconRebot.classList.add("active");
	    inputRebot.addEventListener("keydown", function handle(event) {
	      if (event.key == "Enter") {
	        const nums = inputRebot.value.replace(" ", "").split(',');
	        callback(param, nums);
	        inputRebot.value = "";
	        inputRebot.blur();
	        inputRebot.removeEventListener("keydown", handle);
	      }
	    });
	    inputRebot.addEventListener("blur", function onBlur() {
	      const nums = inputRebot.value.replace(" ", "").split(',');

	      if (inputRebot.value) {
	        callback(param, nums);
	        inputRebot.value = "";
	      } else {
	        inputRebot.value = "";
	      }

	      inputRebot.classList.remove("active");
	      inputGoogle.classList.add("active");
	      iconRebot.classList.remove("active");
	      iconGoogle.classList.add("active");
	      inputRebot.removeEventListener("blur", onBlur);
	    }, {
	      once: true
	    });
	  }

	}

	class LockScreen {
	  constructor() {
	    this.lockscreen = document.querySelector("#lockscreen");
	    this.indicator = this.lockscreen.querySelector("#indicator");
	    this.lockscreen.querySelectorAll("#numpad button").forEach(btn => {
	      btn.addEventListener("click", this.addCodeNum);
	    });
	  }

	  addCodeNum(event) {
	    event.target.classList.add("clicked");
	    event.target.addEventListener("transitionend", event => {
	      event.target.classList.remove("clicked");
	    }, {
	      once: true
	    });
	    const lockscreen = document.querySelector("#lockscreen");
	    const indicator = lockscreen.querySelector("#indicator");
	    const unactiveDots = indicator.querySelectorAll(".char:not(.active)");
	    const invalidAlert = lockscreen.querySelector("#invalid-alert");
	    const passwordOld = lockscreen.getAttribute("data-password");
	    const password = passwordOld + event.target.textContent;
	    lockscreen.setAttribute("data-password", password);
	    unactiveDots[0].classList.add("active");

	    if (unactiveDots.length == 1) {
	      if (localStorage.lockCode == password) {
	        lockscreen.classList.add("unactive");
	        lockscreen.addEventListener("transitionend", e => {
	          e.target.style.display = "none";
	        }, {
	          once: true
	        });
	      } else {
	        invalidAlert.classList.add("active");
	        lockscreen.setAttribute("data-password", "");
	        indicator.querySelectorAll(".char").forEach(char => {
	          char.classList.remove("active");
	        });
	      }
	    }
	  }

	  changeLockCode(form) {
	    const oldCodeInput = form.querySelector("input#oldCode");
	    const newCodeInput = form.querySelector("input#newCode");
	    const oldCode = localStorage.lockCode;

	    if (oldCode) {
	      if (oldCodeInput.value != oldCode) {
	        UI$1.alert("Неверный код");
	        oldCodeInput.value = "";
	        return;
	      }
	    }

	    const newCode = newCodeInput.value.replace(/\D/g, '');

	    if (newCode.length == 4) {
	      localStorage.lockCode = newCode;
	      UI$1.alert("Код установлен");
	      UI$1.slide(window.securitySettings);
	      oldCodeInput.value = "";
	      newCodeInput.value = "";
	    } else if (newCode.length == 0) {
	      localStorage.lockCode = "";
	      UI$1.alert("Код отключен");
	      UI$1.slide(window.securitySettings);
	      oldCodeInput.value = "";
	      newCodeInput.value = "";
	    } else {
	      UI$1.alert("Код должен состоять из 4 цифр");
	    }
	  }

	}

	var LockScreen$1 = new LockScreen();

	/*!
	 * swiped-events.js - v@version@
	 * Pure JavaScript swipe events
	 * https://github.com/john-doherty/swiped-events
	 * @inspiration https://stackoverflow.com/questions/16348031/disable-scrolling-when-touch-moving-certain-element
	 * @author John Doherty <www.johndoherty.info>
	 * @license MIT
	 */
	(function (window, document) {

	    // patch CustomEvent to allow constructor creation (IE/Chrome)
	    if (typeof window.CustomEvent !== 'function') {

	        window.CustomEvent = function (event, params) {

	            params = params || { bubbles: false, cancelable: false, detail: undefined };

	            var evt = document.createEvent('CustomEvent');
	            evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
	            return evt;
	        };

	        window.CustomEvent.prototype = window.Event.prototype;
	    }

	    document.addEventListener('touchstart', handleTouchStart, false);
	    document.addEventListener('touchmove', handleTouchMove, false);
	    document.addEventListener('touchend', handleTouchEnd, false);

	    var xDown = null;
	    var yDown = null;
	    var xDiff = null;
	    var yDiff = null;
	    var timeDown = null;
	    var startEl = null;

	    /**
	     * Fires swiped event if swipe detected on touchend
	     * @param {object} e - browser event object
	     * @returns {void}
	     */
	    function handleTouchEnd(e) {

	        // if the user released on a different target, cancel!
	        if (startEl !== e.target) return;

	        var swipeThreshold = parseInt(getNearestAttribute(startEl, 'data-swipe-threshold', '20'), 10); // default 20px
	        var swipeTimeout = parseInt(getNearestAttribute(startEl, 'data-swipe-timeout', '500'), 10);    // default 500ms
	        var timeDiff = Date.now() - timeDown;
	        var eventType = '';
	        var changedTouches = e.changedTouches || e.touches || [];

	        if (Math.abs(xDiff) > Math.abs(yDiff)) { // most significant
	            if (Math.abs(xDiff) > swipeThreshold && timeDiff < swipeTimeout) {
	                if (xDiff > 0) {
	                    eventType = 'swiped-left';
	                }
	                else {
	                    eventType = 'swiped-right';
	                }
	            }
	        }
	        else if (Math.abs(yDiff) > swipeThreshold && timeDiff < swipeTimeout) {
	            if (yDiff > 0) {
	                eventType = 'swiped-up';
	            }
	            else {
	                eventType = 'swiped-down';
	            }
	        }

	        if (eventType !== '') {

	            var eventData = {
	                dir: eventType.replace(/swiped-/, ''),
	                xStart: parseInt(xDown, 10),
	                xEnd: parseInt((changedTouches[0] || {}).clientX || -1, 10),
	                yStart: parseInt(yDown, 10),
	                yEnd: parseInt((changedTouches[0] || {}).clientY || -1, 10)
	            };

	            // fire `swiped` event event on the element that started the swipe
	            startEl.dispatchEvent(new CustomEvent('swiped', { bubbles: true, cancelable: true, detail: eventData }));

	            // fire `swiped-dir` event on the element that started the swipe
	            startEl.dispatchEvent(new CustomEvent(eventType, { bubbles: true, cancelable: true, detail: eventData }));
	        }

	        // reset values
	        xDown = null;
	        yDown = null;
	        timeDown = null;
	    }

	    /**
	     * Records current location on touchstart event
	     * @param {object} e - browser event object
	     * @returns {void}
	     */
	    function handleTouchStart(e) {

	        // if the element has data-swipe-ignore="true" we stop listening for swipe events
	        if (e.target.getAttribute('data-swipe-ignore') === 'true') return;

	        startEl = e.target;

	        timeDown = Date.now();
	        xDown = e.touches[0].clientX;
	        yDown = e.touches[0].clientY;
	        xDiff = 0;
	        yDiff = 0;
	    }

	    /**
	     * Records location diff in px on touchmove event
	     * @param {object} e - browser event object
	     * @returns {void}
	     */
	    function handleTouchMove(e) {

	        if (!xDown || !yDown) return;

	        var xUp = e.touches[0].clientX;
	        var yUp = e.touches[0].clientY;

	        xDiff = xDown - xUp;
	        yDiff = yDown - yUp;
	    }

	    /**
	     * Gets attribute off HTML element or nearest parent
	     * @param {object} el - HTML element to retrieve attribute from
	     * @param {string} attributeName - name of the attribute
	     * @param {any} defaultValue - default value to return if no match found
	     * @returns {any} attribute value or defaultValue
	     */
	    function getNearestAttribute(el, attributeName, defaultValue) {

	        // walk up the dom tree looking for data-action and data-trigger
	        while (el && el !== document.documentElement) {

	            var attributeValue = el.getAttribute(attributeName);

	            if (attributeValue) {
	                return attributeValue;
	            }

	            el = el.parentNode;
	        }

	        return defaultValue;
	    }

	}(window, document));

	class InstantView {
	  constructor(manifest) {
	    this.manifest = manifest;
	    this.window1 = document.querySelector("#inst1");
	    this.window2 = document.querySelector("#inst2");
	    this.window1.addEventListener('swiped-left', e => {
	      this.close(e.target.closest(".instant-view"));
	    });
	    this.window2.addEventListener('swiped-right', e => {
	      this.close(e.target.closest(".instant-view"));
	    });
	    this.window1.addEventListener('swiped-right', e => {
	      this.switch(e.target.closest(".instant-view"));
	    });
	    this.window2.addEventListener('swiped-left', e => {
	      this.switch(e.target.closest(".instant-view"));
	    });
	  }

	  open(toOpen, content) {
	    let win;

	    if (this.window1.classList.contains("active")) {
	      win = this.window2;
	      document.querySelectorAll(".app").forEach(el => {
	        el.classList.add("noscroll");
	      });
	      window.instRight = true;
	      window.instLeft = true;
	    } else {
	      if (window.orientation == 90 || window.screen.width >= 800) {
	        document.querySelector("body").classList.add("min-right");
	      } else {
	        document.querySelectorAll(".app").forEach(el => {
	          el.classList.add("noscroll");
	        });
	      }

	      win = this.window1;
	      window.instLeft = true;

	      if (this.window2.classList.contains("active")) {
	        window.instRight = true;
	      }
	    }

	    if (content) {
	      win.querySelector(".content").innerHTML = content;
	      win.classList.add("active");
	      return;
	    } else {
	      win.querySelector(".content").innerHTML = "";
	    }

	    const viewbox = win.querySelector(".content");

	    for (let el of toOpen) {
	      const subj = this.manifest[el.id];
	      const nums = el.hw.split(",");

	      for (let num of nums) {
	        num = num.replace(/\D/g, "");

	        if (subj.section == false) {
	          let img1 = document.createElement("img");
	          img1.src = subj.url.replace('?', num);

	          img1.onerror = ev => {
	            ev.target.remove();
	          };

	          img1.style.width = "100%";
	          viewbox.append(img1);

	          if (subj.full_img == false) {
	            let img2,
	                img3 = viewbox.querySelector("img").cloneNode(true);
	            img2.src = subj.url.replace('?', num + "_2");
	            img3.src = subj.url.replace('?', num + "_3");
	            viewbox.append(img2, img3);
	          }
	        } else {
	          let i = 1;
	          let img;

	          while (i < 11) {
	            img = document.createElement("img");
	            img.src = subj.url.replace('*', num).replace('?', i);
	            img.style.width = "100%";

	            img.onerror = ev => {
	              ev.target.remove();
	            };

	            viewbox.append(img);
	            i++;
	          }
	        }
	      }
	    }

	    win.classList.add("active");
	  }

	  switch(win) {
	    if (window.instLeft && window.instRight || window.orientation == 0 && window.screen.width <= 800) {
	      return;
	    }

	    let content = win.querySelector(".content").innerHTML;
	    this.open(null, content);
	    this.close(win);
	  }

	  close(win) {
	    win.classList.remove("active");
	    win.addEventListener("transitionend", () => {
	      if (!win.classList.contains("active")) {
	        let content = win.querySelector(".content");
	        content.innerHTML = "";
	        content.scrollTop = 0;
	      }
	    }, {
	      once: true
	    });

	    if (win.getAttribute("side") == "left") {
	      window.instLeft = false;
	    } else {
	      window.instRight = false;
	    }

	    let ActiveLeft = window.instLeft;
	    let ActiveRight = window.instRight;
	    let body = document.body.classList;

	    if (!(ActiveLeft || ActiveRight)) {
	      body.remove("min-left", "min-right");
	    } else if (ActiveRight && !ActiveLeft) {
	      body.remove("min-right");
	      body.add("min-left");
	    } else {
	      body.remove("min-left");
	      body.add("min-right");
	    }

	    document.querySelectorAll(".app").forEach(el => {
	      el.classList.remove("noscroll");
	    });
	  }

	}

	function PasswordSet(props) {
	  const oldCodeInput = react.exports.useRef(null);
	  const newCodeInput = react.exports.useRef(null);

	  function setPassword() {
	    const oldCode = localStorage.lockCode;

	    if (oldCode) {
	      if (oldCodeInput.current.value != oldCode) {
	        UI.alert("Неверный код");
	        oldCodeInput.current.value = "";
	        return;
	      }
	    }

	    const newCode = newCodeInput.current.value.replace(/\D/g, '');

	    if (newCode.length == 4) {
	      localStorage.lockCode = newCode;
	      UI.alert("Код установлен");
	      props.setPasswordSetOpen(false);
	    } else if (newCode.length == 0) {
	      localStorage.lockCode = "";
	      UI.alert("Код отключен");
	      props.setPasswordSetOpen(false);
	    } else {
	      UI.alert("Код должен состоять из 4 цифр");
	    }
	  }

	  return /*#__PURE__*/React.createElement("div", {
	    className: "windowBottom",
	    id: "passwordSet",
	    max: "false"
	  }, /*#__PURE__*/React.createElement("button", {
	    className: "close",
	    onClick: () => props.setPasswordSetOpen(false)
	  }, /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-chevron-down"
	  })), /*#__PURE__*/React.createElement("h1", {
	    className: "title",
	    align: "center"
	  }, "\u041A\u043E\u0434-\u043F\u0430\u0440\u043E\u043B\u044C"), /*#__PURE__*/React.createElement("div", {
	    className: "content"
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "code"
	  }, /*#__PURE__*/React.createElement("input", {
	    ref: oldCodeInput,
	    type: "numbers",
	    maxLength: "4",
	    id: "oldCode",
	    placeholder: "\u0421\u0442\u0430\u0440\u044B\u0439 \u043A\u043E\u0434"
	  }), /*#__PURE__*/React.createElement("input", {
	    ref: newCodeInput,
	    type: "numbers",
	    maxLength: "4",
	    placeholder: "\u041D\u043E\u0432\u044B\u0439 \u043A\u043E\u0434 (4 \u0446\u0438\u0444\u0440\u044B)",
	    id: "newCode"
	  }), /*#__PURE__*/React.createElement("span", {
	    className: "info"
	  }, "\u041E\u0441\u0442\u0430\u0432\u044C \u043F\u0443\u0441\u0442\u044B\u043C \u0447\u0442\u043E\u0431\u044B \u043E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C"), /*#__PURE__*/React.createElement("button", {
	    onClick: setPassword
	  }, "\u0423\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u043A\u043E\u0434"))));
	}

	function Settings(props) {
	  const [passwordSetOpen, setPasswordSetOpen] = react.exports.useState(false);
	  const settings = react.exports.useContext(settingsContext);

	  function handleChange(e) {
	    const state = e.target.checked;
	    const id = e.target.id;
	    props.changeSetting(id, state);
	  }

	  function setTheme(e) {
	    const theme = e.target.id;
	    props.changeSetting("theme", theme);
	  }

	  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
	    className: "windowReact",
	    id: "settings",
	    max: "false",
	    side: "right"
	  }, /*#__PURE__*/React.createElement("button", {
	    className: "close",
	    onClick: () => props.setSettingsOpen(false)
	  }, /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-chevron-right"
	  })), /*#__PURE__*/React.createElement("h1", {
	    className: "title",
	    align: "center"
	  }, "\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438"), /*#__PURE__*/React.createElement("div", {
	    className: "content"
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "category"
	  }, "\u0422\u0435\u043C\u0430"), /*#__PURE__*/React.createElement("div", {
	    className: "theme block"
	  }, /*#__PURE__*/React.createElement("span", {
	    className: "circle",
	    id: "purple",
	    style: {
	      backgroundColor: "#360A6C"
	    },
	    onClick: setTheme
	  }), /*#__PURE__*/React.createElement("span", {
	    className: "circle",
	    id: "blue",
	    style: {
	      backgroundColor: "#0A1B3C"
	    },
	    onClick: setTheme
	  }), /*#__PURE__*/React.createElement("span", {
	    className: "circle",
	    id: "dark",
	    style: {
	      backgroundColor: "#0F0F0F"
	    },
	    onClick: setTheme
	  }), /*#__PURE__*/React.createElement("span", {
	    className: "circle",
	    id: "sepia",
	    style: {
	      backgroundColor: "#F0DCBB"
	    },
	    onClick: setTheme
	  }), /*#__PURE__*/React.createElement("span", {
	    className: "circle",
	    id: "light",
	    style: {
	      backgroundColor: "#F2F3F4"
	    },
	    onClick: setTheme
	  })), /*#__PURE__*/React.createElement("div", {
	    className: "category"
	  }, "\u0420\u0435\u0448\u0435\u0431\u043D\u0438\u043A\u0438"), /*#__PURE__*/React.createElement("div", {
	    className: "switch block"
	  }, /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-moon"
	  }), /*#__PURE__*/React.createElement("div", {
	    className: "label-block"
	  }, /*#__PURE__*/React.createElement("a", {
	    className: "title"
	  }, "\u0417\u0430\u0442\u0435\u043C\u043D\u044F\u0442\u044C \u0440\u0435\u0448\u0435\u043D\u0438\u044F"), /*#__PURE__*/React.createElement("a", {
	    className: "descr"
	  }, "\u0421\u0432\u0435\u0442\u043B\u044B\u0439 \u0442\u0435\u043A\u0441\u0442 \u043D\u0430 \u0442\u0435\u043C\u043D\u043E\u043C \u0444\u043E\u043D\u0435")), /*#__PURE__*/React.createElement("label", {
	    className: "ios7-switch"
	  }, /*#__PURE__*/React.createElement("input", {
	    type: "checkbox",
	    id: "inversion",
	    checked: settings.inversion,
	    onChange: handleChange
	  }), /*#__PURE__*/React.createElement("span", null))), /*#__PURE__*/React.createElement("div", {
	    className: "switch block"
	  }, /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-eye-slash"
	  }), /*#__PURE__*/React.createElement("div", {
	    className: "label-block"
	  }, /*#__PURE__*/React.createElement("a", {
	    className: "title"
	  }, "\u0421\u043A\u0440\u044B\u0442\u044C \u0440\u0435\u0448\u0435\u0431\u043D\u0438\u043A\u0438"), /*#__PURE__*/React.createElement("a", {
	    className: "descr"
	  }, "\u0412\u0435\u0437\u0434\u0435, \u043D\u0430 \u0432\u0441\u0435\u0445 \u0443\u0441\u0442\u0440\u043E\u0439\u0441\u0442\u0432\u0430\u0445")), /*#__PURE__*/React.createElement("label", {
	    className: "ios7-switch"
	  }, /*#__PURE__*/React.createElement("input", {
	    type: "checkbox",
	    id: "stealth",
	    checked: settings.stealth,
	    onChange: handleChange
	  }), /*#__PURE__*/React.createElement("span", null))), /*#__PURE__*/React.createElement("div", {
	    className: "switch block"
	  }, /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-eye-slash"
	  }), /*#__PURE__*/React.createElement("div", {
	    className: "label-block"
	  }, /*#__PURE__*/React.createElement("a", {
	    className: "title"
	  }, "\u041F\u0440\u0435\u0434\u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044C \u0440\u0435\u0448\u0435\u043D\u0438\u044F"), /*#__PURE__*/React.createElement("a", {
	    className: "descr"
	  }, "\u0422\u0430\u043A \u043E\u043D\u0438 \u0431\u0443\u0434\u0443\u0442 \u0434\u043E\u0441\u0442\u0443\u043F\u043D\u044B \u0431\u0435\u0437 \u0438\u043D\u0442\u0435\u0440\u043D\u0435\u0442\u0430")), /*#__PURE__*/React.createElement("label", {
	    className: "ios7-switch"
	  }, /*#__PURE__*/React.createElement("input", {
	    type: "checkbox",
	    id: "stealth",
	    checked: settings.stealth,
	    onChange: handleChange
	  }), /*#__PURE__*/React.createElement("span", null))), /*#__PURE__*/React.createElement("div", {
	    className: "category"
	  }, "\u0411\u0435\u0437\u043E\u043F\u0430\u0441\u043D\u043E\u0441\u0442\u044C"), /*#__PURE__*/React.createElement("div", {
	    className: "switch block",
	    onClick: () => setPasswordSetOpen(true)
	  }, /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-eye-slash"
	  }), /*#__PURE__*/React.createElement("div", {
	    className: "label-block"
	  }, /*#__PURE__*/React.createElement("a", {
	    className: "title"
	  }, "\u041D\u0430\u0441\u0442\u0440\u043E\u0438\u0442\u044C \u043F\u0430\u0440\u043E\u043B\u044C"), /*#__PURE__*/React.createElement("a", {
	    className: "descr"
	  }, "\u041F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u043D\u043E \u043F\u0430\u0440\u043E\u043B\u0435\u043C")), /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-chevron-right"
	  })), /*#__PURE__*/React.createElement("div", {
	    className: "switch block"
	  }, /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-eye-slash"
	  }), /*#__PURE__*/React.createElement("div", {
	    className: "label-block"
	  }, /*#__PURE__*/React.createElement("a", {
	    className: "title"
	  }, "\u0410\u0432\u0442\u043E\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u043A\u0430"), /*#__PURE__*/React.createElement("a", {
	    className: "descr"
	  }, "\u0411\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 5 \u043C\u0438\u043D\u0443\u0442")), /*#__PURE__*/React.createElement("label", {
	    className: "ios7-switch"
	  }, /*#__PURE__*/React.createElement("input", {
	    type: "checkbox",
	    id: "stealth",
	    checked: settings.stealth,
	    onChange: handleChange
	  }), /*#__PURE__*/React.createElement("span", null))))), /*#__PURE__*/React.createElement(CSSTransition, {
	    in: passwordSetOpen,
	    timeout: {
	      enter: 500,
	      exit: 400
	    },
	    classNames: "windowBottom",
	    unmountOnExit: true
	  }, /*#__PURE__*/React.createElement(PasswordSet, {
	    setPasswordSetOpen: setPasswordSetOpen
	  })));
	}

	function App() {
	  const [manifest, setManifest] = react.exports.useState(null);
	  const [timetable, setTimetable] = react.exports.useState(null);
	  const [settings, setSettings] = react.exports.useState({
	    stealth: localStorage.stealth == "false" ? false : true
	  });
	  const [settingsOpen, setSettingsOpen] = react.exports.useState(false);
	  const main = react.exports.useRef(null);
	  const [activeTab, setActiveTab] = react.exports.useState(2);

	  function changeTab(tabId) {
	    setActiveTab(3);
	    const activeOld = document.querySelector(".app.active");
	    const activeNew = document.querySelector(".app#" + tabId);

	    if (activeOld) {
	      if (activeOld.id == activeNew.id) return;
	      activeOld.classList.remove("active");
	    }

	    activeNew.classList.add("active");
	    const oldBtn = document.querySelector(".bottom-nav span.active");

	    if (oldBtn) {
	      oldBtn.classList.remove("active");
	    }

	    document.querySelector(".bottom-nav #" + tabId).classList.add("active");
	    document.getElementById("root").scrollTop = 0;
	  }

	  react.exports.useEffect(() => {
	    if (manifest) {
	      //window.ReBot = new ReshebaManager(manifest);
	      window.InstantView = new InstantView(manifest);
	    }
	  }, [manifest]);
	  react.exports.useEffect(() => {
	    dh(database.timetable, doc => setTimetable(doc.data()));
	    dh(database.settings, doc => {
	      const settingsData = doc.data();
	      setSettings(settingsData);
	      const root = document.documentElement;
	      root.setAttribute("theme", settingsData.theme);
	      localStorage.setItem("theme", settingsData.theme);
	      localStorage.setItem("stealth", settingsData.stealth);

	      if (settingsData.inversion) {
	        root.style.setProperty('--inv', 0.87);
	      } else {
	        root.style.setProperty('--inv', 0);
	      }

	      if (settingsData.stealth && !document.querySelector(".app.active")) {
	        changeTab("homescreen");
	      }
	    });
	    fetchAndActivate(remoteConfig).then(() => {
	      const manifestJSON = getValue(remoteConfig, "subjectsManifest").asString();
	      const manifestObj = JSON.parse(manifestJSON);
	      setManifest(manifestObj);
	    });
	  }, []);

	  function changeSetting(key, value) {
	    settings[key] = value;
	    ah(database.settings, settings, {
	      merge: true
	    });
	  }

	  function windowOpened() {
	    globalThis.blurListener = e => {
	      e.stopPropagation();
	      setSettingsOpen(false);
	    };

	    main.current.addEventListener("click", globalThis.blurListener, {
	      once: true
	    });
	    main.current.classList.add("unfocused");
	  }

	  function windowClosed() {
	    main.current.classList.remove("unfocused");
	    main.current.removeEventListener("click", globalThis.blurListener);
	  }

	  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(settingsContext.Provider, {
	    value: settings
	  }, /*#__PURE__*/React.createElement("div", {
	    ref: main,
	    className: "main"
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "bottom-nav"
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "nav-content"
	  }, !settings.stealth && /*#__PURE__*/React.createElement("span", {
	    id: "rebot",
	    onClick: () => changeTab("rebot")
	  }, /*#__PURE__*/React.createElement("i", {
	    className: "fas fa-book"
	  })), /*#__PURE__*/React.createElement("span", {
	    id: "homescreen",
	    className: "active",
	    onClick: () => changeTab("homescreen")
	  }, /*#__PURE__*/React.createElement("svg", {
	    height: "22",
	    width: "22",
	    viewBox: "0 0 512 512",
	    fill: "var(--text)"
	  }, /*#__PURE__*/React.createElement("path", {
	    d: "m498.195312 222.695312c-.011718-.011718-.023437-.023437-.035156-.035156l-208.855468-208.847656c-8.902344-8.90625-20.738282-13.8125-33.328126-13.8125-12.589843 0-24.425781 4.902344-33.332031 13.808594l-208.746093 208.742187c-.070313.070313-.140626.144531-.210938.214844-18.28125 18.386719-18.25 48.21875.089844 66.558594 8.378906 8.382812 19.445312 13.238281 31.277344 13.746093.480468.046876.964843.070313 1.453124.070313h8.324219v153.699219c0 30.414062 24.746094 55.160156 55.167969 55.160156h81.710938c8.28125 0 15-6.714844 15-15v-120.5c0-13.878906 11.289062-25.167969 25.167968-25.167969h48.195313c13.878906 0 25.167969 11.289063 25.167969 25.167969v120.5c0 8.285156 6.714843 15 15 15h81.710937c30.421875 0 55.167969-24.746094 55.167969-55.160156v-153.699219h7.71875c12.585937 0 24.421875-4.902344 33.332031-13.808594 18.359375-18.371093 18.367187-48.253906.023437-66.636719zm0 0"
	  }))), /*#__PURE__*/React.createElement("span", {
	    id: "marks",
	    onClick: () => changeTab("marks")
	  }, /*#__PURE__*/React.createElement("svg", {
	    width: "34",
	    height: "34",
	    viewBox: "0 0 28 28",
	    fill: "var(--text)"
	  }, /*#__PURE__*/React.createElement("path", {
	    d: "M25.0039 9.51465L16.417 5.58594C15.4941 5.16406 14.7383 4.9707 14 4.98828C13.2617 4.9707 12.5059 5.16406 11.583 5.58594L2.99609 9.51465C2.38086 9.78711 2.06445 10.2969 2.06445 10.8154C2.06445 11.3428 2.38086 11.8438 2.99609 12.1162L6.39746 13.6543L12.1016 10.9912C12.0664 10.9297 12.0488 10.877 12.0488 10.8154C12.0488 10.1738 13.0244 9.7168 14.0264 9.7168C15.0371 9.7168 16.0039 10.1738 16.0039 10.8154C16.0039 11.4746 15.0371 11.9404 14.0264 11.9404C13.7188 11.9404 13.4023 11.8965 13.1211 11.8086L7.76855 14.3047L11.583 16.0537C12.5059 16.4756 13.2617 16.6602 14 16.6514C14.7383 16.6602 15.4941 16.4756 16.417 16.0537L25.0039 12.1162C25.6191 11.835 25.9355 11.3428 25.9355 10.8154C25.9355 10.2969 25.6191 9.78711 25.0039 9.51465ZM7.7334 15.7109V20.8525C9.2627 21.7666 11.4336 22.3203 14 22.3203C19.1592 22.3203 22.7012 20.0967 22.7012 17.3545V14.5859L16.9531 17.2227C15.8896 17.7061 14.9229 17.9521 14 17.9434C13.0859 17.9521 12.1104 17.7061 11.0469 17.2227L7.7334 15.7109ZM5.29883 14.5947V17.3545C5.29883 18.1191 5.70312 19.0244 6.43262 19.7979V15.1133L5.29883 14.5947ZM5.65918 22.9355V25.2119C5.65918 25.959 6.15137 26.4512 6.89844 26.4512H7.26758C8.01465 26.4512 8.49805 25.959 8.49805 25.2119V22.9355C8.49805 22.3555 8.20801 21.9336 7.7334 21.7666V20.8525C7.22363 20.5449 6.78418 20.1934 6.43262 19.7979V21.7666C5.95801 21.9248 5.65918 22.3555 5.65918 22.9355Z"
	  }))), /*#__PURE__*/React.createElement("span", {
	    id: "week",
	    onClick: () => changeTab("week")
	  }, /*#__PURE__*/React.createElement("svg", {
	    width: "36",
	    height: "36",
	    fill: "var(--text)",
	    viewBox: "0 0 28 28"
	  }, /*#__PURE__*/React.createElement("path", {
	    d: "M7.94434 21.8809H20.0469C21.9541 21.8809 22.9473 20.8965 22.9473 19.0156V8.31934C22.9473 6.43848 21.9541 5.4541 20.0469 5.4541H7.94434C6.0459 5.4541 5.05273 6.42969 5.05273 8.31934V19.0156C5.05273 20.8965 6.0459 21.8809 7.94434 21.8809ZM7.93555 20.1318C7.20605 20.1318 6.80176 19.7539 6.80176 18.9805V10.8945C6.80176 10.1211 7.20605 9.74316 7.93555 9.74316H20.0557C20.7852 9.74316 21.1895 10.1211 21.1895 10.8945V18.9805C21.1895 19.7539 20.7852 20.1318 20.0557 20.1318H7.93555ZM12.3037 12.7754H12.8223C13.1387 12.7754 13.2441 12.6787 13.2441 12.3711V11.8525C13.2441 11.5361 13.1387 11.4395 12.8223 11.4395H12.3037C11.9873 11.4395 11.8818 11.5361 11.8818 11.8525V12.3711C11.8818 12.6787 11.9873 12.7754 12.3037 12.7754ZM15.1777 12.7754H15.6963C16.0039 12.7754 16.1094 12.6787 16.1094 12.3711V11.8525C16.1094 11.5361 16.0039 11.4395 15.6963 11.4395H15.1777C14.8613 11.4395 14.7559 11.5361 14.7559 11.8525V12.3711C14.7559 12.6787 14.8613 12.7754 15.1777 12.7754ZM18.043 12.7754H18.5615C18.8779 12.7754 18.9834 12.6787 18.9834 12.3711V11.8525C18.9834 11.5361 18.8779 11.4395 18.5615 11.4395H18.043C17.7354 11.4395 17.6299 11.5361 17.6299 11.8525V12.3711C17.6299 12.6787 17.7354 12.7754 18.043 12.7754ZM9.43848 15.6055H9.94824C10.2646 15.6055 10.3701 15.5088 10.3701 15.1924V14.6738C10.3701 14.3662 10.2646 14.2695 9.94824 14.2695H9.43848C9.12207 14.2695 9.0166 14.3662 9.0166 14.6738V15.1924C9.0166 15.5088 9.12207 15.6055 9.43848 15.6055ZM12.3037 15.6055H12.8223C13.1387 15.6055 13.2441 15.5088 13.2441 15.1924V14.6738C13.2441 14.3662 13.1387 14.2695 12.8223 14.2695H12.3037C11.9873 14.2695 11.8818 14.3662 11.8818 14.6738V15.1924C11.8818 15.5088 11.9873 15.6055 12.3037 15.6055ZM15.1777 15.6055H15.6963C16.0039 15.6055 16.1094 15.5088 16.1094 15.1924V14.6738C16.1094 14.3662 16.0039 14.2695 15.6963 14.2695H15.1777C14.8613 14.2695 14.7559 14.3662 14.7559 14.6738V15.1924C14.7559 15.5088 14.8613 15.6055 15.1777 15.6055ZM18.043 15.6055H18.5615C18.8779 15.6055 18.9834 15.5088 18.9834 15.1924V14.6738C18.9834 14.3662 18.8779 14.2695 18.5615 14.2695H18.043C17.7354 14.2695 17.6299 14.3662 17.6299 14.6738V15.1924C17.6299 15.5088 17.7354 15.6055 18.043 15.6055ZM9.43848 18.4268H9.94824C10.2646 18.4268 10.3701 18.3301 10.3701 18.0225V17.5039C10.3701 17.1875 10.2646 17.0908 9.94824 17.0908H9.43848C9.12207 17.0908 9.0166 17.1875 9.0166 17.5039V18.0225C9.0166 18.3301 9.12207 18.4268 9.43848 18.4268ZM12.3037 18.4268H12.8223C13.1387 18.4268 13.2441 18.3301 13.2441 18.0225V17.5039C13.2441 17.1875 13.1387 17.0908 12.8223 17.0908H12.3037C11.9873 17.0908 11.8818 17.1875 11.8818 17.5039V18.0225C11.8818 18.3301 11.9873 18.4268 12.3037 18.4268ZM15.1777 18.4268H15.6963C16.0039 18.4268 16.1094 18.3301 16.1094 18.0225V17.5039C16.1094 17.1875 16.0039 17.0908 15.6963 17.0908H15.1777C14.8613 17.0908 14.7559 17.1875 14.7559 17.5039V18.0225C14.7559 18.3301 14.8613 18.4268 15.1777 18.4268Z"
	  }))))), /*#__PURE__*/React.createElement(manifestContext.Provider, {
	    value: manifest
	  }, /*#__PURE__*/React.createElement(timetableContext.Provider, {
	    value: timetable
	  }, /*#__PURE__*/React.createElement("div", {
	    className: "app center-auto active",
	    id: "homescreen"
	  }, /*#__PURE__*/React.createElement(HomeScreen, null)), /*#__PURE__*/React.createElement("div", {
	    className: "app center-auto",
	    id: "week"
	  }, /*#__PURE__*/React.createElement(Week, {
	    setSettingsOpen: setSettingsOpen
	  })), /*#__PURE__*/React.createElement("div", {
	    className: "app center-auto mw700",
	    id: "marks"
	  }, /*#__PURE__*/React.createElement(Marks, null)))), !settings.stealth && /*#__PURE__*/React.createElement("div", {
	    className: "app center mw600 stealth",
	    id: "rebot"
	  }, /*#__PURE__*/React.createElement(Resheba, {
	    setSettingsOpen: setSettingsOpen
	  }))), /*#__PURE__*/React.createElement(CSSTransition, {
	    in: settingsOpen,
	    onEnter: windowOpened,
	    onExit: windowClosed,
	    timeout: 600,
	    classNames: "windowReact",
	    unmountOnExit: true
	  }, /*#__PURE__*/React.createElement(Settings, {
	    changeSetting: changeSetting,
	    setSettingsOpen: setSettingsOpen
	  }))));
	}

	ReactDOM.render( /*#__PURE__*/React.createElement(App, null), document.getElementById('root'));
	window.ios = /iPad|iPhone|iPod/.test(navigator.platform) || navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1;
	/*
	navigator.serviceWorker.register('/sw.js').then((registration) => {
	    console.log('ServiceWorker registration successful');
	}, (e) => {
	    console.log('ServiceWorker registration failed: ', e);
	});
	*/


	window.UI = UI$1;
	window.Security = LockScreen$1;

}());
//# sourceMappingURL=bundle.js.map
